id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/394:340,deployability,build,build,340,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:465,deployability,build,build,465,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:507,deployability,BUILD,BUILDTYPE,507,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:549,deployability,build,build,549,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:613,deployability,build,build,613,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:655,deployability,BUILD,BUILDTYPE,655,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:697,deployability,build,build,697,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:737,deployability,build,build,737,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:779,deployability,BUILD,BUILDTYPE,779,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:821,deployability,build,build,821,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:955,deployability,fail,failures,955,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1582,deployability,build,build,1582,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1662,deployability,build,build,1662,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:236,interoperability,share,shared,236,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1369,interoperability,share,shared,1369,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:20,performance,failur,failures,20,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:872,performance,error,error,872,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:955,performance,failur,failures,955,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1713,performance,error,error,1713,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:20,reliability,fail,failures,20,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:46,reliability,fail,failing,46,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:955,reliability,fail,failures,955,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1283,reliability,doe,does,1283,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:15,safety,test,test,15,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:40,safety,test,tests,40,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:170,safety,test,test,170,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:175,safety,test,testGenVector,175,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:872,safety,error,error,872,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:978,safety,test,tests,978,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1504,safety,test,test,1504,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1509,safety,test,testGenVectorVc,1509,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1713,safety,error,error,1713,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:15,testability,test,test,15,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:40,testability,test,tests,40,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:170,testability,test,test,170,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:175,testability,test,testGenVector,175,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:978,testability,test,tests,978,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1504,testability,test,test,1504,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1509,testability,test,testGenVectorVc,1509,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:872,usability,error,error,872,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1471,usability,User,Users,1471,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1556,usability,User,Users,1556,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1636,usability,User,Users,1636,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1713,usability,error,error,1713,"OK, so all the test failures seem to be tests failing to find math functions like sqrt(). ```. pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/root/math/genvector/test/testGenVector.cxx+... Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/roottest/root/math/genvector/testGenVector_cxx.so. In file included from input_line_11:21:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/etc/dictpch/allHeaders.h:680:. In file included from /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/Vector3D.h:11:. /mnt/build/jenkins/workspace/root-pullrequests/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/Math/GenVector/Cartesian3D.h:121:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ```. All the failures seem to be in tests where the interpreter is being used to compile, so it looks like in this case the match functions are not being found via the 'using namespace' syntax. It works fine with clang, and also when compiled natively. Note, to answer a previous question, just sticking with the likes of `std::sqrt` indeed does not work with Vc types. Trying going back to this I get. ```. [100%] Linking CXX shared library libTrackMathCoreDict.so. [100%] Built target TrackMathCoreDict. In file included from /Users/chris/Projects/ROOT/source/test/testGenVectorVc.cxx:3:. In file included from /Users/chris/Projects/ROOT/build/include/Math/GenVector/PositionVector3D.h:22:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:119:13: error: no matching function for call to 'sqrt'. return std::sqrt(Mag2());. ^~~~~~~~~. ```. So something needs to be changed, and my `using namespace` trick really should work. Any ideas why the interpreter seems unhappy with this, with gcc ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:636,availability,error,error,636,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:160,deployability,build,build,160,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:438,deployability,build,build,438,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:524,deployability,build,build,524,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:585,deployability,build,build,585,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1331,deployability,patch,patch,1331,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:191,interoperability,share,shared,191,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:277,interoperability,share,shared,277,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:749,modifiability,Scal,Scalar,749,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:636,performance,error,error,636,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:636,safety,error,error,636,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:896,safety,valid,valid,896,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1331,safety,patch,patch,1331,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1331,security,patch,patch,1331,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1187,testability,understand,understanding,1187,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:636,usability,error,error,636,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1217,usability,help,help,1217,"I have been able to finally reproduce this, and it still looks to me like an issue with the interpreter when built with gcc. I get. ```. CernVM ~/Projects/ROOT/build > bin/root -b -q -l /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C. Processing /mnt/shared/chris/Projects/ROOT/source/tutorials/math/mathcoreGenVector.C... In file included from input_line_11:21:. In file included from /home/chris/Projects/ROOT/build/etc/dictpch/allHeaders.h:1170:. In file included from /home/chris/Projects/ROOT/build/include/Math/Vector3D.h:11:. /home/chris/Projects/ROOT/build/include/Math/GenVector/Cartesian3D.h:125:14: error: no matching function for call to 'sqrt'. return sqrt(Mag2());. ^~~~. ```. The problematic method is. ```. Scalar R() const. {. using namespace std;. return sqrt(Mag2());. }. ```. There is nothing wrong with the above, its as far as I am aware perfectly valid code. `<cmath>` is being included via Math/Math.h (I've ensured this by manually adding it to the header as well). . It seems like when run through the interpreter, the header `<cmath>` is not being included for some reason, or something similar to this. I am afraid this is beyond my understanding of ROOT, I need help here from a expert on cling. From my side, I do not think there is anything wrong per se with the code in my patch... Could something be going wrong with the pre-compiled headers, which do not think the functions from <cmath> need to be included in this case ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:5,reliability,doe,doesn,5,ROOT doesn't like when the header files are not standalone. Could you add `#include <cmath>` in Cartesian3D.h?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:22,reliability,doe,does,22,"I tried just that, it does not help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:31,usability,help,help,31,"I tried just that, it does not help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:70,deployability,patch,patch,70,"@karies I know `<cmath>` brings in `std::` but the entire point of my patch is to avoid writing explicitly `std::sqrt` as this does not work with Vc types. The pattern. ```. using namespace std;. sqrt(x). ```. shoud work around this, but appears to fail in some way with cling (and only when built with gcc).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:249,deployability,fail,fail,249,"@karies I know `<cmath>` brings in `std::` but the entire point of my patch is to avoid writing explicitly `std::sqrt` as this does not work with Vc types. The pattern. ```. using namespace std;. sqrt(x). ```. shoud work around this, but appears to fail in some way with cling (and only when built with gcc).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:127,reliability,doe,does,127,"@karies I know `<cmath>` brings in `std::` but the entire point of my patch is to avoid writing explicitly `std::sqrt` as this does not work with Vc types. The pattern. ```. using namespace std;. sqrt(x). ```. shoud work around this, but appears to fail in some way with cling (and only when built with gcc).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:249,reliability,fail,fail,249,"@karies I know `<cmath>` brings in `std::` but the entire point of my patch is to avoid writing explicitly `std::sqrt` as this does not work with Vc types. The pattern. ```. using namespace std;. sqrt(x). ```. shoud work around this, but appears to fail in some way with cling (and only when built with gcc).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:70,safety,patch,patch,70,"@karies I know `<cmath>` brings in `std::` but the entire point of my patch is to avoid writing explicitly `std::sqrt` as this does not work with Vc types. The pattern. ```. using namespace std;. sqrt(x). ```. shoud work around this, but appears to fail in some way with cling (and only when built with gcc).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:82,safety,avoid,avoid,82,"@karies I know `<cmath>` brings in `std::` but the entire point of my patch is to avoid writing explicitly `std::sqrt` as this does not work with Vc types. The pattern. ```. using namespace std;. sqrt(x). ```. shoud work around this, but appears to fail in some way with cling (and only when built with gcc).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:70,security,patch,patch,70,"@karies I know `<cmath>` brings in `std::` but the entire point of my patch is to avoid writing explicitly `std::sqrt` as this does not work with Vc types. The pattern. ```. using namespace std;. sqrt(x). ```. shoud work around this, but appears to fail in some way with cling (and only when built with gcc).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:146,deployability,fail,fails,146,@vgvassilev Adding `#include <cmath>` to every header I have used the `using namespace std` pattern in makes no difference. The interpreter still fails.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:146,reliability,fail,fails,146,@vgvassilev Adding `#include <cmath>` to every header I have used the `using namespace std` pattern in makes no difference. The interpreter still fails.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:138,availability,failur,failure,138,Does it fail the same way? Could you push that change because in any way it should be in. Then I can retrigger a build and see what's the failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:8,deployability,fail,fail,8,Does it fail the same way? Could you push that change because in any way it should be in. Then I can retrigger a build and see what's the failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:113,deployability,build,build,113,Does it fail the same way? Could you push that change because in any way it should be in. Then I can retrigger a build and see what's the failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:138,deployability,fail,failure,138,Does it fail the same way? Could you push that change because in any way it should be in. Then I can retrigger a build and see what's the failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:138,performance,failur,failure,138,Does it fail the same way? Could you push that change because in any way it should be in. Then I can retrigger a build and see what's the failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:0,reliability,Doe,Does,0,Does it fail the same way? Could you push that change because in any way it should be in. Then I can retrigger a build and see what's the failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:8,reliability,fail,fail,8,Does it fail the same way? Could you push that change because in any way it should be in. Then I can retrigger a build and see what's the failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:138,reliability,fail,failure,138,Does it fail the same way? Could you push that change because in any way it should be in. Then I can retrigger a build and see what's the failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:4,availability,failur,failure,4,"The failure is the same. I will push the change. ( I confess I fail to see why it should make a difference, given `Math/Math.h` includes `<cmath>`, but I will push it nevertheless. )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:4,deployability,fail,failure,4,"The failure is the same. I will push the change. ( I confess I fail to see why it should make a difference, given `Math/Math.h` includes `<cmath>`, but I will push it nevertheless. )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:63,deployability,fail,fail,63,"The failure is the same. I will push the change. ( I confess I fail to see why it should make a difference, given `Math/Math.h` includes `<cmath>`, but I will push it nevertheless. )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:4,performance,failur,failure,4,"The failure is the same. I will push the change. ( I confess I fail to see why it should make a difference, given `Math/Math.h` includes `<cmath>`, but I will push it nevertheless. )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:4,reliability,fail,failure,4,"The failure is the same. I will push the change. ( I confess I fail to see why it should make a difference, given `Math/Math.h` includes `<cmath>`, but I will push it nevertheless. )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:63,reliability,fail,fail,63,"The failure is the same. I will push the change. ( I confess I fail to see why it should make a difference, given `Math/Math.h` includes `<cmath>`, but I will push it nevertheless. )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:30,deployability,observ,observation,30,"Playing around I have made an observation which is the order of the ROOT and Vc includes makes a difference w.r.t. whether or not `std::sqrt(x)` works with Vc types or not. Previously I was asked in the test application to list the includes first the ROOT ones, then Vc and finally STL. With this order `std::sqrt` does not work with Vc types when used in the GenVector classes. If though I invert the order, and place the Vc includes before the GenVector ones, then the std::sqrt (and I presume others, I have not tested yet though) work with Vc types. Does anyone know if this is intentional or not ? I have not found any documentation for Vc that says anything about its use of the `std::` name space that would explain this. Or perhaps its some feature of the ROOT includes ? I need to run some more tests to see if it really fixes all the issues with the gcc builds, but if so I guess its a possible workaround, although I confess I don't really like situations where the order of includes makes a difference. It shouldn't really matter, ideally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:864,deployability,build,builds,864,"Playing around I have made an observation which is the order of the ROOT and Vc includes makes a difference w.r.t. whether or not `std::sqrt(x)` works with Vc types or not. Previously I was asked in the test application to list the includes first the ROOT ones, then Vc and finally STL. With this order `std::sqrt` does not work with Vc types when used in the GenVector classes. If though I invert the order, and place the Vc includes before the GenVector ones, then the std::sqrt (and I presume others, I have not tested yet though) work with Vc types. Does anyone know if this is intentional or not ? I have not found any documentation for Vc that says anything about its use of the `std::` name space that would explain this. Or perhaps its some feature of the ROOT includes ? I need to run some more tests to see if it really fixes all the issues with the gcc builds, but if so I guess its a possible workaround, although I confess I don't really like situations where the order of includes makes a difference. It shouldn't really matter, ideally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:315,reliability,doe,does,315,"Playing around I have made an observation which is the order of the ROOT and Vc includes makes a difference w.r.t. whether or not `std::sqrt(x)` works with Vc types or not. Previously I was asked in the test application to list the includes first the ROOT ones, then Vc and finally STL. With this order `std::sqrt` does not work with Vc types when used in the GenVector classes. If though I invert the order, and place the Vc includes before the GenVector ones, then the std::sqrt (and I presume others, I have not tested yet though) work with Vc types. Does anyone know if this is intentional or not ? I have not found any documentation for Vc that says anything about its use of the `std::` name space that would explain this. Or perhaps its some feature of the ROOT includes ? I need to run some more tests to see if it really fixes all the issues with the gcc builds, but if so I guess its a possible workaround, although I confess I don't really like situations where the order of includes makes a difference. It shouldn't really matter, ideally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:554,reliability,Doe,Does,554,"Playing around I have made an observation which is the order of the ROOT and Vc includes makes a difference w.r.t. whether or not `std::sqrt(x)` works with Vc types or not. Previously I was asked in the test application to list the includes first the ROOT ones, then Vc and finally STL. With this order `std::sqrt` does not work with Vc types when used in the GenVector classes. If though I invert the order, and place the Vc includes before the GenVector ones, then the std::sqrt (and I presume others, I have not tested yet though) work with Vc types. Does anyone know if this is intentional or not ? I have not found any documentation for Vc that says anything about its use of the `std::` name space that would explain this. Or perhaps its some feature of the ROOT includes ? I need to run some more tests to see if it really fixes all the issues with the gcc builds, but if so I guess its a possible workaround, although I confess I don't really like situations where the order of includes makes a difference. It shouldn't really matter, ideally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:203,safety,test,test,203,"Playing around I have made an observation which is the order of the ROOT and Vc includes makes a difference w.r.t. whether or not `std::sqrt(x)` works with Vc types or not. Previously I was asked in the test application to list the includes first the ROOT ones, then Vc and finally STL. With this order `std::sqrt` does not work with Vc types when used in the GenVector classes. If though I invert the order, and place the Vc includes before the GenVector ones, then the std::sqrt (and I presume others, I have not tested yet though) work with Vc types. Does anyone know if this is intentional or not ? I have not found any documentation for Vc that says anything about its use of the `std::` name space that would explain this. Or perhaps its some feature of the ROOT includes ? I need to run some more tests to see if it really fixes all the issues with the gcc builds, but if so I guess its a possible workaround, although I confess I don't really like situations where the order of includes makes a difference. It shouldn't really matter, ideally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:515,safety,test,tested,515,"Playing around I have made an observation which is the order of the ROOT and Vc includes makes a difference w.r.t. whether or not `std::sqrt(x)` works with Vc types or not. Previously I was asked in the test application to list the includes first the ROOT ones, then Vc and finally STL. With this order `std::sqrt` does not work with Vc types when used in the GenVector classes. If though I invert the order, and place the Vc includes before the GenVector ones, then the std::sqrt (and I presume others, I have not tested yet though) work with Vc types. Does anyone know if this is intentional or not ? I have not found any documentation for Vc that says anything about its use of the `std::` name space that would explain this. Or perhaps its some feature of the ROOT includes ? I need to run some more tests to see if it really fixes all the issues with the gcc builds, but if so I guess its a possible workaround, although I confess I don't really like situations where the order of includes makes a difference. It shouldn't really matter, ideally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:804,safety,test,tests,804,"Playing around I have made an observation which is the order of the ROOT and Vc includes makes a difference w.r.t. whether or not `std::sqrt(x)` works with Vc types or not. Previously I was asked in the test application to list the includes first the ROOT ones, then Vc and finally STL. With this order `std::sqrt` does not work with Vc types when used in the GenVector classes. If though I invert the order, and place the Vc includes before the GenVector ones, then the std::sqrt (and I presume others, I have not tested yet though) work with Vc types. Does anyone know if this is intentional or not ? I have not found any documentation for Vc that says anything about its use of the `std::` name space that would explain this. Or perhaps its some feature of the ROOT includes ? I need to run some more tests to see if it really fixes all the issues with the gcc builds, but if so I guess its a possible workaround, although I confess I don't really like situations where the order of includes makes a difference. It shouldn't really matter, ideally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:30,testability,observ,observation,30,"Playing around I have made an observation which is the order of the ROOT and Vc includes makes a difference w.r.t. whether or not `std::sqrt(x)` works with Vc types or not. Previously I was asked in the test application to list the includes first the ROOT ones, then Vc and finally STL. With this order `std::sqrt` does not work with Vc types when used in the GenVector classes. If though I invert the order, and place the Vc includes before the GenVector ones, then the std::sqrt (and I presume others, I have not tested yet though) work with Vc types. Does anyone know if this is intentional or not ? I have not found any documentation for Vc that says anything about its use of the `std::` name space that would explain this. Or perhaps its some feature of the ROOT includes ? I need to run some more tests to see if it really fixes all the issues with the gcc builds, but if so I guess its a possible workaround, although I confess I don't really like situations where the order of includes makes a difference. It shouldn't really matter, ideally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:203,testability,test,test,203,"Playing around I have made an observation which is the order of the ROOT and Vc includes makes a difference w.r.t. whether or not `std::sqrt(x)` works with Vc types or not. Previously I was asked in the test application to list the includes first the ROOT ones, then Vc and finally STL. With this order `std::sqrt` does not work with Vc types when used in the GenVector classes. If though I invert the order, and place the Vc includes before the GenVector ones, then the std::sqrt (and I presume others, I have not tested yet though) work with Vc types. Does anyone know if this is intentional or not ? I have not found any documentation for Vc that says anything about its use of the `std::` name space that would explain this. Or perhaps its some feature of the ROOT includes ? I need to run some more tests to see if it really fixes all the issues with the gcc builds, but if so I guess its a possible workaround, although I confess I don't really like situations where the order of includes makes a difference. It shouldn't really matter, ideally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:515,testability,test,tested,515,"Playing around I have made an observation which is the order of the ROOT and Vc includes makes a difference w.r.t. whether or not `std::sqrt(x)` works with Vc types or not. Previously I was asked in the test application to list the includes first the ROOT ones, then Vc and finally STL. With this order `std::sqrt` does not work with Vc types when used in the GenVector classes. If though I invert the order, and place the Vc includes before the GenVector ones, then the std::sqrt (and I presume others, I have not tested yet though) work with Vc types. Does anyone know if this is intentional or not ? I have not found any documentation for Vc that says anything about its use of the `std::` name space that would explain this. Or perhaps its some feature of the ROOT includes ? I need to run some more tests to see if it really fixes all the issues with the gcc builds, but if so I guess its a possible workaround, although I confess I don't really like situations where the order of includes makes a difference. It shouldn't really matter, ideally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:804,testability,test,tests,804,"Playing around I have made an observation which is the order of the ROOT and Vc includes makes a difference w.r.t. whether or not `std::sqrt(x)` works with Vc types or not. Previously I was asked in the test application to list the includes first the ROOT ones, then Vc and finally STL. With this order `std::sqrt` does not work with Vc types when used in the GenVector classes. If though I invert the order, and place the Vc includes before the GenVector ones, then the std::sqrt (and I presume others, I have not tested yet though) work with Vc types. Does anyone know if this is intentional or not ? I have not found any documentation for Vc that says anything about its use of the `std::` name space that would explain this. Or perhaps its some feature of the ROOT includes ? I need to run some more tests to see if it really fixes all the issues with the gcc builds, but if so I guess its a possible workaround, although I confess I don't really like situations where the order of includes makes a difference. It shouldn't really matter, ideally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:624,usability,document,documentation,624,"Playing around I have made an observation which is the order of the ROOT and Vc includes makes a difference w.r.t. whether or not `std::sqrt(x)` works with Vc types or not. Previously I was asked in the test application to list the includes first the ROOT ones, then Vc and finally STL. With this order `std::sqrt` does not work with Vc types when used in the GenVector classes. If though I invert the order, and place the Vc includes before the GenVector ones, then the std::sqrt (and I presume others, I have not tested yet though) work with Vc types. Does anyone know if this is intentional or not ? I have not found any documentation for Vc that says anything about its use of the `std::` name space that would explain this. Or perhaps its some feature of the ROOT includes ? I need to run some more tests to see if it really fixes all the issues with the gcc builds, but if so I guess its a possible workaround, although I confess I don't really like situations where the order of includes makes a difference. It shouldn't really matter, ideally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:94,availability,down,downside,94,I've pushed an update to hopefully fix the issues. Tests now pass in my SLC6 gcc6 build. Only downside is Vc headers must be included before the GenVector ones in order to be used in the template types. @phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:15,deployability,updat,update,15,I've pushed an update to hopefully fix the issues. Tests now pass in my SLC6 gcc6 build. Only downside is Vc headers must be included before the GenVector ones in order to be used in the template types. @phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:82,deployability,build,build,82,I've pushed an update to hopefully fix the issues. Tests now pass in my SLC6 gcc6 build. Only downside is Vc headers must be included before the GenVector ones in order to be used in the template types. @phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:214,deployability,build,build,214,I've pushed an update to hopefully fix the issues. Tests now pass in my SLC6 gcc6 build. Only downside is Vc headers must be included before the GenVector ones in order to be used in the template types. @phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:15,safety,updat,update,15,I've pushed an update to hopefully fix the issues. Tests now pass in my SLC6 gcc6 build. Only downside is Vc headers must be included before the GenVector ones in order to be used in the template types. @phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:51,safety,Test,Tests,51,I've pushed an update to hopefully fix the issues. Tests now pass in my SLC6 gcc6 build. Only downside is Vc headers must be included before the GenVector ones in order to be used in the template types. @phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:15,security,updat,update,15,I've pushed an update to hopefully fix the issues. Tests now pass in my SLC6 gcc6 build. Only downside is Vc headers must be included before the GenVector ones in order to be used in the template types. @phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:51,testability,Test,Tests,51,I've pushed an update to hopefully fix the issues. Tests now pass in my SLC6 gcc6 build. Only downside is Vc headers must be included before the GenVector ones in order to be used in the template types. @phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:147,availability,avail,available,147,"Surely directly including the Vc headers in the GenVector headers is not really an option, as doing so would then require the headers to always be available, which may not be the case in some builds ? Or are you suggesting this just as a test ? if so, I am sure it will work, but not really sure how it would help going forward.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:192,deployability,build,builds,192,"Surely directly including the Vc headers in the GenVector headers is not really an option, as doing so would then require the headers to always be available, which may not be the case in some builds ? Or are you suggesting this just as a test ? if so, I am sure it will work, but not really sure how it would help going forward.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:147,reliability,availab,available,147,"Surely directly including the Vc headers in the GenVector headers is not really an option, as doing so would then require the headers to always be available, which may not be the case in some builds ? Or are you suggesting this just as a test ? if so, I am sure it will work, but not really sure how it would help going forward.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:147,safety,avail,available,147,"Surely directly including the Vc headers in the GenVector headers is not really an option, as doing so would then require the headers to always be available, which may not be the case in some builds ? Or are you suggesting this just as a test ? if so, I am sure it will work, but not really sure how it would help going forward.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:238,safety,test,test,238,"Surely directly including the Vc headers in the GenVector headers is not really an option, as doing so would then require the headers to always be available, which may not be the case in some builds ? Or are you suggesting this just as a test ? if so, I am sure it will work, but not really sure how it would help going forward.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:147,security,availab,available,147,"Surely directly including the Vc headers in the GenVector headers is not really an option, as doing so would then require the headers to always be available, which may not be the case in some builds ? Or are you suggesting this just as a test ? if so, I am sure it will work, but not really sure how it would help going forward.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:238,testability,test,test,238,"Surely directly including the Vc headers in the GenVector headers is not really an option, as doing so would then require the headers to always be available, which may not be the case in some builds ? Or are you suggesting this just as a test ? if so, I am sure it will work, but not really sure how it would help going forward.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:309,usability,help,help,309,"Surely directly including the Vc headers in the GenVector headers is not really an option, as doing so would then require the headers to always be available, which may not be the case in some builds ? Or are you suggesting this just as a test ? if so, I am sure it will work, but not really sure how it would help going forward.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:35,deployability,build,build,35,p.s. Do I take it that `@phsft-bot build!` doesn't work for me ;) ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:43,reliability,doe,doesn,43,p.s. Do I take it that `@phsft-bot build!` doesn't work for me ;) ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:207,deployability,build,build,207,"Hm... you have a point. OTOH, all Vc-aware header files should include Vc. It seems that we have `R__HAS_VC` option for that. You could wrap the headers in `ifdef R__HAS_VC`. Yes, only members can trigger a build :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:136,integrability,wrap,wrap,136,"Hm... you have a point. OTOH, all Vc-aware header files should include Vc. It seems that we have `R__HAS_VC` option for that. You could wrap the headers in `ifdef R__HAS_VC`. Yes, only members can trigger a build :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:171,availability,error,errors,171,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:481,availability,error,error,481,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:160,deployability,build,build,160,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:260,deployability,build,build,260,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:354,deployability,build,build,354,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:416,deployability,build,build,416,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:636,deployability,build,build,636,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:32,energy efficiency,current,currently,32,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:166,performance,time,time,166,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:171,performance,error,errors,171,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:481,performance,error,error,481,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:42,reliability,doe,does,42,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:171,safety,error,errors,171,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:481,safety,error,error,481,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:626,safety,test,test,626,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:571,testability,unit,unit,571,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:626,testability,test,test,626,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:171,usability,error,errors,171,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:234,usability,User,Users,234,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:328,usability,User,Users,328,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:390,usability,User,Users,390,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:481,usability,error,error,481,"OK, this might be an option but currently does not work. Adding. ```. #ifdef R__HAS_VC. #include <Vc/Vc>. #endif. ```. to `DisplacementVector3D.h` leads to the build time errors when rebuilding ROOT like,. ```. In file included from /Users/chris/Projects/ROOT/build/math/genvector/G__GenVector32.cxx:42:. In file included from /Users/chris/Projects/ROOT/build/include/Math/Vector3D.h:17:. /Users/chris/Projects/ROOT/build/include/Math/GenVector/DisplacementVector3D.h:24:10: fatal error: 'Vc/Vc' file not found. #include <Vc/Vc>. ```. I guess that particular compilation unit is not including the Vc header location. Note, my test ROOT build is built with the builtin_vc option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:33,deployability,build,build,33,I believe a final remark (if the build is green): could you also change the enable_if pattern as we discussed in one of the previous comments?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:42,energy efficiency,green,green,42,I believe a final remark (if the build is green): could you also change the enable_if pattern as we discussed in one of the previous comments?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:25,availability,failur,failure,25,"It looks like there is a failure in the gcc 49 test. However, if I am not mistaken this is in a single SMatrix test, and looking at the code for the test it is not using anything I have touched. So can we ignore this failure or is it a concern ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:217,availability,failur,failure,217,"It looks like there is a failure in the gcc 49 test. However, if I am not mistaken this is in a single SMatrix test, and looking at the code for the test it is not using anything I have touched. So can we ignore this failure or is it a concern ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:25,deployability,fail,failure,25,"It looks like there is a failure in the gcc 49 test. However, if I am not mistaken this is in a single SMatrix test, and looking at the code for the test it is not using anything I have touched. So can we ignore this failure or is it a concern ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:217,deployability,fail,failure,217,"It looks like there is a failure in the gcc 49 test. However, if I am not mistaken this is in a single SMatrix test, and looking at the code for the test it is not using anything I have touched. So can we ignore this failure or is it a concern ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:236,modifiability,concern,concern,236,"It looks like there is a failure in the gcc 49 test. However, if I am not mistaken this is in a single SMatrix test, and looking at the code for the test it is not using anything I have touched. So can we ignore this failure or is it a concern ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:25,performance,failur,failure,25,"It looks like there is a failure in the gcc 49 test. However, if I am not mistaken this is in a single SMatrix test, and looking at the code for the test it is not using anything I have touched. So can we ignore this failure or is it a concern ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:217,performance,failur,failure,217,"It looks like there is a failure in the gcc 49 test. However, if I am not mistaken this is in a single SMatrix test, and looking at the code for the test it is not using anything I have touched. So can we ignore this failure or is it a concern ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:25,reliability,fail,failure,25,"It looks like there is a failure in the gcc 49 test. However, if I am not mistaken this is in a single SMatrix test, and looking at the code for the test it is not using anything I have touched. So can we ignore this failure or is it a concern ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:217,reliability,fail,failure,217,"It looks like there is a failure in the gcc 49 test. However, if I am not mistaken this is in a single SMatrix test, and looking at the code for the test it is not using anything I have touched. So can we ignore this failure or is it a concern ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:47,safety,test,test,47,"It looks like there is a failure in the gcc 49 test. However, if I am not mistaken this is in a single SMatrix test, and looking at the code for the test it is not using anything I have touched. So can we ignore this failure or is it a concern ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:111,safety,test,test,111,"It looks like there is a failure in the gcc 49 test. However, if I am not mistaken this is in a single SMatrix test, and looking at the code for the test it is not using anything I have touched. So can we ignore this failure or is it a concern ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:149,safety,test,test,149,"It looks like there is a failure in the gcc 49 test. However, if I am not mistaken this is in a single SMatrix test, and looking at the code for the test it is not using anything I have touched. So can we ignore this failure or is it a concern ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:47,testability,test,test,47,"It looks like there is a failure in the gcc 49 test. However, if I am not mistaken this is in a single SMatrix test, and looking at the code for the test it is not using anything I have touched. So can we ignore this failure or is it a concern ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:111,testability,test,test,111,"It looks like there is a failure in the gcc 49 test. However, if I am not mistaken this is in a single SMatrix test, and looking at the code for the test it is not using anything I have touched. So can we ignore this failure or is it a concern ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:149,testability,test,test,149,"It looks like there is a failure in the gcc 49 test. However, if I am not mistaken this is in a single SMatrix test, and looking at the code for the test it is not using anything I have touched. So can we ignore this failure or is it a concern ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:236,testability,concern,concern,236,"It looks like there is a failure in the gcc 49 test. However, if I am not mistaken this is in a single SMatrix test, and looking at the code for the test it is not using anything I have touched. So can we ignore this failure or is it a concern ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:45,energy efficiency,current,current,45,"Sorry, what exactly is your concern with the current way I have setup the enable_if patterns ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:28,modifiability,concern,concern,28,"Sorry, what exactly is your concern with the current way I have setup the enable_if patterns ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:28,testability,concern,concern,28,"Sorry, what exactly is your concern with the current way I have setup the enable_if patterns ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:113,usability,support,supported,113,"OK, I have dug up the previous comments regarding the enable_if patterns. I missed the comment from @pcanal that supported the same methodology as you want @vgvassilev . I guess thats then 2 to 1 (I still prefer my way), so I will anyway make the change ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:205,usability,prefer,prefer,205,"OK, I have dug up the previous comments regarding the enable_if patterns. I missed the comment from @pcanal that supported the same methodology as you want @vgvassilev . I guess thats then 2 to 1 (I still prefer my way), so I will anyway make the change ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1446,availability,error,errors,1446,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:282,deployability,depend,depends,282,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:973,deployability,version,versions,973,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:282,integrability,depend,depends,282,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:973,integrability,version,versions,973,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:177,modifiability,paramet,parameters,177,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:282,modifiability,depend,depends,282,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:306,modifiability,SCAL,SCALAR,306,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:389,modifiability,paramet,parameter,389,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:431,modifiability,SCAL,SCALAR,431,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:440,modifiability,Scal,Scalar,440,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:520,modifiability,SCAL,SCALAR,520,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:535,modifiability,SCAL,SCALAR,535,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:724,modifiability,paramet,parameter,724,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:751,modifiability,paramet,parameter-less,751,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:955,modifiability,scal,scalar,955,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:973,modifiability,version,versions,973,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1052,modifiability,paramet,parameter,1052,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1142,modifiability,SCAL,SCALAR,1142,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1151,modifiability,Scal,Scalar,1151,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1232,modifiability,SCAL,SCALAR,1232,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1284,modifiability,SCAL,SCALAR,1284,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1314,modifiability,SCAL,SCALAR,1314,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1327,modifiability,SCAL,SCALAR,1327,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1486,modifiability,deco,decode,1486,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1446,performance,error,errors,1446,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:188,reliability,doe,does,188,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:282,safety,depend,depends,282,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1446,safety,error,errors,1446,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:240,testability,Unit,Unit,240,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:282,testability,depend,depends,282,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:471,testability,Unit,Unit,471,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:766,testability,Unit,Unit,766,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:990,testability,Unit,Unit,990,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1182,testability,Unit,Unit,1182,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:796,usability,prefer,preferred,796,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1446,usability,error,errors,1446,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1728,usability,help,help,1728,"Am I afraid but changing how the enable_if templation is done is not going to be trivial I think. Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the `DisplacementVector::Unit` method as then the method no longer depends directly on the SCALAR type. So the only option I think is to use a third method which is a hidden parameter. i.e. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. ```. Frankly, I consider this ugly as it has introduced a hidden parameter to the otherwise parameter-less Unit() method. Is this really preferred to templating on the return type. The other issue, and this is one I have run into before is I am unable to figure out how to the switch between the scalar and vector versions of the `Unit()` method with this technique. The problem is the hidden parameter types has to be different, so if I do something like. ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```. All hell breaks loose and I get a stream of compilation errors, which are pretty non trivial to decode... I have been in this position before and also found the templating on the return type just easier to get working... . I respect your opinions of course, its just if you want to change how this is done I think I am going to need some help to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:124,availability,error,errors,124,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:486,deployability,version,versions,486,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:486,integrability,version,versions,486,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:233,modifiability,paramet,parameter,233,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:363,modifiability,paramet,parameter,363,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:476,modifiability,paramet,parameter,476,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:486,modifiability,version,versions,486,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:594,modifiability,SCAL,SCALAR,594,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:603,modifiability,Scal,Scalar,603,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:683,modifiability,SCAL,SCALAR,683,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:698,modifiability,SCAL,SCALAR,698,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:842,modifiability,SCAL,SCALAR,842,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:851,modifiability,Scal,Scalar,851,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:932,modifiability,SCAL,SCALAR,932,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:981,modifiability,SCAL,SCALAR,981,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1011,modifiability,SCAL,SCALAR,1011,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:1024,modifiability,SCAL,SCALAR,1024,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:124,performance,error,errors,124,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:124,safety,error,errors,124,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:439,safety,compl,completeness,439,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:439,security,compl,completeness,439,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:507,testability,Unit,Unit,507,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:634,testability,Unit,Unit,634,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:882,testability,Unit,Unit,882,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:124,usability,error,errors,124,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:295,usability,prefer,prefer,295,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:554,usability,prefer,prefer,554,"OK, so it seems I am blind.... I had missed an additional opening brace in one of the above methods that was leading to the errors. I will delete my last comment after posting this... So, OK, I can get things to work with the hidden parameter approach. The question then is do you guys *really* prefer this to templating on the return type ? To my eye the hidden parameter is the worse evil, so I would stick with how things are now ? For completeness here is what the hidden parameter versions of the two `Unit()` methods would look like. Do you really prefer this ? ``` . template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<std::is_arithmetic<SCALAR>::value,SCALAR>::type* = nullptr ) const {. const auto tot = R();. return tot == 0 ? *this : DisplacementVector3D(*this) / tot;. }. template < typename SCALAR = Scalar >. DisplacementVector3D Unit( typename std::enable_if<!std::is_arithmetic<SCALAR>::value,void>::type* = nullptr ) const {. SCALAR tot = R();. tot(tot == SCALAR(0)) = SCALAR(1);. return DisplacementVector3D(*this) / tot;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:298,deployability,depend,depends,298,"> So, OK, I can get things to work with the hidden parameter approach. I agree it is not a good option. However,. > Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the DisplacementVector::Unit method as then the method no longer depends directly on the SCALAR type. . What do you mean? How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:367,deployability,fail,fail,367,"> So, OK, I can get things to work with the hidden parameter approach. I agree it is not a good option. However,. > Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the DisplacementVector::Unit method as then the method no longer depends directly on the SCALAR type. . What do you mean? How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:298,integrability,depend,depends,298,"> So, OK, I can get things to work with the hidden parameter approach. I agree it is not a good option. However,. > Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the DisplacementVector::Unit method as then the method no longer depends directly on the SCALAR type. . What do you mean? How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:51,modifiability,paramet,parameter,51,"> So, OK, I can get things to work with the hidden parameter approach. I agree it is not a good option. However,. > Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the DisplacementVector::Unit method as then the method no longer depends directly on the SCALAR type. . What do you mean? How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:195,modifiability,paramet,parameters,195,"> So, OK, I can get things to work with the hidden parameter approach. I agree it is not a good option. However,. > Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the DisplacementVector::Unit method as then the method no longer depends directly on the SCALAR type. . What do you mean? How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:298,modifiability,depend,depends,298,"> So, OK, I can get things to work with the hidden parameter approach. I agree it is not a good option. However,. > Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the DisplacementVector::Unit method as then the method no longer depends directly on the SCALAR type. . What do you mean? How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:322,modifiability,SCAL,SCALAR,322,"> So, OK, I can get things to work with the hidden parameter approach. I agree it is not a good option. However,. > Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the DisplacementVector::Unit method as then the method no longer depends directly on the SCALAR type. . What do you mean? How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:206,reliability,doe,does,206,"> So, OK, I can get things to work with the hidden parameter approach. I agree it is not a good option. However,. > Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the DisplacementVector::Unit method as then the method no longer depends directly on the SCALAR type. . What do you mean? How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:359,reliability,doe,does,359,"> So, OK, I can get things to work with the hidden parameter approach. I agree it is not a good option. However,. > Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the DisplacementVector::Unit method as then the method no longer depends directly on the SCALAR type. . What do you mean? How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:367,reliability,fail,fail,367,"> So, OK, I can get things to work with the hidden parameter approach. I agree it is not a good option. However,. > Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the DisplacementVector::Unit method as then the method no longer depends directly on the SCALAR type. . What do you mean? How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:298,safety,depend,depends,298,"> So, OK, I can get things to work with the hidden parameter approach. I agree it is not a good option. However,. > Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the DisplacementVector::Unit method as then the method no longer depends directly on the SCALAR type. . What do you mean? How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:257,testability,Unit,Unit,257,"> So, OK, I can get things to work with the hidden parameter approach. I agree it is not a good option. However,. > Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the DisplacementVector::Unit method as then the method no longer depends directly on the SCALAR type. . What do you mean? How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:298,testability,depend,depends,298,"> So, OK, I can get things to work with the hidden parameter approach. I agree it is not a good option. However,. > Firstly, the suggested 'second method' of moving the enable_if to the template parameters does not seem to work with the DisplacementVector::Unit method as then the method no longer depends directly on the SCALAR type. . What do you mean? How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:99,deployability,fail,failed,99,"Sorry, my mistake again. I think i was a little confused as to why my try with the 'second' option failed. It was the same reason as before, a stupid second brace... Indeed once I fix that it does seem to work (I want to test it out on gcc first to be sure, but clang on OSX is OK). Sorry for the noise on this. . If things look OK on gcc as well I will make the other changes elsewhere and push another update...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:404,deployability,updat,update,404,"Sorry, my mistake again. I think i was a little confused as to why my try with the 'second' option failed. It was the same reason as before, a stupid second brace... Indeed once I fix that it does seem to work (I want to test it out on gcc first to be sure, but clang on OSX is OK). Sorry for the noise on this. . If things look OK on gcc as well I will make the other changes elsewhere and push another update...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:99,reliability,fail,failed,99,"Sorry, my mistake again. I think i was a little confused as to why my try with the 'second' option failed. It was the same reason as before, a stupid second brace... Indeed once I fix that it does seem to work (I want to test it out on gcc first to be sure, but clang on OSX is OK). Sorry for the noise on this. . If things look OK on gcc as well I will make the other changes elsewhere and push another update...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:192,reliability,doe,does,192,"Sorry, my mistake again. I think i was a little confused as to why my try with the 'second' option failed. It was the same reason as before, a stupid second brace... Indeed once I fix that it does seem to work (I want to test it out on gcc first to be sure, but clang on OSX is OK). Sorry for the noise on this. . If things look OK on gcc as well I will make the other changes elsewhere and push another update...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:221,safety,test,test,221,"Sorry, my mistake again. I think i was a little confused as to why my try with the 'second' option failed. It was the same reason as before, a stupid second brace... Indeed once I fix that it does seem to work (I want to test it out on gcc first to be sure, but clang on OSX is OK). Sorry for the noise on this. . If things look OK on gcc as well I will make the other changes elsewhere and push another update...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:404,safety,updat,update,404,"Sorry, my mistake again. I think i was a little confused as to why my try with the 'second' option failed. It was the same reason as before, a stupid second brace... Indeed once I fix that it does seem to work (I want to test it out on gcc first to be sure, but clang on OSX is OK). Sorry for the noise on this. . If things look OK on gcc as well I will make the other changes elsewhere and push another update...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:404,security,updat,update,404,"Sorry, my mistake again. I think i was a little confused as to why my try with the 'second' option failed. It was the same reason as before, a stupid second brace... Indeed once I fix that it does seem to work (I want to test it out on gcc first to be sure, but clang on OSX is OK). Sorry for the noise on this. . If things look OK on gcc as well I will make the other changes elsewhere and push another update...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:221,testability,test,test,221,"Sorry, my mistake again. I think i was a little confused as to why my try with the 'second' option failed. It was the same reason as before, a stupid second brace... Indeed once I fix that it does seem to work (I want to test it out on gcc first to be sure, but clang on OSX is OK). Sorry for the noise on this. . If things look OK on gcc as well I will make the other changes elsewhere and push another update...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:26,deployability,updat,updated,26,enable_if implementations updated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:26,safety,updat,updated,26,enable_if implementations updated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:26,security,updat,updated,26,enable_if implementations updated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:557,deployability,observ,observed,557,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:7,modifiability,exten,extended,7,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:235,modifiability,scal,scalar,235,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:339,modifiability,Scal,Scalar,339,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:147,performance,time,time,147,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:351,performance,time,time,351,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:389,performance,time,time,389,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:33,safety,test,test,33,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:70,safety,test,test,70,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:80,safety,test,test,80,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:171,safety,test,test,171,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:242,safety,test,test,242,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:33,testability,test,test,33,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:70,testability,test,test,70,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:80,testability,test,test,80,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:85,testability,assert,asserts,85,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:171,testability,test,test,171,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:242,testability,test,test,242,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:557,testability,observ,observed,557,"I have extended the Vc GenVector test as requested to include a speed test. The test asserts that, for an equal number of 'photons' the processing time for the vectorised test should be a factor of `Vc::double_v::Size` faster than the scalar test (to within 10% to account for fluctuating machine conditions etc.). Output looks like. ```. Scalar best time = 0.00278807. Vectorised Vc best time = 0.00138211. Vectorised Vc SIMD size = 2. Vectorised Vc speedup = 2.01725. ```. So indeed for the default (SSE4) vectorisation level with double a factor of 2 is observed. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:11,deployability,build,build,11,@phsft-bot build! Thanks for the updated test Chris!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:33,deployability,updat,updated,33,@phsft-bot build! Thanks for the updated test Chris!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:33,safety,updat,updated,33,@phsft-bot build! Thanks for the updated test Chris!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:41,safety,test,test,41,@phsft-bot build! Thanks for the updated test Chris!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:33,security,updat,updated,33,@phsft-bot build! Thanks for the updated test Chris!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:41,testability,test,test,41,@phsft-bot build! Thanks for the updated test Chris!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:178,modifiability,exten,extended,178,running the test a few times it seems 10% is too tight a margin. The fluctuations from just rerunning the test a few times can be quite sizeable. To avoid false positives I have extended the margin to 25%.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:23,performance,time,times,23,running the test a few times it seems 10% is too tight a margin. The fluctuations from just rerunning the test a few times can be quite sizeable. To avoid false positives I have extended the margin to 25%.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:117,performance,time,times,117,running the test a few times it seems 10% is too tight a margin. The fluctuations from just rerunning the test a few times can be quite sizeable. To avoid false positives I have extended the margin to 25%.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:12,safety,test,test,12,running the test a few times it seems 10% is too tight a margin. The fluctuations from just rerunning the test a few times can be quite sizeable. To avoid false positives I have extended the margin to 25%.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:106,safety,test,test,106,running the test a few times it seems 10% is too tight a margin. The fluctuations from just rerunning the test a few times can be quite sizeable. To avoid false positives I have extended the margin to 25%.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:149,safety,avoid,avoid,149,running the test a few times it seems 10% is too tight a margin. The fluctuations from just rerunning the test a few times can be quite sizeable. To avoid false positives I have extended the margin to 25%.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:12,testability,test,test,12,running the test a few times it seems 10% is too tight a margin. The fluctuations from just rerunning the test a few times can be quite sizeable. To avoid false positives I have extended the margin to 25%.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:106,testability,test,test,106,running the test a few times it seems 10% is too tight a margin. The fluctuations from just rerunning the test a few times can be quite sizeable. To avoid false positives I have extended the margin to 25%.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:43,safety,test,test,43,"Hm..., now I am confused, according to the test results, the vectorisation on slc6 and centos7 has a negative effect...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:43,testability,test,test,43,"Hm..., now I am confused, according to the test results, the vectorisation on slc6 and centos7 has a negative effect...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:106,interoperability,platform,platform,106,I know for a fact the results are as expected on SLC6. The results in the talk I posted where run on this platform.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:140,deployability,observ,observed,140,"I am puzzled why this happens, do you have an idea (the invariant is the gcc49). You say results on SLC6 are expected: you mean the ones we observed in the jenkins build?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:164,deployability,build,build,164,"I am puzzled why this happens, do you have an idea (the invariant is the gcc49). You say results on SLC6 are expected: you mean the ones we observed in the jenkins build?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:140,testability,observ,observed,140,"I am puzzled why this happens, do you have an idea (the invariant is the gcc49). You say results on SLC6 are expected: you mean the ones we observed in the jenkins build?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:14,deployability,build,build,14,"which jenkins build ? Note that to get good SIMD results requires the test to run on a machine that properly supports SIMD instructions. As I mention in my talk if the machine you use is a VM, the results could be way off.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:70,safety,test,test,70,"which jenkins build ? Note that to get good SIMD results requires the test to run on a machine that properly supports SIMD instructions. As I mention in my talk if the machine you use is a VM, the results could be way off.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:70,testability,test,test,70,"which jenkins build ? Note that to get good SIMD results requires the test to run on a machine that properly supports SIMD instructions. As I mention in my talk if the machine you use is a VM, the results could be way off.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:109,usability,support,supports,109,"which jenkins build ? Note that to get good SIMD results requires the test to run on a machine that properly supports SIMD instructions. As I mention in my talk if the machine you use is a VM, the results could be way off.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:61,energy efficiency,CPU,CPU,61,"The only Vc results I really trust are those run on a 'real' CPU, not a VM.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:61,performance,CPU,CPU,61,"The only Vc results I really trust are those run on a 'real' CPU, not a VM.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:29,security,trust,trust,29,"The only Vc results I really trust are those run on a 'real' CPU, not a VM.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:30,availability,failur,failure,30,"Ok, then we should not assert failure from in test case. Let's just print out the information for reference.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:30,deployability,fail,failure,30,"Ok, then we should not assert failure from in test case. Let's just print out the information for reference.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:30,performance,failur,failure,30,"Ok, then we should not assert failure from in test case. Let's just print out the information for reference.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:30,reliability,fail,failure,30,"Ok, then we should not assert failure from in test case. Let's just print out the information for reference.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:46,safety,test,test,46,"Ok, then we should not assert failure from in test case. Let's just print out the information for reference.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:23,testability,assert,assert,23,"Ok, then we should not assert failure from in test case. Let's just print out the information for reference.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:46,testability,test,test,46,"Ok, then we should not assert failure from in test case. Let's just print out the information for reference.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:93,deployability,BUILD,BUILDTYPE,93,"What sort of a machine do the tests. https://phsft-jenkins.cern.ch/job/root-pullrequests/127/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6/testReport/junit/projectroot/test/test_GenVector_Vc/. run on ? My bet is this is not a real CPU that properly supports SIMD instructions (SSE4 in this case) or a VM machine where the timings cannot be trusted. Sorry, but if you want a timing test for the Vc types you have to run this on a machine where the SIMD types are properly supported, and looking at the results above I would say this is currently not the case. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:227,energy efficiency,CPU,CPU,227,"What sort of a machine do the tests. https://phsft-jenkins.cern.ch/job/root-pullrequests/127/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6/testReport/junit/projectroot/test/test_GenVector_Vc/. run on ? My bet is this is not a real CPU that properly supports SIMD instructions (SSE4 in this case) or a VM machine where the timings cannot be trusted. Sorry, but if you want a timing test for the Vc types you have to run this on a machine where the SIMD types are properly supported, and looking at the results above I would say this is currently not the case. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:531,energy efficiency,current,currently,531,"What sort of a machine do the tests. https://phsft-jenkins.cern.ch/job/root-pullrequests/127/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6/testReport/junit/projectroot/test/test_GenVector_Vc/. run on ? My bet is this is not a real CPU that properly supports SIMD instructions (SSE4 in this case) or a VM machine where the timings cannot be trusted. Sorry, but if you want a timing test for the Vc types you have to run this on a machine where the SIMD types are properly supported, and looking at the results above I would say this is currently not the case. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:227,performance,CPU,CPU,227,"What sort of a machine do the tests. https://phsft-jenkins.cern.ch/job/root-pullrequests/127/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6/testReport/junit/projectroot/test/test_GenVector_Vc/. run on ? My bet is this is not a real CPU that properly supports SIMD instructions (SSE4 in this case) or a VM machine where the timings cannot be trusted. Sorry, but if you want a timing test for the Vc types you have to run this on a machine where the SIMD types are properly supported, and looking at the results above I would say this is currently not the case. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:30,safety,test,tests,30,"What sort of a machine do the tests. https://phsft-jenkins.cern.ch/job/root-pullrequests/127/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6/testReport/junit/projectroot/test/test_GenVector_Vc/. run on ? My bet is this is not a real CPU that properly supports SIMD instructions (SSE4 in this case) or a VM machine where the timings cannot be trusted. Sorry, but if you want a timing test for the Vc types you have to run this on a machine where the SIMD types are properly supported, and looking at the results above I would say this is currently not the case. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:135,safety,test,testReport,135,"What sort of a machine do the tests. https://phsft-jenkins.cern.ch/job/root-pullrequests/127/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6/testReport/junit/projectroot/test/test_GenVector_Vc/. run on ? My bet is this is not a real CPU that properly supports SIMD instructions (SSE4 in this case) or a VM machine where the timings cannot be trusted. Sorry, but if you want a timing test for the Vc types you have to run this on a machine where the SIMD types are properly supported, and looking at the results above I would say this is currently not the case. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:164,safety,test,test,164,"What sort of a machine do the tests. https://phsft-jenkins.cern.ch/job/root-pullrequests/127/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6/testReport/junit/projectroot/test/test_GenVector_Vc/. run on ? My bet is this is not a real CPU that properly supports SIMD instructions (SSE4 in this case) or a VM machine where the timings cannot be trusted. Sorry, but if you want a timing test for the Vc types you have to run this on a machine where the SIMD types are properly supported, and looking at the results above I would say this is currently not the case. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:377,safety,test,test,377,"What sort of a machine do the tests. https://phsft-jenkins.cern.ch/job/root-pullrequests/127/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6/testReport/junit/projectroot/test/test_GenVector_Vc/. run on ? My bet is this is not a real CPU that properly supports SIMD instructions (SSE4 in this case) or a VM machine where the timings cannot be trusted. Sorry, but if you want a timing test for the Vc types you have to run this on a machine where the SIMD types are properly supported, and looking at the results above I would say this is currently not the case. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:336,security,trust,trusted,336,"What sort of a machine do the tests. https://phsft-jenkins.cern.ch/job/root-pullrequests/127/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6/testReport/junit/projectroot/test/test_GenVector_Vc/. run on ? My bet is this is not a real CPU that properly supports SIMD instructions (SSE4 in this case) or a VM machine where the timings cannot be trusted. Sorry, but if you want a timing test for the Vc types you have to run this on a machine where the SIMD types are properly supported, and looking at the results above I would say this is currently not the case. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:30,testability,test,tests,30,"What sort of a machine do the tests. https://phsft-jenkins.cern.ch/job/root-pullrequests/127/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6/testReport/junit/projectroot/test/test_GenVector_Vc/. run on ? My bet is this is not a real CPU that properly supports SIMD instructions (SSE4 in this case) or a VM machine where the timings cannot be trusted. Sorry, but if you want a timing test for the Vc types you have to run this on a machine where the SIMD types are properly supported, and looking at the results above I would say this is currently not the case. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:135,testability,test,testReport,135,"What sort of a machine do the tests. https://phsft-jenkins.cern.ch/job/root-pullrequests/127/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6/testReport/junit/projectroot/test/test_GenVector_Vc/. run on ? My bet is this is not a real CPU that properly supports SIMD instructions (SSE4 in this case) or a VM machine where the timings cannot be trusted. Sorry, but if you want a timing test for the Vc types you have to run this on a machine where the SIMD types are properly supported, and looking at the results above I would say this is currently not the case. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:164,testability,test,test,164,"What sort of a machine do the tests. https://phsft-jenkins.cern.ch/job/root-pullrequests/127/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6/testReport/junit/projectroot/test/test_GenVector_Vc/. run on ? My bet is this is not a real CPU that properly supports SIMD instructions (SSE4 in this case) or a VM machine where the timings cannot be trusted. Sorry, but if you want a timing test for the Vc types you have to run this on a machine where the SIMD types are properly supported, and looking at the results above I would say this is currently not the case. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:377,testability,test,test,377,"What sort of a machine do the tests. https://phsft-jenkins.cern.ch/job/root-pullrequests/127/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6/testReport/junit/projectroot/test/test_GenVector_Vc/. run on ? My bet is this is not a real CPU that properly supports SIMD instructions (SSE4 in this case) or a VM machine where the timings cannot be trusted. Sorry, but if you want a timing test for the Vc types you have to run this on a machine where the SIMD types are properly supported, and looking at the results above I would say this is currently not the case. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:245,usability,support,supports,245,"What sort of a machine do the tests. https://phsft-jenkins.cern.ch/job/root-pullrequests/127/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6/testReport/junit/projectroot/test/test_GenVector_Vc/. run on ? My bet is this is not a real CPU that properly supports SIMD instructions (SSE4 in this case) or a VM machine where the timings cannot be trusted. Sorry, but if you want a timing test for the Vc types you have to run this on a machine where the SIMD types are properly supported, and looking at the results above I would say this is currently not the case. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:467,usability,support,supported,467,"What sort of a machine do the tests. https://phsft-jenkins.cern.ch/job/root-pullrequests/127/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6/testReport/junit/projectroot/test/test_GenVector_Vc/. run on ? My bet is this is not a real CPU that properly supports SIMD instructions (SSE4 in this case) or a VM machine where the timings cannot be trusted. Sorry, but if you want a timing test for the Vc types you have to run this on a machine where the SIMD types are properly supported, and looking at the results above I would say this is currently not the case. Chris",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:109,availability,failur,failure,109,I agree then. If you run the jenkins tests on VM then the timing tests cannot be trusted. I will disable the failure mode from them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:109,deployability,fail,failure,109,I agree then. If you run the jenkins tests on VM then the timing tests cannot be trusted. I will disable the failure mode from them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:109,performance,failur,failure,109,I agree then. If you run the jenkins tests on VM then the timing tests cannot be trusted. I will disable the failure mode from them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:109,reliability,fail,failure,109,I agree then. If you run the jenkins tests on VM then the timing tests cannot be trusted. I will disable the failure mode from them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:37,safety,test,tests,37,I agree then. If you run the jenkins tests on VM then the timing tests cannot be trusted. I will disable the failure mode from them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:65,safety,test,tests,65,I agree then. If you run the jenkins tests on VM then the timing tests cannot be trusted. I will disable the failure mode from them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:81,security,trust,trusted,81,I agree then. If you run the jenkins tests on VM then the timing tests cannot be trusted. I will disable the failure mode from them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:37,testability,test,tests,37,I agree then. If you run the jenkins tests on VM then the timing tests cannot be trusted. I will disable the failure mode from them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:65,testability,test,tests,65,I agree then. If you run the jenkins tests on VM then the timing tests cannot be trusted. I will disable the failure mode from them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:84,energy efficiency,green,green,84,Thanks! With that I think we are ready to land this nice piece of work given we get green light from jenkins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:20,availability,failur,failure,20,"I've turned off the failure return value from the timing tests, as if they are run from VMs the results cannot really be trusted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:20,deployability,fail,failure,20,"I've turned off the failure return value from the timing tests, as if they are run from VMs the results cannot really be trusted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:20,performance,failur,failure,20,"I've turned off the failure return value from the timing tests, as if they are run from VMs the results cannot really be trusted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:20,reliability,fail,failure,20,"I've turned off the failure return value from the timing tests, as if they are run from VMs the results cannot really be trusted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:57,safety,test,tests,57,"I've turned off the failure return value from the timing tests, as if they are run from VMs the results cannot really be trusted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:121,security,trust,trusted,121,"I've turned off the failure return value from the timing tests, as if they are run from VMs the results cannot really be trusted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:57,testability,test,tests,57,"I've turned off the failure return value from the timing tests, as if they are run from VMs the results cannot really be trusted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:69,safety,review,reviewing,69,Finally merged! Thanks for the contribution. I am looking forward to reviewing more PR going in this direction!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:69,testability,review,reviewing,69,Finally merged! Thanks for the contribution. I am looking forward to reviewing more PR going in this direction!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:153,integrability,event,eventually,153,"Many thanks for your help as well. I may well return to some of the other genvector classes at some point, the rotations for instance, as I think I will eventually have a use for them. That will be more work though... Hopefully next time things will be smoother as I now know a lot more about what is expected in a ROOT PR... ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:233,performance,time,time,233,"Many thanks for your help as well. I may well return to some of the other genvector classes at some point, the rotations for instance, as I think I will eventually have a use for them. That will be more work though... Hopefully next time things will be smoother as I now know a lot more about what is expected in a ROOT PR... ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:111,security,rotat,rotations,111,"Many thanks for your help as well. I may well return to some of the other genvector classes at some point, the rotations for instance, as I think I will eventually have a use for them. That will be more work though... Hopefully next time things will be smoother as I now know a lot more about what is expected in a ROOT PR... ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/394:21,usability,help,help,21,"Many thanks for your help as well. I may well return to some of the other genvector classes at some point, the rotations for instance, as I think I will eventually have a use for them. That will be more work though... Hopefully next time things will be smoother as I now know a lot more about what is expected in a ROOT PR... ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/394
https://github.com/root-project/root/pull/400:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/400
https://github.com/root-project/root/pull/401:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/401
https://github.com/root-project/root/pull/401:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/401
https://github.com/root-project/root/pull/401:12,deployability,fail,failed,12,The jenkins failed because the description of the PR includes a full output of the failing test and confuses the parsing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/401
https://github.com/root-project/root/pull/401:83,deployability,fail,failing,83,The jenkins failed because the description of the PR includes a full output of the failing test and confuses the parsing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/401
https://github.com/root-project/root/pull/401:12,reliability,fail,failed,12,The jenkins failed because the description of the PR includes a full output of the failing test and confuses the parsing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/401
https://github.com/root-project/root/pull/401:83,reliability,fail,failing,83,The jenkins failed because the description of the PR includes a full output of the failing test and confuses the parsing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/401
https://github.com/root-project/root/pull/401:91,safety,test,test,91,The jenkins failed because the description of the PR includes a full output of the failing test and confuses the parsing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/401
https://github.com/root-project/root/pull/401:91,testability,test,test,91,The jenkins failed because the description of the PR includes a full output of the failing test and confuses the parsing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/401
https://github.com/root-project/root/pull/402:43,deployability,DEPEND,DEPENDS,43,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:93,deployability,depend,dependencies,93,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:205,deployability,build,builds,205,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:43,integrability,DEPEND,DEPENDS,43,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:93,integrability,depend,dependencies,93,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:43,modifiability,DEPEND,DEPENDS,43,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:93,modifiability,depend,dependencies,93,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:43,safety,DEPEND,DEPENDS,43,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:93,safety,depend,dependencies,93,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:114,safety,test,tests,114,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:176,safety,test,test,176,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:182,safety,test,test-stressproof,182,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:224,safety,Test,TestData,224,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:260,safety,test,test,260,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:43,testability,DEPEND,DEPENDS,43,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:93,testability,depend,dependencies,93,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:114,testability,test,tests,114,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:176,testability,test,test,176,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:182,testability,test,test-stressproof,182,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:224,testability,Test,TestData,224,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:260,testability,test,test,260,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:160,usability,command,command,160,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/402:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/402
https://github.com/root-project/root/pull/403:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/403
https://github.com/root-project/root/pull/406:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:66,interoperability,platform,platform,66,"Hi Mattias,. I ripped it out. Do you actually have an s390x 31bit platform?! Axel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:190,availability,down,down,190,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:56,deployability,build,builds,56,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:139,deployability,build,build,139,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:145,deployability,fail,failed,145,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:259,deployability,build,build,259,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:366,deployability,fail,failing,366,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:451,deployability,fail,failing,451,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:512,deployability,fail,failing,512,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:552,deployability,fail,failing,552,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:618,deployability,fail,failing,618,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:714,deployability,build,builds,714,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:160,interoperability,architectur,architecture,160,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:63,modifiability,pac,packages,63,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:131,modifiability,pac,package,131,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:727,modifiability,pac,packages,727,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:145,reliability,fail,failed,145,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:287,reliability,doe,does,287,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:366,reliability,fail,failing,366,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:451,reliability,fail,failing,451,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:512,reliability,fail,failing,512,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:552,reliability,fail,failing,552,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:618,reliability,fail,failing,618,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:829,reliability,doe,does,829,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:374,safety,test,tests,374,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:459,safety,test,tests,459,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:520,safety,test,tests,520,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:560,safety,test,tests,560,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:626,safety,test,tests,626,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:374,testability,test,tests,374,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:459,testability,test,tests,459,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:520,testability,test,tests,520,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:560,testability,test,tests,560,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:626,testability,test,tests,626,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:779,usability,support,support,779,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:838,usability,support,support,838,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:905,usability,support,supported,905,"You are confusing 31 bit s390 with 64 bit s390x. Fedora builds packages for s390x, and I did get a bug report in bugzilla that the package build failed on this architecture, which I tracked down to the problem reported here. Up to Fedora 23 they also used to build for s390, though this does not happen any more. I also filed a bug report to you upstream about some failing tests in s390x. https://sft.its.cern.ch/jira/browse/ROOT-8703. The number of failing tests on s390x is on the same order as the number of failing tests on 32 bit arm (though the failing tests are not the same), and far fewer than the number of failing tests on ppc64 and ppc64le. So while s390 is mostly obsolete, s390x is not. Also Debian builds their packages for s390x. I would not mind if you removed support for s390 - it would make sense since llvm does not support it - but removing s390x would be unfortunate, and s390x is supported by llvm. But also s390 worked if you only used compilation and did not use the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/406:107,deployability,continu,continuous,107,"Thanks a lot for explaining, Mattias! And yes, I am aware of your ROOT-8703. Thanks for your endurance and continuous flow of contributions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/406
https://github.com/root-project/root/pull/407:67,reliability,doe,does,67,Thanks for the PR. It is fine for bash but the '$$' in the csh one does not work. Indeed $$ gets replaced by a numerical value and therefore does not match the existing PATH fragment.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/407
https://github.com/root-project/root/pull/407:141,reliability,doe,does,141,Thanks for the PR. It is fine for bash but the '$$' in the csh one does not work. Indeed $$ gets replaced by a numerical value and therefore does not match the existing PATH fragment.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/407
https://github.com/root-project/root/pull/407:112,availability,reliab,reliably,112,"Ah yes sorry, apparently it seems rather tricky to properly use a $ sign in a csh string. This should work more reliably. I added the set DOLLAR='$' to each setenv call to not add any new environment variables to the original shell",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/407
https://github.com/root-project/root/pull/407:200,modifiability,variab,variables,200,"Ah yes sorry, apparently it seems rather tricky to properly use a $ sign in a csh string. This should work more reliably. I added the set DOLLAR='$' to each setenv call to not add any new environment variables to the original shell",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/407
https://github.com/root-project/root/pull/407:112,reliability,reliab,reliably,112,"Ah yes sorry, apparently it seems rather tricky to properly use a $ sign in a csh string. This should work more reliably. I added the set DOLLAR='$' to each setenv call to not add any new environment variables to the original shell",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/407
https://github.com/root-project/root/pull/407:68,security,sign,sign,68,"Ah yes sorry, apparently it seems rather tricky to properly use a $ sign in a csh string. This should work more reliably. I added the set DOLLAR='$' to each setenv call to not add any new environment variables to the original shell",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/407
https://github.com/root-project/root/pull/408:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:51,energy efficiency,reduc,reduce,51,"Hi @martinmine ,. do you think we can also try and reduce the runtime of some tests and tutorial so that we gain coverage *and* time ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:128,performance,time,time,128,"Hi @martinmine ,. do you think we can also try and reduce the runtime of some tests and tutorial so that we gain coverage *and* time ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:78,safety,test,tests,78,"Hi @martinmine ,. do you think we can also try and reduce the runtime of some tests and tutorial so that we gain coverage *and* time ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:78,testability,test,tests,78,"Hi @martinmine ,. do you think we can also try and reduce the runtime of some tests and tutorial so that we gain coverage *and* time ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:113,testability,coverag,coverage,113,"Hi @martinmine ,. do you think we can also try and reduce the runtime of some tests and tutorial so that we gain coverage *and* time ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:170,performance,time,time,170,"Hi @martinmine ,. sure you are right! I was just looking a bit ahead thinking of a way to . 1) Adiabatically re-add the long tests after making them quicker. 2) Make the time needed to run all tests on ci and developers machines faster . Cheers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:125,safety,test,tests,125,"Hi @martinmine ,. sure you are right! I was just looking a bit ahead thinking of a way to . 1) Adiabatically re-add the long tests after making them quicker. 2) Make the time needed to run all tests on ci and developers machines faster . Cheers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:193,safety,test,tests,193,"Hi @martinmine ,. sure you are right! I was just looking a bit ahead thinking of a way to . 1) Adiabatically re-add the long tests after making them quicker. 2) Make the time needed to run all tests on ci and developers machines faster . Cheers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:125,testability,test,tests,125,"Hi @martinmine ,. sure you are right! I was just looking a bit ahead thinking of a way to . 1) Adiabatically re-add the long tests after making them quicker. 2) Make the time needed to run all tests on ci and developers machines faster . Cheers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:193,testability,test,tests,193,"Hi @martinmine ,. sure you are right! I was just looking a bit ahead thinking of a way to . 1) Adiabatically re-add the long tests after making them quicker. 2) Make the time needed to run all tests on ci and developers machines faster . Cheers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:159,deployability,configurat,configurations,159,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:288,energy efficiency,reduc,reducing,288,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:323,energy efficiency,reduc,reduce,323,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:159,integrability,configur,configurations,159,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:139,modifiability,extens,extensive,139,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:159,modifiability,configur,configurations,159,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:73,performance,time,time,73,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:232,performance,perform,performance,232,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:306,performance,time,time,306,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:39,safety,test,tests,39,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:89,safety,test,tests,89,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:99,safety,test,tests,99,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:110,safety,test,tests,110,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:255,safety,test,tests,255,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:301,safety,test,test,301,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:360,safety,test,tests,360,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:159,security,configur,configurations,159,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:39,testability,test,tests,39,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:89,testability,test,tests,89,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:99,testability,test,tests,99,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:110,testability,test,tests,110,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:255,testability,test,tests,255,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:301,testability,test,test,301,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:360,testability,test,tests,360,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/408:232,usability,perform,performance,232,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/408
https://github.com/root-project/root/pull/409:2,safety,compl,completely,2,I completely agree with you. Your changes are commited.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/409
https://github.com/root-project/root/pull/409:2,security,compl,completely,2,I completely agree with you. Your changes are commited.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/409
https://github.com/root-project/root/pull/410:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/410
https://github.com/root-project/root/pull/410:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/410
https://github.com/root-project/root/pull/410:50,safety,test,test,50,"Hi @satyarth934 . * can you provide an example to test this method? * this method has support multiclass classification and regression or only two class classification? Cheers,. Omar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/410
https://github.com/root-project/root/pull/410:50,testability,test,test,50,"Hi @satyarth934 . * can you provide an example to test this method? * this method has support multiclass classification and regression or only two class classification? Cheers,. Omar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/410
https://github.com/root-project/root/pull/410:124,testability,regress,regression,124,"Hi @satyarth934 . * can you provide an example to test this method? * this method has support multiclass classification and regression or only two class classification? Cheers,. Omar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/410
https://github.com/root-project/root/pull/410:86,usability,support,support,86,"Hi @satyarth934 . * can you provide an example to test this method? * this method has support multiclass classification and regression or only two class classification? Cheers,. Omar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/410
https://github.com/root-project/root/pull/410:34,availability,error,error,34,Hi @omazapa . There is some minor error. I am working on it. Will do it ASAP. Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/410
https://github.com/root-project/root/pull/410:34,performance,error,error,34,Hi @omazapa . There is some minor error. I am working on it. Will do it ASAP. Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/410
https://github.com/root-project/root/pull/410:34,safety,error,error,34,Hi @omazapa . There is some minor error. I am working on it. Will do it ASAP. Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/410
https://github.com/root-project/root/pull/410:34,usability,error,error,34,Hi @omazapa . There is some minor error. I am working on it. Will do it ASAP. Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/410
https://github.com/root-project/root/pull/410:64,deployability,patch,patch,64,Is it possible for someone else to look into the issues of this patch? I am unable to pinpoint the problem. Thank you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/410
https://github.com/root-project/root/pull/410:64,safety,patch,patch,64,Is it possible for someone else to look into the issues of this patch? I am unable to pinpoint the problem. Thank you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/410
https://github.com/root-project/root/pull/410:64,security,patch,patch,64,Is it possible for someone else to look into the issues of this patch? I am unable to pinpoint the problem. Thank you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/410
https://github.com/root-project/root/pull/411:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/411
https://github.com/root-project/root/pull/411:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/411
https://github.com/root-project/root/pull/412:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/412
https://github.com/root-project/root/pull/415:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/415
https://github.com/root-project/root/pull/416:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/416
https://github.com/root-project/root/pull/416:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/416
https://github.com/root-project/root/pull/416:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/416
https://github.com/root-project/root/pull/416:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/416
https://github.com/root-project/root/pull/419:13,deployability,fail,failed,13,clang-format failed...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:6,interoperability,format,format,6,clang-format failed...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:13,reliability,fail,failed,13,clang-format failed...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:115,interoperability,specif,specified,115,First commit was wrong. I am not sure why Doxygen does not pick up the default value for `EnableImplicitMT`. It is specified in the header file.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:50,reliability,doe,does,50,First commit was wrong. I am not sure why Doxygen does not pick up the default value for `EnableImplicitMT`. It is specified in the header file.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:144,interoperability,format,format-,144,"@bluehood, it seems the documentation line is longer than what ROOT's coding conventions expect. To reproduce it locally you can run 'git-clang-format-3.9 --commit b550d3b74bdfd8efbff9ce52faa8652df0242d22 --diff --binary `which clang-format-3.9`'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:234,interoperability,format,format-,234,"@bluehood, it seems the documentation line is longer than what ROOT's coding conventions expect. To reproduce it locally you can run 'git-clang-format-3.9 --commit b550d3b74bdfd8efbff9ce52faa8652df0242d22 --diff --binary `which clang-format-3.9`'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:24,usability,document,documentation,24,"@bluehood, it seems the documentation line is longer than what ROOT's coding conventions expect. To reproduce it locally you can run 'git-clang-format-3.9 --commit b550d3b74bdfd8efbff9ce52faa8652df0242d22 --diff --binary `which clang-format-3.9`'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:38,deployability,version,version,38,> git-clang-format-3.9. Which package/version includes this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:38,integrability,version,version,38,> git-clang-format-3.9. Which package/version includes this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:12,interoperability,format,format-,12,> git-clang-format-3.9. Which package/version includes this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:30,modifiability,pac,package,30,> git-clang-format-3.9. Which package/version includes this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:38,modifiability,version,version,38,> git-clang-format-3.9. Which package/version includes this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:41,interoperability,format,format-,41,"@pcanal Ubuntu 16.04 can get up to clang-format-3.8, which worked fine for me. My Debian stable machine has access to clang-format-3.5 at most, have not tried that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:124,interoperability,format,format-,124,"@pcanal Ubuntu 16.04 can get up to clang-format-3.8, which worked fine for me. My Debian stable machine has access to clang-format-3.5 at most, have not tried that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:108,security,access,access,108,"@pcanal Ubuntu 16.04 can get up to clang-format-3.8, which worked fine for me. My Debian stable machine has access to clang-format-3.5 at most, have not tried that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:68,deployability,version,version,68,"Hi @bluehood, I think I tried but it did not work. Can you try this version of the config file? https://root.cern.ch/coding-conventions#ClangFormat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:68,integrability,version,version,68,"Hi @bluehood, I think I tried but it did not work. Can you try this version of the config file? https://root.cern.ch/coding-conventions#ClangFormat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/419:68,modifiability,version,version,68,"Hi @bluehood, I think I tried but it did not work. Can you try this version of the config file? https://root.cern.ch/coding-conventions#ClangFormat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/419
https://github.com/root-project/root/pull/420:11,deployability,build,build,11,@phsft-bot build this time please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/420
https://github.com/root-project/root/pull/420:22,performance,time,time,22,@phsft-bot build this time please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/420
https://github.com/root-project/root/pull/421:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:34,deployability,build,build,34,"Sorry, but I cannot check why the build failed. A lightweight cern account is not enough to access Jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:40,deployability,fail,failed,40,"Sorry, but I cannot check why the build failed. A lightweight cern account is not enough to access Jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:40,reliability,fail,failed,40,"Sorry, but I cannot check why the build failed. A lightweight cern account is not enough to access Jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:92,security,access,access,92,"Sorry, but I cannot check why the build failed. A lightweight cern account is not enough to access Jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:181,safety,test,testifies,181,"@daritter you are right, to access jenkins you need some credentials. On the other hand, you can always look at CDASH: http://cdash.cern.ch/index.php?project=ROOT as the line above testifies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:28,security,access,access,28,"@daritter you are right, to access jenkins you need some credentials. On the other hand, you can always look at CDASH: http://cdash.cern.ch/index.php?project=ROOT as the line above testifies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:181,testability,test,testifies,181,"@daritter you are right, to access jenkins you need some credentials. On the other hand, you can always look at CDASH: http://cdash.cern.ch/index.php?project=ROOT as the line above testifies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:7,deployability,fail,failed,7,"The PR failed to build on OSX since we moved and rebased the rootspi repo while the job was queued for building on Jenkins. Otherwise, it passed on all other platforms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:17,deployability,build,build,17,"The PR failed to build on OSX since we moved and rebased the rootspi repo while the job was queued for building on Jenkins. Otherwise, it passed on all other platforms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:103,deployability,build,building,103,"The PR failed to build on OSX since we moved and rebased the rootspi repo while the job was queued for building on Jenkins. Otherwise, it passed on all other platforms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:92,integrability,queue,queued,92,"The PR failed to build on OSX since we moved and rebased the rootspi repo while the job was queued for building on Jenkins. Otherwise, it passed on all other platforms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:158,interoperability,platform,platforms,158,"The PR failed to build on OSX since we moved and rebased the rootspi repo while the job was queued for building on Jenkins. Otherwise, it passed on all other platforms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:92,performance,queue,queued,92,"The PR failed to build on OSX since we moved and rebased the rootspi repo while the job was queued for building on Jenkins. Otherwise, it passed on all other platforms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:7,reliability,fail,failed,7,"The PR failed to build on OSX since we moved and rebased the rootspi repo while the job was queued for building on Jenkins. Otherwise, it passed on all other platforms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:68,integrability,messag,message,68,"@dpiparo A yes sorry, I did not pay enough attention to the Jenkins message",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:68,interoperability,messag,message,68,"@dpiparo A yes sorry, I did not pay enough attention to the Jenkins message",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:65,deployability,patch,patches,65,Merged as 9d60a5036d6346357a5bf14376bb2fdf66659681 into v6-08-00-patches,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:65,safety,patch,patches,65,Merged as 9d60a5036d6346357a5bf14376bb2fdf66659681 into v6-08-00-patches,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/421:65,security,patch,patches,65,Merged as 9d60a5036d6346357a5bf14376bb2fdf66659681 into v6-08-00-patches,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/421
https://github.com/root-project/root/pull/423:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/423
https://github.com/root-project/root/pull/423:26,deployability,fail,failing,26,"Alright, so the only test failing is `roottest/dataframe/test_glob.C`. It is not clear to me why the interpreter does not find methods like `TDataFrameImpl::Book`. Changing roottest to pass `test_glob.C+` rather than `test_glob.C` solves the problem on my machines. That is actually how the other macros are processed in `roottest/root/dataframe`. I am not sure whether this is expected behavior, so I am not sure how to proceed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/423
https://github.com/root-project/root/pull/423:26,reliability,fail,failing,26,"Alright, so the only test failing is `roottest/dataframe/test_glob.C`. It is not clear to me why the interpreter does not find methods like `TDataFrameImpl::Book`. Changing roottest to pass `test_glob.C+` rather than `test_glob.C` solves the problem on my machines. That is actually how the other macros are processed in `roottest/root/dataframe`. I am not sure whether this is expected behavior, so I am not sure how to proceed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/423
https://github.com/root-project/root/pull/423:113,reliability,doe,does,113,"Alright, so the only test failing is `roottest/dataframe/test_glob.C`. It is not clear to me why the interpreter does not find methods like `TDataFrameImpl::Book`. Changing roottest to pass `test_glob.C+` rather than `test_glob.C` solves the problem on my machines. That is actually how the other macros are processed in `roottest/root/dataframe`. I am not sure whether this is expected behavior, so I am not sure how to proceed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/423
https://github.com/root-project/root/pull/423:21,safety,test,test,21,"Alright, so the only test failing is `roottest/dataframe/test_glob.C`. It is not clear to me why the interpreter does not find methods like `TDataFrameImpl::Book`. Changing roottest to pass `test_glob.C+` rather than `test_glob.C` solves the problem on my machines. That is actually how the other macros are processed in `roottest/root/dataframe`. I am not sure whether this is expected behavior, so I am not sure how to proceed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/423
https://github.com/root-project/root/pull/423:21,testability,test,test,21,"Alright, so the only test failing is `roottest/dataframe/test_glob.C`. It is not clear to me why the interpreter does not find methods like `TDataFrameImpl::Book`. Changing roottest to pass `test_glob.C+` rather than `test_glob.C` solves the problem on my machines. That is actually how the other macros are processed in `roottest/root/dataframe`. I am not sure whether this is expected behavior, so I am not sure how to proceed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/423
https://github.com/root-project/root/pull/423:81,usability,clear,clear,81,"Alright, so the only test failing is `roottest/dataframe/test_glob.C`. It is not clear to me why the interpreter does not find methods like `TDataFrameImpl::Book`. Changing roottest to pass `test_glob.C+` rather than `test_glob.C` solves the problem on my machines. That is actually how the other macros are processed in `roottest/root/dataframe`. I am not sure whether this is expected behavior, so I am not sure how to proceed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/423
https://github.com/root-project/root/pull/423:387,usability,behavi,behavior,387,"Alright, so the only test failing is `roottest/dataframe/test_glob.C`. It is not clear to me why the interpreter does not find methods like `TDataFrameImpl::Book`. Changing roottest to pass `test_glob.C+` rather than `test_glob.C` solves the problem on my machines. That is actually how the other macros are processed in `roottest/root/dataframe`. I am not sure whether this is expected behavior, so I am not sure how to proceed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/423
https://github.com/root-project/root/pull/423:21,modifiability,refact,refactoring,21,Thanks for this fine refactoring. Merged.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/423
https://github.com/root-project/root/pull/423:21,performance,refactor,refactoring,21,Thanks for this fine refactoring. Merged.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/423
https://github.com/root-project/root/pull/425:11,deployability,build,build,11,@phsft-bot build with compiler:clang_gcc52;extra_cmake_options:-Dcxxmodules=On -DCMAKE_VERBOSE_MAKEFILE:BOOL=On -Doracle=Off!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/425
https://github.com/root-project/root/pull/425:11,deployability,build,build,11,@phsft-bot build with compiler:clang_gcc52;extra_cmake_options:-Dcxxmodules=On -DCMAKE_VERBOSE_MAKEFILE:BOOL=On -Doracle=Off!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/425
https://github.com/root-project/root/pull/425:11,deployability,build,build,11,@phsft-bot build with compiler:clang_gcc52;extra_cmake_options:-Dcxxmodules=On -DCMAKE_VERBOSE_MAKEFILE:BOOL=On -Doracle=Off!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/425
https://github.com/root-project/root/pull/425:73,availability,error,errors,73,"@Teemperor, the last build is with modules, could you have a look at the errors? I doubt they are related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/425
https://github.com/root-project/root/pull/425:21,deployability,build,build,21,"@Teemperor, the last build is with modules, could you have a look at the errors? I doubt they are related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/425
https://github.com/root-project/root/pull/425:35,deployability,modul,modules,35,"@Teemperor, the last build is with modules, could you have a look at the errors? I doubt they are related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/425
https://github.com/root-project/root/pull/425:35,modifiability,modul,modules,35,"@Teemperor, the last build is with modules, could you have a look at the errors? I doubt they are related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/425
https://github.com/root-project/root/pull/425:73,performance,error,errors,73,"@Teemperor, the last build is with modules, could you have a look at the errors? I doubt they are related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/425
https://github.com/root-project/root/pull/425:35,safety,modul,modules,35,"@Teemperor, the last build is with modules, could you have a look at the errors? I doubt they are related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/425
https://github.com/root-project/root/pull/425:73,safety,error,errors,73,"@Teemperor, the last build is with modules, could you have a look at the errors? I doubt they are related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/425
https://github.com/root-project/root/pull/425:73,usability,error,errors,73,"@Teemperor, the last build is with modules, could you have a look at the errors? I doubt they are related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/425
https://github.com/root-project/root/pull/427:10,deployability,updat,update,10,Could you update to the newest master and create a new branch (opening a new PR based on that branch) which has only commit fixing the enable_if?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/427
https://github.com/root-project/root/pull/427:10,safety,updat,update,10,Could you update to the newest master and create a new branch (opening a new PR based on that branch) which has only commit fixing the enable_if?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/427
https://github.com/root-project/root/pull/427:10,security,updat,update,10,Could you update to the newest master and create a new branch (opening a new PR based on that branch) which has only commit fixing the enable_if?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/427
https://github.com/root-project/root/pull/429:88,deployability,configurat,configuration,88,"This is no good. The setting of the HOME environment variable will be active during the configuration but not during the build of the project. In addition, this may have side effects of other configuration files that really sit in the real $HOME.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/429
https://github.com/root-project/root/pull/429:121,deployability,build,build,121,"This is no good. The setting of the HOME environment variable will be active during the configuration but not during the build of the project. In addition, this may have side effects of other configuration files that really sit in the real $HOME.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/429
https://github.com/root-project/root/pull/429:192,deployability,configurat,configuration,192,"This is no good. The setting of the HOME environment variable will be active during the configuration but not during the build of the project. In addition, this may have side effects of other configuration files that really sit in the real $HOME.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/429
https://github.com/root-project/root/pull/429:88,integrability,configur,configuration,88,"This is no good. The setting of the HOME environment variable will be active during the configuration but not during the build of the project. In addition, this may have side effects of other configuration files that really sit in the real $HOME.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/429
https://github.com/root-project/root/pull/429:192,integrability,configur,configuration,192,"This is no good. The setting of the HOME environment variable will be active during the configuration but not during the build of the project. In addition, this may have side effects of other configuration files that really sit in the real $HOME.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/429
https://github.com/root-project/root/pull/429:53,modifiability,variab,variable,53,"This is no good. The setting of the HOME environment variable will be active during the configuration but not during the build of the project. In addition, this may have side effects of other configuration files that really sit in the real $HOME.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/429
https://github.com/root-project/root/pull/429:88,modifiability,configur,configuration,88,"This is no good. The setting of the HOME environment variable will be active during the configuration but not during the build of the project. In addition, this may have side effects of other configuration files that really sit in the real $HOME.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/429
https://github.com/root-project/root/pull/429:192,modifiability,configur,configuration,192,"This is no good. The setting of the HOME environment variable will be active during the configuration but not during the build of the project. In addition, this may have side effects of other configuration files that really sit in the real $HOME.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/429
https://github.com/root-project/root/pull/429:88,security,configur,configuration,88,"This is no good. The setting of the HOME environment variable will be active during the configuration but not during the build of the project. In addition, this may have side effects of other configuration files that really sit in the real $HOME.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/429
https://github.com/root-project/root/pull/429:192,security,configur,configuration,192,"This is no good. The setting of the HOME environment variable will be active during the configuration but not during the build of the project. In addition, this may have side effects of other configuration files that really sit in the real $HOME.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/429
https://github.com/root-project/root/pull/430:21,deployability,patch,patch,21,Let's wait until the patch is landed. I believe this is a matter of hours.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:21,safety,patch,patch,21,Let's wait until the patch is landed. I believe this is a matter of hours.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:21,security,patch,patch,21,Let's wait until the patch is landed. I believe this is a matter of hours.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:52,deployability,contain,contains,52,I take that back. Why is the revision of LLVM which contains this patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:66,deployability,patch,patch,66,I take that back. Why is the revision of LLVM which contains this patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:66,safety,patch,patch,66,I take that back. Why is the revision of LLVM which contains this patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:66,security,patch,patch,66,I take that back. Why is the revision of LLVM which contains this patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:12,deployability,patch,patch,12,It's in the patch: https://reviews.llvm.org/D27609 or better https://reviews.llvm.org/rL289880,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:12,safety,patch,patch,12,It's in the patch: https://reviews.llvm.org/D27609 or better https://reviews.llvm.org/rL289880,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:27,safety,review,reviews,27,It's in the patch: https://reviews.llvm.org/D27609 or better https://reviews.llvm.org/rL289880,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:69,safety,review,reviews,69,It's in the patch: https://reviews.llvm.org/D27609 or better https://reviews.llvm.org/rL289880,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:12,security,patch,patch,12,It's in the patch: https://reviews.llvm.org/D27609 or better https://reviews.llvm.org/rL289880,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:27,testability,review,reviews,27,It's in the patch: https://reviews.llvm.org/D27609 or better https://reviews.llvm.org/rL289880,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:69,testability,review,reviews,69,It's in the patch: https://reviews.llvm.org/D27609 or better https://reviews.llvm.org/rL289880,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/430:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/430
https://github.com/root-project/root/pull/431:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/431
https://github.com/root-project/root/pull/431:21,deployability,artifact,artifact,21,The warnings seem an artifact from Vc and libstdc++-4.9 I guess. I think that should be ok.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/431
https://github.com/root-project/root/pull/432:6,interoperability,format,formatting,6,fixed formatting :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/432
https://github.com/root-project/root/pull/432:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/432
https://github.com/root-project/root/pull/432:18,availability,error,errors,18,None of the build errors seem related to this PR if I see correctly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/432
https://github.com/root-project/root/pull/432:12,deployability,build,build,12,None of the build errors seem related to this PR if I see correctly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/432
https://github.com/root-project/root/pull/432:18,performance,error,errors,18,None of the build errors seem related to this PR if I see correctly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/432
https://github.com/root-project/root/pull/432:18,safety,error,errors,18,None of the build errors seem related to this PR if I see correctly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/432
https://github.com/root-project/root/pull/432:18,usability,error,errors,18,None of the build errors seem related to this PR if I see correctly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/432
https://github.com/root-project/root/pull/432:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/432
https://github.com/root-project/root/pull/434:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/434
https://github.com/root-project/root/pull/434:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/434
https://github.com/root-project/root/pull/436:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/436:33,availability,error,errors,33,"I'm confused: are these CI build errors something I should be worried about and trying to fix? They look pretty systemic to me. I can tell you I had a successful build on my own machine with GCC 6.3.0, but I understand the need for things to be verified independently. I just don't know how to interpret what might need to be done, here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/436:27,deployability,build,build,27,"I'm confused: are these CI build errors something I should be worried about and trying to fix? They look pretty systemic to me. I can tell you I had a successful build on my own machine with GCC 6.3.0, but I understand the need for things to be verified independently. I just don't know how to interpret what might need to be done, here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/436:162,deployability,build,build,162,"I'm confused: are these CI build errors something I should be worried about and trying to fix? They look pretty systemic to me. I can tell you I had a successful build on my own machine with GCC 6.3.0, but I understand the need for things to be verified independently. I just don't know how to interpret what might need to be done, here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/436:33,performance,error,errors,33,"I'm confused: are these CI build errors something I should be worried about and trying to fix? They look pretty systemic to me. I can tell you I had a successful build on my own machine with GCC 6.3.0, but I understand the need for things to be verified independently. I just don't know how to interpret what might need to be done, here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/436:33,safety,error,errors,33,"I'm confused: are these CI build errors something I should be worried about and trying to fix? They look pretty systemic to me. I can tell you I had a successful build on my own machine with GCC 6.3.0, but I understand the need for things to be verified independently. I just don't know how to interpret what might need to be done, here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/436:208,testability,understand,understand,208,"I'm confused: are these CI build errors something I should be worried about and trying to fix? They look pretty systemic to me. I can tell you I had a successful build on my own machine with GCC 6.3.0, but I understand the need for things to be verified independently. I just don't know how to interpret what might need to be done, here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/436:245,testability,verif,verified,245,"I'm confused: are these CI build errors something I should be worried about and trying to fix? They look pretty systemic to me. I can tell you I had a successful build on my own machine with GCC 6.3.0, but I understand the need for things to be verified independently. I just don't know how to interpret what might need to be done, here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/436:33,usability,error,errors,33,"I'm confused: are these CI build errors something I should be worried about and trying to fix? They look pretty systemic to me. I can tell you I had a successful build on my own machine with GCC 6.3.0, but I understand the need for things to be verified independently. I just don't know how to interpret what might need to be done, here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/436:55,deployability,infrastructur,infrastructural,55,"Don't spend your time on this, Chris - this looks like infrastructural breakage...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/436:17,performance,time,time,17,"Don't spend your time on this, Chris - this looks like infrastructural breakage...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/436:27,deployability,patch,patches,27,It is running the v6-08-00-patches branch **root** on the master of **roottest**. This is something we need to fix in the Jenkins bot.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/436:27,safety,patch,patches,27,It is running the v6-08-00-patches branch **root** on the master of **roottest**. This is something we need to fix in the Jenkins bot.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/436:27,security,patch,patches,27,It is running the v6-08-00-patches branch **root** on the master of **roottest**. This is something we need to fix in the Jenkins bot.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/436:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/436:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/436:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/436
https://github.com/root-project/root/pull/438:43,deployability,patch,patch,43,"Hi @martinmine thanks. @ashlaban , is your patch to optimise this upstream and tested on the arm64 boxes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/438
https://github.com/root-project/root/pull/438:52,energy efficiency,optim,optimise,52,"Hi @martinmine thanks. @ashlaban , is your patch to optimise this upstream and tested on the arm64 boxes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/438
https://github.com/root-project/root/pull/438:43,safety,patch,patch,43,"Hi @martinmine thanks. @ashlaban , is your patch to optimise this upstream and tested on the arm64 boxes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/438
https://github.com/root-project/root/pull/438:79,safety,test,tested,79,"Hi @martinmine thanks. @ashlaban , is your patch to optimise this upstream and tested on the arm64 boxes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/438
https://github.com/root-project/root/pull/438:43,security,patch,patch,43,"Hi @martinmine thanks. @ashlaban , is your patch to optimise this upstream and tested on the arm64 boxes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/438
https://github.com/root-project/root/pull/438:79,testability,test,tested,79,"Hi @martinmine thanks. @ashlaban , is your patch to optimise this upstream and tested on the arm64 boxes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/438
https://github.com/root-project/root/pull/438:17,deployability,patch,patch,17,"Hi @dpiparo, the patch is PR #443.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/438
https://github.com/root-project/root/pull/438:17,safety,patch,patch,17,"Hi @dpiparo, the patch is PR #443.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/438
https://github.com/root-project/root/pull/438:17,security,patch,patch,17,"Hi @dpiparo, the patch is PR #443.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/438
https://github.com/root-project/root/pull/438:5,safety,test,test,5,I'll test it tomorrow on ARM and see how it goes with the tutorial @dpiparo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/438
https://github.com/root-project/root/pull/438:5,testability,test,test,5,I'll test it tomorrow on ARM and see how it goes with the tutorial @dpiparo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/438
https://github.com/root-project/root/pull/438:36,deployability,patch,patch,36,"@dpiparo @ashlaban I've applied the patch on ARM, but the tutorial behavior didn't change. I'll have a closer look later today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/438
https://github.com/root-project/root/pull/438:36,safety,patch,patch,36,"@dpiparo @ashlaban I've applied the patch on ARM, but the tutorial behavior didn't change. I'll have a closer look later today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/438
https://github.com/root-project/root/pull/438:36,security,patch,patch,36,"@dpiparo @ashlaban I've applied the patch on ARM, but the tutorial behavior didn't change. I'll have a closer look later today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/438
https://github.com/root-project/root/pull/438:67,usability,behavi,behavior,67,"@dpiparo @ashlaban I've applied the patch on ARM, but the tutorial behavior didn't change. I'll have a closer look later today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/438
https://github.com/root-project/root/pull/438:103,usability,close,closer,103,"@dpiparo @ashlaban I've applied the patch on ARM, but the tutorial behavior didn't change. I'll have a closer look later today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/438
https://github.com/root-project/root/pull/439:128,modifiability,variab,variable,128,"Hi @martinmine ,. great fix! I wonder if we could leave for x86_64 the code as is and change only for ARM with the preprocessor variable (#if defined(__arm__) ...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/439
https://github.com/root-project/root/pull/439:33,interoperability,specif,specific,33,"Thanks @dpiparo, the code is now specific to arm, arm64, and aarch64.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/439
https://github.com/root-project/root/pull/440:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/440
https://github.com/root-project/root/pull/441:38,safety,test,tests,38,May I please know as to what kinds of tests are these? It works fine on my machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/441:38,testability,test,tests,38,May I please know as to what kinds of tests are these? It works fine on my machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/441:165,deployability,build,builds,165,"Hi @vgvassilev ,. Following are the kinds of additional lines that I see added to the original code when I clicked [Details](https://travis-ci.org/root-project/root/builds/212649006). diff --git a/tmva/pymva/src/MethodPyRFOneVsRest.cxx b/tmva/pymva/src/MethodPyRFOneVsRest.cxx. index b1113d1..9b41b39 100644. --- a/tmva/pymva/src/MethodPyRFOneVsRest.cxx. +++ b/tmva/pymva/src/MethodPyRFOneVsRest.cxx. @@ -16,7 +16,7 @@. Similar lines are added all over. Rest of the code looks more like an output of `git diff`. I am unable to understand, how to interpret these additional added lines and how to understand my mistakes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/441:527,testability,understand,understand,527,"Hi @vgvassilev ,. Following are the kinds of additional lines that I see added to the original code when I clicked [Details](https://travis-ci.org/root-project/root/builds/212649006). diff --git a/tmva/pymva/src/MethodPyRFOneVsRest.cxx b/tmva/pymva/src/MethodPyRFOneVsRest.cxx. index b1113d1..9b41b39 100644. --- a/tmva/pymva/src/MethodPyRFOneVsRest.cxx. +++ b/tmva/pymva/src/MethodPyRFOneVsRest.cxx. @@ -16,7 +16,7 @@. Similar lines are added all over. Rest of the code looks more like an output of `git diff`. I am unable to understand, how to interpret these additional added lines and how to understand my mistakes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/441:596,testability,understand,understand,596,"Hi @vgvassilev ,. Following are the kinds of additional lines that I see added to the original code when I clicked [Details](https://travis-ci.org/root-project/root/builds/212649006). diff --git a/tmva/pymva/src/MethodPyRFOneVsRest.cxx b/tmva/pymva/src/MethodPyRFOneVsRest.cxx. index b1113d1..9b41b39 100644. --- a/tmva/pymva/src/MethodPyRFOneVsRest.cxx. +++ b/tmva/pymva/src/MethodPyRFOneVsRest.cxx. @@ -16,7 +16,7 @@. Similar lines are added all over. Rest of the code looks more like an output of `git diff`. I am unable to understand, how to interpret these additional added lines and how to understand my mistakes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/441:11,deployability,build,build,11,"@phsft-bot build! @satyarth934, it seems you found your way around this. The idea of the diff is that you can apply it without having clang format. You just open the log file in plain text copy the diff, store it on your machine and apply it with git apply.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/441:166,deployability,log,log,166,"@phsft-bot build! @satyarth934, it seems you found your way around this. The idea of the diff is that you can apply it without having clang format. You just open the log file in plain text copy the diff, store it on your machine and apply it with git apply.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/441:140,interoperability,format,format,140,"@phsft-bot build! @satyarth934, it seems you found your way around this. The idea of the diff is that you can apply it without having clang format. You just open the log file in plain text copy the diff, store it on your machine and apply it with git apply.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/441:166,safety,log,log,166,"@phsft-bot build! @satyarth934, it seems you found your way around this. The idea of the diff is that you can apply it without having clang format. You just open the log file in plain text copy the diff, store it on your machine and apply it with git apply.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/441:166,security,log,log,166,"@phsft-bot build! @satyarth934, it seems you found your way around this. The idea of the diff is that you can apply it without having clang format. You just open the log file in plain text copy the diff, store it on your machine and apply it with git apply.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/441:166,testability,log,log,166,"@phsft-bot build! @satyarth934, it seems you found your way around this. The idea of the diff is that you can apply it without having clang format. You just open the log file in plain text copy the diff, store it on your machine and apply it with git apply.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/441:57,interoperability,architectur,architecture,57,"Dear @satyarth934 . This implementation is not under the architecture and design of TMVA, you dont need to create a new class to add support for multiclass in RandomForest for PyMVA. . In the same class MethodPyRandomForest we must support regression, two class classification, multiclass-classification and variable ranking. You can see how @stwunsch give support for multiclass-classification in AdaBoost by example . https://github.com/root-project/root/pull/343/commits/a35fdf63205e75ed7ad7affff502c0a83afb94bd. and may you want to rewrite you code according to TMVA design. Cheers. Omar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/441:308,modifiability,variab,variable,308,"Dear @satyarth934 . This implementation is not under the architecture and design of TMVA, you dont need to create a new class to add support for multiclass in RandomForest for PyMVA. . In the same class MethodPyRandomForest we must support regression, two class classification, multiclass-classification and variable ranking. You can see how @stwunsch give support for multiclass-classification in AdaBoost by example . https://github.com/root-project/root/pull/343/commits/a35fdf63205e75ed7ad7affff502c0a83afb94bd. and may you want to rewrite you code according to TMVA design. Cheers. Omar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/441:240,testability,regress,regression,240,"Dear @satyarth934 . This implementation is not under the architecture and design of TMVA, you dont need to create a new class to add support for multiclass in RandomForest for PyMVA. . In the same class MethodPyRandomForest we must support regression, two class classification, multiclass-classification and variable ranking. You can see how @stwunsch give support for multiclass-classification in AdaBoost by example . https://github.com/root-project/root/pull/343/commits/a35fdf63205e75ed7ad7affff502c0a83afb94bd. and may you want to rewrite you code according to TMVA design. Cheers. Omar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/441:133,usability,support,support,133,"Dear @satyarth934 . This implementation is not under the architecture and design of TMVA, you dont need to create a new class to add support for multiclass in RandomForest for PyMVA. . In the same class MethodPyRandomForest we must support regression, two class classification, multiclass-classification and variable ranking. You can see how @stwunsch give support for multiclass-classification in AdaBoost by example . https://github.com/root-project/root/pull/343/commits/a35fdf63205e75ed7ad7affff502c0a83afb94bd. and may you want to rewrite you code according to TMVA design. Cheers. Omar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/441:232,usability,support,support,232,"Dear @satyarth934 . This implementation is not under the architecture and design of TMVA, you dont need to create a new class to add support for multiclass in RandomForest for PyMVA. . In the same class MethodPyRandomForest we must support regression, two class classification, multiclass-classification and variable ranking. You can see how @stwunsch give support for multiclass-classification in AdaBoost by example . https://github.com/root-project/root/pull/343/commits/a35fdf63205e75ed7ad7affff502c0a83afb94bd. and may you want to rewrite you code according to TMVA design. Cheers. Omar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/441:357,usability,support,support,357,"Dear @satyarth934 . This implementation is not under the architecture and design of TMVA, you dont need to create a new class to add support for multiclass in RandomForest for PyMVA. . In the same class MethodPyRandomForest we must support regression, two class classification, multiclass-classification and variable ranking. You can see how @stwunsch give support for multiclass-classification in AdaBoost by example . https://github.com/root-project/root/pull/343/commits/a35fdf63205e75ed7ad7affff502c0a83afb94bd. and may you want to rewrite you code according to TMVA design. Cheers. Omar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/441
https://github.com/root-project/root/pull/442:25,safety,test,testing,25,Merged after some manual testing. Thanks a lot for this great development!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/442
https://github.com/root-project/root/pull/442:25,testability,test,testing,25,Merged after some manual testing. Thanks a lot for this great development!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/442
https://github.com/root-project/root/pull/443:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/443
https://github.com/root-project/root/pull/443:24,performance,time,time,24,"Yes, it is. Finally had time to put in the final touches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/443
https://github.com/root-project/root/pull/443:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/443
https://github.com/root-project/root/pull/445:221,modifiability,pac,package,221,"@cjones051073, I spent some time to investigate your header inclusion problem and here is a fix. Please let me know if you have any comments about this PR. Using this pattern, we can easily vectorize the rest of the Math package by simply turning all qualified ids of vectorizable functions to unqualified (eg. std::sqrt -> sqrt). @lmoneta, this was the fix I was talking about earlier this week. The code example in the PR was developed with @Axel-Naumann. PS: The key changes are done in math/mathcore/inc/Math/Math.h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:28,performance,time,time,28,"@cjones051073, I spent some time to investigate your header inclusion problem and here is a fix. Please let me know if you have any comments about this PR. Using this pattern, we can easily vectorize the rest of the Math package by simply turning all qualified ids of vectorizable functions to unqualified (eg. std::sqrt -> sqrt). @lmoneta, this was the fix I was talking about earlier this week. The code example in the PR was developed with @Axel-Naumann. PS: The key changes are done in math/mathcore/inc/Math/Math.h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:232,testability,simpl,simply,232,"@cjones051073, I spent some time to investigate your header inclusion problem and here is a fix. Please let me know if you have any comments about this PR. Using this pattern, we can easily vectorize the rest of the Math package by simply turning all qualified ids of vectorizable functions to unqualified (eg. std::sqrt -> sqrt). @lmoneta, this was the fix I was talking about earlier this week. The code example in the PR was developed with @Axel-Naumann. PS: The key changes are done in math/mathcore/inc/Math/Math.h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:232,usability,simpl,simply,232,"@cjones051073, I spent some time to investigate your header inclusion problem and here is a fix. Please let me know if you have any comments about this PR. Using this pattern, we can easily vectorize the rest of the Math package by simply turning all qualified ids of vectorizable functions to unqualified (eg. std::sqrt -> sqrt). @lmoneta, this was the fix I was talking about earlier this week. The code example in the PR was developed with @Axel-Naumann. PS: The key changes are done in math/mathcore/inc/Math/Math.h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:178,deployability,patch,patch,178,"For the record:. This is /not/ ADL. ADL pulls in namespaces not considered during regular look; Vc provides `sqrt` in `std` which means we can find it without ADL. Instead, this patch leaves the function names in the calls as dependent names, because they are not qualified. That allows the lookup to be delayed until template instantiation, at which point the Vc overloads are visible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:226,deployability,depend,dependent,226,"For the record:. This is /not/ ADL. ADL pulls in namespaces not considered during regular look; Vc provides `sqrt` in `std` which means we can find it without ADL. Instead, this patch leaves the function names in the calls as dependent names, because they are not qualified. That allows the lookup to be delayed until template instantiation, at which point the Vc overloads are visible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:226,integrability,depend,dependent,226,"For the record:. This is /not/ ADL. ADL pulls in namespaces not considered during regular look; Vc provides `sqrt` in `std` which means we can find it without ADL. Instead, this patch leaves the function names in the calls as dependent names, because they are not qualified. That allows the lookup to be delayed until template instantiation, at which point the Vc overloads are visible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:226,modifiability,depend,dependent,226,"For the record:. This is /not/ ADL. ADL pulls in namespaces not considered during regular look; Vc provides `sqrt` in `std` which means we can find it without ADL. Instead, this patch leaves the function names in the calls as dependent names, because they are not qualified. That allows the lookup to be delayed until template instantiation, at which point the Vc overloads are visible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:178,safety,patch,patch,178,"For the record:. This is /not/ ADL. ADL pulls in namespaces not considered during regular look; Vc provides `sqrt` in `std` which means we can find it without ADL. Instead, this patch leaves the function names in the calls as dependent names, because they are not qualified. That allows the lookup to be delayed until template instantiation, at which point the Vc overloads are visible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:226,safety,depend,dependent,226,"For the record:. This is /not/ ADL. ADL pulls in namespaces not considered during regular look; Vc provides `sqrt` in `std` which means we can find it without ADL. Instead, this patch leaves the function names in the calls as dependent names, because they are not qualified. That allows the lookup to be delayed until template instantiation, at which point the Vc overloads are visible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:178,security,patch,patch,178,"For the record:. This is /not/ ADL. ADL pulls in namespaces not considered during regular look; Vc provides `sqrt` in `std` which means we can find it without ADL. Instead, this patch leaves the function names in the calls as dependent names, because they are not qualified. That allows the lookup to be delayed until template instantiation, at which point the Vc overloads are visible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:226,testability,depend,dependent,226,"For the record:. This is /not/ ADL. ADL pulls in namespaces not considered during regular look; Vc provides `sqrt` in `std` which means we can find it without ADL. Instead, this patch leaves the function names in the calls as dependent names, because they are not qualified. That allows the lookup to be delayed until template instantiation, at which point the Vc overloads are visible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:57,deployability,patch,patch,57,"I don't understand what your comment has to do with this patch? The bottom line: removing the `std::` keeps these names dependent, delaying the lookup to the point where Vc's overload of `std::sqrt` is defined (namely to the template instantiation).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:120,deployability,depend,dependent,120,"I don't understand what your comment has to do with this patch? The bottom line: removing the `std::` keeps these names dependent, delaying the lookup to the point where Vc's overload of `std::sqrt` is defined (namely to the template instantiation).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:120,integrability,depend,dependent,120,"I don't understand what your comment has to do with this patch? The bottom line: removing the `std::` keeps these names dependent, delaying the lookup to the point where Vc's overload of `std::sqrt` is defined (namely to the template instantiation).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:120,modifiability,depend,dependent,120,"I don't understand what your comment has to do with this patch? The bottom line: removing the `std::` keeps these names dependent, delaying the lookup to the point where Vc's overload of `std::sqrt` is defined (namely to the template instantiation).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:57,safety,patch,patch,57,"I don't understand what your comment has to do with this patch? The bottom line: removing the `std::` keeps these names dependent, delaying the lookup to the point where Vc's overload of `std::sqrt` is defined (namely to the template instantiation).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:120,safety,depend,dependent,120,"I don't understand what your comment has to do with this patch? The bottom line: removing the `std::` keeps these names dependent, delaying the lookup to the point where Vc's overload of `std::sqrt` is defined (namely to the template instantiation).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:57,security,patch,patch,57,"I don't understand what your comment has to do with this patch? The bottom line: removing the `std::` keeps these names dependent, delaying the lookup to the point where Vc's overload of `std::sqrt` is defined (namely to the template instantiation).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:8,testability,understand,understand,8,"I don't understand what your comment has to do with this patch? The bottom line: removing the `std::` keeps these names dependent, delaying the lookup to the point where Vc's overload of `std::sqrt` is defined (namely to the template instantiation).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/445:120,testability,depend,dependent,120,"I don't understand what your comment has to do with this patch? The bottom line: removing the `std::` keeps these names dependent, delaying the lookup to the point where Vc's overload of `std::sqrt` is defined (namely to the template instantiation).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/445
https://github.com/root-project/root/pull/446:11,deployability,build,build,11,"@phsft-bot build! but something is wrong with travis ci, can I merge it anyway?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/446
https://github.com/root-project/root/pull/446:180,interoperability,format,format,180,"@omazapa the quickest fix is copy-pasting the diff from the output of the travis bot to a new file in your local root repo, and running a `git apply` on it. You can also run clang-format yourself. I think you will need at least v3.8, and the bot suggests the following commands:. ```. git checkout master. git-clang-format --commit 1230f79df89e95687659859cad39c9fd2e48f4eb --diff --binary clang-format. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/446
https://github.com/root-project/root/pull/446:316,interoperability,format,format,316,"@omazapa the quickest fix is copy-pasting the diff from the output of the travis bot to a new file in your local root repo, and running a `git apply` on it. You can also run clang-format yourself. I think you will need at least v3.8, and the bot suggests the following commands:. ```. git checkout master. git-clang-format --commit 1230f79df89e95687659859cad39c9fd2e48f4eb --diff --binary clang-format. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/446
https://github.com/root-project/root/pull/446:395,interoperability,format,format,395,"@omazapa the quickest fix is copy-pasting the diff from the output of the travis bot to a new file in your local root repo, and running a `git apply` on it. You can also run clang-format yourself. I think you will need at least v3.8, and the bot suggests the following commands:. ```. git checkout master. git-clang-format --commit 1230f79df89e95687659859cad39c9fd2e48f4eb --diff --binary clang-format. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/446
https://github.com/root-project/root/pull/446:269,usability,command,commands,269,"@omazapa the quickest fix is copy-pasting the diff from the output of the travis bot to a new file in your local root repo, and running a `git apply` on it. You can also run clang-format yourself. I think you will need at least v3.8, and the bot suggests the following commands:. ```. git checkout master. git-clang-format --commit 1230f79df89e95687659859cad39c9fd2e48f4eb --diff --binary clang-format. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/446
https://github.com/root-project/root/pull/446:107,deployability,automat,automatically,107,`git-clang-format --commit 1230f79df89e95687659859cad39c9fd2e48f4eb --binary clang-format` even applies it automatically.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/446
https://github.com/root-project/root/pull/446:11,interoperability,format,format,11,`git-clang-format --commit 1230f79df89e95687659859cad39c9fd2e48f4eb --binary clang-format` even applies it automatically.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/446
https://github.com/root-project/root/pull/446:83,interoperability,format,format,83,`git-clang-format --commit 1230f79df89e95687659859cad39c9fd2e48f4eb --binary clang-format` even applies it automatically.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/446
https://github.com/root-project/root/pull/446:107,testability,automat,automatically,107,`git-clang-format --commit 1230f79df89e95687659859cad39c9fd2e48f4eb --binary clang-format` even applies it automatically.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/446
https://github.com/root-project/root/pull/446:78,interoperability,format,format,78,Perhaps you will need to rebase this PR because we changed a little the clang-format policy today.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/446
https://github.com/root-project/root/pull/446:85,security,polic,policy,85,Perhaps you will need to rebase this PR because we changed a little the clang-format policy today.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/446
https://github.com/root-project/root/pull/446:50,deployability,updat,update,50,"Thanks @vgvassilev and @bluehood. Sure, I will to update the code. My bests! .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/446
https://github.com/root-project/root/pull/446:50,safety,updat,update,50,"Thanks @vgvassilev and @bluehood. Sure, I will to update the code. My bests! .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/446
https://github.com/root-project/root/pull/446:50,security,updat,update,50,"Thanks @vgvassilev and @bluehood. Sure, I will to update the code. My bests! .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/446
https://github.com/root-project/root/pull/447:11,deployability,build,build,11,@phsft-bot build with compiler:clang_gcc52;extra_cmake_options:-Dcxxmodules=On -DCMAKE_VERBOSE_MAKEFILE:BOOL=On -Doracle=Off!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/447
https://github.com/root-project/root/pull/447:23,availability,failur,failures,23,Looks good despite the failures (they are due to another issue).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/447
https://github.com/root-project/root/pull/447:23,deployability,fail,failures,23,Looks good despite the failures (they are due to another issue).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/447
https://github.com/root-project/root/pull/447:23,performance,failur,failures,23,Looks good despite the failures (they are due to another issue).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/447
https://github.com/root-project/root/pull/447:23,reliability,fail,failures,23,Looks good despite the failures (they are due to another issue).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/447
https://github.com/root-project/root/pull/449:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/449
https://github.com/root-project/root/pull/450:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:38,performance,time,time,38,"Awesome, thanks a lot for taking your time looking into this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:63,safety,avoid,avoid,63,Hi @ashlaban : what quantity ends up being a nan? Maybe we can avoid this with a few checks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:16,energy efficiency,optim,optimiser,16,"@dpiparo The GA optimiser uses ```toMinimize``` in ```ResultsMulticlass::EstimatorFunction``` to evaluate the fitness. This variable ended up being ```NaN``` if ```effTimesPur``` was very close to zero because of the assignment ```toMinimize = 1. / effTimesPur```. The already existing check is extended to avoid this situation (an ```std::isnan``` does not work since we compile with -ffast-math). I also verified that ```1. / std::numeric_limits<float>::min()``` does not generate a ```NaN```, so the function should be safe now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:73,energy efficiency,Estimat,EstimatorFunction,73,"@dpiparo The GA optimiser uses ```toMinimize``` in ```ResultsMulticlass::EstimatorFunction``` to evaluate the fitness. This variable ended up being ```NaN``` if ```effTimesPur``` was very close to zero because of the assignment ```toMinimize = 1. / effTimesPur```. The already existing check is extended to avoid this situation (an ```std::isnan``` does not work since we compile with -ffast-math). I also verified that ```1. / std::numeric_limits<float>::min()``` does not generate a ```NaN```, so the function should be safe now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:124,modifiability,variab,variable,124,"@dpiparo The GA optimiser uses ```toMinimize``` in ```ResultsMulticlass::EstimatorFunction``` to evaluate the fitness. This variable ended up being ```NaN``` if ```effTimesPur``` was very close to zero because of the assignment ```toMinimize = 1. / effTimesPur```. The already existing check is extended to avoid this situation (an ```std::isnan``` does not work since we compile with -ffast-math). I also verified that ```1. / std::numeric_limits<float>::min()``` does not generate a ```NaN```, so the function should be safe now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:295,modifiability,exten,extended,295,"@dpiparo The GA optimiser uses ```toMinimize``` in ```ResultsMulticlass::EstimatorFunction``` to evaluate the fitness. This variable ended up being ```NaN``` if ```effTimesPur``` was very close to zero because of the assignment ```toMinimize = 1. / effTimesPur```. The already existing check is extended to avoid this situation (an ```std::isnan``` does not work since we compile with -ffast-math). I also verified that ```1. / std::numeric_limits<float>::min()``` does not generate a ```NaN```, so the function should be safe now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:349,reliability,doe,does,349,"@dpiparo The GA optimiser uses ```toMinimize``` in ```ResultsMulticlass::EstimatorFunction``` to evaluate the fitness. This variable ended up being ```NaN``` if ```effTimesPur``` was very close to zero because of the assignment ```toMinimize = 1. / effTimesPur```. The already existing check is extended to avoid this situation (an ```std::isnan``` does not work since we compile with -ffast-math). I also verified that ```1. / std::numeric_limits<float>::min()``` does not generate a ```NaN```, so the function should be safe now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:465,reliability,doe,does,465,"@dpiparo The GA optimiser uses ```toMinimize``` in ```ResultsMulticlass::EstimatorFunction``` to evaluate the fitness. This variable ended up being ```NaN``` if ```effTimesPur``` was very close to zero because of the assignment ```toMinimize = 1. / effTimesPur```. The already existing check is extended to avoid this situation (an ```std::isnan``` does not work since we compile with -ffast-math). I also verified that ```1. / std::numeric_limits<float>::min()``` does not generate a ```NaN```, so the function should be safe now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:307,safety,avoid,avoid,307,"@dpiparo The GA optimiser uses ```toMinimize``` in ```ResultsMulticlass::EstimatorFunction``` to evaluate the fitness. This variable ended up being ```NaN``` if ```effTimesPur``` was very close to zero because of the assignment ```toMinimize = 1. / effTimesPur```. The already existing check is extended to avoid this situation (an ```std::isnan``` does not work since we compile with -ffast-math). I also verified that ```1. / std::numeric_limits<float>::min()``` does not generate a ```NaN```, so the function should be safe now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:522,safety,safe,safe,522,"@dpiparo The GA optimiser uses ```toMinimize``` in ```ResultsMulticlass::EstimatorFunction``` to evaluate the fitness. This variable ended up being ```NaN``` if ```effTimesPur``` was very close to zero because of the assignment ```toMinimize = 1. / effTimesPur```. The already existing check is extended to avoid this situation (an ```std::isnan``` does not work since we compile with -ffast-math). I also verified that ```1. / std::numeric_limits<float>::min()``` does not generate a ```NaN```, so the function should be safe now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:406,testability,verif,verified,406,"@dpiparo The GA optimiser uses ```toMinimize``` in ```ResultsMulticlass::EstimatorFunction``` to evaluate the fitness. This variable ended up being ```NaN``` if ```effTimesPur``` was very close to zero because of the assignment ```toMinimize = 1. / effTimesPur```. The already existing check is extended to avoid this situation (an ```std::isnan``` does not work since we compile with -ffast-math). I also verified that ```1. / std::numeric_limits<float>::min()``` does not generate a ```NaN```, so the function should be safe now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:188,usability,close,close,188,"@dpiparo The GA optimiser uses ```toMinimize``` in ```ResultsMulticlass::EstimatorFunction``` to evaluate the fitness. This variable ended up being ```NaN``` if ```effTimesPur``` was very close to zero because of the assignment ```toMinimize = 1. / effTimesPur```. The already existing check is extended to avoid this situation (an ```std::isnan``` does not work since we compile with -ffast-math). I also verified that ```1. / std::numeric_limits<float>::min()``` does not generate a ```NaN```, so the function should be safe now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:300,availability,state,statement,300,"Hi @ashlaban,. it's true: std::isnan does not work. For this reason, in ROOT, we have [TMath::IsNan](https://root.cern/doc/master/namespaceTMath.html#a49cbe370eb6f63c44a923b5ab9388dc6) :) . I am not sure this solves this very problem though. In any case I would protect this code with a preprocessor statement in order to activate it on arm only if you agree.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:300,integrability,state,statement,300,"Hi @ashlaban,. it's true: std::isnan does not work. For this reason, in ROOT, we have [TMath::IsNan](https://root.cern/doc/master/namespaceTMath.html#a49cbe370eb6f63c44a923b5ab9388dc6) :) . I am not sure this solves this very problem though. In any case I would protect this code with a preprocessor statement in order to activate it on arm only if you agree.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:37,reliability,doe,does,37,"Hi @ashlaban,. it's true: std::isnan does not work. For this reason, in ROOT, we have [TMath::IsNan](https://root.cern/doc/master/namespaceTMath.html#a49cbe370eb6f63c44a923b5ab9388dc6) :) . I am not sure this solves this very problem though. In any case I would protect this code with a preprocessor statement in order to activate it on arm only if you agree.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:500,deployability,patch,patch,500,"Hi @dpiparo,. Ah! That is good to know! I definitely think this solves one of the problems on the arm platform, could we be talking about different issues? Regarding the preprocessor protect:. The change really should not make a difference with respect to the output regardless of platform. If the score of the particular cut so bad that this fix makes a difference we either:. - find a better cut value and forget about this one or,. - this is a solution that would not have been chosen without the patch, but both of these solutions are really really really bad so it doesn't matter which ones we choose. So since I don't think it will matter either way, feel free to do as you feel best. One point is that the code flow will be more clear, in my mind, without any preprocessor branching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:102,interoperability,platform,platform,102,"Hi @dpiparo,. Ah! That is good to know! I definitely think this solves one of the problems on the arm platform, could we be talking about different issues? Regarding the preprocessor protect:. The change really should not make a difference with respect to the output regardless of platform. If the score of the particular cut so bad that this fix makes a difference we either:. - find a better cut value and forget about this one or,. - this is a solution that would not have been chosen without the patch, but both of these solutions are really really really bad so it doesn't matter which ones we choose. So since I don't think it will matter either way, feel free to do as you feel best. One point is that the code flow will be more clear, in my mind, without any preprocessor branching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:281,interoperability,platform,platform,281,"Hi @dpiparo,. Ah! That is good to know! I definitely think this solves one of the problems on the arm platform, could we be talking about different issues? Regarding the preprocessor protect:. The change really should not make a difference with respect to the output regardless of platform. If the score of the particular cut so bad that this fix makes a difference we either:. - find a better cut value and forget about this one or,. - this is a solution that would not have been chosen without the patch, but both of these solutions are really really really bad so it doesn't matter which ones we choose. So since I don't think it will matter either way, feel free to do as you feel best. One point is that the code flow will be more clear, in my mind, without any preprocessor branching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:570,reliability,doe,doesn,570,"Hi @dpiparo,. Ah! That is good to know! I definitely think this solves one of the problems on the arm platform, could we be talking about different issues? Regarding the preprocessor protect:. The change really should not make a difference with respect to the output regardless of platform. If the score of the particular cut so bad that this fix makes a difference we either:. - find a better cut value and forget about this one or,. - this is a solution that would not have been chosen without the patch, but both of these solutions are really really really bad so it doesn't matter which ones we choose. So since I don't think it will matter either way, feel free to do as you feel best. One point is that the code flow will be more clear, in my mind, without any preprocessor branching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:500,safety,patch,patch,500,"Hi @dpiparo,. Ah! That is good to know! I definitely think this solves one of the problems on the arm platform, could we be talking about different issues? Regarding the preprocessor protect:. The change really should not make a difference with respect to the output regardless of platform. If the score of the particular cut so bad that this fix makes a difference we either:. - find a better cut value and forget about this one or,. - this is a solution that would not have been chosen without the patch, but both of these solutions are really really really bad so it doesn't matter which ones we choose. So since I don't think it will matter either way, feel free to do as you feel best. One point is that the code flow will be more clear, in my mind, without any preprocessor branching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:500,security,patch,patch,500,"Hi @dpiparo,. Ah! That is good to know! I definitely think this solves one of the problems on the arm platform, could we be talking about different issues? Regarding the preprocessor protect:. The change really should not make a difference with respect to the output regardless of platform. If the score of the particular cut so bad that this fix makes a difference we either:. - find a better cut value and forget about this one or,. - this is a solution that would not have been chosen without the patch, but both of these solutions are really really really bad so it doesn't matter which ones we choose. So since I don't think it will matter either way, feel free to do as you feel best. One point is that the code flow will be more clear, in my mind, without any preprocessor branching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:736,usability,clear,clear,736,"Hi @dpiparo,. Ah! That is good to know! I definitely think this solves one of the problems on the arm platform, could we be talking about different issues? Regarding the preprocessor protect:. The change really should not make a difference with respect to the output regardless of platform. If the score of the particular cut so bad that this fix makes a difference we either:. - find a better cut value and forget about this one or,. - this is a solution that would not have been chosen without the patch, but both of these solutions are really really really bad so it doesn't matter which ones we choose. So since I don't think it will matter either way, feel free to do as you feel best. One point is that the code flow will be more clear, in my mind, without any preprocessor branching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:124,availability,state,statements,124,"Hi,. if the numerical stability of the algorithm is guaranteed, I am in favour of not cluttering the code with preprocessor statements 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:124,integrability,state,statements,124,"Hi,. if the numerical stability of the algorithm is guaranteed, I am in favour of not cluttering the code with preprocessor statements 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:22,reliability,stabil,stability,22,"Hi,. if the numerical stability of the algorithm is guaranteed, I am in favour of not cluttering the code with preprocessor statements 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/450:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/450
https://github.com/root-project/root/pull/451:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:126,deployability,build,build,126,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:197,deployability,build,build,197,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:282,deployability,build,build,282,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:331,deployability,build,build,331,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:359,deployability,modul,modules,359,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:359,modifiability,modul,modules,359,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:90,reliability,doe,does,90,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:73,safety,test,testSpecFuncErf,73,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:105,safety,Test,Test,105,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:242,safety,test,test,242,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:247,safety,test,testSpecFuncErf,247,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:359,safety,modul,modules,359,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:782,safety,test,tests,782,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:73,testability,test,testSpecFuncErf,73,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:105,testability,Test,Test,105,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:242,testability,test,test,242,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:247,testability,test,testSpecFuncErf,247,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:782,testability,test,tests,782,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:110,usability,command,command,110,"Re the question ""do we need to set env or not"":. `$ ctest -V -R mathcore-testSpecFuncErf` does. ```. 17: Test command: /mnt/a/build/local/cmake/cmake-3.7.1-Linux-x86_64/bin/cmake ""-DCMD=/home/axel/build/root/github/cmake-reldeb/math/mathcore/test/testSpecFuncErf"" ""-DSYS=/home/axel/build/root/github/cmake-reldeb"" ""-P"" ""/home/axel/build/root/github/src/cmake/modules/RootTestDriver.cmake"". ```. That in turn sets. ```. if(SYS). if(WIN32). file(TO_NATIVE_PATH ${SYS}/bin _path). set(ENV{PATH} ""${_path};$ENV{PATH}""). elseif(APPLE). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{DYLD_LIBRARY_PATH} ${SYS}/lib:$ENV{DYLD_LIBRARY_PATH}). else(). set(ENV{PATH} ${SYS}/bin:$ENV{PATH}). set(ENV{LD_LIBRARY_PATH} ${SYS}/lib:$ENV{LD_LIBRARY_PATH}). endif(). endif(). ```. So as long as these tests run through RootTestDriver.cmake we should be good. Do they?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:268,deployability,build,build,268,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:376,deployability,build,build,376,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:424,deployability,BUILD,BUILDTYPE,424,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:434,deployability,Releas,Release,434,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:468,deployability,build,build,468,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:168,energy efficiency,load,loaded,168,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:196,energy efficiency,load,load,196,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:168,performance,load,loaded,168,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:196,performance,load,load,196,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:205,safety,test,test,205,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:226,safety,test,test,226,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:330,safety,test,test,330,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:335,safety,test,testSpecFuncErf,335,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:205,testability,test,test,205,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:226,testability,test,test,226,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:330,testability,test,test,330,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:335,testability,test,testSpecFuncErf,335,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:. ```. $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH. RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:25,deployability,depend,depend,25,"IMO, the unittest should depend as little as possible on environment. They should be written in such a manner that they don't need to tweak environment variables and so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:25,integrability,depend,depend,25,"IMO, the unittest should depend as little as possible on environment. They should be written in such a manner that they don't need to tweak environment variables and so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:25,modifiability,depend,depend,25,"IMO, the unittest should depend as little as possible on environment. They should be written in such a manner that they don't need to tweak environment variables and so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:152,modifiability,variab,variables,152,"IMO, the unittest should depend as little as possible on environment. They should be written in such a manner that they don't need to tweak environment variables and so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:25,safety,depend,depend,25,"IMO, the unittest should depend as little as possible on environment. They should be written in such a manner that they don't need to tweak environment variables and so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:9,testability,unit,unittest,9,"IMO, the unittest should depend as little as possible on environment. They should be written in such a manner that they don't need to tweak environment variables and so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/451:25,testability,depend,depend,25,"IMO, the unittest should depend as little as possible on environment. They should be written in such a manner that they don't need to tweak environment variables and so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/451
https://github.com/root-project/root/pull/452:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/452
https://github.com/root-project/root/pull/452:72,deployability,version,version,72,"Can you remove the commented lines, please? No need to keep a commented version around, we have git to show us the previous version :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/452
https://github.com/root-project/root/pull/452:124,deployability,version,version,124,"Can you remove the commented lines, please? No need to keep a commented version around, we have git to show us the previous version :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/452
https://github.com/root-project/root/pull/452:72,integrability,version,version,72,"Can you remove the commented lines, please? No need to keep a commented version around, we have git to show us the previous version :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/452
https://github.com/root-project/root/pull/452:124,integrability,version,version,124,"Can you remove the commented lines, please? No need to keep a commented version around, we have git to show us the previous version :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/452
https://github.com/root-project/root/pull/452:72,modifiability,version,version,72,"Can you remove the commented lines, please? No need to keep a commented version around, we have git to show us the previous version :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/452
https://github.com/root-project/root/pull/452:124,modifiability,version,version,124,"Can you remove the commented lines, please? No need to keep a commented version around, we have git to show us the previous version :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/452
https://github.com/root-project/root/pull/452:19,integrability,messag,message,19,"in the last commit message it must be ""+1"" instead of ""-1""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/452
https://github.com/root-project/root/pull/452:19,interoperability,messag,message,19,"in the last commit message it must be ""+1"" instead of ""-1""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/452
https://github.com/root-project/root/pull/452:11,deployability,build,build,11,@phsft-bot build! @divserge could we add a regression test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/452
https://github.com/root-project/root/pull/452:54,safety,test,test,54,@phsft-bot build! @divserge could we add a regression test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/452
https://github.com/root-project/root/pull/452:43,testability,regress,regression,43,@phsft-bot build! @divserge could we add a regression test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/452
https://github.com/root-project/root/pull/452:54,testability,test,test,54,@phsft-bot build! @divserge could we add a regression test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/452
https://github.com/root-project/root/pull/452:49,safety,test,tests,49,"Thanks, please note you could add in-tree google tests if you need to.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/452
https://github.com/root-project/root/pull/452:49,testability,test,tests,49,"Thanks, please note you could add in-tree google tests if you need to.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/452
https://github.com/root-project/root/pull/452:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/452
https://github.com/root-project/root/pull/453:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:91,availability,ERROR,ERROR,91,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:124,availability,ERROR,ERROR,124,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:131,availability,Error,Error,131,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:23,deployability,build,build,23,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:72,deployability,fail,failing,72,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:91,performance,ERROR,ERROR,91,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:98,performance,Time,Timeout,98,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:124,performance,ERROR,ERROR,124,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:131,performance,Error,Error,131,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:72,reliability,fail,failing,72,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:91,safety,ERROR,ERROR,91,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:98,safety,Timeout,Timeout,98,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:124,safety,ERROR,ERROR,124,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:131,safety,Error,Error,131,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:91,usability,ERROR,ERROR,91,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:124,usability,ERROR,ERROR,124,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:131,usability,Error,Error,131,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```. ERROR: Timeout after 10 minutes. ERROR: Error fetching remote repo 'origin'. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:35,deployability,fail,fails,35,@vgvassilev the Jenkins git plugin fails to fetch the repo. It could be a bug in an old version of it that we are using. I'll ask around to see if we can get it updated soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:88,deployability,version,version,88,@vgvassilev the Jenkins git plugin fails to fetch the repo. It could be a bug in an old version of it that we are using. I'll ask around to see if we can get it updated soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:161,deployability,updat,updated,161,@vgvassilev the Jenkins git plugin fails to fetch the repo. It could be a bug in an old version of it that we are using. I'll ask around to see if we can get it updated soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:88,integrability,version,version,88,@vgvassilev the Jenkins git plugin fails to fetch the repo. It could be a bug in an old version of it that we are using. I'll ask around to see if we can get it updated soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:28,interoperability,plug,plugin,28,@vgvassilev the Jenkins git plugin fails to fetch the repo. It could be a bug in an old version of it that we are using. I'll ask around to see if we can get it updated soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:88,modifiability,version,version,88,@vgvassilev the Jenkins git plugin fails to fetch the repo. It could be a bug in an old version of it that we are using. I'll ask around to see if we can get it updated soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:35,reliability,fail,fails,35,@vgvassilev the Jenkins git plugin fails to fetch the repo. It could be a bug in an old version of it that we are using. I'll ask around to see if we can get it updated soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:161,safety,updat,updated,161,@vgvassilev the Jenkins git plugin fails to fetch the repo. It could be a bug in an old version of it that we are using. I'll ask around to see if we can get it updated soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:161,security,updat,updated,161,@vgvassilev the Jenkins git plugin fails to fetch the repo. It could be a bug in an old version of it that we are using. I'll ask around to see if we can get it updated soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:11,deployability,build,build,11,"@phsft-bot build! @martinmine, it's weird it failed twice in a row...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:45,deployability,fail,failed,45,"@phsft-bot build! @martinmine, it's weird it failed twice in a row...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/453:45,reliability,fail,failed,45,"@phsft-bot build! @martinmine, it's weird it failed twice in a row...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/454:79,deployability,version,version,79,"We have found other issues with the ROCCurve class and we are working on a new version of this class, which will include also your changes. . Thank you for submitting these fixes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:79,integrability,version,version,79,"We have found other issues with the ROCCurve class and we are working on a new version of this class, which will include also your changes. . Thank you for submitting these fixes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:156,integrability,sub,submitting,156,"We have found other issues with the ROCCurve class and we are working on a new version of this class, which will include also your changes. . Thank you for submitting these fixes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:79,modifiability,version,version,79,"We have found other issues with the ROCCurve class and we are working on a new version of this class, which will include also your changes. . Thank you for submitting these fixes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:29,energy efficiency,current,currently,29,"Actually I realized that the currently used ROC curve and AUC computation algorithms are quite inefficient. It is possible to recalculate sensitivity and specificity incrementally for each new threshold in O(1) given all elements of the test set are sorted in the order of increasing probability. This gives a total linear time in the number of elements for the entire curve, not just for one threshold. . Implementing it is rather straightforward and I'd gladly do it, if it's OK with you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:154,interoperability,specif,specificity,154,"Actually I realized that the currently used ROC curve and AUC computation algorithms are quite inefficient. It is possible to recalculate sensitivity and specificity incrementally for each new threshold in O(1) given all elements of the test set are sorted in the order of increasing probability. This gives a total linear time in the number of elements for the entire curve, not just for one threshold. . Implementing it is rather straightforward and I'd gladly do it, if it's OK with you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:323,performance,time,time,323,"Actually I realized that the currently used ROC curve and AUC computation algorithms are quite inefficient. It is possible to recalculate sensitivity and specificity incrementally for each new threshold in O(1) given all elements of the test set are sorted in the order of increasing probability. This gives a total linear time in the number of elements for the entire curve, not just for one threshold. . Implementing it is rather straightforward and I'd gladly do it, if it's OK with you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:237,safety,test,test,237,"Actually I realized that the currently used ROC curve and AUC computation algorithms are quite inefficient. It is possible to recalculate sensitivity and specificity incrementally for each new threshold in O(1) given all elements of the test set are sorted in the order of increasing probability. This gives a total linear time in the number of elements for the entire curve, not just for one threshold. . Implementing it is rather straightforward and I'd gladly do it, if it's OK with you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:237,testability,test,test,237,"Actually I realized that the currently used ROC curve and AUC computation algorithms are quite inefficient. It is possible to recalculate sensitivity and specificity incrementally for each new threshold in O(1) given all elements of the test set are sorted in the order of increasing probability. This gives a total linear time in the number of elements for the entire curve, not just for one threshold. . Implementing it is rather straightforward and I'd gladly do it, if it's OK with you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:183,deployability,integr,integrate,183,"Thanks for the pull request! A PR was just submitted that includes your changes. For the optimisation suggestion, feel free to implement it should you have the time. Otherwise I will integrate it when I have some spare time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:89,energy efficiency,optim,optimisation,89,"Thanks for the pull request! A PR was just submitted that includes your changes. For the optimisation suggestion, feel free to implement it should you have the time. Otherwise I will integrate it when I have some spare time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:43,integrability,sub,submitted,43,"Thanks for the pull request! A PR was just submitted that includes your changes. For the optimisation suggestion, feel free to implement it should you have the time. Otherwise I will integrate it when I have some spare time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:183,integrability,integr,integrate,183,"Thanks for the pull request! A PR was just submitted that includes your changes. For the optimisation suggestion, feel free to implement it should you have the time. Otherwise I will integrate it when I have some spare time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:183,interoperability,integr,integrate,183,"Thanks for the pull request! A PR was just submitted that includes your changes. For the optimisation suggestion, feel free to implement it should you have the time. Otherwise I will integrate it when I have some spare time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:183,modifiability,integr,integrate,183,"Thanks for the pull request! A PR was just submitted that includes your changes. For the optimisation suggestion, feel free to implement it should you have the time. Otherwise I will integrate it when I have some spare time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:160,performance,time,time,160,"Thanks for the pull request! A PR was just submitted that includes your changes. For the optimisation suggestion, feel free to implement it should you have the time. Otherwise I will integrate it when I have some spare time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:219,performance,time,time,219,"Thanks for the pull request! A PR was just submitted that includes your changes. For the optimisation suggestion, feel free to implement it should you have the time. Otherwise I will integrate it when I have some spare time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:183,reliability,integr,integrate,183,"Thanks for the pull request! A PR was just submitted that includes your changes. For the optimisation suggestion, feel free to implement it should you have the time. Otherwise I will integrate it when I have some spare time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:183,security,integr,integrate,183,"Thanks for the pull request! A PR was just submitted that includes your changes. For the optimisation suggestion, feel free to implement it should you have the time. Otherwise I will integrate it when I have some spare time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:183,testability,integr,integrate,183,"Thanks for the pull request! A PR was just submitted that includes your changes. For the optimisation suggestion, feel free to implement it should you have the time. Otherwise I will integrate it when I have some spare time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/455:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/455
https://github.com/root-project/root/pull/456:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/456
https://github.com/root-project/root/pull/456:90,security,expos,exposed,90,(Partially) merged; cannot turn on -O2 yet due to an ABI incompat in clang vs GCC that is exposed on -O2.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/456
https://github.com/root-project/root/pull/457:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/457
https://github.com/root-project/root/pull/458:11,deployability,build,build,11,"@phsft-bot build also on slc6/clang_gcc52, slc6/clang_gcc62 with flags -Dcxxmodules=On -Doracle=Off",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:11,deployability,build,build,11,"@phsft-bot build also on slc6/clang_gcc52, slc6/clang_gcc62 with flags -Dcxxmodules=On -Doracle=Off",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:11,deployability,build,build,11,"@phsft-bot build just on slc6/clang_gcc52, slc6/clang_gcc62 with flags -Dcxxmodules=On -Doracle=Off -Dccache=Off",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:56,deployability,fail,failed,56,"@martinmine, it is not clear why that last is green, it failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:46,energy efficiency,green,green,46,"@martinmine, it is not clear why that last is green, it failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:56,reliability,fail,failed,56,"@martinmine, it is not clear why that last is green, it failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:23,usability,clear,clear,23,"@martinmine, it is not clear why that last is green, it failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:11,deployability,build,build,11,"@phsft-bot build just on slc6/clang_gcc52, slc6/clang_gcc62 with flags -Dcxxmodules=On -Doracle=Off -Dccache=Off",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:11,deployability,build,build,11,"@phsft-bot build just on slc6/clang_gcc52, slc6/clang_gcc62 with flags -Dcxxmodules=On -Doracle=Off -Dccache=Off -DVc=Off",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:200,availability,error,error,200,The underlying issue is when we include textually math.h and cmath from module. In such a scenario the #undef signbit in cmath wouldn't leak out from the module and wouldn't affect math.h causing the error. A solution would be introducing a modulemap for libc (where math.h) resides. The issue is solved in libstdc++ later that 6 by introducing math.h in libstdc++. We clarified what's wrong there and the fix in this PR would not solve the underlying issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:72,deployability,modul,module,72,The underlying issue is when we include textually math.h and cmath from module. In such a scenario the #undef signbit in cmath wouldn't leak out from the module and wouldn't affect math.h causing the error. A solution would be introducing a modulemap for libc (where math.h) resides. The issue is solved in libstdc++ later that 6 by introducing math.h in libstdc++. We clarified what's wrong there and the fix in this PR would not solve the underlying issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:154,deployability,modul,module,154,The underlying issue is when we include textually math.h and cmath from module. In such a scenario the #undef signbit in cmath wouldn't leak out from the module and wouldn't affect math.h causing the error. A solution would be introducing a modulemap for libc (where math.h) resides. The issue is solved in libstdc++ later that 6 by introducing math.h in libstdc++. We clarified what's wrong there and the fix in this PR would not solve the underlying issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:241,deployability,modul,modulemap,241,The underlying issue is when we include textually math.h and cmath from module. In such a scenario the #undef signbit in cmath wouldn't leak out from the module and wouldn't affect math.h causing the error. A solution would be introducing a modulemap for libc (where math.h) resides. The issue is solved in libstdc++ later that 6 by introducing math.h in libstdc++. We clarified what's wrong there and the fix in this PR would not solve the underlying issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:72,modifiability,modul,module,72,The underlying issue is when we include textually math.h and cmath from module. In such a scenario the #undef signbit in cmath wouldn't leak out from the module and wouldn't affect math.h causing the error. A solution would be introducing a modulemap for libc (where math.h) resides. The issue is solved in libstdc++ later that 6 by introducing math.h in libstdc++. We clarified what's wrong there and the fix in this PR would not solve the underlying issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:90,modifiability,scenario,scenario,90,The underlying issue is when we include textually math.h and cmath from module. In such a scenario the #undef signbit in cmath wouldn't leak out from the module and wouldn't affect math.h causing the error. A solution would be introducing a modulemap for libc (where math.h) resides. The issue is solved in libstdc++ later that 6 by introducing math.h in libstdc++. We clarified what's wrong there and the fix in this PR would not solve the underlying issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:154,modifiability,modul,module,154,The underlying issue is when we include textually math.h and cmath from module. In such a scenario the #undef signbit in cmath wouldn't leak out from the module and wouldn't affect math.h causing the error. A solution would be introducing a modulemap for libc (where math.h) resides. The issue is solved in libstdc++ later that 6 by introducing math.h in libstdc++. We clarified what's wrong there and the fix in this PR would not solve the underlying issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:241,modifiability,modul,modulemap,241,The underlying issue is when we include textually math.h and cmath from module. In such a scenario the #undef signbit in cmath wouldn't leak out from the module and wouldn't affect math.h causing the error. A solution would be introducing a modulemap for libc (where math.h) resides. The issue is solved in libstdc++ later that 6 by introducing math.h in libstdc++. We clarified what's wrong there and the fix in this PR would not solve the underlying issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:200,performance,error,error,200,The underlying issue is when we include textually math.h and cmath from module. In such a scenario the #undef signbit in cmath wouldn't leak out from the module and wouldn't affect math.h causing the error. A solution would be introducing a modulemap for libc (where math.h) resides. The issue is solved in libstdc++ later that 6 by introducing math.h in libstdc++. We clarified what's wrong there and the fix in this PR would not solve the underlying issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:72,safety,modul,module,72,The underlying issue is when we include textually math.h and cmath from module. In such a scenario the #undef signbit in cmath wouldn't leak out from the module and wouldn't affect math.h causing the error. A solution would be introducing a modulemap for libc (where math.h) resides. The issue is solved in libstdc++ later that 6 by introducing math.h in libstdc++. We clarified what's wrong there and the fix in this PR would not solve the underlying issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:154,safety,modul,module,154,The underlying issue is when we include textually math.h and cmath from module. In such a scenario the #undef signbit in cmath wouldn't leak out from the module and wouldn't affect math.h causing the error. A solution would be introducing a modulemap for libc (where math.h) resides. The issue is solved in libstdc++ later that 6 by introducing math.h in libstdc++. We clarified what's wrong there and the fix in this PR would not solve the underlying issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:200,safety,error,error,200,The underlying issue is when we include textually math.h and cmath from module. In such a scenario the #undef signbit in cmath wouldn't leak out from the module and wouldn't affect math.h causing the error. A solution would be introducing a modulemap for libc (where math.h) resides. The issue is solved in libstdc++ later that 6 by introducing math.h in libstdc++. We clarified what's wrong there and the fix in this PR would not solve the underlying issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:241,safety,modul,modulemap,241,The underlying issue is when we include textually math.h and cmath from module. In such a scenario the #undef signbit in cmath wouldn't leak out from the module and wouldn't affect math.h causing the error. A solution would be introducing a modulemap for libc (where math.h) resides. The issue is solved in libstdc++ later that 6 by introducing math.h in libstdc++. We clarified what's wrong there and the fix in this PR would not solve the underlying issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:110,security,sign,signbit,110,The underlying issue is when we include textually math.h and cmath from module. In such a scenario the #undef signbit in cmath wouldn't leak out from the module and wouldn't affect math.h causing the error. A solution would be introducing a modulemap for libc (where math.h) resides. The issue is solved in libstdc++ later that 6 by introducing math.h in libstdc++. We clarified what's wrong there and the fix in this PR would not solve the underlying issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:200,usability,error,error,200,The underlying issue is when we include textually math.h and cmath from module. In such a scenario the #undef signbit in cmath wouldn't leak out from the module and wouldn't affect math.h causing the error. A solution would be introducing a modulemap for libc (where math.h) resides. The issue is solved in libstdc++ later that 6 by introducing math.h in libstdc++. We clarified what's wrong there and the fix in this PR would not solve the underlying issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/460:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On -Doracle=On -Dccache=Off -DVc=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/460
https://github.com/root-project/root/pull/460:11,deployability,build,build,11,@phsft-bot build also on slc6/clang_gcc62 with flags -Dcxxmodules=On -Doracle=On -Dccache=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/460
https://github.com/root-project/root/pull/460:11,deployability,build,build,11,@phsft-bot build also on slc6/clang_gcc62 with flags -Dcxxmodules=On -Doracle=On -Dccache=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/460
https://github.com/root-project/root/pull/460:18,availability,failur,failures,18,It seems that the failures are not related to the PR. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/460
https://github.com/root-project/root/pull/460:18,deployability,fail,failures,18,It seems that the failures are not related to the PR. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/460
https://github.com/root-project/root/pull/460:18,performance,failur,failures,18,It seems that the failures are not related to the PR. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/460
https://github.com/root-project/root/pull/460:18,reliability,fail,failures,18,It seems that the failures are not related to the PR. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/460
https://github.com/root-project/root/pull/461:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/461
https://github.com/root-project/root/pull/462:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/462
https://github.com/root-project/root/pull/463:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:26,deployability,fail,failed,26,"@Axel-Naumann after tests failed in unrelated place, I've rebased and push-forced into this branch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:26,reliability,fail,failed,26,"@Axel-Naumann after tests failed in unrelated place, I've rebased and push-forced into this branch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:20,safety,test,tests,20,"@Axel-Naumann after tests failed in unrelated place, I've rebased and push-forced into this branch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:20,testability,test,tests,20,"@Axel-Naumann after tests failed in unrelated place, I've rebased and push-forced into this branch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:26,energy efficiency,current,current,26,This PR is useless in its current form.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/464:27,safety,test,test,27,@lmoneta : Is there a unit test to which I can add a check for the new method. Please let me know what you think.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:22,testability,unit,unit,22,@lmoneta : Is there a unit test to which I can add a check for the new method. Please let me know what you think.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:27,testability,test,test,27,@lmoneta : Is there a unit test to which I can add a check for the new method. Please let me know what you think.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:11,deployability,build,build,11,"@phsft-bot build! @sawenzel, this looks good. You can add a unit test under math//genvector/test/testGenVector.cxx and test/testGenVectorVc.cxx. The latter should probably be moved in the folder of the former. About unit tests: #451 introduces a gtest in tree. It will land soon but I don't think this PR should wait for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:65,safety,test,test,65,"@phsft-bot build! @sawenzel, this looks good. You can add a unit test under math//genvector/test/testGenVector.cxx and test/testGenVectorVc.cxx. The latter should probably be moved in the folder of the former. About unit tests: #451 introduces a gtest in tree. It will land soon but I don't think this PR should wait for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:92,safety,test,test,92,"@phsft-bot build! @sawenzel, this looks good. You can add a unit test under math//genvector/test/testGenVector.cxx and test/testGenVectorVc.cxx. The latter should probably be moved in the folder of the former. About unit tests: #451 introduces a gtest in tree. It will land soon but I don't think this PR should wait for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:97,safety,test,testGenVector,97,"@phsft-bot build! @sawenzel, this looks good. You can add a unit test under math//genvector/test/testGenVector.cxx and test/testGenVectorVc.cxx. The latter should probably be moved in the folder of the former. About unit tests: #451 introduces a gtest in tree. It will land soon but I don't think this PR should wait for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:119,safety,test,test,119,"@phsft-bot build! @sawenzel, this looks good. You can add a unit test under math//genvector/test/testGenVector.cxx and test/testGenVectorVc.cxx. The latter should probably be moved in the folder of the former. About unit tests: #451 introduces a gtest in tree. It will land soon but I don't think this PR should wait for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:124,safety,test,testGenVectorVc,124,"@phsft-bot build! @sawenzel, this looks good. You can add a unit test under math//genvector/test/testGenVector.cxx and test/testGenVectorVc.cxx. The latter should probably be moved in the folder of the former. About unit tests: #451 introduces a gtest in tree. It will land soon but I don't think this PR should wait for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:221,safety,test,tests,221,"@phsft-bot build! @sawenzel, this looks good. You can add a unit test under math//genvector/test/testGenVector.cxx and test/testGenVectorVc.cxx. The latter should probably be moved in the folder of the former. About unit tests: #451 introduces a gtest in tree. It will land soon but I don't think this PR should wait for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:60,testability,unit,unit,60,"@phsft-bot build! @sawenzel, this looks good. You can add a unit test under math//genvector/test/testGenVector.cxx and test/testGenVectorVc.cxx. The latter should probably be moved in the folder of the former. About unit tests: #451 introduces a gtest in tree. It will land soon but I don't think this PR should wait for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:65,testability,test,test,65,"@phsft-bot build! @sawenzel, this looks good. You can add a unit test under math//genvector/test/testGenVector.cxx and test/testGenVectorVc.cxx. The latter should probably be moved in the folder of the former. About unit tests: #451 introduces a gtest in tree. It will land soon but I don't think this PR should wait for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:92,testability,test,test,92,"@phsft-bot build! @sawenzel, this looks good. You can add a unit test under math//genvector/test/testGenVector.cxx and test/testGenVectorVc.cxx. The latter should probably be moved in the folder of the former. About unit tests: #451 introduces a gtest in tree. It will land soon but I don't think this PR should wait for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:97,testability,test,testGenVector,97,"@phsft-bot build! @sawenzel, this looks good. You can add a unit test under math//genvector/test/testGenVector.cxx and test/testGenVectorVc.cxx. The latter should probably be moved in the folder of the former. About unit tests: #451 introduces a gtest in tree. It will land soon but I don't think this PR should wait for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:119,testability,test,test,119,"@phsft-bot build! @sawenzel, this looks good. You can add a unit test under math//genvector/test/testGenVector.cxx and test/testGenVectorVc.cxx. The latter should probably be moved in the folder of the former. About unit tests: #451 introduces a gtest in tree. It will land soon but I don't think this PR should wait for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:124,testability,test,testGenVectorVc,124,"@phsft-bot build! @sawenzel, this looks good. You can add a unit test under math//genvector/test/testGenVector.cxx and test/testGenVectorVc.cxx. The latter should probably be moved in the folder of the former. About unit tests: #451 introduces a gtest in tree. It will land soon but I don't think this PR should wait for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:216,testability,unit,unit,216,"@phsft-bot build! @sawenzel, this looks good. You can add a unit test under math//genvector/test/testGenVector.cxx and test/testGenVectorVc.cxx. The latter should probably be moved in the folder of the former. About unit tests: #451 introduces a gtest in tree. It will land soon but I don't think this PR should wait for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:221,testability,test,tests,221,"@phsft-bot build! @sawenzel, this looks good. You can add a unit test under math//genvector/test/testGenVector.cxx and test/testGenVectorVc.cxx. The latter should probably be moved in the folder of the former. About unit tests: #451 introduces a gtest in tree. It will land soon but I don't think this PR should wait for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:29,safety,review,review,29,@vgvassilev : Thanks for the review. Will fix the comments.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:29,testability,review,review,29,@vgvassilev : Thanks for the review. Will fix the comments.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:74,safety,test,test,74,"Sandro, thank you for the PR ! Yes, It would be great to have also a unit test in the math/genvector/test/testGenVector.cxx test program. Best. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:101,safety,test,test,101,"Sandro, thank you for the PR ! Yes, It would be great to have also a unit test in the math/genvector/test/testGenVector.cxx test program. Best. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:106,safety,test,testGenVector,106,"Sandro, thank you for the PR ! Yes, It would be great to have also a unit test in the math/genvector/test/testGenVector.cxx test program. Best. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:124,safety,test,test,124,"Sandro, thank you for the PR ! Yes, It would be great to have also a unit test in the math/genvector/test/testGenVector.cxx test program. Best. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:69,testability,unit,unit,69,"Sandro, thank you for the PR ! Yes, It would be great to have also a unit test in the math/genvector/test/testGenVector.cxx test program. Best. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:74,testability,test,test,74,"Sandro, thank you for the PR ! Yes, It would be great to have also a unit test in the math/genvector/test/testGenVector.cxx test program. Best. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:101,testability,test,test,101,"Sandro, thank you for the PR ! Yes, It would be great to have also a unit test in the math/genvector/test/testGenVector.cxx test program. Best. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:106,testability,test,testGenVector,106,"Sandro, thank you for the PR ! Yes, It would be great to have also a unit test in the math/genvector/test/testGenVector.cxx test program. Best. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:124,testability,test,test,124,"Sandro, thank you for the PR ! Yes, It would be great to have also a unit test in the math/genvector/test/testGenVector.cxx test program. Best. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:15,safety,test,test,15,I added a unit test and fixed the spelling things.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:10,testability,unit,unit,10,I added a unit test and fixed the spelling things.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:15,testability,test,test,15,I added a unit test and fixed the spelling things.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:23,interoperability,format,format,23,Thanks! It seems clang-format is unhappy.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:43,interoperability,format,format,43,@vgvassilev : Which file? If I apply clang-format on the unit test ... the whole file is changed (not just my part). Same for Transform3D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:62,safety,test,test,62,@vgvassilev : Which file? If I apply clang-format on the unit test ... the whole file is changed (not just my part). Same for Transform3D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:57,testability,unit,unit,57,@vgvassilev : Which file? If I apply clang-format on the unit test ... the whole file is changed (not just my part). Same for Transform3D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:62,testability,test,test,62,@vgvassilev : Which file? If I apply clang-format on the unit test ... the whole file is changed (not just my part). Same for Transform3D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:57,deployability,log,log,57,"@sawenzel, you can get the diff (by clicking on view raw log) and apply it or run `git-clang-format --commit 473bb4504c382d706deeeb96ea666dfa61222baa --binary ${which clang-format}`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:93,interoperability,format,format,93,"@sawenzel, you can get the diff (by clicking on view raw log) and apply it or run `git-clang-format --commit 473bb4504c382d706deeeb96ea666dfa61222baa --binary ${which clang-format}`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:173,interoperability,format,format,173,"@sawenzel, you can get the diff (by clicking on view raw log) and apply it or run `git-clang-format --commit 473bb4504c382d706deeeb96ea666dfa61222baa --binary ${which clang-format}`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:57,safety,log,log,57,"@sawenzel, you can get the diff (by clicking on view raw log) and apply it or run `git-clang-format --commit 473bb4504c382d706deeeb96ea666dfa61222baa --binary ${which clang-format}`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:57,security,log,log,57,"@sawenzel, you can get the diff (by clicking on view raw log) and apply it or run `git-clang-format --commit 473bb4504c382d706deeeb96ea666dfa61222baa --binary ${which clang-format}`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:57,testability,log,log,57,"@sawenzel, you can get the diff (by clicking on view raw log) and apply it or run `git-clang-format --commit 473bb4504c382d706deeeb96ea666dfa61222baa --binary ${which clang-format}`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:122,interoperability,platform,platforms,122,"@martinmine, ""centos7/gcc49, mac1011/native, slc6/gcc49, slc6/gcc62, ubuntu14/native"": Could we change one of the default platforms from `gcc49` to `gcc52`. This way we would have better compiler coverage...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:196,testability,coverag,coverage,196,"@martinmine, ""centos7/gcc49, mac1011/native, slc6/gcc49, slc6/gcc62, ubuntu14/native"": Could we change one of the default platforms from `gcc49` to `gcc52`. This way we would have better compiler coverage...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:13,availability,failur,failures,13,It seems the failures are unrelated to this PR. Merging. Thanks for the contribution!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:13,deployability,fail,failures,13,It seems the failures are unrelated to this PR. Merging. Thanks for the contribution!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:13,performance,failur,failures,13,It seems the failures are unrelated to this PR. Merging. Thanks for the contribution!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:13,reliability,fail,failures,13,It seems the failures are unrelated to this PR. Merging. Thanks for the contribution!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/466:104,energy efficiency,Core,Core,104,"Hi, Vassil. Having Vc types in TMath required me to link TTimeStamp.cxx with -lVc, and TTimeStamp is in Core (doesn't need to link with Vc at the moment)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:110,reliability,doe,doesn,110,"Hi, Vassil. Having Vc types in TMath required me to link TTimeStamp.cxx with -lVc, and TTimeStamp is in Core (doesn't need to link with Vc at the moment)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:27,deployability,build,builds,27,"Btw, what's with all these builds starting so many times?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:51,performance,time,times,51,"Btw, what's with all these builds starting so many times?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:55,deployability,depend,depend,55,I will investigate this tomorrow. It seems a bug if we depend on Vc types there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:55,integrability,depend,depend,55,I will investigate this tomorrow. It seems a bug if we depend on Vc types there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:55,modifiability,depend,depend,55,I will investigate this tomorrow. It seems a bug if we depend on Vc types there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:55,safety,depend,depend,55,I will investigate this tomorrow. It seems a bug if we depend on Vc types there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:55,testability,depend,depend,55,I will investigate this tomorrow. It seems a bug if we depend on Vc types there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:241,deployability,depend,dependencies,241,"Hi,. I think using mathematical functions coming from libm without wrapping them within the ROOT ones is ok. We do the same in PROOF: to get random socket numbers we leverage the STL random number generator rather than the Math one to avoid dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:67,integrability,wrap,wrapping,67,"Hi,. I think using mathematical functions coming from libm without wrapping them within the ROOT ones is ok. We do the same in PROOF: to get random socket numbers we leverage the STL random number generator rather than the Math one to avoid dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:241,integrability,depend,dependencies,241,"Hi,. I think using mathematical functions coming from libm without wrapping them within the ROOT ones is ok. We do the same in PROOF: to get random socket numbers we leverage the STL random number generator rather than the Math one to avoid dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:148,interoperability,socket,socket,148,"Hi,. I think using mathematical functions coming from libm without wrapping them within the ROOT ones is ok. We do the same in PROOF: to get random socket numbers we leverage the STL random number generator rather than the Math one to avoid dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:241,modifiability,depend,dependencies,241,"Hi,. I think using mathematical functions coming from libm without wrapping them within the ROOT ones is ok. We do the same in PROOF: to get random socket numbers we leverage the STL random number generator rather than the Math one to avoid dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:235,safety,avoid,avoid,235,"Hi,. I think using mathematical functions coming from libm without wrapping them within the ROOT ones is ok. We do the same in PROOF: to get random socket numbers we leverage the STL random number generator rather than the Math one to avoid dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:241,safety,depend,dependencies,241,"Hi,. I think using mathematical functions coming from libm without wrapping them within the ROOT ones is ok. We do the same in PROOF: to get random socket numbers we leverage the STL random number generator rather than the Math one to avoid dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:148,security,soc,socket,148,"Hi,. I think using mathematical functions coming from libm without wrapping them within the ROOT ones is ok. We do the same in PROOF: to get random socket numbers we leverage the STL random number generator rather than the Math one to avoid dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:241,testability,depend,dependencies,241,"Hi,. I think using mathematical functions coming from libm without wrapping them within the ROOT ones is ok. We do the same in PROOF: to get random socket numbers we leverage the STL random number generator rather than the Math one to avoid dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:39,deployability,depend,depends,39,"I am confused. I don't see how TMath.h depends on Vc and why you need to link against Vc. @dpiparo, one disadvantage of using functions from STL by qualified names is Vc. This doesn't allow users that include Vc (or any other vectorization library using the ADL pattern) to vectorize their code. I do not like duplicating constants lib Pi all over the place. Let's discuss that in person.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:39,integrability,depend,depends,39,"I am confused. I don't see how TMath.h depends on Vc and why you need to link against Vc. @dpiparo, one disadvantage of using functions from STL by qualified names is Vc. This doesn't allow users that include Vc (or any other vectorization library using the ADL pattern) to vectorize their code. I do not like duplicating constants lib Pi all over the place. Let's discuss that in person.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:39,modifiability,depend,depends,39,"I am confused. I don't see how TMath.h depends on Vc and why you need to link against Vc. @dpiparo, one disadvantage of using functions from STL by qualified names is Vc. This doesn't allow users that include Vc (or any other vectorization library using the ADL pattern) to vectorize their code. I do not like duplicating constants lib Pi all over the place. Let's discuss that in person.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:176,reliability,doe,doesn,176,"I am confused. I don't see how TMath.h depends on Vc and why you need to link against Vc. @dpiparo, one disadvantage of using functions from STL by qualified names is Vc. This doesn't allow users that include Vc (or any other vectorization library using the ADL pattern) to vectorize their code. I do not like duplicating constants lib Pi all over the place. Let's discuss that in person.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:39,safety,depend,depends,39,"I am confused. I don't see how TMath.h depends on Vc and why you need to link against Vc. @dpiparo, one disadvantage of using functions from STL by qualified names is Vc. This doesn't allow users that include Vc (or any other vectorization library using the ADL pattern) to vectorize their code. I do not like duplicating constants lib Pi all over the place. Let's discuss that in person.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:39,testability,depend,depends,39,"I am confused. I don't see how TMath.h depends on Vc and why you need to link against Vc. @dpiparo, one disadvantage of using functions from STL by qualified names is Vc. This doesn't allow users that include Vc (or any other vectorization library using the ADL pattern) to vectorize their code. I do not like duplicating constants lib Pi all over the place. Let's discuss that in person.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:190,usability,user,users,190,"I am confused. I don't see how TMath.h depends on Vc and why you need to link against Vc. @dpiparo, one disadvantage of using functions from STL by qualified names is Vc. This doesn't allow users that include Vc (or any other vectorization library using the ADL pattern) to vectorize their code. I do not like duplicating constants lib Pi all over the place. Let's discuss that in person.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:381,usability,person,person,381,"I am confused. I don't see how TMath.h depends on Vc and why you need to link against Vc. @dpiparo, one disadvantage of using functions from STL by qualified names is Vc. This doesn't allow users that include Vc (or any other vectorization library using the ADL pattern) to vectorize their code. I do not like duplicating constants lib Pi all over the place. Let's discuss that in person.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:3,reliability,doe,doesn,3,It doesn't yet. It's a problem we encountered when GSoC candidates started working on vectorizing functions in TMath.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:114,availability,replic,replicating,114,"Which in the end can be solved having the vectorized implementations in a separate header file, but that may mean replicating code, so... whatever you think is best. There's actually another file with the same problem in io/io: TFileCacheRead.cxx",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:79,energy efficiency,Core,Core,79,"I think this is a layering violation in general. I am in favor of breaking it (Core shouldn't need things from Math). However, we should solve the problem with duplicating code because we want to disentangle them. The Pi constant (among with others in Math, I assume) which is needed in Core should go in some form in code (like other constants in RtypesCore.h).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:287,energy efficiency,Core,Core,287,"I think this is a layering violation in general. I am in favor of breaking it (Core shouldn't need things from Math). However, we should solve the problem with duplicating code because we want to disentangle them. The Pi constant (among with others in Math, I assume) which is needed in Core should go in some form in code (like other constants in RtypesCore.h).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:18,modifiability,layer,layering,18,"I think this is a layering violation in general. I am in favor of breaking it (Core shouldn't need things from Math). However, we should solve the problem with duplicating code because we want to disentangle them. The Pi constant (among with others in Math, I assume) which is needed in Core should go in some form in code (like other constants in RtypesCore.h).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:166,deployability,depend,dependency,166,"Hi,. There is already a TMathBase.h that could be used for that. That said. It might make sense to keep TMath.h as is and to introduce TMathVec.h which has the extra dependency and is use in code that expects/wants to support vector code. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:166,integrability,depend,dependency,166,"Hi,. There is already a TMathBase.h that could be used for that. That said. It might make sense to keep TMath.h as is and to introduce TMathVec.h which has the extra dependency and is use in code that expects/wants to support vector code. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:166,modifiability,depend,dependency,166,"Hi,. There is already a TMathBase.h that could be used for that. That said. It might make sense to keep TMath.h as is and to introduce TMathVec.h which has the extra dependency and is use in code that expects/wants to support vector code. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:166,safety,depend,dependency,166,"Hi,. There is already a TMathBase.h that could be used for that. That said. It might make sense to keep TMath.h as is and to introduce TMathVec.h which has the extra dependency and is use in code that expects/wants to support vector code. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:166,testability,depend,dependency,166,"Hi,. There is already a TMathBase.h that could be used for that. That said. It might make sense to keep TMath.h as is and to introduce TMathVec.h which has the extra dependency and is use in code that expects/wants to support vector code. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:218,usability,support,support,218,"Hi,. There is already a TMathBase.h that could be used for that. That said. It might make sense to keep TMath.h as is and to introduce TMathVec.h which has the extra dependency and is use in code that expects/wants to support vector code. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/468:35,availability,failur,failures,35,"As far as I can tell none of these failures relate to my PR, is that correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/468
https://github.com/root-project/root/pull/468:35,deployability,fail,failures,35,"As far as I can tell none of these failures relate to my PR, is that correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/468
https://github.com/root-project/root/pull/468:35,performance,failur,failures,35,"As far as I can tell none of these failures relate to my PR, is that correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/468
https://github.com/root-project/root/pull/468:35,reliability,fail,failures,35,"As far as I can tell none of these failures relate to my PR, is that correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/468
https://github.com/root-project/root/pull/470:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On. @vgvassilev had to clear the build queue as something screwed up and made the PR by @xvallspl get built 8 times,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:99,deployability,build,build,99,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On. @vgvassilev had to clear the build queue as something screwed up and made the PR by @xvallspl get built 8 times,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:105,integrability,queue,queue,105,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On. @vgvassilev had to clear the build queue as something screwed up and made the PR by @xvallspl get built 8 times,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:105,performance,queue,queue,105,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On. @vgvassilev had to clear the build queue as something screwed up and made the PR by @xvallspl get built 8 times,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:176,performance,time,times,176,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On. @vgvassilev had to clear the build queue as something screwed up and made the PR by @xvallspl get built 8 times,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:89,usability,clear,clear,89,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On. @vgvassilev had to clear the build queue as something screwed up and made the PR by @xvallspl get built 8 times,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:18,availability,failur,failures,18,"LGTM, despite the failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:18,deployability,fail,failures,18,"LGTM, despite the failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:18,performance,failur,failures,18,"LGTM, despite the failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:18,reliability,fail,failures,18,"LGTM, despite the failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/472:18,deployability,fail,failing,18,Uh? Why is travis failing?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:18,reliability,fail,failing,18,Uh? Why is travis failing?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:18,safety,compl,comply,18,The changes don't comply with ROOT's coding conventions. Please see the diff (clicking on Details).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:18,security,compl,comply,18,The changes don't comply with ROOT's coding conventions. Please see the diff (clicking on Details).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:62,energy efficiency,core,core,62,I'd be interested to see this check applied for everything in core (and maybe latter for the other parts of the codebase).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:33,energy efficiency,current,current,33,"Well, to tell the truth it's the current TError code which does not comply to the coding conventions. If I understand correctly, the issue is actually due to the misaligned `\` which I do not touch. IMHO, it's not responsibility of people who provide fixes to bring ROOT code up to its own standard. Anyways, given it's trivial I will try to do the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:290,interoperability,standard,standard,290,"Well, to tell the truth it's the current TError code which does not comply to the coding conventions. If I understand correctly, the issue is actually due to the misaligned `\` which I do not touch. IMHO, it's not responsibility of people who provide fixes to bring ROOT code up to its own standard. Anyways, given it's trivial I will try to do the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:214,modifiability,responsibil,responsibility,214,"Well, to tell the truth it's the current TError code which does not comply to the coding conventions. If I understand correctly, the issue is actually due to the misaligned `\` which I do not touch. IMHO, it's not responsibility of people who provide fixes to bring ROOT code up to its own standard. Anyways, given it's trivial I will try to do the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:59,reliability,doe,does,59,"Well, to tell the truth it's the current TError code which does not comply to the coding conventions. If I understand correctly, the issue is actually due to the misaligned `\` which I do not touch. IMHO, it's not responsibility of people who provide fixes to bring ROOT code up to its own standard. Anyways, given it's trivial I will try to do the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:68,safety,compl,comply,68,"Well, to tell the truth it's the current TError code which does not comply to the coding conventions. If I understand correctly, the issue is actually due to the misaligned `\` which I do not touch. IMHO, it's not responsibility of people who provide fixes to bring ROOT code up to its own standard. Anyways, given it's trivial I will try to do the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:68,security,compl,comply,68,"Well, to tell the truth it's the current TError code which does not comply to the coding conventions. If I understand correctly, the issue is actually due to the misaligned `\` which I do not touch. IMHO, it's not responsibility of people who provide fixes to bring ROOT code up to its own standard. Anyways, given it's trivial I will try to do the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:107,testability,understand,understand,107,"Well, to tell the truth it's the current TError code which does not comply to the coding conventions. If I understand correctly, the issue is actually due to the misaligned `\` which I do not touch. IMHO, it's not responsibility of people who provide fixes to bring ROOT code up to its own standard. Anyways, given it's trivial I will try to do the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:11,deployability,build,build,11,"@phsft-bot build! @ktf, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:300,deployability,build,build,300,"...and apologies for Travis claiming that you broke the coding convention. Thanks for fixing it, though! :-) (But next time just complain, please: as you pointed out, this is absolutely not your responsibility to fix existing violations of the coding convention.). And I'm working on the (unrelated) build fixes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:195,modifiability,responsibil,responsibility,195,"...and apologies for Travis claiming that you broke the coding convention. Thanks for fixing it, though! :-) (But next time just complain, please: as you pointed out, this is absolutely not your responsibility to fix existing violations of the coding convention.). And I'm working on the (unrelated) build fixes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:119,performance,time,time,119,"...and apologies for Travis claiming that you broke the coding convention. Thanks for fixing it, though! :-) (But next time just complain, please: as you pointed out, this is absolutely not your responsibility to fix existing violations of the coding convention.). And I'm working on the (unrelated) build fixes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:129,safety,compl,complain,129,"...and apologies for Travis claiming that you broke the coding convention. Thanks for fixing it, though! :-) (But next time just complain, please: as you pointed out, this is absolutely not your responsibility to fix existing violations of the coding convention.). And I'm working on the (unrelated) build fixes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:129,security,compl,complain,129,"...and apologies for Travis claiming that you broke the coding convention. Thanks for fixing it, though! :-) (But next time just complain, please: as you pointed out, this is absolutely not your responsibility to fix existing violations of the coding convention.). And I'm working on the (unrelated) build fixes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:10,interoperability,format,format,10,"The clang-format tool considers a line in the context of C++, so the backslashes told it this was a single line :). All looks good to me! I will merge this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:46,testability,context,context,46,"The clang-format tool considers a line in the context of C++, so the backslashes told it this was a single line :). All looks good to me! I will merge this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:17,usability,tool,tool,17,"The clang-format tool considers a line in the context of C++, so the backslashes told it this was a single line :). All looks good to me! I will merge this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/474:99,deployability,pipelin,pipeline,99,Running the PR on an experimental Jenkins instance (accessible at CERN only): http://epsft-jenkins-pipeline.cern.ch:8080/job/single-build/10/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/474
https://github.com/root-project/root/pull/474:132,deployability,build,build,132,Running the PR on an experimental Jenkins instance (accessible at CERN only): http://epsft-jenkins-pipeline.cern.ch:8080/job/single-build/10/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/474
https://github.com/root-project/root/pull/474:99,integrability,pipelin,pipeline,99,Running the PR on an experimental Jenkins instance (accessible at CERN only): http://epsft-jenkins-pipeline.cern.ch:8080/job/single-build/10/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/474
https://github.com/root-project/root/pull/474:52,security,access,accessible,52,Running the PR on an experimental Jenkins instance (accessible at CERN only): http://epsft-jenkins-pipeline.cern.ch:8080/job/single-build/10/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/474
https://github.com/root-project/root/pull/474:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/474
https://github.com/root-project/root/pull/474:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/474
https://github.com/root-project/root/pull/474:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/474
https://github.com/root-project/root/pull/474:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/474
https://github.com/root-project/root/pull/475:261,security,auth,authored,261,"Yes, I didn't want to touch that much. No problem in doing it, If you agree. On Fri, Mar 31, 2017, 15:14 Vassil Vassilev <notifications@github.com>. wrote:. > It seems most of the inlines could turn into constexprs. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/475#issuecomment-290708492>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA0747k6zeBnN6goGwwphB30bCOdx1D-ks5rrPwagaJpZM4MvnHz>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/475
https://github.com/root-project/root/pull/475:478,security,auth,auth,478,"Yes, I didn't want to touch that much. No problem in doing it, If you agree. On Fri, Mar 31, 2017, 15:14 Vassil Vassilev <notifications@github.com>. wrote:. > It seems most of the inlines could turn into constexprs. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/475#issuecomment-290708492>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA0747k6zeBnN6goGwwphB30bCOdx1D-ks5rrPwagaJpZM4MvnHz>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/475
https://github.com/root-project/root/pull/475:23,deployability,modul,modulo,23,"This looks good to me, modulo the clang-format unhappiness.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/475
https://github.com/root-project/root/pull/475:40,interoperability,format,format,40,"This looks good to me, modulo the clang-format unhappiness.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/475
https://github.com/root-project/root/pull/475:23,modifiability,modul,modulo,23,"This looks good to me, modulo the clang-format unhappiness.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/475
https://github.com/root-project/root/pull/475:23,safety,modul,modulo,23,"This looks good to me, modulo the clang-format unhappiness.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/475
https://github.com/root-project/root/pull/475:136,deployability,contain,contain,136,I don;t agree with this PR. . I think Math constants should remain in Math.h and stays in Mathcore. TMathBase should be minimal and not contain those math constants. . I see this is done only for a use of TMath::Pi in TTimeStamp. I would just hardcoded there and avoid this PR. Lorenzo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/475
https://github.com/root-project/root/pull/475:263,safety,avoid,avoid,263,I don;t agree with this PR. . I think Math constants should remain in Math.h and stays in Mathcore. TMathBase should be minimal and not contain those math constants. . I see this is done only for a use of TMath::Pi in TTimeStamp. I would just hardcoded there and avoid this PR. Lorenzo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/475
https://github.com/root-project/root/pull/475:243,security,hardcod,hardcoded,243,I don;t agree with this PR. . I think Math constants should remain in Math.h and stays in Mathcore. TMathBase should be minimal and not contain those math constants. . I see this is done only for a use of TMath::Pi in TTimeStamp. I would just hardcoded there and avoid this PR. Lorenzo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/475
https://github.com/root-project/root/pull/475:120,usability,minim,minimal,120,I don;t agree with this PR. . I think Math constants should remain in Math.h and stays in Mathcore. TMathBase should be minimal and not contain those math constants. . I see this is done only for a use of TMath::Pi in TTimeStamp. I would just hardcoded there and avoid this PR. Lorenzo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/475
https://github.com/root-project/root/pull/476:28,deployability,build,build,28,"Thanks, Mattias! @phsft-bot build!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/476
https://github.com/root-project/root/pull/476:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/476
https://github.com/root-project/root/pull/477:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On -Dall=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On -Dall=On.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On -Dall=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On -Dall=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/479:96,deployability,fail,failed,96,travis complains about the long lines in the markdown tables as expected. jenkins seems to have failed a build on mac1011 due to his own issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/479:105,deployability,build,build,105,travis complains about the long lines in the markdown tables as expected. jenkins seems to have failed a build on mac1011 due to his own issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/479:96,reliability,fail,failed,96,travis complains about the long lines in the markdown tables as expected. jenkins seems to have failed a build on mac1011 due to his own issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/479:7,safety,compl,complains,7,travis complains about the long lines in the markdown tables as expected. jenkins seems to have failed a build on mac1011 due to his own issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/479:7,security,compl,complains,7,travis complains about the long lines in the markdown tables as expected. jenkins seems to have failed a build on mac1011 due to his own issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/479:102,deployability,build,builds,102,"@peremato it's not me, now the jenkins bot is more verbose and specifies the options and platforms it builds with. those are the defaults.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/479:63,interoperability,specif,specifies,63,"@peremato it's not me, now the jenkins bot is more verbose and specifies the options and platforms it builds with. those are the defaults.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/479:89,interoperability,platform,platforms,89,"@peremato it's not me, now the jenkins bot is more verbose and specifies the options and platforms it builds with. those are the defaults.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/479:49,deployability,build,builds,49,"Hi @peremato, the mixture of the imt and non-imt builds was not changed. Before proceeding to make the non-imt build a special case we decided at the PPP meeting to wait to have all tests green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/479:111,deployability,build,build,111,"Hi @peremato, the mixture of the imt and non-imt builds was not changed. Before proceeding to make the non-imt build a special case we decided at the PPP meeting to wait to have all tests green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/479:188,energy efficiency,green,green,188,"Hi @peremato, the mixture of the imt and non-imt builds was not changed. Before proceeding to make the non-imt build a special case we decided at the PPP meeting to wait to have all tests green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/479:182,safety,test,tests,182,"Hi @peremato, the mixture of the imt and non-imt builds was not changed. Before proceeding to make the non-imt build a special case we decided at the PPP meeting to wait to have all tests green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/479:182,testability,test,tests,182,"Hi @peremato, the mixture of the imt and non-imt builds was not changed. Before proceeding to make the non-imt build a special case we decided at the PPP meeting to wait to have all tests green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/480:11,deployability,build,build,11,@phsft-bot build please.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/480
https://github.com/root-project/root/pull/480:22,interoperability,conflict,conflicts,22,Could you resolve the conflicts?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/480
https://github.com/root-project/root/pull/480:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/480
https://github.com/root-project/root/pull/480:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/480
https://github.com/root-project/root/pull/480:4,availability,failur,failure,4,One failure of the system in one cell.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/480
https://github.com/root-project/root/pull/480:4,deployability,fail,failure,4,One failure of the system in one cell.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/480
https://github.com/root-project/root/pull/480:4,performance,failur,failure,4,One failure of the system in one cell.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/480
https://github.com/root-project/root/pull/480:4,reliability,fail,failure,4,One failure of the system in one cell.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/480
https://github.com/root-project/root/pull/482:571,deployability,patch,patch,571,"complimentary info:. For this test program . ```C++. #include ""TObject.h"". class Track : public TObject {. public:. Track() : TObject() {}. virtual ~Track() = default;. private:. double x=0.;. double y=0.;. double z=0.;. };. // noinline for valgrind purposes. __attribute__((noinline)) void createtracks(std::vector<Track> &v, int N) {. for(int i=0;i<N;++i){. v.emplace_back();. }. }. int main() {. // switch off object stat. TObject::SetObjectStat(false);. int N=1000000;. std::vector<Track> tracks;. tracks.reserve(N);. createtracks(tracks, N);. return 0;. }. ```. the patch decreases the CPU cycle count for the function `createtracks` from 28billion to 21billion. The patch is inspired from measurements in our digitization procedure which creates lots of such objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:672,deployability,patch,patch,672,"complimentary info:. For this test program . ```C++. #include ""TObject.h"". class Track : public TObject {. public:. Track() : TObject() {}. virtual ~Track() = default;. private:. double x=0.;. double y=0.;. double z=0.;. };. // noinline for valgrind purposes. __attribute__((noinline)) void createtracks(std::vector<Track> &v, int N) {. for(int i=0;i<N;++i){. v.emplace_back();. }. }. int main() {. // switch off object stat. TObject::SetObjectStat(false);. int N=1000000;. std::vector<Track> tracks;. tracks.reserve(N);. createtracks(tracks, N);. return 0;. }. ```. the patch decreases the CPU cycle count for the function `createtracks` from 28billion to 21billion. The patch is inspired from measurements in our digitization procedure which creates lots of such objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:591,energy efficiency,CPU,CPU,591,"complimentary info:. For this test program . ```C++. #include ""TObject.h"". class Track : public TObject {. public:. Track() : TObject() {}. virtual ~Track() = default;. private:. double x=0.;. double y=0.;. double z=0.;. };. // noinline for valgrind purposes. __attribute__((noinline)) void createtracks(std::vector<Track> &v, int N) {. for(int i=0;i<N;++i){. v.emplace_back();. }. }. int main() {. // switch off object stat. TObject::SetObjectStat(false);. int N=1000000;. std::vector<Track> tracks;. tracks.reserve(N);. createtracks(tracks, N);. return 0;. }. ```. the patch decreases the CPU cycle count for the function `createtracks` from 28billion to 21billion. The patch is inspired from measurements in our digitization procedure which creates lots of such objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:695,energy efficiency,measur,measurements,695,"complimentary info:. For this test program . ```C++. #include ""TObject.h"". class Track : public TObject {. public:. Track() : TObject() {}. virtual ~Track() = default;. private:. double x=0.;. double y=0.;. double z=0.;. };. // noinline for valgrind purposes. __attribute__((noinline)) void createtracks(std::vector<Track> &v, int N) {. for(int i=0;i<N;++i){. v.emplace_back();. }. }. int main() {. // switch off object stat. TObject::SetObjectStat(false);. int N=1000000;. std::vector<Track> tracks;. tracks.reserve(N);. createtracks(tracks, N);. return 0;. }. ```. the patch decreases the CPU cycle count for the function `createtracks` from 28billion to 21billion. The patch is inspired from measurements in our digitization procedure which creates lots of such objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:89,integrability,pub,public,89,"complimentary info:. For this test program . ```C++. #include ""TObject.h"". class Track : public TObject {. public:. Track() : TObject() {}. virtual ~Track() = default;. private:. double x=0.;. double y=0.;. double z=0.;. };. // noinline for valgrind purposes. __attribute__((noinline)) void createtracks(std::vector<Track> &v, int N) {. for(int i=0;i<N;++i){. v.emplace_back();. }. }. int main() {. // switch off object stat. TObject::SetObjectStat(false);. int N=1000000;. std::vector<Track> tracks;. tracks.reserve(N);. createtracks(tracks, N);. return 0;. }. ```. the patch decreases the CPU cycle count for the function `createtracks` from 28billion to 21billion. The patch is inspired from measurements in our digitization procedure which creates lots of such objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:107,integrability,pub,public,107,"complimentary info:. For this test program . ```C++. #include ""TObject.h"". class Track : public TObject {. public:. Track() : TObject() {}. virtual ~Track() = default;. private:. double x=0.;. double y=0.;. double z=0.;. };. // noinline for valgrind purposes. __attribute__((noinline)) void createtracks(std::vector<Track> &v, int N) {. for(int i=0;i<N;++i){. v.emplace_back();. }. }. int main() {. // switch off object stat. TObject::SetObjectStat(false);. int N=1000000;. std::vector<Track> tracks;. tracks.reserve(N);. createtracks(tracks, N);. return 0;. }. ```. the patch decreases the CPU cycle count for the function `createtracks` from 28billion to 21billion. The patch is inspired from measurements in our digitization procedure which creates lots of such objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:591,performance,CPU,CPU,591,"complimentary info:. For this test program . ```C++. #include ""TObject.h"". class Track : public TObject {. public:. Track() : TObject() {}. virtual ~Track() = default;. private:. double x=0.;. double y=0.;. double z=0.;. };. // noinline for valgrind purposes. __attribute__((noinline)) void createtracks(std::vector<Track> &v, int N) {. for(int i=0;i<N;++i){. v.emplace_back();. }. }. int main() {. // switch off object stat. TObject::SetObjectStat(false);. int N=1000000;. std::vector<Track> tracks;. tracks.reserve(N);. createtracks(tracks, N);. return 0;. }. ```. the patch decreases the CPU cycle count for the function `createtracks` from 28billion to 21billion. The patch is inspired from measurements in our digitization procedure which creates lots of such objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:0,safety,compl,complimentary,0,"complimentary info:. For this test program . ```C++. #include ""TObject.h"". class Track : public TObject {. public:. Track() : TObject() {}. virtual ~Track() = default;. private:. double x=0.;. double y=0.;. double z=0.;. };. // noinline for valgrind purposes. __attribute__((noinline)) void createtracks(std::vector<Track> &v, int N) {. for(int i=0;i<N;++i){. v.emplace_back();. }. }. int main() {. // switch off object stat. TObject::SetObjectStat(false);. int N=1000000;. std::vector<Track> tracks;. tracks.reserve(N);. createtracks(tracks, N);. return 0;. }. ```. the patch decreases the CPU cycle count for the function `createtracks` from 28billion to 21billion. The patch is inspired from measurements in our digitization procedure which creates lots of such objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:30,safety,test,test,30,"complimentary info:. For this test program . ```C++. #include ""TObject.h"". class Track : public TObject {. public:. Track() : TObject() {}. virtual ~Track() = default;. private:. double x=0.;. double y=0.;. double z=0.;. };. // noinline for valgrind purposes. __attribute__((noinline)) void createtracks(std::vector<Track> &v, int N) {. for(int i=0;i<N;++i){. v.emplace_back();. }. }. int main() {. // switch off object stat. TObject::SetObjectStat(false);. int N=1000000;. std::vector<Track> tracks;. tracks.reserve(N);. createtracks(tracks, N);. return 0;. }. ```. the patch decreases the CPU cycle count for the function `createtracks` from 28billion to 21billion. The patch is inspired from measurements in our digitization procedure which creates lots of such objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:571,safety,patch,patch,571,"complimentary info:. For this test program . ```C++. #include ""TObject.h"". class Track : public TObject {. public:. Track() : TObject() {}. virtual ~Track() = default;. private:. double x=0.;. double y=0.;. double z=0.;. };. // noinline for valgrind purposes. __attribute__((noinline)) void createtracks(std::vector<Track> &v, int N) {. for(int i=0;i<N;++i){. v.emplace_back();. }. }. int main() {. // switch off object stat. TObject::SetObjectStat(false);. int N=1000000;. std::vector<Track> tracks;. tracks.reserve(N);. createtracks(tracks, N);. return 0;. }. ```. the patch decreases the CPU cycle count for the function `createtracks` from 28billion to 21billion. The patch is inspired from measurements in our digitization procedure which creates lots of such objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:672,safety,patch,patch,672,"complimentary info:. For this test program . ```C++. #include ""TObject.h"". class Track : public TObject {. public:. Track() : TObject() {}. virtual ~Track() = default;. private:. double x=0.;. double y=0.;. double z=0.;. };. // noinline for valgrind purposes. __attribute__((noinline)) void createtracks(std::vector<Track> &v, int N) {. for(int i=0;i<N;++i){. v.emplace_back();. }. }. int main() {. // switch off object stat. TObject::SetObjectStat(false);. int N=1000000;. std::vector<Track> tracks;. tracks.reserve(N);. createtracks(tracks, N);. return 0;. }. ```. the patch decreases the CPU cycle count for the function `createtracks` from 28billion to 21billion. The patch is inspired from measurements in our digitization procedure which creates lots of such objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:0,security,compl,complimentary,0,"complimentary info:. For this test program . ```C++. #include ""TObject.h"". class Track : public TObject {. public:. Track() : TObject() {}. virtual ~Track() = default;. private:. double x=0.;. double y=0.;. double z=0.;. };. // noinline for valgrind purposes. __attribute__((noinline)) void createtracks(std::vector<Track> &v, int N) {. for(int i=0;i<N;++i){. v.emplace_back();. }. }. int main() {. // switch off object stat. TObject::SetObjectStat(false);. int N=1000000;. std::vector<Track> tracks;. tracks.reserve(N);. createtracks(tracks, N);. return 0;. }. ```. the patch decreases the CPU cycle count for the function `createtracks` from 28billion to 21billion. The patch is inspired from measurements in our digitization procedure which creates lots of such objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:571,security,patch,patch,571,"complimentary info:. For this test program . ```C++. #include ""TObject.h"". class Track : public TObject {. public:. Track() : TObject() {}. virtual ~Track() = default;. private:. double x=0.;. double y=0.;. double z=0.;. };. // noinline for valgrind purposes. __attribute__((noinline)) void createtracks(std::vector<Track> &v, int N) {. for(int i=0;i<N;++i){. v.emplace_back();. }. }. int main() {. // switch off object stat. TObject::SetObjectStat(false);. int N=1000000;. std::vector<Track> tracks;. tracks.reserve(N);. createtracks(tracks, N);. return 0;. }. ```. the patch decreases the CPU cycle count for the function `createtracks` from 28billion to 21billion. The patch is inspired from measurements in our digitization procedure which creates lots of such objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:672,security,patch,patch,672,"complimentary info:. For this test program . ```C++. #include ""TObject.h"". class Track : public TObject {. public:. Track() : TObject() {}. virtual ~Track() = default;. private:. double x=0.;. double y=0.;. double z=0.;. };. // noinline for valgrind purposes. __attribute__((noinline)) void createtracks(std::vector<Track> &v, int N) {. for(int i=0;i<N;++i){. v.emplace_back();. }. }. int main() {. // switch off object stat. TObject::SetObjectStat(false);. int N=1000000;. std::vector<Track> tracks;. tracks.reserve(N);. createtracks(tracks, N);. return 0;. }. ```. the patch decreases the CPU cycle count for the function `createtracks` from 28billion to 21billion. The patch is inspired from measurements in our digitization procedure which creates lots of such objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:30,testability,test,test,30,"complimentary info:. For this test program . ```C++. #include ""TObject.h"". class Track : public TObject {. public:. Track() : TObject() {}. virtual ~Track() = default;. private:. double x=0.;. double y=0.;. double z=0.;. };. // noinline for valgrind purposes. __attribute__((noinline)) void createtracks(std::vector<Track> &v, int N) {. for(int i=0;i<N;++i){. v.emplace_back();. }. }. int main() {. // switch off object stat. TObject::SetObjectStat(false);. int N=1000000;. std::vector<Track> tracks;. tracks.reserve(N);. createtracks(tracks, N);. return 0;. }. ```. the patch decreases the CPU cycle count for the function `createtracks` from 28billion to 21billion. The patch is inspired from measurements in our digitization procedure which creates lots of such objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:20,safety,compl,complimentary,20,@Axel-Naumann : see complimentary info. The compiler voluntarily inlines this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:20,security,compl,complimentary,20,@Axel-Naumann : see complimentary info. The compiler voluntarily inlines this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:11,energy efficiency,cool,cool,11,"@sawenzel, cool. Could you wait to merge the gtest PR #451, and convert the example program into a unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:104,safety,test,test,104,"@sawenzel, cool. Could you wait to merge the gtest PR #451, and convert the example program into a unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:99,testability,unit,unit,99,"@sawenzel, cool. Could you wait to merge the gtest PR #451, and convert the example program into a unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:104,testability,test,test,104,"@sawenzel, cool. Could you wait to merge the gtest PR #451, and convert the example program into a unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:71,performance,performance test,performance test,71,"@vgvassilev ""convert the example program into a unit test?"". This is a performance test and the gain is relative to without the inlining, how do you invision this applied into a (stable) unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:53,safety,test,test,53,"@vgvassilev ""convert the example program into a unit test?"". This is a performance test and the gain is relative to without the inlining, how do you invision this applied into a (stable) unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:83,safety,test,test,83,"@vgvassilev ""convert the example program into a unit test?"". This is a performance test and the gain is relative to without the inlining, how do you invision this applied into a (stable) unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:192,safety,test,test,192,"@vgvassilev ""convert the example program into a unit test?"". This is a performance test and the gain is relative to without the inlining, how do you invision this applied into a (stable) unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:48,testability,unit,unit,48,"@vgvassilev ""convert the example program into a unit test?"". This is a performance test and the gain is relative to without the inlining, how do you invision this applied into a (stable) unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:53,testability,test,test,53,"@vgvassilev ""convert the example program into a unit test?"". This is a performance test and the gain is relative to without the inlining, how do you invision this applied into a (stable) unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:83,testability,test,test,83,"@vgvassilev ""convert the example program into a unit test?"". This is a performance test and the gain is relative to without the inlining, how do you invision this applied into a (stable) unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:187,testability,unit,unit,187,"@vgvassilev ""convert the example program into a unit test?"". This is a performance test and the gain is relative to without the inlining, how do you invision this applied into a (stable) unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:192,testability,test,test,192,"@vgvassilev ""convert the example program into a unit test?"". This is a performance test and the gain is relative to without the inlining, how do you invision this applied into a (stable) unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:71,usability,perform,performance,71,"@vgvassilev ""convert the example program into a unit test?"". This is a performance test and the gain is relative to without the inlining, how do you invision this applied into a (stable) unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:40,availability,consist,consistency,40,"@sawenzel This is very nice thanks. For consistency's sake, shouldn't we also move the copy constructor and operator=? Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:108,availability,operat,operator,108,"@sawenzel This is very nice thanks. For consistency's sake, shouldn't we also move the copy constructor and operator=? Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:40,usability,consist,consistency,40,"@sawenzel This is very nice thanks. For consistency's sake, shouldn't we also move the copy constructor and operator=? Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:53,deployability,version,version,53,@pcanal : Thanks for these suggestions. I made a new version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:53,integrability,version,version,53,@pcanal : Thanks for these suggestions. I made a new version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:53,modifiability,version,version,53,@pcanal : Thanks for these suggestions. I made a new version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:44,deployability,version,version,44,@sawenzel Could you also add a (summarized) version of the 'complementary info' in the commit log and/or code-comments? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:94,deployability,log,log,94,@sawenzel Could you also add a (summarized) version of the 'complementary info' in the commit log and/or code-comments? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:44,integrability,version,version,44,@sawenzel Could you also add a (summarized) version of the 'complementary info' in the commit log and/or code-comments? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:44,modifiability,version,version,44,@sawenzel Could you also add a (summarized) version of the 'complementary info' in the commit log and/or code-comments? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:60,safety,compl,complementary,60,@sawenzel Could you also add a (summarized) version of the 'complementary info' in the commit log and/or code-comments? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:94,safety,log,log,94,@sawenzel Could you also add a (summarized) version of the 'complementary info' in the commit log and/or code-comments? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:60,security,compl,complementary,60,@sawenzel Could you also add a (summarized) version of the 'complementary info' in the commit log and/or code-comments? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:94,security,log,log,94,@sawenzel Could you also add a (summarized) version of the 'complementary info' in the commit log and/or code-comments? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:94,testability,log,log,94,@sawenzel Could you also add a (summarized) version of the 'complementary info' in the commit log and/or code-comments? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:112,performance,disk,disk,112,This PR breaks roottest-root-io-filemerger-make. The symptom is a different size of the TStreamerInfo record on disk. I am reverting the commit in order to stabilise the CI of ROOT. We need to further investigate why this apparently unrelated change has an effect given the very delicate area where the problem has been identified.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:156,reliability,stabil,stabilise,156,This PR breaks roottest-root-io-filemerger-make. The symptom is a different size of the TStreamerInfo record on disk. I am reverting the commit in order to stabilise the CI of ROOT. We need to further investigate why this apparently unrelated change has an effect given the very delicate area where the problem has been identified.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:320,security,ident,identified,320,This PR breaks roottest-root-io-filemerger-make. The symptom is a different size of the TStreamerInfo record on disk. I am reverting the commit in order to stabilise the CI of ROOT. We need to further investigate why this apparently unrelated change has an effect given the very delicate area where the problem has been identified.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:40,performance,time,timeline,40,Thanks for this information. Is there a timeline to investigate the issue?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:8,testability,plan,plan,8,"Hi,. we plan to branch for 6.10 on May the 10th.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/483:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/483
https://github.com/root-project/root/pull/485:146,availability,consist,consistency,146,"Hi, Danilo. This was the case in the first of the commits. But it wouldn't work over c. arrays, f.e. We decided to remove the other interface for consistency. This way is also closer to std::accumulate. On Thu, Apr 6, 2017, 22:42 Danilo Piparo <notifications@github.com> wrote:. > *@dpiparo* commented on this pull request. > ------------------------------. >. > In math/mathcore/inc/Math/Util.h. > <https://github.com/root-project/root/pull/485#discussion_r110262637>:. >. > > }. >. > - void Add(const std::vector<T> &elements). > + /// Iterate over a datastructure referenced by a pointer and accumulate on the exising result. > + template <class Iterator>. > + void Add(const Iterator begin, const Iterator end). >. > @xvallspl <https://github.com/xvallspl>, @lmoneta. > <https://github.com/lmoneta> : is it really better to have begin and end. > here? Can't we pass something to iterate on? With range based looping this. > would not imply any code change in the body of the methods. >. > —. > You are receiving this because you were mentioned. >. >. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/485#pullrequestreview-31425116>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA0748psnJDZpWu_rkRmWiQYRdhLEACDks5rtU5LgaJpZM4M1zlr>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/485
https://github.com/root-project/root/pull/485:132,integrability,interfac,interface,132,"Hi, Danilo. This was the case in the first of the commits. But it wouldn't work over c. arrays, f.e. We decided to remove the other interface for consistency. This way is also closer to std::accumulate. On Thu, Apr 6, 2017, 22:42 Danilo Piparo <notifications@github.com> wrote:. > *@dpiparo* commented on this pull request. > ------------------------------. >. > In math/mathcore/inc/Math/Util.h. > <https://github.com/root-project/root/pull/485#discussion_r110262637>:. >. > > }. >. > - void Add(const std::vector<T> &elements). > + /// Iterate over a datastructure referenced by a pointer and accumulate on the exising result. > + template <class Iterator>. > + void Add(const Iterator begin, const Iterator end). >. > @xvallspl <https://github.com/xvallspl>, @lmoneta. > <https://github.com/lmoneta> : is it really better to have begin and end. > here? Can't we pass something to iterate on? With range based looping this. > would not imply any code change in the body of the methods. >. > —. > You are receiving this because you were mentioned. >. >. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/485#pullrequestreview-31425116>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA0748psnJDZpWu_rkRmWiQYRdhLEACDks5rtU5LgaJpZM4M1zlr>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/485
https://github.com/root-project/root/pull/485:132,interoperability,interfac,interface,132,"Hi, Danilo. This was the case in the first of the commits. But it wouldn't work over c. arrays, f.e. We decided to remove the other interface for consistency. This way is also closer to std::accumulate. On Thu, Apr 6, 2017, 22:42 Danilo Piparo <notifications@github.com> wrote:. > *@dpiparo* commented on this pull request. > ------------------------------. >. > In math/mathcore/inc/Math/Util.h. > <https://github.com/root-project/root/pull/485#discussion_r110262637>:. >. > > }. >. > - void Add(const std::vector<T> &elements). > + /// Iterate over a datastructure referenced by a pointer and accumulate on the exising result. > + template <class Iterator>. > + void Add(const Iterator begin, const Iterator end). >. > @xvallspl <https://github.com/xvallspl>, @lmoneta. > <https://github.com/lmoneta> : is it really better to have begin and end. > here? Can't we pass something to iterate on? With range based looping this. > would not imply any code change in the body of the methods. >. > —. > You are receiving this because you were mentioned. >. >. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/485#pullrequestreview-31425116>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA0748psnJDZpWu_rkRmWiQYRdhLEACDks5rtU5LgaJpZM4M1zlr>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/485
https://github.com/root-project/root/pull/485:132,modifiability,interfac,interface,132,"Hi, Danilo. This was the case in the first of the commits. But it wouldn't work over c. arrays, f.e. We decided to remove the other interface for consistency. This way is also closer to std::accumulate. On Thu, Apr 6, 2017, 22:42 Danilo Piparo <notifications@github.com> wrote:. > *@dpiparo* commented on this pull request. > ------------------------------. >. > In math/mathcore/inc/Math/Util.h. > <https://github.com/root-project/root/pull/485#discussion_r110262637>:. >. > > }. >. > - void Add(const std::vector<T> &elements). > + /// Iterate over a datastructure referenced by a pointer and accumulate on the exising result. > + template <class Iterator>. > + void Add(const Iterator begin, const Iterator end). >. > @xvallspl <https://github.com/xvallspl>, @lmoneta. > <https://github.com/lmoneta> : is it really better to have begin and end. > here? Can't we pass something to iterate on? With range based looping this. > would not imply any code change in the body of the methods. >. > —. > You are receiving this because you were mentioned. >. >. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/485#pullrequestreview-31425116>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA0748psnJDZpWu_rkRmWiQYRdhLEACDks5rtU5LgaJpZM4M1zlr>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/485
https://github.com/root-project/root/pull/485:1255,security,auth,auth,1255,"Hi, Danilo. This was the case in the first of the commits. But it wouldn't work over c. arrays, f.e. We decided to remove the other interface for consistency. This way is also closer to std::accumulate. On Thu, Apr 6, 2017, 22:42 Danilo Piparo <notifications@github.com> wrote:. > *@dpiparo* commented on this pull request. > ------------------------------. >. > In math/mathcore/inc/Math/Util.h. > <https://github.com/root-project/root/pull/485#discussion_r110262637>:. >. > > }. >. > - void Add(const std::vector<T> &elements). > + /// Iterate over a datastructure referenced by a pointer and accumulate on the exising result. > + template <class Iterator>. > + void Add(const Iterator begin, const Iterator end). >. > @xvallspl <https://github.com/xvallspl>, @lmoneta. > <https://github.com/lmoneta> : is it really better to have begin and end. > here? Can't we pass something to iterate on? With range based looping this. > would not imply any code change in the body of the methods. >. > —. > You are receiving this because you were mentioned. >. >. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/485#pullrequestreview-31425116>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA0748psnJDZpWu_rkRmWiQYRdhLEACDks5rtU5LgaJpZM4M1zlr>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/485
https://github.com/root-project/root/pull/485:146,usability,consist,consistency,146,"Hi, Danilo. This was the case in the first of the commits. But it wouldn't work over c. arrays, f.e. We decided to remove the other interface for consistency. This way is also closer to std::accumulate. On Thu, Apr 6, 2017, 22:42 Danilo Piparo <notifications@github.com> wrote:. > *@dpiparo* commented on this pull request. > ------------------------------. >. > In math/mathcore/inc/Math/Util.h. > <https://github.com/root-project/root/pull/485#discussion_r110262637>:. >. > > }. >. > - void Add(const std::vector<T> &elements). > + /// Iterate over a datastructure referenced by a pointer and accumulate on the exising result. > + template <class Iterator>. > + void Add(const Iterator begin, const Iterator end). >. > @xvallspl <https://github.com/xvallspl>, @lmoneta. > <https://github.com/lmoneta> : is it really better to have begin and end. > here? Can't we pass something to iterate on? With range based looping this. > would not imply any code change in the body of the methods. >. > —. > You are receiving this because you were mentioned. >. >. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/485#pullrequestreview-31425116>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA0748psnJDZpWu_rkRmWiQYRdhLEACDks5rtU5LgaJpZM4M1zlr>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/485
https://github.com/root-project/root/pull/485:176,usability,close,closer,176,"Hi, Danilo. This was the case in the first of the commits. But it wouldn't work over c. arrays, f.e. We decided to remove the other interface for consistency. This way is also closer to std::accumulate. On Thu, Apr 6, 2017, 22:42 Danilo Piparo <notifications@github.com> wrote:. > *@dpiparo* commented on this pull request. > ------------------------------. >. > In math/mathcore/inc/Math/Util.h. > <https://github.com/root-project/root/pull/485#discussion_r110262637>:. >. > > }. >. > - void Add(const std::vector<T> &elements). > + /// Iterate over a datastructure referenced by a pointer and accumulate on the exising result. > + template <class Iterator>. > + void Add(const Iterator begin, const Iterator end). >. > @xvallspl <https://github.com/xvallspl>, @lmoneta. > <https://github.com/lmoneta> : is it really better to have begin and end. > here? Can't we pass something to iterate on? With range based looping this. > would not imply any code change in the body of the methods. >. > —. > You are receiving this because you were mentioned. >. >. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/485#pullrequestreview-31425116>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA0748psnJDZpWu_rkRmWiQYRdhLEACDks5rtU5LgaJpZM4M1zlr>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/485
https://github.com/root-project/root/pull/485:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/485
https://github.com/root-project/root/pull/485:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/485
https://github.com/root-project/root/pull/486:39,safety,test,test,39,I have doubts here on the names of the test. Can you check @vgvassilev?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/486
https://github.com/root-project/root/pull/486:39,testability,test,test,39,I have doubts here on the names of the test. Can you check @vgvassilev?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/486
https://github.com/root-project/root/pull/486:73,deployability,build,builds,73,"@martinmine, could we run all tests with gtest- prefix as part of the PR builds? @xvallspl looks good to me!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/486
https://github.com/root-project/root/pull/486:30,safety,test,tests,30,"@martinmine, could we run all tests with gtest- prefix as part of the PR builds? @xvallspl looks good to me!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/486
https://github.com/root-project/root/pull/486:30,testability,test,tests,30,"@martinmine, could we run all tests with gtest- prefix as part of the PR builds? @xvallspl looks good to me!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/486
https://github.com/root-project/root/pull/487:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/487
https://github.com/root-project/root/pull/487:53,interoperability,format,formatting,53,"I will merge this pull request, but I don't like the formatting changes. Changes like . Double_t Pi() { return 3.14159265358979323846; }. to . Double_t Pi() . { . return 3.14159265358979323846;. }. make the code less readable since more lines are used ! Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/487
https://github.com/root-project/root/pull/489:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/489
https://github.com/root-project/root/pull/491:229,performance,parallel,parallel,229,"Hi, Danilo. They are not in the tmp directory, but I guess they could end up there. Should be documented for the debugging case. I'm not sure what to call the switch, as I comented previously. Maybe. -jdbg? as It is only for the parallel case? maybe include it in the -v case? Cheers,. Xavi. On Tue, Apr 11, 2017 at 2:50 PM Danilo Piparo <notifications@github.com>. wrote:. > Hi @xvallspl <https://github.com/xvallspl>, nice. Are now the partial. > files in the /tmp or equivalent directory? Do we have a switch not to. > unlink them after merging and to print their names for debugging purposes? >. > —. > You are receiving this because you were mentioned. >. >. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/491#issuecomment-293249750>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA074yyke_AsTNkvQUsWssbN0gdB4yW_ks5ru3b_gaJpZM4M3FNv>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:860,security,auth,auth,860,"Hi, Danilo. They are not in the tmp directory, but I guess they could end up there. Should be documented for the debugging case. I'm not sure what to call the switch, as I comented previously. Maybe. -jdbg? as It is only for the parallel case? maybe include it in the -v case? Cheers,. Xavi. On Tue, Apr 11, 2017 at 2:50 PM Danilo Piparo <notifications@github.com>. wrote:. > Hi @xvallspl <https://github.com/xvallspl>, nice. Are now the partial. > files in the /tmp or equivalent directory? Do we have a switch not to. > unlink them after merging and to print their names for debugging purposes? >. > —. > You are receiving this because you were mentioned. >. >. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/491#issuecomment-293249750>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA074yyke_AsTNkvQUsWssbN0gdB4yW_ks5ru3b_gaJpZM4M3FNv>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:94,usability,document,documented,94,"Hi, Danilo. They are not in the tmp directory, but I guess they could end up there. Should be documented for the debugging case. I'm not sure what to call the switch, as I comented previously. Maybe. -jdbg? as It is only for the parallel case? maybe include it in the -v case? Cheers,. Xavi. On Tue, Apr 11, 2017 at 2:50 PM Danilo Piparo <notifications@github.com>. wrote:. > Hi @xvallspl <https://github.com/xvallspl>, nice. Are now the partial. > files in the /tmp or equivalent directory? Do we have a switch not to. > unlink them after merging and to print their names for debugging purposes? >. > —. > You are receiving this because you were mentioned. >. >. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/491#issuecomment-293249750>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA074yyke_AsTNkvQUsWssbN0gdB4yW_ks5ru3b_gaJpZM4M3FNv>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:212,modifiability,scal,scalar,212,"I would not overload -v with a change in behavior. I agree that -jdbg is a good option. -dbg might be even better (i.e. even if at the moment it only change the parallel behavior, it might change behavior in the scalar case also ... in the future).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:161,performance,parallel,parallel,161,"I would not overload -v with a change in behavior. I agree that -jdbg is a good option. -dbg might be even better (i.e. even if at the moment it only change the parallel behavior, it might change behavior in the scalar case also ... in the future).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:41,usability,behavi,behavior,41,"I would not overload -v with a change in behavior. I agree that -jdbg is a good option. -dbg might be even better (i.e. even if at the moment it only change the parallel behavior, it might change behavior in the scalar case also ... in the future).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:170,usability,behavi,behavior,170,"I would not overload -v with a change in behavior. I agree that -jdbg is a good option. -dbg might be even better (i.e. even if at the moment it only change the parallel behavior, it might change behavior in the scalar case also ... in the future).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:196,usability,behavi,behavior,196,"I would not overload -v with a change in behavior. I agree that -jdbg is a good option. -dbg might be even better (i.e. even if at the moment it only change the parallel behavior, it might change behavior in the scalar case also ... in the future).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:79,integrability,intermediar,intermediary,79,"> Are now the partial files in the /tmp or equivalent directory? . Because the intermediary files could be large or numerous, if we rely on a shared directory we ought to create them in a user-specific subdirectory. However using a shared directory may cause problem in itself. On some system /tmp is small and /var/tmp should be used (or maybe simply use what TMPDIR says). All in all, it might even be better to use a (subdirectory of the) output directory which is, per se, guaranteed to be writeable by the user (or the output can not be done). However, whether it has enough space for twice the final output size is a (small) concern.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:202,integrability,sub,subdirectory,202,"> Are now the partial files in the /tmp or equivalent directory? . Because the intermediary files could be large or numerous, if we rely on a shared directory we ought to create them in a user-specific subdirectory. However using a shared directory may cause problem in itself. On some system /tmp is small and /var/tmp should be used (or maybe simply use what TMPDIR says). All in all, it might even be better to use a (subdirectory of the) output directory which is, per se, guaranteed to be writeable by the user (or the output can not be done). However, whether it has enough space for twice the final output size is a (small) concern.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:421,integrability,sub,subdirectory,421,"> Are now the partial files in the /tmp or equivalent directory? . Because the intermediary files could be large or numerous, if we rely on a shared directory we ought to create them in a user-specific subdirectory. However using a shared directory may cause problem in itself. On some system /tmp is small and /var/tmp should be used (or maybe simply use what TMPDIR says). All in all, it might even be better to use a (subdirectory of the) output directory which is, per se, guaranteed to be writeable by the user (or the output can not be done). However, whether it has enough space for twice the final output size is a (small) concern.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:142,interoperability,share,shared,142,"> Are now the partial files in the /tmp or equivalent directory? . Because the intermediary files could be large or numerous, if we rely on a shared directory we ought to create them in a user-specific subdirectory. However using a shared directory may cause problem in itself. On some system /tmp is small and /var/tmp should be used (or maybe simply use what TMPDIR says). All in all, it might even be better to use a (subdirectory of the) output directory which is, per se, guaranteed to be writeable by the user (or the output can not be done). However, whether it has enough space for twice the final output size is a (small) concern.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:193,interoperability,specif,specific,193,"> Are now the partial files in the /tmp or equivalent directory? . Because the intermediary files could be large or numerous, if we rely on a shared directory we ought to create them in a user-specific subdirectory. However using a shared directory may cause problem in itself. On some system /tmp is small and /var/tmp should be used (or maybe simply use what TMPDIR says). All in all, it might even be better to use a (subdirectory of the) output directory which is, per se, guaranteed to be writeable by the user (or the output can not be done). However, whether it has enough space for twice the final output size is a (small) concern.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:232,interoperability,share,shared,232,"> Are now the partial files in the /tmp or equivalent directory? . Because the intermediary files could be large or numerous, if we rely on a shared directory we ought to create them in a user-specific subdirectory. However using a shared directory may cause problem in itself. On some system /tmp is small and /var/tmp should be used (or maybe simply use what TMPDIR says). All in all, it might even be better to use a (subdirectory of the) output directory which is, per se, guaranteed to be writeable by the user (or the output can not be done). However, whether it has enough space for twice the final output size is a (small) concern.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:79,modifiability,interm,intermediary,79,"> Are now the partial files in the /tmp or equivalent directory? . Because the intermediary files could be large or numerous, if we rely on a shared directory we ought to create them in a user-specific subdirectory. However using a shared directory may cause problem in itself. On some system /tmp is small and /var/tmp should be used (or maybe simply use what TMPDIR says). All in all, it might even be better to use a (subdirectory of the) output directory which is, per se, guaranteed to be writeable by the user (or the output can not be done). However, whether it has enough space for twice the final output size is a (small) concern.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:631,modifiability,concern,concern,631,"> Are now the partial files in the /tmp or equivalent directory? . Because the intermediary files could be large or numerous, if we rely on a shared directory we ought to create them in a user-specific subdirectory. However using a shared directory may cause problem in itself. On some system /tmp is small and /var/tmp should be used (or maybe simply use what TMPDIR says). All in all, it might even be better to use a (subdirectory of the) output directory which is, per se, guaranteed to be writeable by the user (or the output can not be done). However, whether it has enough space for twice the final output size is a (small) concern.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:345,testability,simpl,simply,345,"> Are now the partial files in the /tmp or equivalent directory? . Because the intermediary files could be large or numerous, if we rely on a shared directory we ought to create them in a user-specific subdirectory. However using a shared directory may cause problem in itself. On some system /tmp is small and /var/tmp should be used (or maybe simply use what TMPDIR says). All in all, it might even be better to use a (subdirectory of the) output directory which is, per se, guaranteed to be writeable by the user (or the output can not be done). However, whether it has enough space for twice the final output size is a (small) concern.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:631,testability,concern,concern,631,"> Are now the partial files in the /tmp or equivalent directory? . Because the intermediary files could be large or numerous, if we rely on a shared directory we ought to create them in a user-specific subdirectory. However using a shared directory may cause problem in itself. On some system /tmp is small and /var/tmp should be used (or maybe simply use what TMPDIR says). All in all, it might even be better to use a (subdirectory of the) output directory which is, per se, guaranteed to be writeable by the user (or the output can not be done). However, whether it has enough space for twice the final output size is a (small) concern.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:188,usability,user,user-specific,188,"> Are now the partial files in the /tmp or equivalent directory? . Because the intermediary files could be large or numerous, if we rely on a shared directory we ought to create them in a user-specific subdirectory. However using a shared directory may cause problem in itself. On some system /tmp is small and /var/tmp should be used (or maybe simply use what TMPDIR says). All in all, it might even be better to use a (subdirectory of the) output directory which is, per se, guaranteed to be writeable by the user (or the output can not be done). However, whether it has enough space for twice the final output size is a (small) concern.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:345,usability,simpl,simply,345,"> Are now the partial files in the /tmp or equivalent directory? . Because the intermediary files could be large or numerous, if we rely on a shared directory we ought to create them in a user-specific subdirectory. However using a shared directory may cause problem in itself. On some system /tmp is small and /var/tmp should be used (or maybe simply use what TMPDIR says). All in all, it might even be better to use a (subdirectory of the) output directory which is, per se, guaranteed to be writeable by the user (or the output can not be done). However, whether it has enough space for twice the final output size is a (small) concern.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:511,usability,user,user,511,"> Are now the partial files in the /tmp or equivalent directory? . Because the intermediary files could be large or numerous, if we rely on a shared directory we ought to create them in a user-specific subdirectory. However using a shared directory may cause problem in itself. On some system /tmp is small and /var/tmp should be used (or maybe simply use what TMPDIR says). All in all, it might even be better to use a (subdirectory of the) output directory which is, per se, guaranteed to be writeable by the user (or the output can not be done). However, whether it has enough space for twice the final output size is a (small) concern.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:145,interoperability,share,shared,145,"@pcanal: In a previous incarnation of this pr I suggested to use TSystem to get the right tmp dir. The local dir, in case of eos or afs or other shared file systems can become a huge performance penalty.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:183,performance,perform,performance,183,"@pcanal: In a previous incarnation of this pr I suggested to use TSystem to get the right tmp dir. The local dir, in case of eos or afs or other shared file systems can become a huge performance penalty.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:183,usability,perform,performance,183,"@pcanal: In a previous incarnation of this pr I suggested to use TSystem to get the right tmp dir. The local dir, in case of eos or afs or other shared file systems can become a huge performance penalty.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:29,interoperability,specif,specifying,29,Should I add a -d option for specifying the work directory and make it $TMP by default?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:31,interoperability,specif,specifying,31,"> Should I add a -d option for specifying the work directory and make it $TMP by default? Good idea. > In a previous incarnation of this pr I suggested to use TSystem to get the right tmp dir. The local dir, in case of eos or afs or other shared file systems can become a huge performance penalty. Good point indeed. I wonder if we have a means of knowing whether the destination directory is local (aka 'fast') or not. We can find out whether the file URL is on the local node or not (via TFile::GetType) but this does not tell us whether it is on afs or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:239,interoperability,share,shared,239,"> Should I add a -d option for specifying the work directory and make it $TMP by default? Good idea. > In a previous incarnation of this pr I suggested to use TSystem to get the right tmp dir. The local dir, in case of eos or afs or other shared file systems can become a huge performance penalty. Good point indeed. I wonder if we have a means of knowing whether the destination directory is local (aka 'fast') or not. We can find out whether the file URL is on the local node or not (via TFile::GetType) but this does not tell us whether it is on afs or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:277,performance,perform,performance,277,"> Should I add a -d option for specifying the work directory and make it $TMP by default? Good idea. > In a previous incarnation of this pr I suggested to use TSystem to get the right tmp dir. The local dir, in case of eos or afs or other shared file systems can become a huge performance penalty. Good point indeed. I wonder if we have a means of knowing whether the destination directory is local (aka 'fast') or not. We can find out whether the file URL is on the local node or not (via TFile::GetType) but this does not tell us whether it is on afs or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:515,reliability,doe,does,515,"> Should I add a -d option for specifying the work directory and make it $TMP by default? Good idea. > In a previous incarnation of this pr I suggested to use TSystem to get the right tmp dir. The local dir, in case of eos or afs or other shared file systems can become a huge performance penalty. Good point indeed. I wonder if we have a means of knowing whether the destination directory is local (aka 'fast') or not. We can find out whether the file URL is on the local node or not (via TFile::GetType) but this does not tell us whether it is on afs or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:277,usability,perform,performance,277,"> Should I add a -d option for specifying the work directory and make it $TMP by default? Good idea. > In a previous incarnation of this pr I suggested to use TSystem to get the right tmp dir. The local dir, in case of eos or afs or other shared file systems can become a huge performance penalty. Good point indeed. I wonder if we have a means of knowing whether the destination directory is local (aka 'fast') or not. We can find out whether the file URL is on the local node or not (via TFile::GetType) but this does not tell us whether it is on afs or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:83,availability,avail,available,83,@xvallspl : I reverted the PR. It breaks classic builds as TProcessExecutor is not available there. Perhaps we can take this opportunity to have a special case for the single threaded mode also in the cmake builds which is identical to the previous version of hadd?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:49,deployability,build,builds,49,@xvallspl : I reverted the PR. It breaks classic builds as TProcessExecutor is not available there. Perhaps we can take this opportunity to have a special case for the single threaded mode also in the cmake builds which is identical to the previous version of hadd?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:207,deployability,build,builds,207,@xvallspl : I reverted the PR. It breaks classic builds as TProcessExecutor is not available there. Perhaps we can take this opportunity to have a special case for the single threaded mode also in the cmake builds which is identical to the previous version of hadd?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:249,deployability,version,version,249,@xvallspl : I reverted the PR. It breaks classic builds as TProcessExecutor is not available there. Perhaps we can take this opportunity to have a special case for the single threaded mode also in the cmake builds which is identical to the previous version of hadd?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:249,integrability,version,version,249,@xvallspl : I reverted the PR. It breaks classic builds as TProcessExecutor is not available there. Perhaps we can take this opportunity to have a special case for the single threaded mode also in the cmake builds which is identical to the previous version of hadd?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:249,modifiability,version,version,249,@xvallspl : I reverted the PR. It breaks classic builds as TProcessExecutor is not available there. Perhaps we can take this opportunity to have a special case for the single threaded mode also in the cmake builds which is identical to the previous version of hadd?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:83,reliability,availab,available,83,@xvallspl : I reverted the PR. It breaks classic builds as TProcessExecutor is not available there. Perhaps we can take this opportunity to have a special case for the single threaded mode also in the cmake builds which is identical to the previous version of hadd?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:83,safety,avail,available,83,@xvallspl : I reverted the PR. It breaks classic builds as TProcessExecutor is not available there. Perhaps we can take this opportunity to have a special case for the single threaded mode also in the cmake builds which is identical to the previous version of hadd?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:83,security,availab,available,83,@xvallspl : I reverted the PR. It breaks classic builds as TProcessExecutor is not available there. Perhaps we can take this opportunity to have a special case for the single threaded mode also in the cmake builds which is identical to the previous version of hadd?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/491:223,security,ident,identical,223,@xvallspl : I reverted the PR. It breaks classic builds as TProcessExecutor is not available there. Perhaps we can take this opportunity to have a special case for the single threaded mode also in the cmake builds which is identical to the previous version of hadd?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/491
https://github.com/root-project/root/pull/492:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/492
https://github.com/root-project/root/pull/493:33,safety,test,test,33,It looks like we need some wider test coverage.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/493
https://github.com/root-project/root/pull/493:33,testability,test,test,33,It looks like we need some wider test coverage.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/493
https://github.com/root-project/root/pull/493:38,testability,coverag,coverage,38,It looks like we need some wider test coverage.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/493
https://github.com/root-project/root/pull/493:14,safety,test,testing,14,"Sure, but I'm testing ROOT here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/493
https://github.com/root-project/root/pull/493:14,testability,test,testing,14,"Sure, but I'm testing ROOT here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/493
https://github.com/root-project/root/pull/493:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/493
https://github.com/root-project/root/pull/493:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/493
https://github.com/root-project/root/pull/493:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/493
https://github.com/root-project/root/pull/494:14,interoperability,format,format,14,Applied clang-format to please travis...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:148,deployability,build,building,148,"My clang-format somehow gave me a different diff than travis. We should probably wait until Travis is green to run Jenkins. That would save us from building the same code with only formatting differences, by only building the final, properly formated code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:213,deployability,build,building,213,"My clang-format somehow gave me a different diff than travis. We should probably wait until Travis is green to run Jenkins. That would save us from building the same code with only formatting differences, by only building the final, properly formated code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:102,energy efficiency,green,green,102,"My clang-format somehow gave me a different diff than travis. We should probably wait until Travis is green to run Jenkins. That would save us from building the same code with only formatting differences, by only building the final, properly formated code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:9,interoperability,format,format,9,"My clang-format somehow gave me a different diff than travis. We should probably wait until Travis is green to run Jenkins. That would save us from building the same code with only formatting differences, by only building the final, properly formated code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:181,interoperability,format,formatting,181,"My clang-format somehow gave me a different diff than travis. We should probably wait until Travis is green to run Jenkins. That would save us from building the same code with only formatting differences, by only building the final, properly formated code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:242,interoperability,format,formated,242,"My clang-format somehow gave me a different diff than travis. We should probably wait until Travis is green to run Jenkins. That would save us from building the same code with only formatting differences, by only building the final, properly formated code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:11,deployability,build,build,11,@phsft-bot build! I believe the PR builds failed because of a glitch elsewhere before.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:35,deployability,build,builds,35,@phsft-bot build! I believe the PR builds failed because of a glitch elsewhere before.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:42,deployability,fail,failed,42,@phsft-bot build! I believe the PR builds failed because of a glitch elsewhere before.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:42,reliability,fail,failed,42,@phsft-bot build! I believe the PR builds failed because of a glitch elsewhere before.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:763,availability,error,error,763,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:63,deployability,fail,fails,63,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:148,deployability,configurat,configuration,148,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:547,energy efficiency,current,current,547,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:632,energy efficiency,current,current,632,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:817,energy efficiency,Current,Current,817,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:148,integrability,configur,configuration,148,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:407,integrability,pub,public,407,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:452,integrability,Batch,Batch,452,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:141,interoperability,format,format,141,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:148,modifiability,configur,configuration,148,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:452,performance,Batch,Batch,452,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:530,performance,perform,performed,530,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:615,performance,perform,performed,615,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:763,performance,error,error,763,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:63,reliability,fail,fails,63,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:58,safety,test,test,58,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:758,safety,test,test,758,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:763,safety,error,error,763,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:148,security,configur,configuration,148,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:564,security,session,session,564,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:649,security,session,session,649,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:58,testability,test,test,58,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:758,testability,test,test,758,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:220,usability,Minim,Minimizers,220,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:258,usability,Minim,Minimizers,258,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:332,usability,Minim,Minimizers,332,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:375,usability,Minim,Minimizers,375,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:530,usability,perform,performed,530,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:615,usability,perform,performed,615,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:763,usability,error,error,763,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff. diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. index a310706..517faa3 100644. --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h. +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h. @@ -59,7 +59,7 @@ public:. . private:. size_t fBatchSize; ///< Batch size to use for the training. - size_t fStepCount; ///< Number of steps performed in the current training session. + size_t fStepCount; ///< Number of steps performed in the current training session. size_t fConvergenceSteps; ///< Number of training epochs without considerable. ///< decrease in the test error for convergence. size_t fConvergenceCount; ///< Current number of training epochs without. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:358,integrability,sub,submit,358,"Hi, . What is the reasoning behing this pull requests ? What is the bug that fixes and which test shows the fix ? . I am hesitant to change working code, just for formatting (e.g. from class to struct). These changes are useless and should not be made ! Also you are missing now the initialisations of several data members. . If you want to fix a bug please submit just the fix and ignore the rest (e.g clang-format). Best . Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:163,interoperability,format,formatting,163,"Hi, . What is the reasoning behing this pull requests ? What is the bug that fixes and which test shows the fix ? . I am hesitant to change working code, just for formatting (e.g. from class to struct). These changes are useless and should not be made ! Also you are missing now the initialisations of several data members. . If you want to fix a bug please submit just the fix and ignore the rest (e.g clang-format). Best . Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:409,interoperability,format,format,409,"Hi, . What is the reasoning behing this pull requests ? What is the bug that fixes and which test shows the fix ? . I am hesitant to change working code, just for formatting (e.g. from class to struct). These changes are useless and should not be made ! Also you are missing now the initialisations of several data members. . If you want to fix a bug please submit just the fix and ignore the rest (e.g clang-format). Best . Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:93,safety,test,test,93,"Hi, . What is the reasoning behing this pull requests ? What is the bug that fixes and which test shows the fix ? . I am hesitant to change working code, just for formatting (e.g. from class to struct). These changes are useless and should not be made ! Also you are missing now the initialisations of several data members. . If you want to fix a bug please submit just the fix and ignore the rest (e.g clang-format). Best . Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:93,testability,test,test,93,"Hi, . What is the reasoning behing this pull requests ? What is the bug that fixes and which test shows the fix ? . I am hesitant to change working code, just for formatting (e.g. from class to struct). These changes are useless and should not be made ! Also you are missing now the initialisations of several data members. . If you want to fix a bug please submit just the fix and ignore the rest (e.g clang-format). Best . Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:35,deployability,fail,failing,35,"Hi @lmoneta, the bug I fixed was a failing `testMinimizationCpu` test (in another PR). However, during the analysis of the bug, I've seen some places where the code could be improved. The conversion of LossFunctionEventInfo to a struct was a suggestion by Alex. There is a real bug fix for a memory leak, however, that we should merge, even if the rest of the code changes are discarded. The functionality of the minimizer is not changed, the improvements are in simplicity and readability of the code. For what class do you think I'm missing initializations to data members?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:188,interoperability,convers,conversion,188,"Hi @lmoneta, the bug I fixed was a failing `testMinimizationCpu` test (in another PR). However, during the analysis of the bug, I've seen some places where the code could be improved. The conversion of LossFunctionEventInfo to a struct was a suggestion by Alex. There is a real bug fix for a memory leak, however, that we should merge, even if the rest of the code changes are discarded. The functionality of the minimizer is not changed, the improvements are in simplicity and readability of the code. For what class do you think I'm missing initializations to data members?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:292,performance,memor,memory,292,"Hi @lmoneta, the bug I fixed was a failing `testMinimizationCpu` test (in another PR). However, during the analysis of the bug, I've seen some places where the code could be improved. The conversion of LossFunctionEventInfo to a struct was a suggestion by Alex. There is a real bug fix for a memory leak, however, that we should merge, even if the rest of the code changes are discarded. The functionality of the minimizer is not changed, the improvements are in simplicity and readability of the code. For what class do you think I'm missing initializations to data members?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:35,reliability,fail,failing,35,"Hi @lmoneta, the bug I fixed was a failing `testMinimizationCpu` test (in another PR). However, during the analysis of the bug, I've seen some places where the code could be improved. The conversion of LossFunctionEventInfo to a struct was a suggestion by Alex. There is a real bug fix for a memory leak, however, that we should merge, even if the rest of the code changes are discarded. The functionality of the minimizer is not changed, the improvements are in simplicity and readability of the code. For what class do you think I'm missing initializations to data members?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:44,safety,test,testMinimizationCpu,44,"Hi @lmoneta, the bug I fixed was a failing `testMinimizationCpu` test (in another PR). However, during the analysis of the bug, I've seen some places where the code could be improved. The conversion of LossFunctionEventInfo to a struct was a suggestion by Alex. There is a real bug fix for a memory leak, however, that we should merge, even if the rest of the code changes are discarded. The functionality of the minimizer is not changed, the improvements are in simplicity and readability of the code. For what class do you think I'm missing initializations to data members?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:65,safety,test,test,65,"Hi @lmoneta, the bug I fixed was a failing `testMinimizationCpu` test (in another PR). However, during the analysis of the bug, I've seen some places where the code could be improved. The conversion of LossFunctionEventInfo to a struct was a suggestion by Alex. There is a real bug fix for a memory leak, however, that we should merge, even if the rest of the code changes are discarded. The functionality of the minimizer is not changed, the improvements are in simplicity and readability of the code. For what class do you think I'm missing initializations to data members?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:202,security,Loss,LossFunctionEventInfo,202,"Hi @lmoneta, the bug I fixed was a failing `testMinimizationCpu` test (in another PR). However, during the analysis of the bug, I've seen some places where the code could be improved. The conversion of LossFunctionEventInfo to a struct was a suggestion by Alex. There is a real bug fix for a memory leak, however, that we should merge, even if the rest of the code changes are discarded. The functionality of the minimizer is not changed, the improvements are in simplicity and readability of the code. For what class do you think I'm missing initializations to data members?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:44,testability,test,testMinimizationCpu,44,"Hi @lmoneta, the bug I fixed was a failing `testMinimizationCpu` test (in another PR). However, during the analysis of the bug, I've seen some places where the code could be improved. The conversion of LossFunctionEventInfo to a struct was a suggestion by Alex. There is a real bug fix for a memory leak, however, that we should merge, even if the rest of the code changes are discarded. The functionality of the minimizer is not changed, the improvements are in simplicity and readability of the code. For what class do you think I'm missing initializations to data members?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:65,testability,test,test,65,"Hi @lmoneta, the bug I fixed was a failing `testMinimizationCpu` test (in another PR). However, during the analysis of the bug, I've seen some places where the code could be improved. The conversion of LossFunctionEventInfo to a struct was a suggestion by Alex. There is a real bug fix for a memory leak, however, that we should merge, even if the rest of the code changes are discarded. The functionality of the minimizer is not changed, the improvements are in simplicity and readability of the code. For what class do you think I'm missing initializations to data members?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:463,testability,simpl,simplicity,463,"Hi @lmoneta, the bug I fixed was a failing `testMinimizationCpu` test (in another PR). However, during the analysis of the bug, I've seen some places where the code could be improved. The conversion of LossFunctionEventInfo to a struct was a suggestion by Alex. There is a real bug fix for a memory leak, however, that we should merge, even if the rest of the code changes are discarded. The functionality of the minimizer is not changed, the improvements are in simplicity and readability of the code. For what class do you think I'm missing initializations to data members?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:292,usability,memor,memory,292,"Hi @lmoneta, the bug I fixed was a failing `testMinimizationCpu` test (in another PR). However, during the analysis of the bug, I've seen some places where the code could be improved. The conversion of LossFunctionEventInfo to a struct was a suggestion by Alex. There is a real bug fix for a memory leak, however, that we should merge, even if the rest of the code changes are discarded. The functionality of the minimizer is not changed, the improvements are in simplicity and readability of the code. For what class do you think I'm missing initializations to data members?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:413,usability,minim,minimizer,413,"Hi @lmoneta, the bug I fixed was a failing `testMinimizationCpu` test (in another PR). However, during the analysis of the bug, I've seen some places where the code could be improved. The conversion of LossFunctionEventInfo to a struct was a suggestion by Alex. There is a real bug fix for a memory leak, however, that we should merge, even if the rest of the code changes are discarded. The functionality of the minimizer is not changed, the improvements are in simplicity and readability of the code. For what class do you think I'm missing initializations to data members?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:463,usability,simpl,simplicity,463,"Hi @lmoneta, the bug I fixed was a failing `testMinimizationCpu` test (in another PR). However, during the analysis of the bug, I've seen some places where the code could be improved. The conversion of LossFunctionEventInfo to a struct was a suggestion by Alex. There is a real bug fix for a memory leak, however, that we should merge, even if the rest of the code changes are discarded. The functionality of the minimizer is not changed, the improvements are in simplicity and readability of the code. For what class do you think I'm missing initializations to data members?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:212,modifiability,variab,variables,212,"> I see the data member of the new struct are not initialised. The constructor is missing now. If we add a constructor, we cannot use aggregate initialization (it ceases to be a POD data type). I initialized the variables now. > The member fROCAVG of HyperParameterOptimizationResult is also not initialised. This variable is initialized in the constructor's initialization list. There is no need to initialize it where I removed the code to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:314,modifiability,variab,variable,314,"> I see the data member of the new struct are not initialised. The constructor is missing now. If we add a constructor, we cannot use aggregate initialization (it ceases to be a POD data type). I initialized the variables now. > The member fROCAVG of HyperParameterOptimizationResult is also not initialised. This variable is initialized in the constructor's initialization list. There is no need to initialize it where I removed the code to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:99,availability,failur,failures,99,"I dropped the commit for 'LossFunctionEventInfo' conversion to a struct, as there were compilation failures. The other commits are worth merging, however, especially the one for a memory leak fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:99,deployability,fail,failures,99,"I dropped the commit for 'LossFunctionEventInfo' conversion to a struct, as there were compilation failures. The other commits are worth merging, however, especially the one for a memory leak fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:49,interoperability,convers,conversion,49,"I dropped the commit for 'LossFunctionEventInfo' conversion to a struct, as there were compilation failures. The other commits are worth merging, however, especially the one for a memory leak fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:99,performance,failur,failures,99,"I dropped the commit for 'LossFunctionEventInfo' conversion to a struct, as there were compilation failures. The other commits are worth merging, however, especially the one for a memory leak fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:180,performance,memor,memory,180,"I dropped the commit for 'LossFunctionEventInfo' conversion to a struct, as there were compilation failures. The other commits are worth merging, however, especially the one for a memory leak fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:99,reliability,fail,failures,99,"I dropped the commit for 'LossFunctionEventInfo' conversion to a struct, as there were compilation failures. The other commits are worth merging, however, especially the one for a memory leak fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:26,security,Loss,LossFunctionEventInfo,26,"I dropped the commit for 'LossFunctionEventInfo' conversion to a struct, as there were compilation failures. The other commits are worth merging, however, especially the one for a memory leak fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:180,usability,memor,memory,180,"I dropped the commit for 'LossFunctionEventInfo' conversion to a struct, as there were compilation failures. The other commits are worth merging, however, especially the one for a memory leak fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/495:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/495
https://github.com/root-project/root/pull/495:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/495
https://github.com/root-project/root/pull/495:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/495
https://github.com/root-project/root/pull/496:16,deployability,configurat,configuration,16,"Seems to be, my configuration for clang-format does not really match with the travis CI.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:16,integrability,configur,configuration,16,"Seems to be, my configuration for clang-format does not really match with the travis CI.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:40,interoperability,format,format,40,"Seems to be, my configuration for clang-format does not really match with the travis CI.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:16,modifiability,configur,configuration,16,"Seems to be, my configuration for clang-format does not really match with the travis CI.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:47,reliability,doe,does,47,"Seems to be, my configuration for clang-format does not really match with the travis CI.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:16,security,configur,configuration,16,"Seems to be, my configuration for clang-format does not really match with the travis CI.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:55,usability,prototyp,prototype,55,Please ignore it - it has one line of code from webgui prototype. I need to remove it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:55,deployability,updat,update,55,"I will try to fix compilation problem. Tomorrow I will update my ""http_travis"" branch. After such update it should be possible to merge request. But another problem with clangFormat will remain. Formatting rules here https://root.cern.ch/coding-conventions does not correspond to Travis CI checker.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:98,deployability,updat,update,98,"I will try to fix compilation problem. Tomorrow I will update my ""http_travis"" branch. After such update it should be possible to merge request. But another problem with clangFormat will remain. Formatting rules here https://root.cern.ch/coding-conventions does not correspond to Travis CI checker.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:195,interoperability,Format,Formatting,195,"I will try to fix compilation problem. Tomorrow I will update my ""http_travis"" branch. After such update it should be possible to merge request. But another problem with clangFormat will remain. Formatting rules here https://root.cern.ch/coding-conventions does not correspond to Travis CI checker.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:257,reliability,doe,does,257,"I will try to fix compilation problem. Tomorrow I will update my ""http_travis"" branch. After such update it should be possible to merge request. But another problem with clangFormat will remain. Formatting rules here https://root.cern.ch/coding-conventions does not correspond to Travis CI checker.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:55,safety,updat,update,55,"I will try to fix compilation problem. Tomorrow I will update my ""http_travis"" branch. After such update it should be possible to merge request. But another problem with clangFormat will remain. Formatting rules here https://root.cern.ch/coding-conventions does not correspond to Travis CI checker.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:98,safety,updat,update,98,"I will try to fix compilation problem. Tomorrow I will update my ""http_travis"" branch. After such update it should be possible to merge request. But another problem with clangFormat will remain. Formatting rules here https://root.cern.ch/coding-conventions does not correspond to Travis CI checker.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:55,security,updat,update,55,"I will try to fix compilation problem. Tomorrow I will update my ""http_travis"" branch. After such update it should be possible to merge request. But another problem with clangFormat will remain. Formatting rules here https://root.cern.ch/coding-conventions does not correspond to Travis CI checker.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:98,security,updat,update,98,"I will try to fix compilation problem. Tomorrow I will update my ""http_travis"" branch. After such update it should be possible to merge request. But another problem with clangFormat will remain. Formatting rules here https://root.cern.ch/coding-conventions does not correspond to Travis CI checker.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:50,integrability,repositor,repository,50,You should just be using the .clang-format in the repository directly,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:36,interoperability,format,format,36,You should just be using the .clang-format in the repository directly,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/496:50,interoperability,repositor,repository,50,You should just be using the .clang-format in the repository directly,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/497:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:88,deployability,build,building-root,88,"@amadio, should we put the veccore enablement options on the [web](https://root.cern.ch/building-root)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:165,energy efficiency,current,current,165,"@vgvassilev . > should we put the veccore enablement options on the web? I would prefer to wait until developments using VecCore within ROOT are more stable. In its current form, the targets are not setup correctly, so if you configure ROOT with VecCore=ON and Vc=OFF things are likely to break. That should definitely not be the case in the long term. Either we use Vc directly, or we rely on VecCore and write code that won't break unless Vc is turned ON.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:226,integrability,configur,configure,226,"@vgvassilev . > should we put the veccore enablement options on the web? I would prefer to wait until developments using VecCore within ROOT are more stable. In its current form, the targets are not setup correctly, so if you configure ROOT with VecCore=ON and Vc=OFF things are likely to break. That should definitely not be the case in the long term. Either we use Vc directly, or we rely on VecCore and write code that won't break unless Vc is turned ON.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:226,modifiability,configur,configure,226,"@vgvassilev . > should we put the veccore enablement options on the web? I would prefer to wait until developments using VecCore within ROOT are more stable. In its current form, the targets are not setup correctly, so if you configure ROOT with VecCore=ON and Vc=OFF things are likely to break. That should definitely not be the case in the long term. Either we use Vc directly, or we rely on VecCore and write code that won't break unless Vc is turned ON.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:226,security,configur,configure,226,"@vgvassilev . > should we put the veccore enablement options on the web? I would prefer to wait until developments using VecCore within ROOT are more stable. In its current form, the targets are not setup correctly, so if you configure ROOT with VecCore=ON and Vc=OFF things are likely to break. That should definitely not be the case in the long term. Either we use Vc directly, or we rely on VecCore and write code that won't break unless Vc is turned ON.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:81,usability,prefer,prefer,81,"@vgvassilev . > should we put the veccore enablement options on the web? I would prefer to wait until developments using VecCore within ROOT are more stable. In its current form, the targets are not setup correctly, so if you configure ROOT with VecCore=ON and Vc=OFF things are likely to break. That should definitely not be the case in the long term. Either we use Vc directly, or we rely on VecCore and write code that won't break unless Vc is turned ON.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/498:36,availability,error,error,36,"Hi @amadio, nice pinpointing of the error. I wonder if it wouldn't be better to increase the threshold for 32bits builds only rather than increasing it for 64bits too in order to leave the test as it was where it succeded.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:114,deployability,build,builds,114,"Hi @amadio, nice pinpointing of the error. I wonder if it wouldn't be better to increase the threshold for 32bits builds only rather than increasing it for 64bits too in order to leave the test as it was where it succeded.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:36,performance,error,error,36,"Hi @amadio, nice pinpointing of the error. I wonder if it wouldn't be better to increase the threshold for 32bits builds only rather than increasing it for 64bits too in order to leave the test as it was where it succeded.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:36,safety,error,error,36,"Hi @amadio, nice pinpointing of the error. I wonder if it wouldn't be better to increase the threshold for 32bits builds only rather than increasing it for 64bits too in order to leave the test as it was where it succeded.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:189,safety,test,test,189,"Hi @amadio, nice pinpointing of the error. I wonder if it wouldn't be better to increase the threshold for 32bits builds only rather than increasing it for 64bits too in order to leave the test as it was where it succeded.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:189,testability,test,test,189,"Hi @amadio, nice pinpointing of the error. I wonder if it wouldn't be better to increase the threshold for 32bits builds only rather than increasing it for 64bits too in order to leave the test as it was where it succeded.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:36,usability,error,error,36,"Hi @amadio, nice pinpointing of the error. I wonder if it wouldn't be better to increase the threshold for 32bits builds only rather than increasing it for 64bits too in order to leave the test as it was where it succeded.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:30,safety,test,test,30,"Hi @dpiparo, right above, the test for Point is done like this, so I wouldn't worry about changing the test. It was probably just an oversight. We should avoid using `==` for floating point as much as possible exactly because of this type of problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:103,safety,test,test,103,"Hi @dpiparo, right above, the test for Point is done like this, so I wouldn't worry about changing the test. It was probably just an oversight. We should avoid using `==` for floating point as much as possible exactly because of this type of problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:154,safety,avoid,avoid,154,"Hi @dpiparo, right above, the test for Point is done like this, so I wouldn't worry about changing the test. It was probably just an oversight. We should avoid using `==` for floating point as much as possible exactly because of this type of problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:30,testability,test,test,30,"Hi @dpiparo, right above, the test for Point is done like this, so I wouldn't worry about changing the test. It was probably just an oversight. We should avoid using `==` for floating point as much as possible exactly because of this type of problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:103,testability,test,test,103,"Hi @dpiparo, right above, the test for Point is done like this, so I wouldn't worry about changing the test. It was probably just an oversight. We should avoid using `==` for floating point as much as possible exactly because of this type of problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:56,safety,test,test,56,Hi @amadio I understand the point. But a very stringent test was in place for x86_64 and somehow I feel that this gives away some of that rigor.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:13,testability,understand,understand,13,Hi @amadio I understand the point. But a very stringent test was in place for x86_64 and somehow I feel that this gives away some of that rigor.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:56,testability,test,test,56,Hi @amadio I understand the point. But a very stringent test was in place for x86_64 and somehow I feel that this gives away some of that rigor.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:65,safety,test,tests,65,@dpiparo we did correct other cases similar to this one in other tests with @martinmine. Comparing floating point numbers for equality has to be avoided.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:145,safety,avoid,avoided,145,@dpiparo we did correct other cases similar to this one in other tests with @martinmine. Comparing floating point numbers for equality has to be avoided.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:65,testability,test,tests,65,@dpiparo we did correct other cases similar to this one in other tests with @martinmine. Comparing floating point numbers for equality has to be avoided.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:7,deployability,updat,update,7,I will update this to use the Google test macro as suggested by Vassil.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:7,safety,updat,update,7,I will update this to use the Google test macro as suggested by Vassil.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:37,safety,test,test,37,I will update this to use the Google test macro as suggested by Vassil.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:7,security,updat,update,7,I will update this to use the Google test macro as suggested by Vassil.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:37,testability,test,test,37,I will update this to use the Google test macro as suggested by Vassil.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:121,availability,toler,tolerance,121,@amadio: sure for google test if this does not imply re-writing the entire exec but just reformulating the equality with tolerance. @mato: with my comment I just wanted to remark that we may loose sensitivity on deviations deriving from factors different from the architecture on x86_64 builds. The 10 epsilons threshold in general is ok for physics performance.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:287,deployability,build,builds,287,@amadio: sure for google test if this does not imply re-writing the entire exec but just reformulating the equality with tolerance. @mato: with my comment I just wanted to remark that we may loose sensitivity on deviations deriving from factors different from the architecture on x86_64 builds. The 10 epsilons threshold in general is ok for physics performance.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:264,interoperability,architectur,architecture,264,@amadio: sure for google test if this does not imply re-writing the entire exec but just reformulating the equality with tolerance. @mato: with my comment I just wanted to remark that we may loose sensitivity on deviations deriving from factors different from the architecture on x86_64 builds. The 10 epsilons threshold in general is ok for physics performance.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:350,performance,perform,performance,350,@amadio: sure for google test if this does not imply re-writing the entire exec but just reformulating the equality with tolerance. @mato: with my comment I just wanted to remark that we may loose sensitivity on deviations deriving from factors different from the architecture on x86_64 builds. The 10 epsilons threshold in general is ok for physics performance.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:38,reliability,doe,does,38,@amadio: sure for google test if this does not imply re-writing the entire exec but just reformulating the equality with tolerance. @mato: with my comment I just wanted to remark that we may loose sensitivity on deviations deriving from factors different from the architecture on x86_64 builds. The 10 epsilons threshold in general is ok for physics performance.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:121,reliability,toleran,tolerance,121,@amadio: sure for google test if this does not imply re-writing the entire exec but just reformulating the equality with tolerance. @mato: with my comment I just wanted to remark that we may loose sensitivity on deviations deriving from factors different from the architecture on x86_64 builds. The 10 epsilons threshold in general is ok for physics performance.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:25,safety,test,test,25,@amadio: sure for google test if this does not imply re-writing the entire exec but just reformulating the equality with tolerance. @mato: with my comment I just wanted to remark that we may loose sensitivity on deviations deriving from factors different from the architecture on x86_64 builds. The 10 epsilons threshold in general is ok for physics performance.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:25,testability,test,test,25,@amadio: sure for google test if this does not imply re-writing the entire exec but just reformulating the equality with tolerance. @mato: with my comment I just wanted to remark that we may loose sensitivity on deviations deriving from factors different from the architecture on x86_64 builds. The 10 epsilons threshold in general is ok for physics performance.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:350,usability,perform,performance,350,@amadio: sure for google test if this does not imply re-writing the entire exec but just reformulating the equality with tolerance. @mato: with my comment I just wanted to remark that we may loose sensitivity on deviations deriving from factors different from the architecture on x86_64 builds. The 10 epsilons threshold in general is ok for physics performance.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:184,integrability,sub,subsequent,184,"So, since `ASSERT_FLOAT_EQ` does not return anything, I guess I'd have to fully convert the file to a set of Google tests to use it. I'd rather fix what is broken now and do that in a subsequent PR. What does everyone think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:28,reliability,doe,does,28,"So, since `ASSERT_FLOAT_EQ` does not return anything, I guess I'd have to fully convert the file to a set of Google tests to use it. I'd rather fix what is broken now and do that in a subsequent PR. What does everyone think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:204,reliability,doe,does,204,"So, since `ASSERT_FLOAT_EQ` does not return anything, I guess I'd have to fully convert the file to a set of Google tests to use it. I'd rather fix what is broken now and do that in a subsequent PR. What does everyone think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:116,safety,test,tests,116,"So, since `ASSERT_FLOAT_EQ` does not return anything, I guess I'd have to fully convert the file to a set of Google tests to use it. I'd rather fix what is broken now and do that in a subsequent PR. What does everyone think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:116,testability,test,tests,116,"So, since `ASSERT_FLOAT_EQ` does not return anything, I guess I'd have to fully convert the file to a set of Google tests to use it. I'd rather fix what is broken now and do that in a subsequent PR. What does everyone think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:53,integrability,sub,subsequent,53,> I'd rather fix what is broken now and do that in a subsequent PR. . @amadio I agree with you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/499:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/499
https://github.com/root-project/root/pull/499:0,availability,Error,Error,0,"Error was ""cannot run git"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/499
https://github.com/root-project/root/pull/499:0,performance,Error,Error,0,"Error was ""cannot run git"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/499
https://github.com/root-project/root/pull/499:0,safety,Error,Error,0,"Error was ""cannot run git"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/499
https://github.com/root-project/root/pull/499:0,usability,Error,Error,0,"Error was ""cannot run git"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/499
https://github.com/root-project/root/pull/503:25,deployability,build,build,25,"Hi Bertrand,. Somehow my build was mixed up with some other changes from Lorenzo. Can you rerun build?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/503
https://github.com/root-project/root/pull/503:96,deployability,build,build,96,"Hi Bertrand,. Somehow my build was mixed up with some other changes from Lorenzo. Can you rerun build?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/503
https://github.com/root-project/root/pull/503:11,deployability,build,build,11,@phsft-bot build with flags -Dhttp=ON.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/503
https://github.com/root-project/root/pull/504:31,deployability,build,build,31,"@martinmine, it looks like the build failed due to configuration issues. Could you have a look, this is on a separate branch called `runtime-cxxmodules`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/504:37,deployability,fail,failed,37,"@martinmine, it looks like the build failed due to configuration issues. Could you have a look, this is on a separate branch called `runtime-cxxmodules`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/504:51,deployability,configurat,configuration,51,"@martinmine, it looks like the build failed due to configuration issues. Could you have a look, this is on a separate branch called `runtime-cxxmodules`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/504:51,integrability,configur,configuration,51,"@martinmine, it looks like the build failed due to configuration issues. Could you have a look, this is on a separate branch called `runtime-cxxmodules`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/504:51,modifiability,configur,configuration,51,"@martinmine, it looks like the build failed due to configuration issues. Could you have a look, this is on a separate branch called `runtime-cxxmodules`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/504:37,reliability,fail,failed,37,"@martinmine, it looks like the build failed due to configuration issues. Could you have a look, this is on a separate branch called `runtime-cxxmodules`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/504:51,security,configur,configuration,51,"@martinmine, it looks like the build failed due to configuration issues. Could you have a look, this is on a separate branch called `runtime-cxxmodules`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/504:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/505:9,interoperability,format,format,9,My clang-format gives different results than Travis...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:11,interoperability,format,format,11,> My clang-format gives different results than Travis... Are you using clang-format 3.9 (like Travis) or 4.0?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:77,interoperability,format,format,77,> My clang-format gives different results than Travis... Are you using clang-format 3.9 (like Travis) or 4.0?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:10,deployability,version,version,10,I'm using version 4.0.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:10,integrability,version,version,10,I'm using version 4.0.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:10,modifiability,version,version,10,I'm using version 4.0.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:67,interoperability,format,formatted,67,How is the result different? If the file that Travis saw was clang-formatted with $ROOTSYS/.clang-format and clang-format 4.0 then there is a regression in clang-format that we need to understand.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:98,interoperability,format,format,98,How is the result different? If the file that Travis saw was clang-formatted with $ROOTSYS/.clang-format and clang-format 4.0 then there is a regression in clang-format that we need to understand.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:115,interoperability,format,format,115,How is the result different? If the file that Travis saw was clang-formatted with $ROOTSYS/.clang-format and clang-format 4.0 then there is a regression in clang-format that we need to understand.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:162,interoperability,format,format,162,How is the result different? If the file that Travis saw was clang-formatted with $ROOTSYS/.clang-format and clang-format 4.0 then there is a regression in clang-format that we need to understand.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:142,testability,regress,regression,142,How is the result different? If the file that Travis saw was clang-formatted with $ROOTSYS/.clang-format and clang-format 4.0 then there is a regression in clang-format that we need to understand.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:185,testability,understand,understand,185,How is the result different? If the file that Travis saw was clang-formatted with $ROOTSYS/.clang-format and clang-format 4.0 then there is a regression in clang-format that we need to understand.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:45,deployability,configurat,configuration,45,"Yes, there is probably a bug, or the default configuration for something we don't set manually changed. I usually just do a git clang-format with each commit hash in my PR as argument and apply all changes until I see no more suggested changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:45,integrability,configur,configuration,45,"Yes, there is probably a bug, or the default configuration for something we don't set manually changed. I usually just do a git clang-format with each commit hash in my PR as argument and apply all changes until I see no more suggested changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:134,interoperability,format,format,134,"Yes, there is probably a bug, or the default configuration for something we don't set manually changed. I usually just do a git clang-format with each commit hash in my PR as argument and apply all changes until I see no more suggested changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:45,modifiability,configur,configuration,45,"Yes, there is probably a bug, or the default configuration for something we don't set manually changed. I usually just do a git clang-format with each commit hash in my PR as argument and apply all changes until I see no more suggested changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:45,security,configur,configuration,45,"Yes, there is probably a bug, or the default configuration for something we don't set manually changed. I usually just do a git clang-format with each commit hash in my PR as argument and apply all changes until I see no more suggested changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:158,security,hash,hash,158,"Yes, there is probably a bug, or the default configuration for something we don't set manually changed. I usually just do a git clang-format with each commit hash in my PR as argument and apply all changes until I see no more suggested changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:17,deployability,configurat,configuration,17,"> or the default configuration for something we don't set manually changed. We tried to set everything explicit. If you find out what it is, we ought to update the .clang-format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:153,deployability,updat,update,153,"> or the default configuration for something we don't set manually changed. We tried to set everything explicit. If you find out what it is, we ought to update the .clang-format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:17,integrability,configur,configuration,17,"> or the default configuration for something we don't set manually changed. We tried to set everything explicit. If you find out what it is, we ought to update the .clang-format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:171,interoperability,format,format,171,"> or the default configuration for something we don't set manually changed. We tried to set everything explicit. If you find out what it is, we ought to update the .clang-format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:17,modifiability,configur,configuration,17,"> or the default configuration for something we don't set manually changed. We tried to set everything explicit. If you find out what it is, we ought to update the .clang-format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:153,safety,updat,update,153,"> or the default configuration for something we don't set manually changed. We tried to set everything explicit. If you find out what it is, we ought to update the .clang-format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:17,security,configur,configuration,17,"> or the default configuration for something we don't set manually changed. We tried to set everything explicit. If you find out what it is, we ought to update the .clang-format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:153,security,updat,update,153,"> or the default configuration for something we don't set manually changed. We tried to set everything explicit. If you find out what it is, we ought to update the .clang-format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:59,interoperability,format,format,59,"Ok, for now I just manually applied the changes that clang-format wants.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/506:11,deployability,build,build,11,@phsft-bot build please.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:38,deployability,build,build,38,Do any developers understand why this build is failing?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:47,deployability,fail,failing,47,Do any developers understand why this build is failing?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:47,reliability,fail,failing,47,Do any developers understand why this build is failing?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:18,testability,understand,understand,18,Do any developers understand why this build is failing?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:4,deployability,build,build,4,The build didn't fail. It was marked as 'unstable' because of a warning comming from Jenkins itself. We are going to investigate. . ```. JENKINS-19022: warning: possible memory leak due to Git plugin usage; see: https://wiki.jenkins-ci.org/display/JENKINS/Remove+Git+Plugin+BuildsByBranch+BuildData. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:17,deployability,fail,fail,17,The build didn't fail. It was marked as 'unstable' because of a warning comming from Jenkins itself. We are going to investigate. . ```. JENKINS-19022: warning: possible memory leak due to Git plugin usage; see: https://wiki.jenkins-ci.org/display/JENKINS/Remove+Git+Plugin+BuildsByBranch+BuildData. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:274,deployability,Build,BuildsByBranch,274,The build didn't fail. It was marked as 'unstable' because of a warning comming from Jenkins itself. We are going to investigate. . ```. JENKINS-19022: warning: possible memory leak due to Git plugin usage; see: https://wiki.jenkins-ci.org/display/JENKINS/Remove+Git+Plugin+BuildsByBranch+BuildData. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:289,deployability,Build,BuildData,289,The build didn't fail. It was marked as 'unstable' because of a warning comming from Jenkins itself. We are going to investigate. . ```. JENKINS-19022: warning: possible memory leak due to Git plugin usage; see: https://wiki.jenkins-ci.org/display/JENKINS/Remove+Git+Plugin+BuildsByBranch+BuildData. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:193,interoperability,plug,plugin,193,The build didn't fail. It was marked as 'unstable' because of a warning comming from Jenkins itself. We are going to investigate. . ```. JENKINS-19022: warning: possible memory leak due to Git plugin usage; see: https://wiki.jenkins-ci.org/display/JENKINS/Remove+Git+Plugin+BuildsByBranch+BuildData. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:267,interoperability,Plug,Plugin,267,The build didn't fail. It was marked as 'unstable' because of a warning comming from Jenkins itself. We are going to investigate. . ```. JENKINS-19022: warning: possible memory leak due to Git plugin usage; see: https://wiki.jenkins-ci.org/display/JENKINS/Remove+Git+Plugin+BuildsByBranch+BuildData. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:170,performance,memor,memory,170,The build didn't fail. It was marked as 'unstable' because of a warning comming from Jenkins itself. We are going to investigate. . ```. JENKINS-19022: warning: possible memory leak due to Git plugin usage; see: https://wiki.jenkins-ci.org/display/JENKINS/Remove+Git+Plugin+BuildsByBranch+BuildData. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:17,reliability,fail,fail,17,The build didn't fail. It was marked as 'unstable' because of a warning comming from Jenkins itself. We are going to investigate. . ```. JENKINS-19022: warning: possible memory leak due to Git plugin usage; see: https://wiki.jenkins-ci.org/display/JENKINS/Remove+Git+Plugin+BuildsByBranch+BuildData. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:170,usability,memor,memory,170,The build didn't fail. It was marked as 'unstable' because of a warning comming from Jenkins itself. We are going to investigate. . ```. JENKINS-19022: warning: possible memory leak due to Git plugin usage; see: https://wiki.jenkins-ci.org/display/JENKINS/Remove+Git+Plugin+BuildsByBranch+BuildData. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:58,availability,consist,consistent,58,This is a trivial change. No problem to add it for making consistent with the other calculation,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:58,usability,consist,consistent,58,This is a trivial change. No problem to add it for making consistent with the other calculation,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/507:86,availability,error,error,86,"@beniz, could you address the coding conventions issues reported by travis? About the error, it seems you are missing `#include ""Math/IOptions.h""` in `cmaesFitBench.C`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:86,performance,error,error,86,"@beniz, could you address the coding conventions issues reported by travis? About the error, it seems you are missing `#include ""Math/IOptions.h""` in `cmaesFitBench.C`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:134,performance,IOp,IOptions,134,"@beniz, could you address the coding conventions issues reported by travis? About the error, it seems you are missing `#include ""Math/IOptions.h""` in `cmaesFitBench.C`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:86,safety,error,error,86,"@beniz, could you address the coding conventions issues reported by travis? About the error, it seems you are missing `#include ""Math/IOptions.h""` in `cmaesFitBench.C`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:86,usability,error,error,86,"@beniz, could you address the coding conventions issues reported by travis? About the error, it seems you are missing `#include ""Math/IOptions.h""` in `cmaesFitBench.C`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:46,integrability,coupl,couple,46,"@vgvassilev FYI I'm pretty busy over the next couple of weeks, if you can test before I fix the coding conventions, please do. It'd be best to fix major issues first. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:46,modifiability,coupl,couple,46,"@vgvassilev FYI I'm pretty busy over the next couple of weeks, if you can test before I fix the coding conventions, please do. It'd be best to fix major issues first. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:74,safety,test,test,74,"@vgvassilev FYI I'm pretty busy over the next couple of weeks, if you can test before I fix the coding conventions, please do. It'd be best to fix major issues first. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:46,testability,coupl,couple,46,"@vgvassilev FYI I'm pretty busy over the next couple of weeks, if you can test before I fix the coding conventions, please do. It'd be best to fix major issues first. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:74,testability,test,test,74,"@vgvassilev FYI I'm pretty busy over the next couple of weeks, if you can test before I fix the coding conventions, please do. It'd be best to fix major issues first. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:181,energy efficiency,current,current,181,"@etejedor Hi, I'd be happy to help get the PR into trunk, I just couldn't find time to struggle with coding conventions. As of today, I can propose the following:. - I do rebase to current master. - Someone from ROOT helps me through, including to fix coding conventions and anything that can get into the way. My time is unfortunately scarce, *but* I'm willing to allocate time to bring this into production.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:365,energy efficiency,alloc,allocate,365,"@etejedor Hi, I'd be happy to help get the PR into trunk, I just couldn't find time to struggle with coding conventions. As of today, I can propose the following:. - I do rebase to current master. - Someone from ROOT helps me through, including to fix coding conventions and anything that can get into the way. My time is unfortunately scarce, *but* I'm willing to allocate time to bring this into production.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:79,performance,time,time,79,"@etejedor Hi, I'd be happy to help get the PR into trunk, I just couldn't find time to struggle with coding conventions. As of today, I can propose the following:. - I do rebase to current master. - Someone from ROOT helps me through, including to fix coding conventions and anything that can get into the way. My time is unfortunately scarce, *but* I'm willing to allocate time to bring this into production.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:314,performance,time,time,314,"@etejedor Hi, I'd be happy to help get the PR into trunk, I just couldn't find time to struggle with coding conventions. As of today, I can propose the following:. - I do rebase to current master. - Someone from ROOT helps me through, including to fix coding conventions and anything that can get into the way. My time is unfortunately scarce, *but* I'm willing to allocate time to bring this into production.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:374,performance,time,time,374,"@etejedor Hi, I'd be happy to help get the PR into trunk, I just couldn't find time to struggle with coding conventions. As of today, I can propose the following:. - I do rebase to current master. - Someone from ROOT helps me through, including to fix coding conventions and anything that can get into the way. My time is unfortunately scarce, *but* I'm willing to allocate time to bring this into production.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:30,usability,help,help,30,"@etejedor Hi, I'd be happy to help get the PR into trunk, I just couldn't find time to struggle with coding conventions. As of today, I can propose the following:. - I do rebase to current master. - Someone from ROOT helps me through, including to fix coding conventions and anything that can get into the way. My time is unfortunately scarce, *but* I'm willing to allocate time to bring this into production.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:217,usability,help,helps,217,"@etejedor Hi, I'd be happy to help get the PR into trunk, I just couldn't find time to struggle with coding conventions. As of today, I can propose the following:. - I do rebase to current master. - Someone from ROOT helps me through, including to fix coding conventions and anything that can get into the way. My time is unfortunately scarce, *but* I'm willing to allocate time to bring this into production.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:59,performance,tune,tuned,59,"@oshadura Hi, I can, though it will not be immediate, stay tuned, thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:67,safety,test,test,67,"@oshadura , we don't need to rebase this one now. We need first to test well this PR first. . After that, then we could rebase it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:67,testability,test,test,67,"@oshadura , we don't need to rebase this one now. We need first to test well this PR first. . After that, then we could rebase it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:133,deployability,depend,depending,133,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:318,deployability,integr,integration,318,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:133,integrability,depend,depending,133,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:318,integrability,integr,integration,318,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:318,interoperability,integr,integration,318,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:133,modifiability,depend,depending,133,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:318,modifiability,integr,integration,318,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:318,reliability,integr,integration,318,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:58,safety,test,test,58,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:133,safety,depend,depending,133,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:169,safety,test,testbeds,169,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:204,safety,test,testing,204,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:318,security,integr,integration,318,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:58,testability,test,test,58,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:86,testability,understand,understand,86,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:133,testability,depend,depending,133,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:169,testability,test,testbeds,169,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:204,testability,test,testing,204,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:318,testability,integr,integration,318,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:49,usability,help,help,49,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:161,usability,tool,tools,161,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase. I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:60,safety,test,test,60,@lmoneta could you provide an answer to @beniz about how to test this PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:60,testability,test,test,60,@lmoneta could you provide an answer to @beniz about how to test this PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:60,safety,test,test,60,@lmoneta could you provide an answer to @beniz about how to test this PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:60,testability,test,test,60,@lmoneta could you provide an answer to @beniz about how to test this PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/512:30,deployability,build,build,30,well done. Waiting for the PR build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/512
https://github.com/root-project/root/pull/513:701,security,auth,auth,701,"Because rootd is standalone (not a ROOT application in the strict sense) and it would have meant to link it with libCore. It was the easiest mod, in the spirit of how rootd was initially written (there are other duplications). > On 19 Apr 2017, at 15:22, Pere Mato <notifications@github.com> wrote:. > . > @gganis <https://github.com/gganis> Naive question. Why not to call TSystem::ExpandFileName from RootdExpandFileName instead of copying the code? > . > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/513#issuecomment-295268410>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABp52omh0rk8hcf5bNP-wBnsLknbEI7Yks5rxgqqgaJpZM4NBmka>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/513
https://github.com/root-project/root/pull/513:41,integrability,event,eventually,41,"OK. Thanks for the explanation. We could eventually statically link with the object files of libCore, but since is very obsolete does not make sense.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/513
https://github.com/root-project/root/pull/513:129,reliability,doe,does,129,"OK. Thanks for the explanation. We could eventually statically link with the object files of libCore, but since is very obsolete does not make sense.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/513
https://github.com/root-project/root/pull/515:11,deployability,build,build,11,@phsft-bot build please.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:172,testability,context,context,172,"Hi @imKuehlschrank , usually to showcase this kind of features we provide at least a Tutorial (see for example https://root.cern/doc/master/th2polyEurope_8C.html). In this context, a nice Tracker endcap of would look really nice. Would you be willing to write a tutorial if everything goes well with your PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:19,deployability,fail,failed,19,"@dpiparo Something failed. Locally after pulling from upstream I'm getting some problems with. `make[2]: *** No rule to make target '/home/fil/projects/root/root/math/genvector/inc/Math/LinkDef_Point3D.h', needed by 'math/genvector/G__GenVector.cxx'. Stop.`. I'm not really sure if that's the problem with the ci, nor what I could've done to cause this locally. Any hints?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:19,reliability,fail,failed,19,"@dpiparo Something failed. Locally after pulling from upstream I'm getting some problems with. `make[2]: *** No rule to make target '/home/fil/projects/root/root/math/genvector/inc/Math/LinkDef_Point3D.h', needed by 'math/genvector/G__GenVector.cxx'. Stop.`. I'm not really sure if that's the problem with the ci, nor what I could've done to cause this locally. Any hints?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:251,usability,Stop,Stop,251,"@dpiparo Something failed. Locally after pulling from upstream I'm getting some problems with. `make[2]: *** No rule to make target '/home/fil/projects/root/root/math/genvector/inc/Math/LinkDef_Point3D.h', needed by 'math/genvector/G__GenVector.cxx'. Stop.`. I'm not really sure if that's the problem with the ci, nor what I could've done to cause this locally. Any hints?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:366,usability,hint,hints,366,"@dpiparo Something failed. Locally after pulling from upstream I'm getting some problems with. `make[2]: *** No rule to make target '/home/fil/projects/root/root/math/genvector/inc/Math/LinkDef_Point3D.h', needed by 'math/genvector/G__GenVector.cxx'. Stop.`. I'm not really sure if that's the problem with the ci, nor what I could've done to cause this locally. Any hints?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:80,deployability,configurat,configuration,80,"That are our coding conventions which can be enforced with clang-format and our configuration file which is located in the root top directory (.clang-format). Before proceeding with anything such as formatting, more doxygen documentation and the tutorial macro I would wait for @lmoneta and @couet to give you feedback. This will probably happen next week because of the Easter break.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:80,integrability,configur,configuration,80,"That are our coding conventions which can be enforced with clang-format and our configuration file which is located in the root top directory (.clang-format). Before proceeding with anything such as formatting, more doxygen documentation and the tutorial macro I would wait for @lmoneta and @couet to give you feedback. This will probably happen next week because of the Easter break.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:65,interoperability,format,format,65,"That are our coding conventions which can be enforced with clang-format and our configuration file which is located in the root top directory (.clang-format). Before proceeding with anything such as formatting, more doxygen documentation and the tutorial macro I would wait for @lmoneta and @couet to give you feedback. This will probably happen next week because of the Easter break.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:150,interoperability,format,format,150,"That are our coding conventions which can be enforced with clang-format and our configuration file which is located in the root top directory (.clang-format). Before proceeding with anything such as formatting, more doxygen documentation and the tutorial macro I would wait for @lmoneta and @couet to give you feedback. This will probably happen next week because of the Easter break.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:199,interoperability,format,formatting,199,"That are our coding conventions which can be enforced with clang-format and our configuration file which is located in the root top directory (.clang-format). Before proceeding with anything such as formatting, more doxygen documentation and the tutorial macro I would wait for @lmoneta and @couet to give you feedback. This will probably happen next week because of the Easter break.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:80,modifiability,configur,configuration,80,"That are our coding conventions which can be enforced with clang-format and our configuration file which is located in the root top directory (.clang-format). Before proceeding with anything such as formatting, more doxygen documentation and the tutorial macro I would wait for @lmoneta and @couet to give you feedback. This will probably happen next week because of the Easter break.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:80,security,configur,configuration,80,"That are our coding conventions which can be enforced with clang-format and our configuration file which is located in the root top directory (.clang-format). Before proceeding with anything such as formatting, more doxygen documentation and the tutorial macro I would wait for @lmoneta and @couet to give you feedback. This will probably happen next week because of the Easter break.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:224,usability,document,documentation,224,"That are our coding conventions which can be enforced with clang-format and our configuration file which is located in the root top directory (.clang-format). Before proceeding with anything such as formatting, more doxygen documentation and the tutorial macro I would wait for @lmoneta and @couet to give you feedback. This will probably happen next week because of the Easter break.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:310,usability,feedback,feedback,310,"That are our coding conventions which can be enforced with clang-format and our configuration file which is located in the root top directory (.clang-format). Before proceeding with anything such as formatting, more doxygen documentation and the tutorial macro I would wait for @lmoneta and @couet to give you feedback. This will probably happen next week because of the Easter break.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:193,availability,error,error,193,"Hi Filip, . here are some comments. I am sorry I have no time to meet you today. . I see you are missing the implementation of TProfile2Poly:"":GetBinError. . This is needed otherwise the wrong error from TH2Poly is used. Also I would add TProfile2Poly::GetBinEntries using the similar function definer for the bins. In the TProfile2Poly::Merge I see that the merge from overflows merge only the sum of the weights. I would addd a Merge (or Add) function in the TProfile2PolyBin class so you can re-use it for all bins of . TProfile2Poly. . Thank you for updating your PR. Best . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:554,deployability,updat,updating,554,"Hi Filip, . here are some comments. I am sorry I have no time to meet you today. . I see you are missing the implementation of TProfile2Poly:"":GetBinError. . This is needed otherwise the wrong error from TH2Poly is used. Also I would add TProfile2Poly::GetBinEntries using the similar function definer for the bins. In the TProfile2Poly::Merge I see that the merge from overflows merge only the sum of the weights. I would addd a Merge (or Add) function in the TProfile2PolyBin class so you can re-use it for all bins of . TProfile2Poly. . Thank you for updating your PR. Best . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:57,performance,time,time,57,"Hi Filip, . here are some comments. I am sorry I have no time to meet you today. . I see you are missing the implementation of TProfile2Poly:"":GetBinError. . This is needed otherwise the wrong error from TH2Poly is used. Also I would add TProfile2Poly::GetBinEntries using the similar function definer for the bins. In the TProfile2Poly::Merge I see that the merge from overflows merge only the sum of the weights. I would addd a Merge (or Add) function in the TProfile2PolyBin class so you can re-use it for all bins of . TProfile2Poly. . Thank you for updating your PR. Best . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:193,performance,error,error,193,"Hi Filip, . here are some comments. I am sorry I have no time to meet you today. . I see you are missing the implementation of TProfile2Poly:"":GetBinError. . This is needed otherwise the wrong error from TH2Poly is used. Also I would add TProfile2Poly::GetBinEntries using the similar function definer for the bins. In the TProfile2Poly::Merge I see that the merge from overflows merge only the sum of the weights. I would addd a Merge (or Add) function in the TProfile2PolyBin class so you can re-use it for all bins of . TProfile2Poly. . Thank you for updating your PR. Best . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:193,safety,error,error,193,"Hi Filip, . here are some comments. I am sorry I have no time to meet you today. . I see you are missing the implementation of TProfile2Poly:"":GetBinError. . This is needed otherwise the wrong error from TH2Poly is used. Also I would add TProfile2Poly::GetBinEntries using the similar function definer for the bins. In the TProfile2Poly::Merge I see that the merge from overflows merge only the sum of the weights. I would addd a Merge (or Add) function in the TProfile2PolyBin class so you can re-use it for all bins of . TProfile2Poly. . Thank you for updating your PR. Best . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:554,safety,updat,updating,554,"Hi Filip, . here are some comments. I am sorry I have no time to meet you today. . I see you are missing the implementation of TProfile2Poly:"":GetBinError. . This is needed otherwise the wrong error from TH2Poly is used. Also I would add TProfile2Poly::GetBinEntries using the similar function definer for the bins. In the TProfile2Poly::Merge I see that the merge from overflows merge only the sum of the weights. I would addd a Merge (or Add) function in the TProfile2PolyBin class so you can re-use it for all bins of . TProfile2Poly. . Thank you for updating your PR. Best . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:554,security,updat,updating,554,"Hi Filip, . here are some comments. I am sorry I have no time to meet you today. . I see you are missing the implementation of TProfile2Poly:"":GetBinError. . This is needed otherwise the wrong error from TH2Poly is used. Also I would add TProfile2Poly::GetBinEntries using the similar function definer for the bins. In the TProfile2Poly::Merge I see that the merge from overflows merge only the sum of the weights. I would addd a Merge (or Add) function in the TProfile2PolyBin class so you can re-use it for all bins of . TProfile2Poly. . Thank you for updating your PR. Best . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:193,usability,error,error,193,"Hi Filip, . here are some comments. I am sorry I have no time to meet you today. . I see you are missing the implementation of TProfile2Poly:"":GetBinError. . This is needed otherwise the wrong error from TH2Poly is used. Also I would add TProfile2Poly::GetBinEntries using the similar function definer for the bins. In the TProfile2Poly::Merge I see that the merge from overflows merge only the sum of the weights. I would addd a Merge (or Add) function in the TProfile2PolyBin class so you can re-use it for all bins of . TProfile2Poly. . Thank you for updating your PR. Best . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:96,availability,error,error,96,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:204,availability,error,error,204,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:290,availability,error,errors,290,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:30,deployability,updat,update,30,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:420,modifiability,reu,reuse,420,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:96,performance,error,error,96,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:204,performance,error,error,204,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:290,performance,error,errors,290,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:30,safety,updat,update,30,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:96,safety,error,error,96,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:204,safety,error,error,204,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:252,safety,test,test,252,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:290,safety,error,errors,290,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:478,safety,test,test,478,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:539,safety,test,test,539,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:625,safety,test,test,625,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:30,security,updat,update,30,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:252,testability,test,test,252,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:478,testability,test,test,478,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:539,testability,test,test,539,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:625,testability,test,test,625,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:96,usability,error,error,96,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:204,usability,error,error,204,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:290,usability,error,errors,290,"Hi Filip, . Thank you for the update. . I see there is an issue with the computation of the bin error of TProfile2Poly in the default case (kMEANERROR). It looks like you are computing the inverse of the error. I would strongly recommend to add in the test also a check on the computed bin errors, and maybe also bin entries and also the global statistical quantities (GetMean, GetStdDev, etc..) . For example you could reuse the following functions used in the stressHistogram test, . See https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10594. and https://github.com/root-project/root/blob/master/test/stressHistogram.cxx#L10470. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:50,deployability,infrastructur,infrastructure,50,If you prefer to add a test using the google test infrastructure please have a look how it was done in PR #486,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:23,safety,test,test,23,If you prefer to add a test using the google test infrastructure please have a look how it was done in PR #486,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:45,safety,test,test,45,If you prefer to add a test using the google test infrastructure please have a look how it was done in PR #486,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:23,testability,test,test,23,If you prefer to add a test using the google test infrastructure please have a look how it was done in PR #486,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:45,testability,test,test,45,If you prefer to add a test using the google test infrastructure please have a look how it was done in PR #486,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:7,usability,prefer,prefer,7,If you prefer to add a test using the google test infrastructure please have a look how it was done in PR #486,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:32,safety,test,test,32,PR #486 is not how we do Google test these days. Check https://github.com/root-project/root/commit/a5ca72d36bb5ba77e015f497858d623ef3f4bdd7 and e.g. https://github.com/root-project/root/blob/master/tree/treeplayer/test/array.cxx instead.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:214,safety,test,test,214,PR #486 is not how we do Google test these days. Check https://github.com/root-project/root/commit/a5ca72d36bb5ba77e015f497858d623ef3f4bdd7 and e.g. https://github.com/root-project/root/blob/master/tree/treeplayer/test/array.cxx instead.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:32,testability,test,test,32,PR #486 is not how we do Google test these days. Check https://github.com/root-project/root/commit/a5ca72d36bb5ba77e015f497858d623ef3f4bdd7 and e.g. https://github.com/root-project/root/blob/master/tree/treeplayer/test/array.cxx instead.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:214,testability,test,test,214,PR #486 is not how we do Google test these days. Check https://github.com/root-project/root/commit/a5ca72d36bb5ba77e015f497858d623ef3f4bdd7 and e.g. https://github.com/root-project/root/blob/master/tree/treeplayer/test/array.cxx instead.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/516:34,interoperability,format,formatting,34,looks good. Can you fix the minor formatting issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/516
https://github.com/root-project/root/pull/516:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/516
https://github.com/root-project/root/pull/516:16,safety,test,tests,16,Apparently many tests are broken by the change in the command line processing. I am having a look.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/516
https://github.com/root-project/root/pull/516:16,testability,test,tests,16,Apparently many tests are broken by the change in the command line processing. I am having a look.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/516
https://github.com/root-project/root/pull/516:54,usability,command,command,54,Apparently many tests are broken by the change in the command line processing. I am having a look.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/516
https://github.com/root-project/root/pull/516:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/516
https://github.com/root-project/root/pull/516:48,interoperability,conflict,conflicts,48,I close this request and provide a new one with conflicts resolved and additional fixes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/516
https://github.com/root-project/root/pull/516:2,usability,close,close,2,I close this request and provide a new one with conflicts resolved and additional fixes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/516
https://github.com/root-project/root/pull/517:10,interoperability,format,format,10,The clang-format got it all wrong :-(,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/517
https://github.com/root-project/root/pull/517:348,availability,operat,operator,348,"This kind kind of 'hand formatted' code can/should be surrounded with. ```C++. // clang-format off. ... array declaration. // clang-format on. ```. > Probably we need to change the coding conventions there... I don't think clang-format has a switch for this one ... and we already backtracked on the prior coding convention requesting alignment of operator= across lines (the majority spoke against it), so I don't see this alignment becoming a rule ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/517
https://github.com/root-project/root/pull/517:24,interoperability,format,formatted,24,"This kind kind of 'hand formatted' code can/should be surrounded with. ```C++. // clang-format off. ... array declaration. // clang-format on. ```. > Probably we need to change the coding conventions there... I don't think clang-format has a switch for this one ... and we already backtracked on the prior coding convention requesting alignment of operator= across lines (the majority spoke against it), so I don't see this alignment becoming a rule ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/517
https://github.com/root-project/root/pull/517:88,interoperability,format,format,88,"This kind kind of 'hand formatted' code can/should be surrounded with. ```C++. // clang-format off. ... array declaration. // clang-format on. ```. > Probably we need to change the coding conventions there... I don't think clang-format has a switch for this one ... and we already backtracked on the prior coding convention requesting alignment of operator= across lines (the majority spoke against it), so I don't see this alignment becoming a rule ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/517
https://github.com/root-project/root/pull/517:132,interoperability,format,format,132,"This kind kind of 'hand formatted' code can/should be surrounded with. ```C++. // clang-format off. ... array declaration. // clang-format on. ```. > Probably we need to change the coding conventions there... I don't think clang-format has a switch for this one ... and we already backtracked on the prior coding convention requesting alignment of operator= across lines (the majority spoke against it), so I don't see this alignment becoming a rule ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/517
https://github.com/root-project/root/pull/517:229,interoperability,format,format,229,"This kind kind of 'hand formatted' code can/should be surrounded with. ```C++. // clang-format off. ... array declaration. // clang-format on. ```. > Probably we need to change the coding conventions there... I don't think clang-format has a switch for this one ... and we already backtracked on the prior coding convention requesting alignment of operator= across lines (the majority spoke against it), so I don't see this alignment becoming a rule ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/517
https://github.com/root-project/root/pull/517:42,safety,test,test,42,"Hi Pere,. Could you also add a regression test for this behavior? Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/517
https://github.com/root-project/root/pull/517:31,testability,regress,regression,31,"Hi Pere,. Could you also add a regression test for this behavior? Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/517
https://github.com/root-project/root/pull/517:42,testability,test,test,42,"Hi Pere,. Could you also add a regression test for this behavior? Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/517
https://github.com/root-project/root/pull/517:56,usability,behavi,behavior,56,"Hi Pere,. Could you also add a regression test for this behavior? Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/517
https://github.com/root-project/root/pull/520:10,deployability,build,building,10,"Actually, building here is fully useless. Also formatting of JavaScript code - no idea if clang-format recognize it at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/520
https://github.com/root-project/root/pull/520:47,interoperability,format,formatting,47,"Actually, building here is fully useless. Also formatting of JavaScript code - no idea if clang-format recognize it at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/520
https://github.com/root-project/root/pull/520:96,interoperability,format,format,96,"Actually, building here is fully useless. Also formatting of JavaScript code - no idea if clang-format recognize it at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/520
https://github.com/root-project/root/pull/521:58,availability,failur,failure,58,This code now has run more than 6000 times for me without failure. I believe it is safe to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:58,deployability,fail,failure,58,This code now has run more than 6000 times for me without failure. I believe it is safe to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:37,performance,time,times,37,This code now has run more than 6000 times for me without failure. I believe it is safe to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:58,performance,failur,failure,58,This code now has run more than 6000 times for me without failure. I believe it is safe to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:58,reliability,fail,failure,58,This code now has run more than 6000 times for me without failure. I believe it is safe to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:83,safety,safe,safe,83,This code now has run more than 6000 times for me without failure. I believe it is safe to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:24,interoperability,format,format,24,"Could you rebase, clang-format issue should be fixed now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:24,interoperability,conflict,conflicts,24,"Since the potential for conflicts is small, I just formatted the whole test file. I hope that's ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:51,interoperability,format,formatted,51,"Since the potential for conflicts is small, I just formatted the whole test file. I hope that's ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:71,safety,test,test,71,"Since the potential for conflicts is small, I just formatted the whole test file. I hope that's ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:71,testability,test,test,71,"Since the potential for conflicts is small, I just formatted the whole test file. I hope that's ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:12,availability,toler,tolerance,12,"I increased tolerance to 50000 ulps to be really safe, although 7300 runs went fine for 10000. This comes down to a tolerance of approximately `1.1e-11 * x` for double, and `5.9e-03 * x` for float. I did see errors of ~0.0015x for float, so decreasing the tolerance may lead to the test failing again. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:106,availability,down,down,106,"I increased tolerance to 50000 ulps to be really safe, although 7300 runs went fine for 10000. This comes down to a tolerance of approximately `1.1e-11 * x` for double, and `5.9e-03 * x` for float. I did see errors of ~0.0015x for float, so decreasing the tolerance may lead to the test failing again. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:116,availability,toler,tolerance,116,"I increased tolerance to 50000 ulps to be really safe, although 7300 runs went fine for 10000. This comes down to a tolerance of approximately `1.1e-11 * x` for double, and `5.9e-03 * x` for float. I did see errors of ~0.0015x for float, so decreasing the tolerance may lead to the test failing again. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:208,availability,error,errors,208,"I increased tolerance to 50000 ulps to be really safe, although 7300 runs went fine for 10000. This comes down to a tolerance of approximately `1.1e-11 * x` for double, and `5.9e-03 * x` for float. I did see errors of ~0.0015x for float, so decreasing the tolerance may lead to the test failing again. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:256,availability,toler,tolerance,256,"I increased tolerance to 50000 ulps to be really safe, although 7300 runs went fine for 10000. This comes down to a tolerance of approximately `1.1e-11 * x` for double, and `5.9e-03 * x` for float. I did see errors of ~0.0015x for float, so decreasing the tolerance may lead to the test failing again. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:287,deployability,fail,failing,287,"I increased tolerance to 50000 ulps to be really safe, although 7300 runs went fine for 10000. This comes down to a tolerance of approximately `1.1e-11 * x` for double, and `5.9e-03 * x` for float. I did see errors of ~0.0015x for float, so decreasing the tolerance may lead to the test failing again. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:208,performance,error,errors,208,"I increased tolerance to 50000 ulps to be really safe, although 7300 runs went fine for 10000. This comes down to a tolerance of approximately `1.1e-11 * x` for double, and `5.9e-03 * x` for float. I did see errors of ~0.0015x for float, so decreasing the tolerance may lead to the test failing again. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:12,reliability,toleran,tolerance,12,"I increased tolerance to 50000 ulps to be really safe, although 7300 runs went fine for 10000. This comes down to a tolerance of approximately `1.1e-11 * x` for double, and `5.9e-03 * x` for float. I did see errors of ~0.0015x for float, so decreasing the tolerance may lead to the test failing again. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:116,reliability,toleran,tolerance,116,"I increased tolerance to 50000 ulps to be really safe, although 7300 runs went fine for 10000. This comes down to a tolerance of approximately `1.1e-11 * x` for double, and `5.9e-03 * x` for float. I did see errors of ~0.0015x for float, so decreasing the tolerance may lead to the test failing again. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:256,reliability,toleran,tolerance,256,"I increased tolerance to 50000 ulps to be really safe, although 7300 runs went fine for 10000. This comes down to a tolerance of approximately `1.1e-11 * x` for double, and `5.9e-03 * x` for float. I did see errors of ~0.0015x for float, so decreasing the tolerance may lead to the test failing again. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:287,reliability,fail,failing,287,"I increased tolerance to 50000 ulps to be really safe, although 7300 runs went fine for 10000. This comes down to a tolerance of approximately `1.1e-11 * x` for double, and `5.9e-03 * x` for float. I did see errors of ~0.0015x for float, so decreasing the tolerance may lead to the test failing again. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:49,safety,safe,safe,49,"I increased tolerance to 50000 ulps to be really safe, although 7300 runs went fine for 10000. This comes down to a tolerance of approximately `1.1e-11 * x` for double, and `5.9e-03 * x` for float. I did see errors of ~0.0015x for float, so decreasing the tolerance may lead to the test failing again. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:208,safety,error,errors,208,"I increased tolerance to 50000 ulps to be really safe, although 7300 runs went fine for 10000. This comes down to a tolerance of approximately `1.1e-11 * x` for double, and `5.9e-03 * x` for float. I did see errors of ~0.0015x for float, so decreasing the tolerance may lead to the test failing again. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:282,safety,test,test,282,"I increased tolerance to 50000 ulps to be really safe, although 7300 runs went fine for 10000. This comes down to a tolerance of approximately `1.1e-11 * x` for double, and `5.9e-03 * x` for float. I did see errors of ~0.0015x for float, so decreasing the tolerance may lead to the test failing again. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:282,testability,test,test,282,"I increased tolerance to 50000 ulps to be really safe, although 7300 runs went fine for 10000. This comes down to a tolerance of approximately `1.1e-11 * x` for double, and `5.9e-03 * x` for float. I did see errors of ~0.0015x for float, so decreasing the tolerance may lead to the test failing again. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:208,usability,error,errors,208,"I increased tolerance to 50000 ulps to be really safe, although 7300 runs went fine for 10000. This comes down to a tolerance of approximately `1.1e-11 * x` for double, and `5.9e-03 * x` for float. I did see errors of ~0.0015x for float, so decreasing the tolerance may lead to the test failing again. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:0,safety,Test,Testing,0,"Testing clang-tidy, sorry for the noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:0,testability,Test,Testing,0,"Testing clang-tidy, sorry for the noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/522:0,deployability,Build,Build,0,"Build tested (in C++17 mode) using CMSSW `root.spec` on ppc64le (POWER8), CentOS 7.3, GCC 7.0.1 (a week old build).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:108,deployability,build,build,108,"Build tested (in C++17 mode) using CMSSW `root.spec` on ppc64le (POWER8), CentOS 7.3, GCC 7.0.1 (a week old build).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:6,safety,test,tested,6,"Build tested (in C++17 mode) using CMSSW `root.spec` on ppc64le (POWER8), CentOS 7.3, GCC 7.0.1 (a week old build).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:6,testability,test,tested,6,"Build tested (in C++17 mode) using CMSSW `root.spec` on ppc64le (POWER8), CentOS 7.3, GCC 7.0.1 (a week old build).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:34,interoperability,format,format,34,"@davidlt, could you fix the clang-format issues?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:59,interoperability,format,format,59,"Could you provide instructions (or point to page) to clang-format check scripts, or how ROOT runs clang-format?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:104,interoperability,format,format,104,"Could you provide instructions (or point to page) to clang-format check scripts, or how ROOT runs clang-format?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:23,deployability,log,log,23,"@davidlt, it is in the log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:23,safety,log,log,23,"@davidlt, it is in the log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:23,security,log,log,23,"@davidlt, it is in the log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:23,testability,log,log,23,"@davidlt, it is in the log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:309,availability,error,error,309,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:725,availability,error,error,725,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:946,availability,error,error,946,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:970,availability,operat,operator,970,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1050,availability,Error,Error,1050,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1119,availability,failur,failure,1119,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:5,deployability,build,building,5,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:90,deployability,build,build,90,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:214,deployability,build,build,214,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:461,deployability,build,build,461,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:630,deployability,build,build,630,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:851,deployability,build,build,851,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1119,deployability,fail,failure,1119,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:309,performance,error,error,309,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:725,performance,error,error,725,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:946,performance,error,error,946,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1050,performance,Error,Error,1050,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1119,performance,failur,failure,1119,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1119,reliability,fail,failure,1119,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:309,safety,error,error,309,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:725,safety,error,error,725,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:946,safety,error,error,946,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1050,safety,Error,Error,1050,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:309,usability,error,error,309,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:725,usability,error,error,725,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:946,usability,error,error,946,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1050,usability,Error,Error,1050,"When building with gcc7, I am getting:. ```. In file included from /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/bits/node_handle.h:39:. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:27: error: use of class template 'optional' requires template arguments. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:451:11: note: template is declared here. class optional. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:40: error: expected ';' at end of declaration. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. /local2/scratch/pcanal/build/bin/../lib/gcc/x86_64-pc-linux-gnu/7.0.1/../../../../include/c++/7.0.1/optional:1032:41: error: cannot use arrow operator on a type. template <typename _Tp> optional(_Tp) -> optional<_Tp>;. ^. Error: ../rootcling_stage1/src/rootcling_stage1: Linkdef compilation failure. ```. which I think might means that cling was not set to c++17 and/or our clang is too old ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:67,deployability,toolchain,toolchain,67,I completely forgot about it. I have this change reverted in CMSSW toolchain for now. This change was done in January: https://patchwork.ozlabs.org/patch/721403/. https://cplusplus.github.io/LWG/lwg-active.html#2825,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:127,deployability,patch,patchwork,127,I completely forgot about it. I have this change reverted in CMSSW toolchain for now. This change was done in January: https://patchwork.ozlabs.org/patch/721403/. https://cplusplus.github.io/LWG/lwg-active.html#2825,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:148,deployability,patch,patch,148,I completely forgot about it. I have this change reverted in CMSSW toolchain for now. This change was done in January: https://patchwork.ozlabs.org/patch/721403/. https://cplusplus.github.io/LWG/lwg-active.html#2825,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:2,safety,compl,completely,2,I completely forgot about it. I have this change reverted in CMSSW toolchain for now. This change was done in January: https://patchwork.ozlabs.org/patch/721403/. https://cplusplus.github.io/LWG/lwg-active.html#2825,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:127,safety,patch,patchwork,127,I completely forgot about it. I have this change reverted in CMSSW toolchain for now. This change was done in January: https://patchwork.ozlabs.org/patch/721403/. https://cplusplus.github.io/LWG/lwg-active.html#2825,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:148,safety,patch,patch,148,I completely forgot about it. I have this change reverted in CMSSW toolchain for now. This change was done in January: https://patchwork.ozlabs.org/patch/721403/. https://cplusplus.github.io/LWG/lwg-active.html#2825,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:2,security,compl,completely,2,I completely forgot about it. I have this change reverted in CMSSW toolchain for now. This change was done in January: https://patchwork.ozlabs.org/patch/721403/. https://cplusplus.github.io/LWG/lwg-active.html#2825,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:127,security,patch,patchwork,127,I completely forgot about it. I have this change reverted in CMSSW toolchain for now. This change was done in January: https://patchwork.ozlabs.org/patch/721403/. https://cplusplus.github.io/LWG/lwg-active.html#2825,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:148,security,patch,patch,148,I completely forgot about it. I have this change reverted in CMSSW toolchain for now. This change was done in January: https://patchwork.ozlabs.org/patch/721403/. https://cplusplus.github.io/LWG/lwg-active.html#2825,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:67,usability,tool,toolchain,67,I completely forgot about it. I have this change reverted in CMSSW toolchain for now. This change was done in January: https://patchwork.ozlabs.org/patch/721403/. https://cplusplus.github.io/LWG/lwg-active.html#2825,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:136,usability,help,help,136,@davidlt - we have 7 more days before we'll branch v6-10. It would be *really* nice if we could merge this before. Do you think you can help us with that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:112,availability,operat,operator,112,"@axel I have actually been looking at this and I am investigating an alternative (for TString). . i.e having: . operator const char*. operator std::string_view. explicit operator std::string. which looks like (still verifying), despite the additional risk for ambiguity, it might require less code change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:134,availability,operat,operator,134,"@axel I have actually been looking at this and I am investigating an alternative (for TString). . i.e having: . operator const char*. operator std::string_view. explicit operator std::string. which looks like (still verifying), despite the additional risk for ambiguity, it might require less code change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:170,availability,operat,operator,170,"@axel I have actually been looking at this and I am investigating an alternative (for TString). . i.e having: . operator const char*. operator std::string_view. explicit operator std::string. which looks like (still verifying), despite the additional risk for ambiguity, it might require less code change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:251,safety,risk,risk,251,"@axel I have actually been looking at this and I am investigating an alternative (for TString). . i.e having: . operator const char*. operator std::string_view. explicit operator std::string. which looks like (still verifying), despite the additional risk for ambiguity, it might require less code change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:251,security,risk,risk,251,"@axel I have actually been looking at this and I am investigating an alternative (for TString). . i.e having: . operator const char*. operator std::string_view. explicit operator std::string. which looks like (still verifying), despite the additional risk for ambiguity, it might require less code change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:216,testability,verif,verifying,216,"@axel I have actually been looking at this and I am investigating an alternative (for TString). . i.e having: . operator const char*. operator std::string_view. explicit operator std::string. which looks like (still verifying), despite the additional risk for ambiguity, it might require less code change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:184,usability,support,support,184,"@pcanal I thought that's whay @davidlt had tried? Hmm right, I guess `op string` wasn't explicit in his case. Anyway - I'd really like to have this in for 6.10: 6.10 should absolutely support GCC 7, ideally with C++17.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1,availability,operat,operator,1,"`operator std::string` was not explicit in my case, but I don't think that alone would help. You still have ambiguity as you have `operator const char*` and `operator std::string_view`. Both of these are available as arguments to various `std::string` methods/ctors. I am looking again at this patchset. The changes to `core/foundation/src/TClassEdit.cxx` are no more needed. I am working on updating this PR. Note, this still doesn't solve `optional` issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:131,availability,operat,operator,131,"`operator std::string` was not explicit in my case, but I don't think that alone would help. You still have ambiguity as you have `operator const char*` and `operator std::string_view`. Both of these are available as arguments to various `std::string` methods/ctors. I am looking again at this patchset. The changes to `core/foundation/src/TClassEdit.cxx` are no more needed. I am working on updating this PR. Note, this still doesn't solve `optional` issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:158,availability,operat,operator,158,"`operator std::string` was not explicit in my case, but I don't think that alone would help. You still have ambiguity as you have `operator const char*` and `operator std::string_view`. Both of these are available as arguments to various `std::string` methods/ctors. I am looking again at this patchset. The changes to `core/foundation/src/TClassEdit.cxx` are no more needed. I am working on updating this PR. Note, this still doesn't solve `optional` issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:204,availability,avail,available,204,"`operator std::string` was not explicit in my case, but I don't think that alone would help. You still have ambiguity as you have `operator const char*` and `operator std::string_view`. Both of these are available as arguments to various `std::string` methods/ctors. I am looking again at this patchset. The changes to `core/foundation/src/TClassEdit.cxx` are no more needed. I am working on updating this PR. Note, this still doesn't solve `optional` issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:294,deployability,patch,patchset,294,"`operator std::string` was not explicit in my case, but I don't think that alone would help. You still have ambiguity as you have `operator const char*` and `operator std::string_view`. Both of these are available as arguments to various `std::string` methods/ctors. I am looking again at this patchset. The changes to `core/foundation/src/TClassEdit.cxx` are no more needed. I am working on updating this PR. Note, this still doesn't solve `optional` issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:392,deployability,updat,updating,392,"`operator std::string` was not explicit in my case, but I don't think that alone would help. You still have ambiguity as you have `operator const char*` and `operator std::string_view`. Both of these are available as arguments to various `std::string` methods/ctors. I am looking again at this patchset. The changes to `core/foundation/src/TClassEdit.cxx` are no more needed. I am working on updating this PR. Note, this still doesn't solve `optional` issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:320,energy efficiency,core,core,320,"`operator std::string` was not explicit in my case, but I don't think that alone would help. You still have ambiguity as you have `operator const char*` and `operator std::string_view`. Both of these are available as arguments to various `std::string` methods/ctors. I am looking again at this patchset. The changes to `core/foundation/src/TClassEdit.cxx` are no more needed. I am working on updating this PR. Note, this still doesn't solve `optional` issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:204,reliability,availab,available,204,"`operator std::string` was not explicit in my case, but I don't think that alone would help. You still have ambiguity as you have `operator const char*` and `operator std::string_view`. Both of these are available as arguments to various `std::string` methods/ctors. I am looking again at this patchset. The changes to `core/foundation/src/TClassEdit.cxx` are no more needed. I am working on updating this PR. Note, this still doesn't solve `optional` issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:427,reliability,doe,doesn,427,"`operator std::string` was not explicit in my case, but I don't think that alone would help. You still have ambiguity as you have `operator const char*` and `operator std::string_view`. Both of these are available as arguments to various `std::string` methods/ctors. I am looking again at this patchset. The changes to `core/foundation/src/TClassEdit.cxx` are no more needed. I am working on updating this PR. Note, this still doesn't solve `optional` issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:204,safety,avail,available,204,"`operator std::string` was not explicit in my case, but I don't think that alone would help. You still have ambiguity as you have `operator const char*` and `operator std::string_view`. Both of these are available as arguments to various `std::string` methods/ctors. I am looking again at this patchset. The changes to `core/foundation/src/TClassEdit.cxx` are no more needed. I am working on updating this PR. Note, this still doesn't solve `optional` issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:294,safety,patch,patchset,294,"`operator std::string` was not explicit in my case, but I don't think that alone would help. You still have ambiguity as you have `operator const char*` and `operator std::string_view`. Both of these are available as arguments to various `std::string` methods/ctors. I am looking again at this patchset. The changes to `core/foundation/src/TClassEdit.cxx` are no more needed. I am working on updating this PR. Note, this still doesn't solve `optional` issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:392,safety,updat,updating,392,"`operator std::string` was not explicit in my case, but I don't think that alone would help. You still have ambiguity as you have `operator const char*` and `operator std::string_view`. Both of these are available as arguments to various `std::string` methods/ctors. I am looking again at this patchset. The changes to `core/foundation/src/TClassEdit.cxx` are no more needed. I am working on updating this PR. Note, this still doesn't solve `optional` issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:204,security,availab,available,204,"`operator std::string` was not explicit in my case, but I don't think that alone would help. You still have ambiguity as you have `operator const char*` and `operator std::string_view`. Both of these are available as arguments to various `std::string` methods/ctors. I am looking again at this patchset. The changes to `core/foundation/src/TClassEdit.cxx` are no more needed. I am working on updating this PR. Note, this still doesn't solve `optional` issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:294,security,patch,patchset,294,"`operator std::string` was not explicit in my case, but I don't think that alone would help. You still have ambiguity as you have `operator const char*` and `operator std::string_view`. Both of these are available as arguments to various `std::string` methods/ctors. I am looking again at this patchset. The changes to `core/foundation/src/TClassEdit.cxx` are no more needed. I am working on updating this PR. Note, this still doesn't solve `optional` issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:392,security,updat,updating,392,"`operator std::string` was not explicit in my case, but I don't think that alone would help. You still have ambiguity as you have `operator const char*` and `operator std::string_view`. Both of these are available as arguments to various `std::string` methods/ctors. I am looking again at this patchset. The changes to `core/foundation/src/TClassEdit.cxx` are no more needed. I am working on updating this PR. Note, this still doesn't solve `optional` issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:87,usability,help,help,87,"`operator std::string` was not explicit in my case, but I don't think that alone would help. You still have ambiguity as you have `operator const char*` and `operator std::string_view`. Both of these are available as arguments to various `std::string` methods/ctors. I am looking again at this patchset. The changes to `core/foundation/src/TClassEdit.cxx` are no more needed. I am working on updating this PR. Note, this still doesn't solve `optional` issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:28,availability,operat,operator,28,"so far in my build with the operator I mentioned plus an operator+=(string,TString), I need almost no modification to the ROOT source ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:57,availability,operat,operator,57,"so far in my build with the operator I mentioned plus an operator+=(string,TString), I need almost no modification to the ROOT source ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:13,deployability,build,build,13,"so far in my build with the operator I mentioned plus an operator+=(string,TString), I need almost no modification to the ROOT source ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:102,security,modif,modification,102,"so far in my build with the operator I mentioned plus an operator+=(string,TString), I need almost no modification to the ROOT source ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:30,availability,operat,operator,30,"If you provide also a global `operator+=(string, TString)`, but not in all cases. E.g., passing `TString` to `std::string` ctor will continue to yield ambiguity errors. While it might lower number of lines we need to change in ROOT the users (who enable C++17) are still affected. Changes to ROOT are minimal. Where are just a few places where we need explicitly tell to compiler that we want `std::string_view`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:161,availability,error,errors,161,"If you provide also a global `operator+=(string, TString)`, but not in all cases. E.g., passing `TString` to `std::string` ctor will continue to yield ambiguity errors. While it might lower number of lines we need to change in ROOT the users (who enable C++17) are still affected. Changes to ROOT are minimal. Where are just a few places where we need explicitly tell to compiler that we want `std::string_view`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:133,deployability,continu,continue,133,"If you provide also a global `operator+=(string, TString)`, but not in all cases. E.g., passing `TString` to `std::string` ctor will continue to yield ambiguity errors. While it might lower number of lines we need to change in ROOT the users (who enable C++17) are still affected. Changes to ROOT are minimal. Where are just a few places where we need explicitly tell to compiler that we want `std::string_view`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:161,performance,error,errors,161,"If you provide also a global `operator+=(string, TString)`, but not in all cases. E.g., passing `TString` to `std::string` ctor will continue to yield ambiguity errors. While it might lower number of lines we need to change in ROOT the users (who enable C++17) are still affected. Changes to ROOT are minimal. Where are just a few places where we need explicitly tell to compiler that we want `std::string_view`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:161,safety,error,errors,161,"If you provide also a global `operator+=(string, TString)`, but not in all cases. E.g., passing `TString` to `std::string` ctor will continue to yield ambiguity errors. While it might lower number of lines we need to change in ROOT the users (who enable C++17) are still affected. Changes to ROOT are minimal. Where are just a few places where we need explicitly tell to compiler that we want `std::string_view`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:161,usability,error,errors,161,"If you provide also a global `operator+=(string, TString)`, but not in all cases. E.g., passing `TString` to `std::string` ctor will continue to yield ambiguity errors. While it might lower number of lines we need to change in ROOT the users (who enable C++17) are still affected. Changes to ROOT are minimal. Where are just a few places where we need explicitly tell to compiler that we want `std::string_view`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:236,usability,user,users,236,"If you provide also a global `operator+=(string, TString)`, but not in all cases. E.g., passing `TString` to `std::string` ctor will continue to yield ambiguity errors. While it might lower number of lines we need to change in ROOT the users (who enable C++17) are still affected. Changes to ROOT are minimal. Where are just a few places where we need explicitly tell to compiler that we want `std::string_view`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:301,usability,minim,minimal,301,"If you provide also a global `operator+=(string, TString)`, but not in all cases. E.g., passing `TString` to `std::string` ctor will continue to yield ambiguity errors. While it might lower number of lines we need to change in ROOT the users (who enable C++17) are still affected. Changes to ROOT are minimal. Where are just a few places where we need explicitly tell to compiler that we want `std::string_view`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:16,availability,operat,operator,16,"With the set of operator I have tried, the change in ROOT are limited to the one call to stod. > E.g., passing TString to std::string ctor will continue to yield ambiguity errors. Actually this is one of the case that is solved by adding the explicit operator std::string. The other case that are left are interfaces that takes *both* a const char* and a std::string_view ... we don't (seem) to have this case in the ROOT code ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:172,availability,error,errors,172,"With the set of operator I have tried, the change in ROOT are limited to the one call to stod. > E.g., passing TString to std::string ctor will continue to yield ambiguity errors. Actually this is one of the case that is solved by adding the explicit operator std::string. The other case that are left are interfaces that takes *both* a const char* and a std::string_view ... we don't (seem) to have this case in the ROOT code ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:251,availability,operat,operator,251,"With the set of operator I have tried, the change in ROOT are limited to the one call to stod. > E.g., passing TString to std::string ctor will continue to yield ambiguity errors. Actually this is one of the case that is solved by adding the explicit operator std::string. The other case that are left are interfaces that takes *both* a const char* and a std::string_view ... we don't (seem) to have this case in the ROOT code ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:144,deployability,continu,continue,144,"With the set of operator I have tried, the change in ROOT are limited to the one call to stod. > E.g., passing TString to std::string ctor will continue to yield ambiguity errors. Actually this is one of the case that is solved by adding the explicit operator std::string. The other case that are left are interfaces that takes *both* a const char* and a std::string_view ... we don't (seem) to have this case in the ROOT code ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:306,integrability,interfac,interfaces,306,"With the set of operator I have tried, the change in ROOT are limited to the one call to stod. > E.g., passing TString to std::string ctor will continue to yield ambiguity errors. Actually this is one of the case that is solved by adding the explicit operator std::string. The other case that are left are interfaces that takes *both* a const char* and a std::string_view ... we don't (seem) to have this case in the ROOT code ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:306,interoperability,interfac,interfaces,306,"With the set of operator I have tried, the change in ROOT are limited to the one call to stod. > E.g., passing TString to std::string ctor will continue to yield ambiguity errors. Actually this is one of the case that is solved by adding the explicit operator std::string. The other case that are left are interfaces that takes *both* a const char* and a std::string_view ... we don't (seem) to have this case in the ROOT code ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:306,modifiability,interfac,interfaces,306,"With the set of operator I have tried, the change in ROOT are limited to the one call to stod. > E.g., passing TString to std::string ctor will continue to yield ambiguity errors. Actually this is one of the case that is solved by adding the explicit operator std::string. The other case that are left are interfaces that takes *both* a const char* and a std::string_view ... we don't (seem) to have this case in the ROOT code ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:172,performance,error,errors,172,"With the set of operator I have tried, the change in ROOT are limited to the one call to stod. > E.g., passing TString to std::string ctor will continue to yield ambiguity errors. Actually this is one of the case that is solved by adding the explicit operator std::string. The other case that are left are interfaces that takes *both* a const char* and a std::string_view ... we don't (seem) to have this case in the ROOT code ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:172,safety,error,errors,172,"With the set of operator I have tried, the change in ROOT are limited to the one call to stod. > E.g., passing TString to std::string ctor will continue to yield ambiguity errors. Actually this is one of the case that is solved by adding the explicit operator std::string. The other case that are left are interfaces that takes *both* a const char* and a std::string_view ... we don't (seem) to have this case in the ROOT code ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:172,usability,error,errors,172,"With the set of operator I have tried, the change in ROOT are limited to the one call to stod. > E.g., passing TString to std::string ctor will continue to yield ambiguity errors. Actually this is one of the case that is solved by adding the explicit operator std::string. The other case that are left are interfaces that takes *both* a const char* and a std::string_view ... we don't (seem) to have this case in the ROOT code ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:29,availability,operat,operator,29,Merged in with the change in operator I mentioned and a couple of tweaks. Thanks. Philippe.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:56,integrability,coupl,couple,56,Merged in with the change in operator I mentioned and a couple of tweaks. Thanks. Philippe.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:56,modifiability,coupl,couple,56,Merged in with the change in operator I mentioned and a couple of tweaks. Thanks. Philippe.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:56,testability,coupl,couple,56,Merged in with the change in operator I mentioned and a couple of tweaks. Thanks. Philippe.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:28,availability,operat,operator,28,"Hmm... You would also need `operator=(string,TString)`. Does `explicit operator std::string` cover all cases? I just checked issues with optional and they are caused because `rootcling_stage1` runs in C++14 mode, but no C++17. Currently I don't see where you set a language options for `rootcling_stage1`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:71,availability,operat,operator,71,"Hmm... You would also need `operator=(string,TString)`. Does `explicit operator std::string` cover all cases? I just checked issues with optional and they are caused because `rootcling_stage1` runs in C++14 mode, but no C++17. Currently I don't see where you set a language options for `rootcling_stage1`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:227,energy efficiency,Current,Currently,227,"Hmm... You would also need `operator=(string,TString)`. Does `explicit operator std::string` cover all cases? I just checked issues with optional and they are caused because `rootcling_stage1` runs in C++14 mode, but no C++17. Currently I don't see where you set a language options for `rootcling_stage1`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:56,reliability,Doe,Does,56,"Hmm... You would also need `operator=(string,TString)`. Does `explicit operator std::string` cover all cases? I just checked issues with optional and they are caused because `rootcling_stage1` runs in C++14 mode, but no C++17. Currently I don't see where you set a language options for `rootcling_stage1`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:29,availability,operat,operator,29,"> Hmm... You would also need operator=(string,TString). Apparently not .... The following code compiles. ```. void tester() {. TString str;. std::string stdstr;. stdstr = str;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:115,safety,test,tester,115,"> Hmm... You would also need operator=(string,TString). Apparently not .... The following code compiles. ```. void tester() {. TString str;. std::string stdstr;. stdstr = str;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:115,testability,test,tester,115,"> Hmm... You would also need operator=(string,TString). Apparently not .... The following code compiles. ```. void tester() {. TString str;. std::string stdstr;. stdstr = str;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:19,availability,operat,operator,19,`std::string` has `operator=(string_view)` and `operator=(const char *)`. http://en.cppreference.com/w/cpp/string/basic_string/operator%3D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:48,availability,operat,operator,48,`std::string` has `operator=(string_view)` and `operator=(const char *)`. http://en.cppreference.com/w/cpp/string/basic_string/operator%3D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:127,availability,operat,operator,127,`std::string` has `operator=(string_view)` and `operator=(const char *)`. http://en.cppreference.com/w/cpp/string/basic_string/operator%3D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:18,availability,operat,operator,18,> std::string has operator=(string_view) and operator=(const char *). Yes? I.e. also has operator=(string) and I suspect in this case this the one that is picked. Either way gcc7 with the master and the code I shown does *not* complain about any ambiguity.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:45,availability,operat,operator,45,> std::string has operator=(string_view) and operator=(const char *). Yes? I.e. also has operator=(string) and I suspect in this case this the one that is picked. Either way gcc7 with the master and the code I shown does *not* complain about any ambiguity.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:89,availability,operat,operator,89,> std::string has operator=(string_view) and operator=(const char *). Yes? I.e. also has operator=(string) and I suspect in this case this the one that is picked. Either way gcc7 with the master and the code I shown does *not* complain about any ambiguity.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:216,reliability,doe,does,216,> std::string has operator=(string_view) and operator=(const char *). Yes? I.e. also has operator=(string) and I suspect in this case this the one that is picked. Either way gcc7 with the master and the code I shown does *not* complain about any ambiguity.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:227,safety,compl,complain,227,> std::string has operator=(string_view) and operator=(const char *). Yes? I.e. also has operator=(string) and I suspect in this case this the one that is picked. Either way gcc7 with the master and the code I shown does *not* complain about any ambiguity.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:227,security,compl,complain,227,> std::string has operator=(string_view) and operator=(const char *). Yes? I.e. also has operator=(string) and I suspect in this case this the one that is picked. Either way gcc7 with the master and the code I shown does *not* complain about any ambiguity.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:286,deployability,version,version,286,"> I just checked issues with optional and they are caused because rootcling_stage1 runs in C++14 mode, but no C++17. Currently I don't see where you set a language options for rootcling_stage1. Apriori it is the same place inside cling .... Are you sure it is not simply that our clang version is too old?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:117,energy efficiency,Current,Currently,117,"> I just checked issues with optional and they are caused because rootcling_stage1 runs in C++14 mode, but no C++17. Currently I don't see where you set a language options for rootcling_stage1. Apriori it is the same place inside cling .... Are you sure it is not simply that our clang version is too old?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:286,integrability,version,version,286,"> I just checked issues with optional and they are caused because rootcling_stage1 runs in C++14 mode, but no C++17. Currently I don't see where you set a language options for rootcling_stage1. Apriori it is the same place inside cling .... Are you sure it is not simply that our clang version is too old?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:286,modifiability,version,version,286,"> I just checked issues with optional and they are caused because rootcling_stage1 runs in C++14 mode, but no C++17. Currently I don't see where you set a language options for rootcling_stage1. Apriori it is the same place inside cling .... Are you sure it is not simply that our clang version is too old?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:264,testability,simpl,simply,264,"> I just checked issues with optional and they are caused because rootcling_stage1 runs in C++14 mode, but no C++17. Currently I don't see where you set a language options for rootcling_stage1. Apriori it is the same place inside cling .... Are you sure it is not simply that our clang version is too old?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:264,usability,simpl,simply,264,"> I just checked issues with optional and they are caused because rootcling_stage1 runs in C++14 mode, but no C++17. Currently I don't see where you set a language options for rootcling_stage1. Apriori it is the same place inside cling .... Are you sure it is not simply that our clang version is too old?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:161,availability,error,error,161,"Nope, because my change enable C++1z in Cling (otherwise CMSSW wouldn't work). If I print __cplusplus from rootcling_stage1 I get C++14, which would explain the error about optional, I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:161,performance,error,error,161,"Nope, because my change enable C++1z in Cling (otherwise CMSSW wouldn't work). If I print __cplusplus from rootcling_stage1 I get C++14, which would explain the error about optional, I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:161,safety,error,error,161,"Nope, because my change enable C++1z in Cling (otherwise CMSSW wouldn't work). If I print __cplusplus from rootcling_stage1 I get C++14, which would explain the error about optional, I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:161,usability,error,error,161,"Nope, because my change enable C++1z in Cling (otherwise CMSSW wouldn't work). If I print __cplusplus from rootcling_stage1 I get C++14, which would explain the error about optional, I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:19,deployability,patch,patch,19,it is added by the patch:. ```. #if __cplusplus >= 201703L. Opts.CPlusPlus1z = 1;. #endif. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:19,safety,patch,patch,19,it is added by the patch:. ```. #if __cplusplus >= 201703L. Opts.CPlusPlus1z = 1;. #endif. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:19,security,patch,patch,19,it is added by the patch:. ```. #if __cplusplus >= 201703L. Opts.CPlusPlus1z = 1;. #endif. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:151,deployability,Build,Builder,151,"my test also shows that the line is executed but it is ineffective because of:. ```. // FIXME: Use correct value for C++17. if (LangOpts.CPlusPlus1z). Builder.defineMacro(""__cplusplus"", ""201406L"");. ```. llvm/src/tools/clang/lib/Frontend/InitPreprocessor.cpp.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:3,safety,test,test,3,"my test also shows that the line is executed but it is ineffective because of:. ```. // FIXME: Use correct value for C++17. if (LangOpts.CPlusPlus1z). Builder.defineMacro(""__cplusplus"", ""201406L"");. ```. llvm/src/tools/clang/lib/Frontend/InitPreprocessor.cpp.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:3,testability,test,test,3,"my test also shows that the line is executed but it is ineffective because of:. ```. // FIXME: Use correct value for C++17. if (LangOpts.CPlusPlus1z). Builder.defineMacro(""__cplusplus"", ""201406L"");. ```. llvm/src/tools/clang/lib/Frontend/InitPreprocessor.cpp.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:213,usability,tool,tools,213,"my test also shows that the line is executed but it is ineffective because of:. ```. // FIXME: Use correct value for C++17. if (LangOpts.CPlusPlus1z). Builder.defineMacro(""__cplusplus"", ""201406L"");. ```. llvm/src/tools/clang/lib/Frontend/InitPreprocessor.cpp.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1615,availability,error,error,1615,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:367,deployability,Version,Version,367,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:919,deployability,Build,Builder,919,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1148,deployability,Build,Builder,1148,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:18,energy efficiency,core,core,18,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:63,energy efficiency,core,core,63,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:144,energy efficiency,core,core,144,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:194,energy efficiency,core,core,194,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:358,integrability,messag,message,358,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:367,integrability,Version,Version,367,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1090,integrability,translat,translation,1090,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:358,interoperability,messag,message,358,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1090,interoperability,translat,translation,1090,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:367,modifiability,Version,Version,367,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1615,performance,error,error,1615,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:351,reliability,pra,pragma,351,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:400,reliability,pra,pragma,400,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:443,reliability,pra,pragma,443,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:487,reliability,pra,pragma,487,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1212,reliability,doe,doesn,1212,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1615,safety,error,error,1615,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1347,security,Auth,Author,1347,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1102,testability,unit,unit,1102,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1595,usability,help,helps,1595,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:1615,usability,error,error,1615,"```. diff --git a/core/clingutils/src/unordered_setLinkdef.h b/core/clingutils/src/unordered_setLinkdef.h. index a9dc6eb..fd26107 100644. --- a/core/clingutils/src/unordered_setLinkdef.h. +++ b/core/clingutils/src/unordered_setLinkdef.h. @@ -1,6 +1,11 @@. #include <unordered_set>. #include <string>. +#define XSTR(x) STR(x). +#define STR(x) #x. +. +#pragma message ""Version "" XSTR(__cplusplus). +. #pragma create TClass unordered_set<int>;. #pragma create TClass unordered_set<long>;. #pragma create TClass unordered_set<float>;. ```. I get `201406L`. Huh from CMSSW, GCC7, ROOT:. ```. root [0] __cplusplus. (long) 201406. ```. I guess, https://github.com/root-project/root/commit/702298d9ad83866d0be62f0422c03ac8ea6687f1 needs improvements. Clang 3.9 didn't have a correct value for C++17, but __it is in C++17 mode__:. ```. 379 } else {. 380 // FIXME: Use correct value for C++17. 381 if (LangOpts.CPlusPlus1z). 382 Builder.defineMacro(""__cplusplus"", ""201406L"");. 383 // C++1y [cpp.predefined]p1:. 384 // The name __cplusplus is defined to the value 201402L when compiling a. 385 // C++ translation unit. 386 else if (LangOpts.CPlusPlus14). 387 Builder.defineMacro(""__cplusplus"", ""201402L"");. ```. Even 4.0.0 doesn't have a correct value. Only master branch of Clang has the correct value. ```. commit 65ecf3afb2faf3d0598a6c742b81e7adec6b101b. Author: Richard Smith <richard-llvm@metafoo.co.uk>. Date: Mon Mar 20 20:12:48 2017 +0000. Bump __cplusplus for C++17 to 201703L per the C++17 DIS. ```. Maybe we should adjust __cplusplus value to match official one and the one in GCC. None of this helps with optional error we have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:85,deployability,upgrad,upgrade,85,Fair enough. Summary: no C++17 in ROOT 6.10. It will only arrive though a llvm/clang upgrade.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:85,modifiability,upgrad,upgrade,85,Fair enough. Summary: no C++17 in ROOT 6.10. It will only arrive though a llvm/clang upgrade.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:66,performance,content,content,66,"Clang 3.9 has majority of C++17 language features. I quickly took content of `multimapLinkdef.h` and tested with Clang 3.8.0 and Clang 4.0.0 with GCC 7.1.1. Clang 4.0.0 worked just fine, but Clang 3.8.0 didn't. Sadly I don't have 3.9.0.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:101,safety,test,tested,101,"Clang 3.9 has majority of C++17 language features. I quickly took content of `multimapLinkdef.h` and tested with Clang 3.8.0 and Clang 4.0.0 with GCC 7.1.1. Clang 4.0.0 worked just fine, but Clang 3.8.0 didn't. Sadly I don't have 3.9.0.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:101,testability,test,tested,101,"Clang 3.9 has majority of C++17 language features. I quickly took content of `multimapLinkdef.h` and tested with Clang 3.8.0 and Clang 4.0.0 with GCC 7.1.1. Clang 4.0.0 worked just fine, but Clang 3.8.0 didn't. Sadly I don't have 3.9.0.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/523:19,deployability,updat,update,19,@davidlt Could you update to apply the clang-format recommendation (here it seems simply to use 3 characters for indentation rather than 2).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:45,interoperability,format,format,45,@davidlt Could you update to apply the clang-format recommendation (here it seems simply to use 3 characters for indentation rather than 2).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:19,safety,updat,update,19,@davidlt Could you update to apply the clang-format recommendation (here it seems simply to use 3 characters for indentation rather than 2).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:19,security,updat,update,19,@davidlt Could you update to apply the clang-format recommendation (here it seems simply to use 3 characters for indentation rather than 2).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:82,testability,simpl,simply,82,@davidlt Could you update to apply the clang-format recommendation (here it seems simply to use 3 characters for indentation rather than 2).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:82,usability,simpl,simply,82,@davidlt Could you update to apply the clang-format recommendation (here it seems simply to use 3 characters for indentation rather than 2).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:201,deployability,build,builds,201,"Btw, for anyone who is using Fedora to ROOT development. Sadly `git-clang-format` is explicitly removed from Clang package. I already created a ticket asking to have `git-clang-format` in future Clang builds. Anyone can copy `git-clang-format` from upstream and just put it into your `PATH`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:74,interoperability,format,format,74,"Btw, for anyone who is using Fedora to ROOT development. Sadly `git-clang-format` is explicitly removed from Clang package. I already created a ticket asking to have `git-clang-format` in future Clang builds. Anyone can copy `git-clang-format` from upstream and just put it into your `PATH`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:177,interoperability,format,format,177,"Btw, for anyone who is using Fedora to ROOT development. Sadly `git-clang-format` is explicitly removed from Clang package. I already created a ticket asking to have `git-clang-format` in future Clang builds. Anyone can copy `git-clang-format` from upstream and just put it into your `PATH`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:236,interoperability,format,format,236,"Btw, for anyone who is using Fedora to ROOT development. Sadly `git-clang-format` is explicitly removed from Clang package. I already created a ticket asking to have `git-clang-format` in future Clang builds. Anyone can copy `git-clang-format` from upstream and just put it into your `PATH`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:115,modifiability,pac,package,115,"Btw, for anyone who is using Fedora to ROOT development. Sadly `git-clang-format` is explicitly removed from Clang package. I already created a ticket asking to have `git-clang-format` in future Clang builds. Anyone can copy `git-clang-format` from upstream and just put it into your `PATH`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/524:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:76,security,modif,modified,76,Something seems odd with this pull requests. It lists 31 commits but only 4 modified files ... maybe the rebase against master did not work properly?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:35,interoperability,conflict,conflicts,35,"2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. All the other commits were fixes made previously i.e. long ago. I have no idea why they always go into the same PR. I keep requesting a new PR. Is this a feature? John. > On 25 Apr 2017, at 16:53, Philippe Canal <notifications@github.com> wrote:. > . > Something seems odd with this pull requests. It lists 31 commits but only 4 modified files ... maybe the rebase against master did not work properly? > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297056209>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2yima799n4EZrXftcgK3WTUO-Wm6xks5rzgjxgaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:413,security,modif,modified,413,"2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. All the other commits were fixes made previously i.e. long ago. I have no idea why they always go into the same PR. I keep requesting a new PR. Is this a feature? John. > On 25 Apr 2017, at 16:53, Philippe Canal <notifications@github.com> wrote:. > . > Something seems odd with this pull requests. It lists 31 commits but only 4 modified files ... maybe the rebase against master did not work properly? > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297056209>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2yima799n4EZrXftcgK3WTUO-Wm6xks5rzgjxgaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:533,security,auth,authored,533,"2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. All the other commits were fixes made previously i.e. long ago. I have no idea why they always go into the same PR. I keep requesting a new PR. Is this a feature? John. > On 25 Apr 2017, at 16:53, Philippe Canal <notifications@github.com> wrote:. > . > Something seems odd with this pull requests. It lists 31 commits but only 4 modified files ... maybe the rebase against master did not work properly? > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297056209>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2yima799n4EZrXftcgK3WTUO-Wm6xks5rzgjxgaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:741,security,auth,auth,741,"2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. All the other commits were fixes made previously i.e. long ago. I have no idea why they always go into the same PR. I keep requesting a new PR. Is this a feature? John. > On 25 Apr 2017, at 16:53, Philippe Canal <notifications@github.com> wrote:. > . > Something seems odd with this pull requests. It lists 31 commits but only 4 modified files ... maybe the rebase against master did not work properly? > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297056209>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2yima799n4EZrXftcgK3WTUO-Wm6xks5rzgjxgaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:31,usability,help,help,31,Maybe sync your [fork](https://help.github.com/articles/syncing-a-fork/) or create every new PR from a separate branch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:37,interoperability,conflict,conflicts,37,"> 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. . This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:132,performance,parallel,parallel,132,"> 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. . This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:265,deployability,continu,continue,265,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:73,integrability,interfac,interface,73,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:423,integrability,repositor,repository,423,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:531,integrability,repositor,repository,531,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:60,interoperability,standard,standard,60,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:73,interoperability,interfac,interface,73,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:292,interoperability,conflict,conflict,292,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:370,interoperability,format,formatting,370,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:423,interoperability,repositor,repository,423,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:531,interoperability,repositor,repository,531,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:747,interoperability,conflict,conflicts,747,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:73,modifiability,interfac,interface,73,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:93,performance,time,time,93,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:846,performance,parallel,parallel,846,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:1059,security,auth,authored,1059,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:1267,security,auth,auth,1267,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:21,testability,understand,understand,21,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:250,usability,behavi,behaviour,250,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one. No-one has been able to explain to me why. Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true? John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:. > . > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today. > . > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits. > . > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:485,availability,error,error,485,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:637,availability,toler,tolerances,637,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:1057,availability,Down,Downgrade,1057,"d to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the two new commits . ```git cherry-pick e815eaa 203703f```. In the ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:387,deployability,resourc,resource,387,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:612,deployability,fail,failing,612,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:1884,deployability,patch,patch,1884," Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the two new commits . ```git cherry-pick e815eaa 203703f```. In the future, I recommend that rather than working directly in the master, you consider working on a ""feature"" branch. See for example: http://geant.cern.ch/content/suggested-work-flow-distributed-projects-nosy. For more detail on rebase vs merge, see https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa#.1t4khiyjg. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:289,energy efficiency,optim,optimal,289,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:387,energy efficiency,resourc,resource,387,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:155,integrability,repositor,repository,155,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:271,integrability,interfac,interface,271,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:285,integrability,sub,sub-optimal,285,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:1482,integrability,repositor,repository,1482," Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the two new commits . ```git cherry-pick e815eaa 203703f```. In the future, I recommend that rather than working directly in the master, you consider working on a ""feature"" branch. See for example: http://geant.cern.ch/content/suggested-work-flow-distributed-projects-nosy. For more detail on rebase vs merge, see https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa#.1t4khiyjg. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:22,interoperability,conflict,conflict,22,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:100,interoperability,format,formatting,100,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:155,interoperability,repositor,repository,155,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:271,interoperability,interfac,interface,271,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:547,interoperability,conflict,conflicts,547,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:1373,interoperability,conflict,conflict,1373,"1577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the two new commits . ```git cherry-pick e815eaa 203703f```. In the future, I recommend that rather than working directly in the master, you consider working on a ""feature"" branch. See for example: http://geant.cern.ch/content/suggested-work-flow-distributed-projects-nosy. For more detail on rebase vs merge, see https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:1482,interoperability,repositor,repository,1482," Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the two new commits . ```git cherry-pick e815eaa 203703f```. In the future, I recommend that rather than working directly in the master, you consider working on a ""feature"" branch. See for example: http://geant.cern.ch/content/suggested-work-flow-distributed-projects-nosy. For more detail on rebase vs merge, see https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa#.1t4khiyjg. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:1802,interoperability,conflict,conflict,1802," Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the two new commits . ```git cherry-pick e815eaa 203703f```. In the future, I recommend that rather than working directly in the master, you consider working on a ""feature"" branch. See for example: http://geant.cern.ch/content/suggested-work-flow-distributed-projects-nosy. For more detail on rebase vs merge, see https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa#.1t4khiyjg. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:2241,interoperability,distribut,distributed-projects-nosy,2241," Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the two new commits . ```git cherry-pick e815eaa 203703f```. In the future, I recommend that rather than working directly in the master, you consider working on a ""feature"" branch. See for example: http://geant.cern.ch/content/suggested-work-flow-distributed-projects-nosy. For more detail on rebase vs merge, see https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa#.1t4khiyjg. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:271,modifiability,interfac,interface,271,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:387,performance,resourc,resource,387,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:485,performance,error,error,485,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:2213,performance,content,content,2213," Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the two new commits . ```git cherry-pick e815eaa 203703f```. In the future, I recommend that rather than working directly in the master, you consider working on a ""feature"" branch. See for example: http://geant.cern.ch/content/suggested-work-flow-distributed-projects-nosy. For more detail on rebase vs merge, see https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa#.1t4khiyjg. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:612,reliability,fail,failing,612,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:637,reliability,toleran,tolerances,637,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:387,safety,resourc,resource,387,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:485,safety,error,error,485,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:620,safety,test,test,620,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:1855,safety,test,test,1855," Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the two new commits . ```git cherry-pick e815eaa 203703f```. In the future, I recommend that rather than working directly in the master, you consider working on a ""feature"" branch. See for example: http://geant.cern.ch/content/suggested-work-flow-distributed-projects-nosy. For more detail on rebase vs merge, see https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa#.1t4khiyjg. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:1860,safety,test,testInterpolation,1860," Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the two new commits . ```git cherry-pick e815eaa 203703f```. In the future, I recommend that rather than working directly in the master, you consider working on a ""feature"" branch. See for example: http://geant.cern.ch/content/suggested-work-flow-distributed-projects-nosy. For more detail on rebase vs merge, see https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa#.1t4khiyjg. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:1884,safety,patch,patch,1884," Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the two new commits . ```git cherry-pick e815eaa 203703f```. In the future, I recommend that rather than working directly in the master, you consider working on a ""feature"" branch. See for example: http://geant.cern.ch/content/suggested-work-flow-distributed-projects-nosy. For more detail on rebase vs merge, see https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa#.1t4khiyjg. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:1884,security,patch,patch,1884," Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the two new commits . ```git cherry-pick e815eaa 203703f```. In the future, I recommend that rather than working directly in the master, you consider working on a ""feature"" branch. See for example: http://geant.cern.ch/content/suggested-work-flow-distributed-projects-nosy. For more detail on rebase vs merge, see https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa#.1t4khiyjg. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:387,testability,resourc,resource,387,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:620,testability,test,test,620,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:1855,testability,test,test,1855," Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the two new commits . ```git cherry-pick e815eaa 203703f```. In the future, I recommend that rather than working directly in the master, you consider working on a ""feature"" branch. See for example: http://geant.cern.ch/content/suggested-work-flow-distributed-projects-nosy. For more detail on rebase vs merge, see https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa#.1t4khiyjg. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:1860,testability,test,testInterpolation,1860," Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the two new commits . ```git cherry-pick e815eaa 203703f```. In the future, I recommend that rather than working directly in the master, you consider working on a ""feature"" branch. See for example: http://geant.cern.ch/content/suggested-work-flow-distributed-projects-nosy. For more detail on rebase vs merge, see https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa#.1t4khiyjg. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:485,usability,error,error,485,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:873,usability,help,help,873,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:. ```. * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey. * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey. * ed09395 - (6 days ago) resolving merge conflicts — John Harvey. |\ . | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio. | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal. | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet. .... | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. .... * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD). .... * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey. ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:. * make a branch out of your master to make sure to not lose anything:. ```git branch masterApril2017 203703f```. * do a hard reset of master to match origin/master. ```git checkout master; git reset --hard origin/master```. * Re-apply the commit with a merge conflict. ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```. * cherry-pick the tw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:102,usability,prefer,preference,102,"Alternatively, one can rebase with `git rebase -s recursive -X ours upstream/master`. This would give preference to what's already in the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/525:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:0,deployability,Fail,Fails,0,Fails with this message:. - projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshot (from CTest). - Failing for the past 7 builds (Since #94 ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:118,deployability,Fail,Failing,118,Fails with this message:. - projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshot (from CTest). - Failing for the past 7 builds (Since #94 ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:141,deployability,build,builds,141,Fails with this message:. - projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshot (from CTest). - Failing for the past 7 builds (Since #94 ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:16,integrability,messag,message,16,Fails with this message:. - projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshot (from CTest). - Failing for the past 7 builds (Since #94 ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:16,interoperability,messag,message,16,Fails with this message:. - projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshot (from CTest). - Failing for the past 7 builds (Since #94 ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:0,reliability,Fail,Fails,0,Fails with this message:. - projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshot (from CTest). - Failing for the past 7 builds (Since #94 ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:118,reliability,Fail,Failing,118,Fails with this message:. - projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshot (from CTest). - Failing for the past 7 builds (Since #94 ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:32,availability,error,error,32,"I'm still fixing the clang-tidy error :O. Should be done in a minute. Cheers,. Kim. Lorenzo Moneta wrote:. >. > Merged #525 <https://github.com/root-project/root/pull/525>. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/525#event-1058796530>, or. > mute the thread. > <https://github.com/notifications/unsubscribe-auth/ACBi2WCLHl_4jQiAk0RVUzm6uGsT6po9ks5rz12LgaJpZM4NHrC3>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:339,integrability,event,event-,339,"I'm still fixing the clang-tidy error :O. Should be done in a minute. Cheers,. Kim. Lorenzo Moneta wrote:. >. > Merged #525 <https://github.com/root-project/root/pull/525>. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/525#event-1058796530>, or. > mute the thread. > <https://github.com/notifications/unsubscribe-auth/ACBi2WCLHl_4jQiAk0RVUzm6uGsT6po9ks5rz12LgaJpZM4NHrC3>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:32,performance,error,error,32,"I'm still fixing the clang-tidy error :O. Should be done in a minute. Cheers,. Kim. Lorenzo Moneta wrote:. >. > Merged #525 <https://github.com/root-project/root/pull/525>. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/525#event-1058796530>, or. > mute the thread. > <https://github.com/notifications/unsubscribe-auth/ACBi2WCLHl_4jQiAk0RVUzm6uGsT6po9ks5rz12LgaJpZM4NHrC3>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:32,safety,error,error,32,"I'm still fixing the clang-tidy error :O. Should be done in a minute. Cheers,. Kim. Lorenzo Moneta wrote:. >. > Merged #525 <https://github.com/root-project/root/pull/525>. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/525#event-1058796530>, or. > mute the thread. > <https://github.com/notifications/unsubscribe-auth/ACBi2WCLHl_4jQiAk0RVUzm6uGsT6po9ks5rz12LgaJpZM4NHrC3>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:218,security,auth,authored,218,"I'm still fixing the clang-tidy error :O. Should be done in a minute. Cheers,. Kim. Lorenzo Moneta wrote:. >. > Merged #525 <https://github.com/root-project/root/pull/525>. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/525#event-1058796530>, or. > mute the thread. > <https://github.com/notifications/unsubscribe-auth/ACBi2WCLHl_4jQiAk0RVUzm6uGsT6po9ks5rz12LgaJpZM4NHrC3>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:429,security,auth,auth,429,"I'm still fixing the clang-tidy error :O. Should be done in a minute. Cheers,. Kim. Lorenzo Moneta wrote:. >. > Merged #525 <https://github.com/root-project/root/pull/525>. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/525#event-1058796530>, or. > mute the thread. > <https://github.com/notifications/unsubscribe-auth/ACBi2WCLHl_4jQiAk0RVUzm6uGsT6po9ks5rz12LgaJpZM4NHrC3>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:32,usability,error,error,32,"I'm still fixing the clang-tidy error :O. Should be done in a minute. Cheers,. Kim. Lorenzo Moneta wrote:. >. > Merged #525 <https://github.com/root-project/root/pull/525>. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/525#event-1058796530>, or. > mute the thread. > <https://github.com/notifications/unsubscribe-auth/ACBi2WCLHl_4jQiAk0RVUzm6uGsT6po9ks5rz12LgaJpZM4NHrC3>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/526:11,deployability,build,build,11,@phsft-bot build please.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:133,deployability,build,builds,133,dbdff174711c9bf63cc71735e34be374e7c1ec0c causes crash in stressHistogram. Do we understand why it was not seen/caught by the jenkins builds?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:80,testability,understand,understand,80,dbdff174711c9bf63cc71735e34be374e7c1ec0c causes crash in stressHistogram. Do we understand why it was not seen/caught by the jenkins builds?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:174,availability,failur,failure,174,"@vgvassilev I am looking into the commit itself (which by the way had already been commit and reverted once). **However** my questions is really about **jenkins**. I.e. this failure is seen in the incremental builds (https://phsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/466/testReport/projectroot/test/test_stresshistogram/) ... and so my questions (to try to improve the process/infrastructure) is why it was not seen in the build made from the PR (i.e. is stressHistogram not run? did the build not finish? or something else?). thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:174,deployability,fail,failure,174,"@vgvassilev I am looking into the commit itself (which by the way had already been commit and reverted once). **However** my questions is really about **jenkins**. I.e. this failure is seen in the incremental builds (https://phsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/466/testReport/projectroot/test/test_stresshistogram/) ... and so my questions (to try to improve the process/infrastructure) is why it was not seen in the build made from the PR (i.e. is stressHistogram not run? did the build not finish? or something else?). thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:209,deployability,build,builds,209,"@vgvassilev I am looking into the commit itself (which by the way had already been commit and reverted once). **However** my questions is really about **jenkins**. I.e. this failure is seen in the incremental builds (https://phsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/466/testReport/projectroot/test/test_stresshistogram/) ... and so my questions (to try to improve the process/infrastructure) is why it was not seen in the build made from the PR (i.e. is stressHistogram not run? did the build not finish? or something else?). thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:281,deployability,BUILD,BUILDTYPE,281,"@vgvassilev I am looking into the commit itself (which by the way had already been commit and reverted once). **However** my questions is really about **jenkins**. I.e. this failure is seen in the incremental builds (https://phsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/466/testReport/projectroot/test/test_stresshistogram/) ... and so my questions (to try to improve the process/infrastructure) is why it was not seen in the build made from the PR (i.e. is stressHistogram not run? did the build not finish? or something else?). thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:436,deployability,infrastructur,infrastructure,436,"@vgvassilev I am looking into the commit itself (which by the way had already been commit and reverted once). **However** my questions is really about **jenkins**. I.e. this failure is seen in the incremental builds (https://phsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/466/testReport/projectroot/test/test_stresshistogram/) ... and so my questions (to try to improve the process/infrastructure) is why it was not seen in the build made from the PR (i.e. is stressHistogram not run? did the build not finish? or something else?). thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:482,deployability,build,build,482,"@vgvassilev I am looking into the commit itself (which by the way had already been commit and reverted once). **However** my questions is really about **jenkins**. I.e. this failure is seen in the incremental builds (https://phsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/466/testReport/projectroot/test/test_stresshistogram/) ... and so my questions (to try to improve the process/infrastructure) is why it was not seen in the build made from the PR (i.e. is stressHistogram not run? did the build not finish? or something else?). thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:547,deployability,build,build,547,"@vgvassilev I am looking into the commit itself (which by the way had already been commit and reverted once). **However** my questions is really about **jenkins**. I.e. this failure is seen in the incremental builds (https://phsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/466/testReport/projectroot/test/test_stresshistogram/) ... and so my questions (to try to improve the process/infrastructure) is why it was not seen in the build made from the PR (i.e. is stressHistogram not run? did the build not finish? or something else?). thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:174,performance,failur,failure,174,"@vgvassilev I am looking into the commit itself (which by the way had already been commit and reverted once). **However** my questions is really about **jenkins**. I.e. this failure is seen in the incremental builds (https://phsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/466/testReport/projectroot/test/test_stresshistogram/) ... and so my questions (to try to improve the process/infrastructure) is why it was not seen in the build made from the PR (i.e. is stressHistogram not run? did the build not finish? or something else?). thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:174,reliability,fail,failure,174,"@vgvassilev I am looking into the commit itself (which by the way had already been commit and reverted once). **However** my questions is really about **jenkins**. I.e. this failure is seen in the incremental builds (https://phsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/466/testReport/projectroot/test/test_stresshistogram/) ... and so my questions (to try to improve the process/infrastructure) is why it was not seen in the build made from the PR (i.e. is stressHistogram not run? did the build not finish? or something else?). thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:330,safety,test,testReport,330,"@vgvassilev I am looking into the commit itself (which by the way had already been commit and reverted once). **However** my questions is really about **jenkins**. I.e. this failure is seen in the incremental builds (https://phsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/466/testReport/projectroot/test/test_stresshistogram/) ... and so my questions (to try to improve the process/infrastructure) is why it was not seen in the build made from the PR (i.e. is stressHistogram not run? did the build not finish? or something else?). thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:353,safety,test,test,353,"@vgvassilev I am looking into the commit itself (which by the way had already been commit and reverted once). **However** my questions is really about **jenkins**. I.e. this failure is seen in the incremental builds (https://phsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/466/testReport/projectroot/test/test_stresshistogram/) ... and so my questions (to try to improve the process/infrastructure) is why it was not seen in the build made from the PR (i.e. is stressHistogram not run? did the build not finish? or something else?). thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:330,testability,test,testReport,330,"@vgvassilev I am looking into the commit itself (which by the way had already been commit and reverted once). **However** my questions is really about **jenkins**. I.e. this failure is seen in the incremental builds (https://phsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/466/testReport/projectroot/test/test_stresshistogram/) ... and so my questions (to try to improve the process/infrastructure) is why it was not seen in the build made from the PR (i.e. is stressHistogram not run? did the build not finish? or something else?). thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/526:353,testability,test,test,353,"@vgvassilev I am looking into the commit itself (which by the way had already been commit and reverted once). **However** my questions is really about **jenkins**. I.e. this failure is seen in the incremental builds (https://phsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/466/testReport/projectroot/test/test_stresshistogram/) ... and so my questions (to try to improve the process/infrastructure) is why it was not seen in the build made from the PR (i.e. is stressHistogram not run? did the build not finish? or something else?). thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/526
https://github.com/root-project/root/pull/528:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/528
https://github.com/root-project/root/pull/529:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/529
https://github.com/root-project/root/pull/529:27,availability,failur,failure,27,Tests al OK despite of the failure...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/529
https://github.com/root-project/root/pull/529:27,deployability,fail,failure,27,Tests al OK despite of the failure...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/529
https://github.com/root-project/root/pull/529:27,performance,failur,failure,27,Tests al OK despite of the failure...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/529
https://github.com/root-project/root/pull/529:27,reliability,fail,failure,27,Tests al OK despite of the failure...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/529
https://github.com/root-project/root/pull/529:0,safety,Test,Tests,0,Tests al OK despite of the failure...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/529
https://github.com/root-project/root/pull/529:0,testability,Test,Tests,0,Tests al OK despite of the failure...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/529
https://github.com/root-project/root/pull/530:152,modifiability,variab,variables,152,Why this warning is generated in this top level CMakeLists.txt file? Shouldn't be in the interpreter/CmakeLists.txt file in which we deal with LLVM_XXX variables?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/530
https://github.com/root-project/root/pull/530:87,deployability,depend,depend,87,I don't think this fixes the issue at the right end. I'd rather not have class layouts depend on `NDEBUG` - which is what we have now in the master. Okay to close?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/530
https://github.com/root-project/root/pull/530:87,integrability,depend,depend,87,I don't think this fixes the issue at the right end. I'd rather not have class layouts depend on `NDEBUG` - which is what we have now in the master. Okay to close?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/530
https://github.com/root-project/root/pull/530:87,modifiability,depend,depend,87,I don't think this fixes the issue at the right end. I'd rather not have class layouts depend on `NDEBUG` - which is what we have now in the master. Okay to close?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/530
https://github.com/root-project/root/pull/530:87,safety,depend,depend,87,I don't think this fixes the issue at the right end. I'd rather not have class layouts depend on `NDEBUG` - which is what we have now in the master. Okay to close?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/530
https://github.com/root-project/root/pull/530:87,testability,depend,depend,87,I don't think this fixes the issue at the right end. I'd rather not have class layouts depend on `NDEBUG` - which is what we have now in the master. Okay to close?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/530
https://github.com/root-project/root/pull/530:157,usability,close,close,157,I don't think this fixes the issue at the right end. I'd rather not have class layouts depend on `NDEBUG` - which is what we have now in the master. Okay to close?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/530
https://github.com/root-project/root/pull/531:19,interoperability,format,format,19,"Not sure why clang-format complains about those lines, I have not changed them in this commit. In any case those three lines of the docs need to be longer than 120 columns for doxygen to correctly parse the markdown tables.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/531
https://github.com/root-project/root/pull/531:26,safety,compl,complains,26,"Not sure why clang-format complains about those lines, I have not changed them in this commit. In any case those three lines of the docs need to be longer than 120 columns for doxygen to correctly parse the markdown tables.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/531
https://github.com/root-project/root/pull/531:26,security,compl,complains,26,"Not sure why clang-format complains about those lines, I have not changed them in this commit. In any case those three lines of the docs need to be longer than 120 columns for doxygen to correctly parse the markdown tables.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/531
https://github.com/root-project/root/pull/532:11,deployability,build,build,11,@phsft-bot build? :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/532
https://github.com/root-project/root/pull/533:271,energy efficiency,core,core,271,"Hi,. I plan to add more punctual comments but here I think we have the first comments emerged from today's meeting:. - A better naming is needed. - In-tree gtests should be added to make sure the needs of TDF are satisfied. - The queue should move into ROOT::Internal in core/cont. - A factory pattern shall be in place not to expose the queue to the users for the moment .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:230,integrability,queue,queue,230,"Hi,. I plan to add more punctual comments but here I think we have the first comments emerged from today's meeting:. - A better naming is needed. - In-tree gtests should be added to make sure the needs of TDF are satisfied. - The queue should move into ROOT::Internal in core/cont. - A factory pattern shall be in place not to expose the queue to the users for the moment .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:338,integrability,queue,queue,338,"Hi,. I plan to add more punctual comments but here I think we have the first comments emerged from today's meeting:. - A better naming is needed. - In-tree gtests should be added to make sure the needs of TDF are satisfied. - The queue should move into ROOT::Internal in core/cont. - A factory pattern shall be in place not to expose the queue to the users for the moment .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:230,performance,queue,queue,230,"Hi,. I plan to add more punctual comments but here I think we have the first comments emerged from today's meeting:. - A better naming is needed. - In-tree gtests should be added to make sure the needs of TDF are satisfied. - The queue should move into ROOT::Internal in core/cont. - A factory pattern shall be in place not to expose the queue to the users for the moment .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:338,performance,queue,queue,338,"Hi,. I plan to add more punctual comments but here I think we have the first comments emerged from today's meeting:. - A better naming is needed. - In-tree gtests should be added to make sure the needs of TDF are satisfied. - The queue should move into ROOT::Internal in core/cont. - A factory pattern shall be in place not to expose the queue to the users for the moment .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:327,security,expos,expose,327,"Hi,. I plan to add more punctual comments but here I think we have the first comments emerged from today's meeting:. - A better naming is needed. - In-tree gtests should be added to make sure the needs of TDF are satisfied. - The queue should move into ROOT::Internal in core/cont. - A factory pattern shall be in place not to expose the queue to the users for the moment .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:7,testability,plan,plan,7,"Hi,. I plan to add more punctual comments but here I think we have the first comments emerged from today's meeting:. - A better naming is needed. - In-tree gtests should be added to make sure the needs of TDF are satisfied. - The queue should move into ROOT::Internal in core/cont. - A factory pattern shall be in place not to expose the queue to the users for the moment .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:351,usability,user,users,351,"Hi,. I plan to add more punctual comments but here I think we have the first comments emerged from today's meeting:. - A better naming is needed. - In-tree gtests should be added to make sure the needs of TDF are satisfied. - The queue should move into ROOT::Internal in core/cont. - A factory pattern shall be in place not to expose the queue to the users for the moment .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:83,integrability,interfac,interfaces,83,Another comment: the headers are quite fat. Perhaps we can have in the headers the interfaces and have cxx files with the implementation and helper functions hidden from the interface (and the pch)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:174,integrability,interfac,interface,174,Another comment: the headers are quite fat. Perhaps we can have in the headers the interfaces and have cxx files with the implementation and helper functions hidden from the interface (and the pch)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:83,interoperability,interfac,interfaces,83,Another comment: the headers are quite fat. Perhaps we can have in the headers the interfaces and have cxx files with the implementation and helper functions hidden from the interface (and the pch)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:174,interoperability,interfac,interface,174,Another comment: the headers are quite fat. Perhaps we can have in the headers the interfaces and have cxx files with the implementation and helper functions hidden from the interface (and the pch)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:83,modifiability,interfac,interfaces,83,Another comment: the headers are quite fat. Perhaps we can have in the headers the interfaces and have cxx files with the implementation and helper functions hidden from the interface (and the pch)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:174,modifiability,interfac,interface,174,Another comment: the headers are quite fat. Perhaps we can have in the headers the interfaces and have cxx files with the implementation and helper functions hidden from the interface (and the pch)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:141,usability,help,helper,141,Another comment: the headers are quite fat. Perhaps we can have in the headers the interfaces and have cxx files with the implementation and helper functions hidden from the interface (and the pch)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:157,energy efficiency,model,model,157,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:188,integrability,Buffer,Buffer,188,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:331,integrability,pub,public,331,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:338,integrability,interfac,interface,338,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:593,integrability,compon,components,593,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:702,integrability,interfac,interface,702,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:338,interoperability,interfac,interface,338,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:593,interoperability,compon,components,593,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:702,interoperability,interfac,interface,702,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:267,modifiability,inherit,inheritance,267,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:338,modifiability,interfac,interface,338,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:593,modifiability,compon,components,593,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:702,modifiability,interfac,interface,702,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:918,modifiability,extens,extension,918,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:203,performance,Parallel,Parallel,203,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:157,security,model,model,157,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:586,usability,help,helper,586,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:649,usability,user,user,649,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:806,usability,user,user,806,"Hi @amadio,. very nice. Some high level comments before diving into the details:. - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). - We need to check if the inheritance from TObject is always needed. - We need to put the public interface in the ROOT::Experimental namespace . - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. - We need to check in the dtor of the server if all clients are alive, if not throw. - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:89,energy efficiency,model,model,89,"Hi @dpiparo,. > We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:120,integrability,Buffer,Buffer,120,"Hi @dpiparo,. > We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:623,integrability,pub,public,623,"Hi @dpiparo,. > We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:630,integrability,interfac,interface,630,"Hi @dpiparo,. > We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:974,integrability,pub,public,974,"Hi @dpiparo,. > We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:1470,integrability,compon,components,1470,"ppe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....). After I either fuse the classes as mentioned above, or move them into the Internal/Detail namespaces, this will be solved as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:1579,integrability,interfac,interface,1579,"ppe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....). After I either fuse the classes as mentioned above, or move them into the Internal/Detail namespaces, this will be solved as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:630,interoperability,interfac,interface,630,"Hi @dpiparo,. > We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:1470,interoperability,compon,components,1470,"ppe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....). After I either fuse the classes as mentioned above, or move them into the Internal/Detail namespaces, this will be solved as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:1579,interoperability,interfac,interface,1579,"ppe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....). After I either fuse the classes as mentioned above, or move them into the Internal/Detail namespaces, this will be solved as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:394,modifiability,inherit,inheritance,394,"Hi @dpiparo,. > We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:532,modifiability,inherit,inheriting,532,"Hi @dpiparo,. > We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:630,modifiability,interfac,interface,630,"Hi @dpiparo,. > We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:1470,modifiability,compon,components,1470,"ppe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....). After I either fuse the classes as mentioned above, or move them into the Internal/Detail namespaces, this will be solved as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:1579,modifiability,interfac,interface,1579,"ppe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....). After I either fuse the classes as mentioned above, or move them into the Internal/Detail namespaces, this will be solved as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:2053,modifiability,extens,extension,2053,"ppe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....). After I either fuse the classes as mentioned above, or move them into the Internal/Detail namespaces, this will be solved as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:135,performance,Parallel,Parallel,135,"Hi @dpiparo,. > We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:588,safety,avoid,avoid,588,"Hi @dpiparo,. > We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:89,security,model,model,89,"Hi @dpiparo,. > We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:1099,security,control,control,1099,"or the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:1099,testability,control,control,1099,"or the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:181,usability,prefer,prefer,181,"Hi @dpiparo,. > We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:578,usability,prefer,prefer,578,"Hi @dpiparo,. > We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:1135,usability,prefer,preference,1135,"lel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....). After I either fuse",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:1463,usability,help,helper,1463,"ppe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....). After I either fuse the classes as mentioned above, or move them into the Internal/Detail namespaces, this will be solved as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:1526,usability,user,user,1526,"ppe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....). After I either fuse the classes as mentioned above, or move them into the Internal/Detail namespaces, this will be solved as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:1943,usability,user,user,1943,"ppe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients. That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client. In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....). After I either fuse the classes as mentioned above, or move them into the Internal/Detail namespaces, this will be solved as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:220,performance,memor,memory,220,> We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. I thought we had settled on the reverse? I.e. return a unique_ptr and the client has some sort of weak_ptr to some server own memory and then we throw if the client try to access the server after it dies?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:266,security,access,access,266,> We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. I thought we had settled on the reverse? I.e. return a unique_ptr and the client has some sort of weak_ptr to some server own memory and then we throw if the client try to access the server after it dies?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:220,usability,memor,memory,220,> We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. I thought we had settled on the reverse? I.e. return a unique_ptr and the client has some sort of weak_ptr to some server own memory and then we throw if the client try to access the server after it dies?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:199,interoperability,share,shared,199,"> If not inheriting from TObject is desirable,. Yes, do not inherit from TObject unless you use one of its facility:. * Name/Title. * UniqueID and/or TRef. * storing in a ROOT collection. * Implicit shared ownership. In addition any class inheriting directly or indirectly from TObject **must** have a ClassDef. Other classes should have a ClassDef (either NV or Override or Inline)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:9,modifiability,inherit,inheriting,9,"> If not inheriting from TObject is desirable,. Yes, do not inherit from TObject unless you use one of its facility:. * Name/Title. * UniqueID and/or TRef. * storing in a ROOT collection. * Implicit shared ownership. In addition any class inheriting directly or indirectly from TObject **must** have a ClassDef. Other classes should have a ClassDef (either NV or Override or Inline)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:60,modifiability,inherit,inherit,60,"> If not inheriting from TObject is desirable,. Yes, do not inherit from TObject unless you use one of its facility:. * Name/Title. * UniqueID and/or TRef. * storing in a ROOT collection. * Implicit shared ownership. In addition any class inheriting directly or indirectly from TObject **must** have a ClassDef. Other classes should have a ClassDef (either NV or Override or Inline)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:239,modifiability,inherit,inheriting,239,"> If not inheriting from TObject is desirable,. Yes, do not inherit from TObject unless you use one of its facility:. * Name/Title. * UniqueID and/or TRef. * storing in a ROOT collection. * Implicit shared ownership. In addition any class inheriting directly or indirectly from TObject **must** have a ClassDef. Other classes should have a ClassDef (either NV or Override or Inline)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:734,availability,down,down,734,">>We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. >. >I thought we had settled on the reverse? I.e. return a unique_ptr and the client has some sort of weak_ptr to some server own memory and then we throw if the client try to access the server after it dies? There is a conflict between using unique_ptr<T>, which requires public constructor/destructor, and having only the server being able to create them, by making the constructor/destructor private, which was suggested by Danilo. I think the solution with private constructor/destructor is nice, since the lifetime of the clients is forced to be the same as the server. The user needs to understand, however, that once the server goes down, all clients go down with it too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:755,availability,down,down,755,">>We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. >. >I thought we had settled on the reverse? I.e. return a unique_ptr and the client has some sort of weak_ptr to some server own memory and then we throw if the client try to access the server after it dies? There is a conflict between using unique_ptr<T>, which requires public constructor/destructor, and having only the server being able to create them, by making the constructor/destructor private, which was suggested by Danilo. I think the solution with private constructor/destructor is nice, since the lifetime of the clients is forced to be the same as the server. The user needs to understand, however, that once the server goes down, all clients go down with it too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:367,integrability,pub,public,367,">>We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. >. >I thought we had settled on the reverse? I.e. return a unique_ptr and the client has some sort of weak_ptr to some server own memory and then we throw if the client try to access the server after it dies? There is a conflict between using unique_ptr<T>, which requires public constructor/destructor, and having only the server being able to create them, by making the constructor/destructor private, which was suggested by Danilo. I think the solution with private constructor/destructor is nice, since the lifetime of the clients is forced to be the same as the server. The user needs to understand, however, that once the server goes down, all clients go down with it too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:314,interoperability,conflict,conflict,314,">>We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. >. >I thought we had settled on the reverse? I.e. return a unique_ptr and the client has some sort of weak_ptr to some server own memory and then we throw if the client try to access the server after it dies? There is a conflict between using unique_ptr<T>, which requires public constructor/destructor, and having only the server being able to create them, by making the constructor/destructor private, which was suggested by Danilo. I think the solution with private constructor/destructor is nice, since the lifetime of the clients is forced to be the same as the server. The user needs to understand, however, that once the server goes down, all clients go down with it too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:224,performance,memor,memory,224,">>We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. >. >I thought we had settled on the reverse? I.e. return a unique_ptr and the client has some sort of weak_ptr to some server own memory and then we throw if the client try to access the server after it dies? There is a conflict between using unique_ptr<T>, which requires public constructor/destructor, and having only the server being able to create them, by making the constructor/destructor private, which was suggested by Danilo. I think the solution with private constructor/destructor is nice, since the lifetime of the clients is forced to be the same as the server. The user needs to understand, however, that once the server goes down, all clients go down with it too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:270,security,access,access,270,">>We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. >. >I thought we had settled on the reverse? I.e. return a unique_ptr and the client has some sort of weak_ptr to some server own memory and then we throw if the client try to access the server after it dies? There is a conflict between using unique_ptr<T>, which requires public constructor/destructor, and having only the server being able to create them, by making the constructor/destructor private, which was suggested by Danilo. I think the solution with private constructor/destructor is nice, since the lifetime of the clients is forced to be the same as the server. The user needs to understand, however, that once the server goes down, all clients go down with it too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:687,testability,understand,understand,687,">>We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. >. >I thought we had settled on the reverse? I.e. return a unique_ptr and the client has some sort of weak_ptr to some server own memory and then we throw if the client try to access the server after it dies? There is a conflict between using unique_ptr<T>, which requires public constructor/destructor, and having only the server being able to create them, by making the constructor/destructor private, which was suggested by Danilo. I think the solution with private constructor/destructor is nice, since the lifetime of the clients is forced to be the same as the server. The user needs to understand, however, that once the server goes down, all clients go down with it too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:224,usability,memor,memory,224,">>We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. >. >I thought we had settled on the reverse? I.e. return a unique_ptr and the client has some sort of weak_ptr to some server own memory and then we throw if the client try to access the server after it dies? There is a conflict between using unique_ptr<T>, which requires public constructor/destructor, and having only the server being able to create them, by making the constructor/destructor private, which was suggested by Danilo. I think the solution with private constructor/destructor is nice, since the lifetime of the clients is forced to be the same as the server. The user needs to understand, however, that once the server goes down, all clients go down with it too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:673,usability,user,user,673,">>We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. >. >I thought we had settled on the reverse? I.e. return a unique_ptr and the client has some sort of weak_ptr to some server own memory and then we throw if the client try to access the server after it dies? There is a conflict between using unique_ptr<T>, which requires public constructor/destructor, and having only the server being able to create them, by making the constructor/destructor private, which was suggested by Danilo. I think the solution with private constructor/destructor is nice, since the lifetime of the clients is forced to be the same as the server. The user needs to understand, however, that once the server goes down, all clients go down with it too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:226,availability,error,error,226,"Apparently, inheriting from TObject is needed, unfortunately:. ```. root/io/io/src/TFileMergeServer.cxx:. In member function ‘void ROOT::Experimental::TFileMergeServer::Listen()’:. root/io/io/src/TFileMergeServer.cxx:271:29:. error: no matching function for call to . ‘THashTable::Add(ROOT::Experimental::ThreadFileMerger*&)’. mergers.Add(info);. ^. ```. I will try to get rid of `ThreadFileMerger` by just fusing its functionality into `TFileMergeServer`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:12,modifiability,inherit,inheriting,12,"Apparently, inheriting from TObject is needed, unfortunately:. ```. root/io/io/src/TFileMergeServer.cxx:. In member function ‘void ROOT::Experimental::TFileMergeServer::Listen()’:. root/io/io/src/TFileMergeServer.cxx:271:29:. error: no matching function for call to . ‘THashTable::Add(ROOT::Experimental::ThreadFileMerger*&)’. mergers.Add(info);. ^. ```. I will try to get rid of `ThreadFileMerger` by just fusing its functionality into `TFileMergeServer`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:226,performance,error,error,226,"Apparently, inheriting from TObject is needed, unfortunately:. ```. root/io/io/src/TFileMergeServer.cxx:. In member function ‘void ROOT::Experimental::TFileMergeServer::Listen()’:. root/io/io/src/TFileMergeServer.cxx:271:29:. error: no matching function for call to . ‘THashTable::Add(ROOT::Experimental::ThreadFileMerger*&)’. mergers.Add(info);. ^. ```. I will try to get rid of `ThreadFileMerger` by just fusing its functionality into `TFileMergeServer`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:226,safety,error,error,226,"Apparently, inheriting from TObject is needed, unfortunately:. ```. root/io/io/src/TFileMergeServer.cxx:. In member function ‘void ROOT::Experimental::TFileMergeServer::Listen()’:. root/io/io/src/TFileMergeServer.cxx:271:29:. error: no matching function for call to . ‘THashTable::Add(ROOT::Experimental::ThreadFileMerger*&)’. mergers.Add(info);. ^. ```. I will try to get rid of `ThreadFileMerger` by just fusing its functionality into `TFileMergeServer`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:226,usability,error,error,226,"Apparently, inheriting from TObject is needed, unfortunately:. ```. root/io/io/src/TFileMergeServer.cxx:. In member function ‘void ROOT::Experimental::TFileMergeServer::Listen()’:. root/io/io/src/TFileMergeServer.cxx:271:29:. error: no matching function for call to . ‘THashTable::Add(ROOT::Experimental::ThreadFileMerger*&)’. mergers.Add(info);. ^. ```. I will try to get rid of `ThreadFileMerger` by just fusing its functionality into `TFileMergeServer`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:309,performance,perform,performant,309,"> I will try to get rid of ThreadFileMerger by just fusing its functionality into TFileMergeServer. At this point, I don't think that is necessary. That class is in one the use case (i.e. using a ROOT collection). So unless it is clear that replacing THashTable with an equivalent stl collection is much more performant, there is no need to waste time changing the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:347,performance,time,time,347,"> I will try to get rid of ThreadFileMerger by just fusing its functionality into TFileMergeServer. At this point, I don't think that is necessary. That class is in one the use case (i.e. using a ROOT collection). So unless it is clear that replacing THashTable with an equivalent stl collection is much more performant, there is no need to waste time changing the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:230,usability,clear,clear,230,"> I will try to get rid of ThreadFileMerger by just fusing its functionality into TFileMergeServer. At this point, I don't think that is necessary. That class is in one the use case (i.e. using a ROOT collection). So unless it is clear that replacing THashTable with an equivalent stl collection is much more performant, there is no need to waste time changing the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:309,usability,perform,performant,309,"> I will try to get rid of ThreadFileMerger by just fusing its functionality into TFileMergeServer. At this point, I don't think that is necessary. That class is in one the use case (i.e. using a ROOT collection). So unless it is clear that replacing THashTable with an equivalent stl collection is much more performant, there is no need to waste time changing the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:63,integrability,pub,public,63,"> There is a conflict between using unique_ptr, which requires public constructor/destructor,. I am surprised that there is no a way to use the unique_ptr that does **not** trigger the need for a public constructor. (having a public destructor is not a bad thing in itself).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:196,integrability,pub,public,196,"> There is a conflict between using unique_ptr, which requires public constructor/destructor,. I am surprised that there is no a way to use the unique_ptr that does **not** trigger the need for a public constructor. (having a public destructor is not a bad thing in itself).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:226,integrability,pub,public,226,"> There is a conflict between using unique_ptr, which requires public constructor/destructor,. I am surprised that there is no a way to use the unique_ptr that does **not** trigger the need for a public constructor. (having a public destructor is not a bad thing in itself).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:13,interoperability,conflict,conflict,13,"> There is a conflict between using unique_ptr, which requires public constructor/destructor,. I am surprised that there is no a way to use the unique_ptr that does **not** trigger the need for a public constructor. (having a public destructor is not a bad thing in itself).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:160,reliability,doe,does,160,"> There is a conflict between using unique_ptr, which requires public constructor/destructor,. I am surprised that there is no a way to use the unique_ptr that does **not** trigger the need for a public constructor. (having a public destructor is not a bad thing in itself).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:83,integrability,pub,public,83,the following code compiles (at it should):. ```. class Foo {. private:. Foo() {}. public:. ~Foo() {}. static Foo *Factory() { return new Foo(); }. };. #include <memory>. void func() {. std::unique_ptr<Foo> ptr(Foo::Factory());. }. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:162,performance,memor,memory,162,the following code compiles (at it should):. ```. class Foo {. private:. Foo() {}. public:. ~Foo() {}. static Foo *Factory() { return new Foo(); }. };. #include <memory>. void func() {. std::unique_ptr<Foo> ptr(Foo::Factory());. }. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:162,usability,memor,memory,162,the following code compiles (at it should):. ```. class Foo {. private:. Foo() {}. public:. ~Foo() {}. static Foo *Factory() { return new Foo(); }. };. #include <memory>. void func() {. std::unique_ptr<Foo> ptr(Foo::Factory());. }. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:67,availability,down,down,67,"> The user needs to understand, however, that once the server goes down, all clients go down with it too. We are trying to move towards pattern that **prevents** silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:88,availability,down,down,88,"> The user needs to understand, however, that once the server goes down, all clients go down with it too. We are trying to move towards pattern that **prevents** silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:262,deployability,depend,depending,262,"> The user needs to understand, however, that once the server goes down, all clients go down with it too. We are trying to move towards pattern that **prevents** silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:262,integrability,depend,depending,262,"> The user needs to understand, however, that once the server goes down, all clients go down with it too. We are trying to move towards pattern that **prevents** silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:262,modifiability,depend,depending,262,"> The user needs to understand, however, that once the server goes down, all clients go down with it too. We are trying to move towards pattern that **prevents** silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:151,safety,prevent,prevents,151,"> The user needs to understand, however, that once the server goes down, all clients go down with it too. We are trying to move towards pattern that **prevents** silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:262,safety,depend,depending,262,"> The user needs to understand, however, that once the server goes down, all clients go down with it too. We are trying to move towards pattern that **prevents** silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:151,security,preven,prevents,151,"> The user needs to understand, however, that once the server goes down, all clients go down with it too. We are trying to move towards pattern that **prevents** silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:20,testability,understand,understand,20,"> The user needs to understand, however, that once the server goes down, all clients go down with it too. We are trying to move towards pattern that **prevents** silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:262,testability,depend,depending,262,"> The user needs to understand, however, that once the server goes down, all clients go down with it too. We are trying to move towards pattern that **prevents** silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:6,usability,user,user,6,"> The user needs to understand, however, that once the server goes down, all clients go down with it too. We are trying to move towards pattern that **prevents** silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:173,usability,user,user,173,"> The user needs to understand, however, that once the server goes down, all clients go down with it too. We are trying to move towards pattern that **prevents** silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:212,usability,user,user,212,"> The user needs to understand, however, that once the server goes down, all clients go down with it too. We are trying to move towards pattern that **prevents** silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:99,integrability,pub,public,99,"> I am surprised that there is no a way to use the unique_ptr that does not trigger the need for a public constructor. (having a public destructor is not a bad thing in itself). Sorry, you are right, only the destructor needs to be public.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:129,integrability,pub,public,129,"> I am surprised that there is no a way to use the unique_ptr that does not trigger the need for a public constructor. (having a public destructor is not a bad thing in itself). Sorry, you are right, only the destructor needs to be public.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:232,integrability,pub,public,232,"> I am surprised that there is no a way to use the unique_ptr that does not trigger the need for a public constructor. (having a public destructor is not a bad thing in itself). Sorry, you are right, only the destructor needs to be public.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:67,reliability,doe,does,67,"> I am surprised that there is no a way to use the unique_ptr that does not trigger the need for a public constructor. (having a public destructor is not a bad thing in itself). Sorry, you are right, only the destructor needs to be public.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:438,availability,fault,fault,438,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:693,availability,down,down,693,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:154,deployability,depend,depending,154,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:438,energy efficiency,fault,fault,438,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:154,integrability,depend,depending,154,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:535,integrability,pub,public,535,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:154,modifiability,depend,depending,154,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:438,performance,fault,fault,438,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:672,performance,time,time,672,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:438,reliability,fault,fault,438,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:45,safety,prevent,prevents,45,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:154,safety,depend,depending,154,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:438,safety,fault,fault,438,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:599,safety,except,exception,599,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:45,security,preven,prevents,45,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:154,testability,depend,depending,154,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:65,usability,user,user,65,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:104,usability,user,user,104,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:230,usability,user,user,230,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:348,usability,user,user,348,"> We are trying to move towards pattern that prevents silent-ish user mistake (i.e. in that case if the user make a mistake the code may or may not crash depending on many factors :) ). In this case, the code won't compile if the user tries to create or destroy a client directly. That's why I thought this solution is interesting. However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault, because all the clients will have been destroyed by the server. So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. I will do that then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:108,availability,fault,fault,108,"> However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault,. Exactly. > So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. That is one option. The other is to inform the client that the server is gone and only throw an exception if the client tries to contact the server ... . One thing to take in consideration is that (eventually) we would want a similar interface for the case where the server is in a different process. In that case, the server must handle the fact that some client might die before being able to report ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:311,availability,down,down,311,"> However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault,. Exactly. > So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. That is one option. The other is to inform the client that the server is gone and only throw an exception if the client tries to contact the server ... . One thing to take in consideration is that (eventually) we would want a similar interface for the case where the server is in a different process. In that case, the server must handle the fact that some client might die before being able to report ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:108,energy efficiency,fault,fault,108,"> However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault,. Exactly. > So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. That is one option. The other is to inform the client that the server is gone and only throw an exception if the client tries to contact the server ... . One thing to take in consideration is that (eventually) we would want a similar interface for the case where the server is in a different process. In that case, the server must handle the fact that some client might die before being able to report ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:153,integrability,pub,public,153,"> However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault,. Exactly. > So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. That is one option. The other is to inform the client that the server is gone and only throw an exception if the client tries to contact the server ... . One thing to take in consideration is that (eventually) we would want a similar interface for the case where the server is in a different process. In that case, the server must handle the fact that some client might die before being able to report ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:515,integrability,event,eventually,515,"> However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault,. Exactly. > So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. That is one option. The other is to inform the client that the server is gone and only throw an exception if the client tries to contact the server ... . One thing to take in consideration is that (eventually) we would want a similar interface for the case where the server is in a different process. In that case, the server must handle the fact that some client might die before being able to report ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:551,integrability,interfac,interface,551,"> However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault,. Exactly. > So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. That is one option. The other is to inform the client that the server is gone and only throw an exception if the client tries to contact the server ... . One thing to take in consideration is that (eventually) we would want a similar interface for the case where the server is in a different process. In that case, the server must handle the fact that some client might die before being able to report ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:551,interoperability,interfac,interface,551,"> However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault,. Exactly. > So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. That is one option. The other is to inform the client that the server is gone and only throw an exception if the client tries to contact the server ... . One thing to take in consideration is that (eventually) we would want a similar interface for the case where the server is in a different process. In that case, the server must handle the fact that some client might die before being able to report ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:551,modifiability,interfac,interface,551,"> However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault,. Exactly. > So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. That is one option. The other is to inform the client that the server is gone and only throw an exception if the client tries to contact the server ... . One thing to take in consideration is that (eventually) we would want a similar interface for the case where the server is in a different process. In that case, the server must handle the fact that some client might die before being able to report ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:108,performance,fault,fault,108,"> However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault,. Exactly. > So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. That is one option. The other is to inform the client that the server is gone and only throw an exception if the client tries to contact the server ... . One thing to take in consideration is that (eventually) we would want a similar interface for the case where the server is in a different process. In that case, the server must handle the fact that some client might die before being able to report ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:290,performance,time,time,290,"> However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault,. Exactly. > So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. That is one option. The other is to inform the client that the server is gone and only throw an exception if the client tries to contact the server ... . One thing to take in consideration is that (eventually) we would want a similar interface for the case where the server is in a different process. In that case, the server must handle the fact that some client might die before being able to report ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:108,reliability,fault,fault,108,"> However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault,. Exactly. > So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. That is one option. The other is to inform the client that the server is gone and only throw an exception if the client tries to contact the server ... . One thing to take in consideration is that (eventually) we would want a similar interface for the case where the server is in a different process. In that case, the server must handle the fact that some client might die before being able to report ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:108,safety,fault,fault,108,"> However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault,. Exactly. > So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. That is one option. The other is to inform the client that the server is gone and only throw an exception if the client tries to contact the server ... . One thing to take in consideration is that (eventually) we would want a similar interface for the case where the server is in a different process. In that case, the server must handle the fact that some client might die before being able to report ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:217,safety,except,exception,217,"> However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault,. Exactly. > So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. That is one option. The other is to inform the client that the server is gone and only throw an exception if the client tries to contact the server ... . One thing to take in consideration is that (eventually) we would want a similar interface for the case where the server is in a different process. In that case, the server must handle the fact that some client might die before being able to report ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:413,safety,except,exception,413,"> However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault,. Exactly. > So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. That is one option. The other is to inform the client that the server is gone and only throw an exception if the client tries to contact the server ... . One thing to take in consideration is that (eventually) we would want a similar interface for the case where the server is in a different process. In that case, the server must handle the fact that some client might die before being able to report ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:18,usability,user,user,18,"> However, if the user tries to use the pointer after the server is destroyed, there will be a segmentation fault,. Exactly. > So, making the destructor public and using a unique_ptr would allow us to throw a runtime exception in the server destructor, saying that clients are alive at the time the server goes down. That is one option. The other is to inform the client that the server is gone and only throw an exception if the client tries to contact the server ... . One thing to take in consideration is that (eventually) we would want a similar interface for the case where the server is in a different process. In that case, the server must handle the fact that some client might die before being able to report ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:209,performance,content,content,209,"It seems the pattern for enabling this for the end user is:. ```. +#include ""ROOT/TFileMergeClient.hxx"". +#include ""ROOT/TFileMergeServer.hxx"". ```. If those two header files always go together why having the content split? If we want to split the implementation maybe we should create a header that includes them both and those become 'internal' headers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:51,usability,user,user,51,"It seems the pattern for enabling this for the end user is:. ```. +#include ""ROOT/TFileMergeClient.hxx"". +#include ""ROOT/TFileMergeServer.hxx"". ```. If those two header files always go together why having the content split? If we want to split the implementation maybe we should create a header that includes them both and those become 'internal' headers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:296,interoperability,format,format,296,"Ok, I cleaned up the history of this branch, and left the TDataFrame snapshot to be merged later in a separate pull request. This pull request now only adds the TBufferMerger and TBufferMergerFile classes, a test, and a tutorial. This should be ready for merge after any issues reported by clang-format/clang-tidy are fixed, and any bugs I may have missed up to now. I did run clang-format on the code first, however, and I think I addressed all earlier comments and suggestions, apart from a few minor style issues. Please have a last look and make any final comments if you have any, as we intend to merge this tomorrow morning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:383,interoperability,format,format,383,"Ok, I cleaned up the history of this branch, and left the TDataFrame snapshot to be merged later in a separate pull request. This pull request now only adds the TBufferMerger and TBufferMergerFile classes, a test, and a tutorial. This should be ready for merge after any issues reported by clang-format/clang-tidy are fixed, and any bugs I may have missed up to now. I did run clang-format on the code first, however, and I think I addressed all earlier comments and suggestions, apart from a few minor style issues. Please have a last look and make any final comments if you have any, as we intend to merge this tomorrow morning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:208,safety,test,test,208,"Ok, I cleaned up the history of this branch, and left the TDataFrame snapshot to be merged later in a separate pull request. This pull request now only adds the TBufferMerger and TBufferMergerFile classes, a test, and a tutorial. This should be ready for merge after any issues reported by clang-format/clang-tidy are fixed, and any bugs I may have missed up to now. I did run clang-format on the code first, however, and I think I addressed all earlier comments and suggestions, apart from a few minor style issues. Please have a last look and make any final comments if you have any, as we intend to merge this tomorrow morning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:208,testability,test,test,208,"Ok, I cleaned up the history of this branch, and left the TDataFrame snapshot to be merged later in a separate pull request. This pull request now only adds the TBufferMerger and TBufferMergerFile classes, a test, and a tutorial. This should be ready for merge after any issues reported by clang-format/clang-tidy are fixed, and any bugs I may have missed up to now. I did run clang-format on the code first, however, and I think I addressed all earlier comments and suggestions, apart from a few minor style issues. Please have a last look and make any final comments if you have any, as we intend to merge this tomorrow morning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:96,safety,test,tests,96,"Alright, I added dictionary generation and fixed the tutorial. It now runs fine, as well as the tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:96,testability,test,tests,96,"Alright, I added dictionary generation and fixed the tutorial. It now runs fine, as well as the tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:23,deployability,fail,failed,23,"It looks like the test failed because it got stuck waiting to get data, but it never came. It doesn't get stuck on my machine, so I didn't see the problem before. I will log into the build node and fix it. That's probably the only remaining thing before we can merge this in.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:170,deployability,log,log,170,"It looks like the test failed because it got stuck waiting to get data, but it never came. It doesn't get stuck on my machine, so I didn't see the problem before. I will log into the build node and fix it. That's probably the only remaining thing before we can merge this in.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:183,deployability,build,build,183,"It looks like the test failed because it got stuck waiting to get data, but it never came. It doesn't get stuck on my machine, so I didn't see the problem before. I will log into the build node and fix it. That's probably the only remaining thing before we can merge this in.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:23,reliability,fail,failed,23,"It looks like the test failed because it got stuck waiting to get data, but it never came. It doesn't get stuck on my machine, so I didn't see the problem before. I will log into the build node and fix it. That's probably the only remaining thing before we can merge this in.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:94,reliability,doe,doesn,94,"It looks like the test failed because it got stuck waiting to get data, but it never came. It doesn't get stuck on my machine, so I didn't see the problem before. I will log into the build node and fix it. That's probably the only remaining thing before we can merge this in.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:18,safety,test,test,18,"It looks like the test failed because it got stuck waiting to get data, but it never came. It doesn't get stuck on my machine, so I didn't see the problem before. I will log into the build node and fix it. That's probably the only remaining thing before we can merge this in.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:170,safety,log,log,170,"It looks like the test failed because it got stuck waiting to get data, but it never came. It doesn't get stuck on my machine, so I didn't see the problem before. I will log into the build node and fix it. That's probably the only remaining thing before we can merge this in.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:170,security,log,log,170,"It looks like the test failed because it got stuck waiting to get data, but it never came. It doesn't get stuck on my machine, so I didn't see the problem before. I will log into the build node and fix it. That's probably the only remaining thing before we can merge this in.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:18,testability,test,test,18,"It looks like the test failed because it got stuck waiting to get data, but it never came. It doesn't get stuck on my machine, so I didn't see the problem before. I will log into the build node and fix it. That's probably the only remaining thing before we can merge this in.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:170,testability,log,log,170,"It looks like the test failed because it got stuck waiting to get data, but it never came. It doesn't get stuck on my machine, so I didn't see the problem before. I will log into the build node and fix it. That's probably the only remaining thing before we can merge this in.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:333,availability,avail,available,333,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:505,availability,avail,available,505,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:2,deployability,log,logged,2,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:433,deployability,resourc,resources,433,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:619,deployability,build,build,619,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:329,energy efficiency,CPU,CPU,329,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:433,energy efficiency,resourc,resources,433,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:500,energy efficiency,core,core,500,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:104,performance,time,timed,104,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:138,performance,time,times,138,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:226,performance,time,time,226,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:312,performance,time,time,312,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:329,performance,CPU,CPU,329,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:433,performance,resourc,resources,433,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:333,reliability,availab,available,333,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:505,reliability,availab,available,505,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:2,safety,log,logged,2,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:84,safety,test,test,84,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:125,safety,test,test,125,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:153,safety,test,test,153,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:333,safety,avail,available,333,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:433,safety,resourc,resources,433,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:505,safety,avail,available,505,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:591,safety,test,tests,591,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:2,security,log,logged,2,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:333,security,availab,available,333,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:505,security,availab,available,505,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:2,testability,log,logged,2,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:84,testability,test,test,84,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:125,testability,test,test,125,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:153,testability,test,test,153,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:382,testability,simul,simultaneous,382,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:433,testability,resourc,resources,433,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:591,testability,test,tests,591,"I logged into the node and it seems the node may just have been overloaded when the test was run, so it timed out. I ran the test several times, and the test succeeded everytime, even though it took 3 minutes to run the first time. Running 'top' I saw that there were some heavy compilations running at the same time, taking all CPU available... Maybe we should limit the number of simultaneous jobs on each node, and/or the maximum resources a job can use, so that there is always at least one full core available to each job. For now, I am just going to rebase and push again. I think the tests should succeed if the build node is not too busy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:4,availability,failur,failure,4,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:263,availability,error,error,263,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:4,deployability,fail,failure,4,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:270,deployability,fail,failed,270,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:290,deployability,configurat,configuration,290,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:290,integrability,configur,configuration,290,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:96,interoperability,plug,plugins,96,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:290,modifiability,configur,configuration,290,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:4,performance,failur,failure,4,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:263,performance,error,error,263,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:321,performance,lock,lock,321,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:4,reliability,fail,failure,4,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:270,reliability,fail,failed,270,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:263,safety,error,error,263,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:290,security,configur,configuration,290,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:321,security,lock,lock,321,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:122,usability,Command,Command,122,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:211,usability,statu,status,211,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:263,usability,error,error,263,"The failure is not related to the code in this PR, apparently:. ```. 08:50:00 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 08:50:00 stdout: . 08:50:00 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/538:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/538
https://github.com/root-project/root/pull/541:75,usability,close,close,75,"This isn't necessary to get the runtime-cxxmodules branch running, so I'll close this and we'll just merge this into master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/542:11,deployability,build,build,11,@phsft-bot build with compiler:clang_gcc62;extra_cmake_options:-Dcxxmodules=On -DCMAKE_VERBOSE_MAKEFILE:BOOL=On !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:192,availability,failur,failure,192,"Looking at the jenkins build, this only fails because some test is failing. We don't actually change anything with this test (and it passes otherwise), so it seems to be just nondeterministic failure. Please merge @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:23,deployability,build,build,23,"Looking at the jenkins build, this only fails because some test is failing. We don't actually change anything with this test (and it passes otherwise), so it seems to be just nondeterministic failure. Please merge @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:40,deployability,fail,fails,40,"Looking at the jenkins build, this only fails because some test is failing. We don't actually change anything with this test (and it passes otherwise), so it seems to be just nondeterministic failure. Please merge @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:67,deployability,fail,failing,67,"Looking at the jenkins build, this only fails because some test is failing. We don't actually change anything with this test (and it passes otherwise), so it seems to be just nondeterministic failure. Please merge @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:192,deployability,fail,failure,192,"Looking at the jenkins build, this only fails because some test is failing. We don't actually change anything with this test (and it passes otherwise), so it seems to be just nondeterministic failure. Please merge @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:192,performance,failur,failure,192,"Looking at the jenkins build, this only fails because some test is failing. We don't actually change anything with this test (and it passes otherwise), so it seems to be just nondeterministic failure. Please merge @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:40,reliability,fail,fails,40,"Looking at the jenkins build, this only fails because some test is failing. We don't actually change anything with this test (and it passes otherwise), so it seems to be just nondeterministic failure. Please merge @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:67,reliability,fail,failing,67,"Looking at the jenkins build, this only fails because some test is failing. We don't actually change anything with this test (and it passes otherwise), so it seems to be just nondeterministic failure. Please merge @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:192,reliability,fail,failure,192,"Looking at the jenkins build, this only fails because some test is failing. We don't actually change anything with this test (and it passes otherwise), so it seems to be just nondeterministic failure. Please merge @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:59,safety,test,test,59,"Looking at the jenkins build, this only fails because some test is failing. We don't actually change anything with this test (and it passes otherwise), so it seems to be just nondeterministic failure. Please merge @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:120,safety,test,test,120,"Looking at the jenkins build, this only fails because some test is failing. We don't actually change anything with this test (and it passes otherwise), so it seems to be just nondeterministic failure. Please merge @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:59,testability,test,test,59,"Looking at the jenkins build, this only fails because some test is failing. We don't actually change anything with this test (and it passes otherwise), so it seems to be just nondeterministic failure. Please merge @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:120,testability,test,test,120,"Looking at the jenkins build, this only fails because some test is failing. We don't actually change anything with this test (and it passes otherwise), so it seems to be just nondeterministic failure. Please merge @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:47,deployability,fail,failing,47,"@vgvassilev @martinmine How to see the list of failing test? When I click on details, I am brought to the pipeline page and then clicking ""pipeline step"" shows only successes (see https://phsft-jenkins.cern.ch/job/root-pullrequests-handler/51/flowGraphTable/) ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:106,deployability,pipelin,pipeline,106,"@vgvassilev @martinmine How to see the list of failing test? When I click on details, I am brought to the pipeline page and then clicking ""pipeline step"" shows only successes (see https://phsft-jenkins.cern.ch/job/root-pullrequests-handler/51/flowGraphTable/) ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:139,deployability,pipelin,pipeline,139,"@vgvassilev @martinmine How to see the list of failing test? When I click on details, I am brought to the pipeline page and then clicking ""pipeline step"" shows only successes (see https://phsft-jenkins.cern.ch/job/root-pullrequests-handler/51/flowGraphTable/) ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:106,integrability,pipelin,pipeline,106,"@vgvassilev @martinmine How to see the list of failing test? When I click on details, I am brought to the pipeline page and then clicking ""pipeline step"" shows only successes (see https://phsft-jenkins.cern.ch/job/root-pullrequests-handler/51/flowGraphTable/) ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:139,integrability,pipelin,pipeline,139,"@vgvassilev @martinmine How to see the list of failing test? When I click on details, I am brought to the pipeline page and then clicking ""pipeline step"" shows only successes (see https://phsft-jenkins.cern.ch/job/root-pullrequests-handler/51/flowGraphTable/) ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:47,reliability,fail,failing,47,"@vgvassilev @martinmine How to see the list of failing test? When I click on details, I am brought to the pipeline page and then clicking ""pipeline step"" shows only successes (see https://phsft-jenkins.cern.ch/job/root-pullrequests-handler/51/flowGraphTable/) ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:55,safety,test,test,55,"@vgvassilev @martinmine How to see the list of failing test? When I click on details, I am brought to the pipeline page and then clicking ""pipeline step"" shows only successes (see https://phsft-jenkins.cern.ch/job/root-pullrequests-handler/51/flowGraphTable/) ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:55,testability,test,test,55,"@vgvassilev @martinmine How to see the list of failing test? When I click on details, I am brought to the pipeline page and then clicking ""pipeline step"" shows only successes (see https://phsft-jenkins.cern.ch/job/root-pullrequests-handler/51/flowGraphTable/) ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:243,testability,flowGraph,flowGraphTable,243,"@vgvassilev @martinmine How to see the list of failing test? When I click on details, I am brought to the pipeline page and then clicking ""pipeline step"" shows only successes (see https://phsft-jenkins.cern.ch/job/root-pullrequests-handler/51/flowGraphTable/) ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/543:52,deployability,modul,modules,52,> Disable loading of the rootmap files when running modules. Why don't we need rootmap files with the modules? Is this a temporary 'work-around' or do you have a replacement in mind for giving to ROOT the information (i.e. which library to load when a class is accessed)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:102,deployability,modul,modules,102,> Disable loading of the rootmap files when running modules. Why don't we need rootmap files with the modules? Is this a temporary 'work-around' or do you have a replacement in mind for giving to ROOT the information (i.e. which library to load when a class is accessed)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:10,energy efficiency,load,loading,10,> Disable loading of the rootmap files when running modules. Why don't we need rootmap files with the modules? Is this a temporary 'work-around' or do you have a replacement in mind for giving to ROOT the information (i.e. which library to load when a class is accessed)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:240,energy efficiency,load,load,240,> Disable loading of the rootmap files when running modules. Why don't we need rootmap files with the modules? Is this a temporary 'work-around' or do you have a replacement in mind for giving to ROOT the information (i.e. which library to load when a class is accessed)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:52,modifiability,modul,modules,52,> Disable loading of the rootmap files when running modules. Why don't we need rootmap files with the modules? Is this a temporary 'work-around' or do you have a replacement in mind for giving to ROOT the information (i.e. which library to load when a class is accessed)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:102,modifiability,modul,modules,102,> Disable loading of the rootmap files when running modules. Why don't we need rootmap files with the modules? Is this a temporary 'work-around' or do you have a replacement in mind for giving to ROOT the information (i.e. which library to load when a class is accessed)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:10,performance,load,loading,10,> Disable loading of the rootmap files when running modules. Why don't we need rootmap files with the modules? Is this a temporary 'work-around' or do you have a replacement in mind for giving to ROOT the information (i.e. which library to load when a class is accessed)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:240,performance,load,load,240,> Disable loading of the rootmap files when running modules. Why don't we need rootmap files with the modules? Is this a temporary 'work-around' or do you have a replacement in mind for giving to ROOT the information (i.e. which library to load when a class is accessed)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:52,safety,modul,modules,52,> Disable loading of the rootmap files when running modules. Why don't we need rootmap files with the modules? Is this a temporary 'work-around' or do you have a replacement in mind for giving to ROOT the information (i.e. which library to load when a class is accessed)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:102,safety,modul,modules,102,> Disable loading of the rootmap files when running modules. Why don't we need rootmap files with the modules? Is this a temporary 'work-around' or do you have a replacement in mind for giving to ROOT the information (i.e. which library to load when a class is accessed)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:261,security,access,accessed,261,> Disable loading of the rootmap files when running modules. Why don't we need rootmap files with the modules? Is this a temporary 'work-around' or do you have a replacement in mind for giving to ROOT the information (i.e. which library to load when a class is accessed)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:120,integrability,messag,message,120,Please note this is not the master but an experimental branch. We believe we have the right replacement (see the commit message).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:120,interoperability,messag,message,120,Please note this is not the master but an experimental branch. We believe we have the right replacement (see the commit message).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:103,integrability,messag,message,103,Fair enough. What replacement do you have in mind? (I see it mentioned but not described in the commit message).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:103,interoperability,messag,message,103,Fair enough. What replacement do you have in mind? (I see it mentioned but not described in the commit message).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:104,deployability,modul,modulemap,104,From the commit where we disabled it: . > This functionality is replaced by the 'link' attribute in the modulemap. clang supports auto-linking against a module when referencing the module. So long-term goal would be to use this. But first we have to get the the modules itself working.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:153,deployability,modul,module,153,From the commit where we disabled it: . > This functionality is replaced by the 'link' attribute in the modulemap. clang supports auto-linking against a module when referencing the module. So long-term goal would be to use this. But first we have to get the the modules itself working.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:181,deployability,modul,module,181,From the commit where we disabled it: . > This functionality is replaced by the 'link' attribute in the modulemap. clang supports auto-linking against a module when referencing the module. So long-term goal would be to use this. But first we have to get the the modules itself working.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:262,deployability,modul,modules,262,From the commit where we disabled it: . > This functionality is replaced by the 'link' attribute in the modulemap. clang supports auto-linking against a module when referencing the module. So long-term goal would be to use this. But first we have to get the the modules itself working.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:104,modifiability,modul,modulemap,104,From the commit where we disabled it: . > This functionality is replaced by the 'link' attribute in the modulemap. clang supports auto-linking against a module when referencing the module. So long-term goal would be to use this. But first we have to get the the modules itself working.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:153,modifiability,modul,module,153,From the commit where we disabled it: . > This functionality is replaced by the 'link' attribute in the modulemap. clang supports auto-linking against a module when referencing the module. So long-term goal would be to use this. But first we have to get the the modules itself working.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:181,modifiability,modul,module,181,From the commit where we disabled it: . > This functionality is replaced by the 'link' attribute in the modulemap. clang supports auto-linking against a module when referencing the module. So long-term goal would be to use this. But first we have to get the the modules itself working.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:262,modifiability,modul,modules,262,From the commit where we disabled it: . > This functionality is replaced by the 'link' attribute in the modulemap. clang supports auto-linking against a module when referencing the module. So long-term goal would be to use this. But first we have to get the the modules itself working.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:104,safety,modul,modulemap,104,From the commit where we disabled it: . > This functionality is replaced by the 'link' attribute in the modulemap. clang supports auto-linking against a module when referencing the module. So long-term goal would be to use this. But first we have to get the the modules itself working.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:153,safety,modul,module,153,From the commit where we disabled it: . > This functionality is replaced by the 'link' attribute in the modulemap. clang supports auto-linking against a module when referencing the module. So long-term goal would be to use this. But first we have to get the the modules itself working.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:181,safety,modul,module,181,From the commit where we disabled it: . > This functionality is replaced by the 'link' attribute in the modulemap. clang supports auto-linking against a module when referencing the module. So long-term goal would be to use this. But first we have to get the the modules itself working.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:262,safety,modul,modules,262,From the commit where we disabled it: . > This functionality is replaced by the 'link' attribute in the modulemap. clang supports auto-linking against a module when referencing the module. So long-term goal would be to use this. But first we have to get the the modules itself working.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:121,usability,support,supports,121,From the commit where we disabled it: . > This functionality is replaced by the 'link' attribute in the modulemap. clang supports auto-linking against a module when referencing the module. So long-term goal would be to use this. But first we have to get the the modules itself working.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:36,deployability,modul,modulemap,36,Using the `link` directive from the modulemap (https://clang.llvm.org/docs/Modules.html#link-declaration),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:75,deployability,Modul,Modules,75,Using the `link` directive from the modulemap (https://clang.llvm.org/docs/Modules.html#link-declaration),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:36,modifiability,modul,modulemap,36,Using the `link` directive from the modulemap (https://clang.llvm.org/docs/Modules.html#link-declaration),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:75,modifiability,Modul,Modules,75,Using the `link` directive from the modulemap (https://clang.llvm.org/docs/Modules.html#link-declaration),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:36,safety,modul,modulemap,36,Using the `link` directive from the modulemap (https://clang.llvm.org/docs/Modules.html#link-declaration),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:75,safety,Modul,Modules,75,Using the `link` directive from the modulemap (https://clang.llvm.org/docs/Modules.html#link-declaration),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:143,deployability,modul,modules,143,This looks good indeed. That would leave (at some point) to understand the difference in memory/time cost of always loading/connecting all the modules vs loading (some version of) the rootmap files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:168,deployability,version,version,168,This looks good indeed. That would leave (at some point) to understand the difference in memory/time cost of always loading/connecting all the modules vs loading (some version of) the rootmap files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:116,energy efficiency,load,loading,116,This looks good indeed. That would leave (at some point) to understand the difference in memory/time cost of always loading/connecting all the modules vs loading (some version of) the rootmap files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:154,energy efficiency,load,loading,154,This looks good indeed. That would leave (at some point) to understand the difference in memory/time cost of always loading/connecting all the modules vs loading (some version of) the rootmap files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:168,integrability,version,version,168,This looks good indeed. That would leave (at some point) to understand the difference in memory/time cost of always loading/connecting all the modules vs loading (some version of) the rootmap files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:143,modifiability,modul,modules,143,This looks good indeed. That would leave (at some point) to understand the difference in memory/time cost of always loading/connecting all the modules vs loading (some version of) the rootmap files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:168,modifiability,version,version,168,This looks good indeed. That would leave (at some point) to understand the difference in memory/time cost of always loading/connecting all the modules vs loading (some version of) the rootmap files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:89,performance,memor,memory,89,This looks good indeed. That would leave (at some point) to understand the difference in memory/time cost of always loading/connecting all the modules vs loading (some version of) the rootmap files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:96,performance,time,time,96,This looks good indeed. That would leave (at some point) to understand the difference in memory/time cost of always loading/connecting all the modules vs loading (some version of) the rootmap files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:116,performance,load,loading,116,This looks good indeed. That would leave (at some point) to understand the difference in memory/time cost of always loading/connecting all the modules vs loading (some version of) the rootmap files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:154,performance,load,loading,154,This looks good indeed. That would leave (at some point) to understand the difference in memory/time cost of always loading/connecting all the modules vs loading (some version of) the rootmap files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:143,safety,modul,modules,143,This looks good indeed. That would leave (at some point) to understand the difference in memory/time cost of always loading/connecting all the modules vs loading (some version of) the rootmap files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:60,testability,understand,understand,60,This looks good indeed. That would leave (at some point) to understand the difference in memory/time cost of always loading/connecting all the modules vs loading (some version of) the rootmap files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:89,usability,memor,memory,89,This looks good indeed. That would leave (at some point) to understand the difference in memory/time cost of always loading/connecting all the modules vs loading (some version of) the rootmap files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/544:82,availability,failur,failure,82,"travis only complains about the formatting of the docs, jenkins complains about a failure of `roottest_root_meta_loadAllLibs_LoadAllLibsZA`, so I _think_ the PR is not ill-formed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/544
https://github.com/root-project/root/pull/544:82,deployability,fail,failure,82,"travis only complains about the formatting of the docs, jenkins complains about a failure of `roottest_root_meta_loadAllLibs_LoadAllLibsZA`, so I _think_ the PR is not ill-formed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/544
https://github.com/root-project/root/pull/544:32,interoperability,format,formatting,32,"travis only complains about the formatting of the docs, jenkins complains about a failure of `roottest_root_meta_loadAllLibs_LoadAllLibsZA`, so I _think_ the PR is not ill-formed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/544
https://github.com/root-project/root/pull/544:82,performance,failur,failure,82,"travis only complains about the formatting of the docs, jenkins complains about a failure of `roottest_root_meta_loadAllLibs_LoadAllLibsZA`, so I _think_ the PR is not ill-formed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/544
https://github.com/root-project/root/pull/544:82,reliability,fail,failure,82,"travis only complains about the formatting of the docs, jenkins complains about a failure of `roottest_root_meta_loadAllLibs_LoadAllLibsZA`, so I _think_ the PR is not ill-formed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/544
https://github.com/root-project/root/pull/544:12,safety,compl,complains,12,"travis only complains about the formatting of the docs, jenkins complains about a failure of `roottest_root_meta_loadAllLibs_LoadAllLibsZA`, so I _think_ the PR is not ill-formed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/544
https://github.com/root-project/root/pull/544:64,safety,compl,complains,64,"travis only complains about the formatting of the docs, jenkins complains about a failure of `roottest_root_meta_loadAllLibs_LoadAllLibsZA`, so I _think_ the PR is not ill-formed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/544
https://github.com/root-project/root/pull/544:12,security,compl,complains,12,"travis only complains about the formatting of the docs, jenkins complains about a failure of `roottest_root_meta_loadAllLibs_LoadAllLibsZA`, so I _think_ the PR is not ill-formed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/544
https://github.com/root-project/root/pull/544:64,security,compl,complains,64,"travis only complains about the formatting of the docs, jenkins complains about a failure of `roottest_root_meta_loadAllLibs_LoadAllLibsZA`, so I _think_ the PR is not ill-formed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/544
https://github.com/root-project/root/pull/545:19,usability,document,documentation,19,Could you move the documentation to the static function?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/545
https://github.com/root-project/root/pull/546:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/546
https://github.com/root-project/root/pull/546:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/546
https://github.com/root-project/root/pull/546:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/546
https://github.com/root-project/root/pull/546:14,energy efficiency,green,green,14,"Good job! All green, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/546
https://github.com/root-project/root/pull/547:13,deployability,fail,failing,13,Here are the failing tests:. http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Minimization-Cpu&date=2017-05-04,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:103,energy efficiency,Cpu,Cpu,103,Here are the failing tests:. http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Minimization-Cpu&date=2017-05-04,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:103,performance,Cpu,Cpu,103,Here are the failing tests:. http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Minimization-Cpu&date=2017-05-04,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:13,reliability,fail,failing,13,Here are the failing tests:. http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Minimization-Cpu&date=2017-05-04,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:21,safety,test,tests,21,Here are the failing tests:. http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Minimization-Cpu&date=2017-05-04,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:50,safety,test,testSummary,50,Here are the failing tests:. http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Minimization-Cpu&date=2017-05-04,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:21,testability,test,tests,21,Here are the failing tests:. http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Minimization-Cpu&date=2017-05-04,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:50,testability,test,testSummary,50,Here are the failing tests:. http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Minimization-Cpu&date=2017-05-04,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:90,usability,Minim,Minimization-Cpu,90,Here are the failing tests:. http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Minimization-Cpu&date=2017-05-04,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:119,testability,understand,understand,119,"Added another small fix of the same kind. Coverity is reporting several false positives like this, it would be good to understand why.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:43,deployability,patch,patch,43,"Focusing on CID 68746 as an example:. Your patch has. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize), fInputWidth(layer.fInputWidth),. fWidth(layer.fWidth), fDropoutProbability(layer.fDropoutProbability),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. ```. while Coverity sees. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize),. fInputWidth(layer.fInputWidth), fWidth(layer.fWidth),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. fOutput(layer.fBatchSize, layer.fWidth),. ```. So Coverity is correct for the code it sees, only that's not the code we have. I.e. as I suspected: a build issue with our Jenkins job, or a database issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:779,deployability,build,build,779,"Focusing on CID 68746 as an example:. Your patch has. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize), fInputWidth(layer.fInputWidth),. fWidth(layer.fWidth), fDropoutProbability(layer.fDropoutProbability),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. ```. while Coverity sees. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize),. fInputWidth(layer.fInputWidth), fWidth(layer.fWidth),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. fOutput(layer.fBatchSize, layer.fWidth),. ```. So Coverity is correct for the code it sees, only that's not the code we have. I.e. as I suspected: a build issue with our Jenkins job, or a database issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:139,modifiability,layer,layer,139,"Focusing on CID 68746 as an example:. Your patch has. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize), fInputWidth(layer.fInputWidth),. fWidth(layer.fWidth), fDropoutProbability(layer.fDropoutProbability),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. ```. while Coverity sees. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize),. fInputWidth(layer.fInputWidth), fWidth(layer.fWidth),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. fOutput(layer.fBatchSize, layer.fWidth),. ```. So Coverity is correct for the code it sees, only that's not the code we have. I.e. as I suspected: a build issue with our Jenkins job, or a database issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:160,modifiability,layer,layer,160,"Focusing on CID 68746 as an example:. Your patch has. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize), fInputWidth(layer.fInputWidth),. fWidth(layer.fWidth), fDropoutProbability(layer.fDropoutProbability),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. ```. while Coverity sees. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize),. fInputWidth(layer.fInputWidth), fWidth(layer.fWidth),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. fOutput(layer.fBatchSize, layer.fWidth),. ```. So Coverity is correct for the code it sees, only that's not the code we have. I.e. as I suspected: a build issue with our Jenkins job, or a database issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:191,modifiability,layer,layer,191,"Focusing on CID 68746 as an example:. Your patch has. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize), fInputWidth(layer.fInputWidth),. fWidth(layer.fWidth), fDropoutProbability(layer.fDropoutProbability),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. ```. while Coverity sees. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize),. fInputWidth(layer.fInputWidth), fWidth(layer.fWidth),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. fOutput(layer.fBatchSize, layer.fWidth),. ```. So Coverity is correct for the code it sees, only that's not the code we have. I.e. as I suspected: a build issue with our Jenkins job, or a database issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:219,modifiability,layer,layer,219,"Focusing on CID 68746 as an example:. Your patch has. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize), fInputWidth(layer.fInputWidth),. fWidth(layer.fWidth), fDropoutProbability(layer.fDropoutProbability),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. ```. while Coverity sees. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize),. fInputWidth(layer.fInputWidth), fWidth(layer.fWidth),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. fOutput(layer.fBatchSize, layer.fWidth),. ```. So Coverity is correct for the code it sees, only that's not the code we have. I.e. as I suspected: a build issue with our Jenkins job, or a database issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:254,modifiability,layer,layer,254,"Focusing on CID 68746 as an example:. Your patch has. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize), fInputWidth(layer.fInputWidth),. fWidth(layer.fWidth), fDropoutProbability(layer.fDropoutProbability),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. ```. while Coverity sees. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize),. fInputWidth(layer.fInputWidth), fWidth(layer.fWidth),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. fOutput(layer.fBatchSize, layer.fWidth),. ```. So Coverity is correct for the code it sees, only that's not the code we have. I.e. as I suspected: a build issue with our Jenkins job, or a database issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:292,modifiability,layer,layer,292,"Focusing on CID 68746 as an example:. Your patch has. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize), fInputWidth(layer.fInputWidth),. fWidth(layer.fWidth), fDropoutProbability(layer.fDropoutProbability),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. ```. while Coverity sees. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize),. fInputWidth(layer.fInputWidth), fWidth(layer.fWidth),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. fOutput(layer.fBatchSize, layer.fWidth),. ```. So Coverity is correct for the code it sees, only that's not the code we have. I.e. as I suspected: a build issue with our Jenkins job, or a database issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:306,modifiability,layer,layer,306,"Focusing on CID 68746 as an example:. Your patch has. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize), fInputWidth(layer.fInputWidth),. fWidth(layer.fWidth), fDropoutProbability(layer.fDropoutProbability),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. ```. while Coverity sees. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize),. fInputWidth(layer.fInputWidth), fWidth(layer.fWidth),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. fOutput(layer.fBatchSize, layer.fWidth),. ```. So Coverity is correct for the code it sees, only that's not the code we have. I.e. as I suspected: a build issue with our Jenkins job, or a database issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:334,modifiability,layer,layer,334,"Focusing on CID 68746 as an example:. Your patch has. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize), fInputWidth(layer.fInputWidth),. fWidth(layer.fWidth), fDropoutProbability(layer.fDropoutProbability),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. ```. while Coverity sees. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize),. fInputWidth(layer.fInputWidth), fWidth(layer.fWidth),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. fOutput(layer.fBatchSize, layer.fWidth),. ```. So Coverity is correct for the code it sees, only that's not the code we have. I.e. as I suspected: a build issue with our Jenkins job, or a database issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:464,modifiability,layer,layer,464,"Focusing on CID 68746 as an example:. Your patch has. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize), fInputWidth(layer.fInputWidth),. fWidth(layer.fWidth), fDropoutProbability(layer.fDropoutProbability),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. ```. while Coverity sees. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize),. fInputWidth(layer.fInputWidth), fWidth(layer.fWidth),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. fOutput(layer.fBatchSize, layer.fWidth),. ```. So Coverity is correct for the code it sees, only that's not the code we have. I.e. as I suspected: a build issue with our Jenkins job, or a database issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:485,modifiability,layer,layer,485,"Focusing on CID 68746 as an example:. Your patch has. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize), fInputWidth(layer.fInputWidth),. fWidth(layer.fWidth), fDropoutProbability(layer.fDropoutProbability),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. ```. while Coverity sees. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize),. fInputWidth(layer.fInputWidth), fWidth(layer.fWidth),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. fOutput(layer.fBatchSize, layer.fWidth),. ```. So Coverity is correct for the code it sees, only that's not the code we have. I.e. as I suspected: a build issue with our Jenkins job, or a database issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:517,modifiability,layer,layer,517,"Focusing on CID 68746 as an example:. Your patch has. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize), fInputWidth(layer.fInputWidth),. fWidth(layer.fWidth), fDropoutProbability(layer.fDropoutProbability),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. ```. while Coverity sees. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize),. fInputWidth(layer.fInputWidth), fWidth(layer.fWidth),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. fOutput(layer.fBatchSize, layer.fWidth),. ```. So Coverity is correct for the code it sees, only that's not the code we have. I.e. as I suspected: a build issue with our Jenkins job, or a database issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/547:544,modifiability,layer,layer,544,"Focusing on CID 68746 as an example:. Your patch has. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize), fInputWidth(layer.fInputWidth),. fWidth(layer.fWidth), fDropoutProbability(layer.fDropoutProbability),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. ```. while Coverity sees. ```. template<typename Architecture_t>. TLayer<Architecture_t>::TLayer(const TLayer &layer). : fBatchSize(layer.fBatchSize),. fInputWidth(layer.fInputWidth), fWidth(layer.fWidth),. fWeights(layer.fWidth, layer.fInputWidth), fBiases(layer.fWidth, 1),. fOutput(layer.fBatchSize, layer.fWidth),. ```. So Coverity is correct for the code it sees, only that's not the code we have. I.e. as I suspected: a build issue with our Jenkins job, or a database issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
