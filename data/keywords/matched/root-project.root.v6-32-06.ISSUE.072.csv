id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/issues/11511:19615,integrability,Sub,SubC,19615,"plate<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T>&, R)’. 138 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:136:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T>&, R)’. 136 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:134:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::initializer_list<T>, R)’. ```. ### Expected behavior. a clean compilation without errors. ### To Reproduce. ```. setup kokkos (with CUDA backend), root, gcc, cmake. git clone git@github.com:cgleggett/FCS-GPU.git src. mkdir bld; cd bld. cmake ../src/FastCaloSimAnalyzer/ -DENABLE_XROOTD=Off -DENABLE_GPU=on -DINPUT_PATH=/tmp -DCMAKE_CXX_STANDARD=17 -DUSE_KOKKOS=ON -DCMAKE_CXX_EXTENSIONS=Off. make -j. ```. ### Setup. root: v6.24 - v6.26. CUDA: 11.6, 11.7 (OK with 11.5). gcc: 9.3 - 11.2. OS: Centos 7. ROOT was built with:. ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DCMAKE_INSTALL_PREFIX=/opt/root/v6-26-06_gcc112_c17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF ../src. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:19736,integrability,Sub,SubC,19736,"plate<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T>&, R)’. 138 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:136:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T>&, R)’. 136 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:134:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::initializer_list<T>, R)’. ```. ### Expected behavior. a clean compilation without errors. ### To Reproduce. ```. setup kokkos (with CUDA backend), root, gcc, cmake. git clone git@github.com:cgleggett/FCS-GPU.git src. mkdir bld; cd bld. cmake ../src/FastCaloSimAnalyzer/ -DENABLE_XROOTD=Off -DENABLE_GPU=on -DINPUT_PATH=/tmp -DCMAKE_CXX_STANDARD=17 -DUSE_KOKKOS=ON -DCMAKE_CXX_EXTENSIONS=Off. make -j. ```. ### Setup. root: v6.24 - v6.26. CUDA: 11.6, 11.7 (OK with 11.5). gcc: 9.3 - 11.2. OS: Centos 7. ROOT was built with:. ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DCMAKE_INSTALL_PREFIX=/opt/root/v6-26-06_gcc112_c17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF ../src. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:379,modifiability,version,version,379,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:610,modifiability,version,versions,610,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:38,performance,error,errors,38,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:124,performance,error,error,124,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:217,performance,error,error,217,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:441,performance,error,error,441,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:453,performance,error,error,453,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:687,performance,error,error,687,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:821,performance,error,error,821,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:908,performance,error,error,908,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:3082,performance,error,error,3082,"orCRTP<SubC>::Map(F, std::initializer_list<T>)’. 120 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:118:84: note: ‘template<class SubC> template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 118 | template<class F, class INTEGER, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:116:60: note: ‘template<class SubC> template<class F, class Cond> std::vector<typename std::result_of<F()>::type> ROOT::TExecutorCRTP<SubC>::Map(F, unsigned int)’. 116 | template<class F, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:203:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::initializer_list<T>)’. 203 | auto TExecutorCRTP<SubC>::Map(F func, std::initializer_list<T> args) -> std::vector<typename std::result_of<F(T)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:5260,performance,error,error,5260,"orCRTP<SubC>::Map(F, std::initializer_list<T>)’. 120 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:118:84: note: ‘template<class SubC> template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 118 | template<class F, class INTEGER, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:116:60: note: ‘template<class SubC> template<class F, class Cond> std::vector<typename std::result_of<F()>::type> ROOT::TExecutorCRTP<SubC>::Map(F, unsigned int)’. 116 | template<class F, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:217:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 217 | auto TExecutorCRTP<SubC>::Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:7420,performance,error,error,7420,"orCRTP<SubC>::Map(F, std::initializer_list<T>)’. 120 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:118:84: note: ‘template<class SubC> template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 118 | template<class F, class INTEGER, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:116:60: note: ‘template<class SubC> template<class F, class Cond> std::vector<typename std::result_of<F()>::type> ROOT::TExecutorCRTP<SubC>::Map(F, unsigned int)’. 116 | template<class F, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:230:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 230 | auto TExecutorCRTP<SubC>::Map(F func, const std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:9592,performance,error,error,9592,"orCRTP<SubC>::Map(F, std::initializer_list<T>)’. 120 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:118:84: note: ‘template<class SubC> template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 118 | template<class F, class INTEGER, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:116:60: note: ‘template<class SubC> template<class F, class Cond> std::vector<typename std::result_of<F()>::type> ROOT::TExecutorCRTP<SubC>::Map(F, unsigned int)’. 116 | template<class F, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:257:1: error: no declaration matches ‘typename std::result_of<F(INTEGER)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, ROOT::TSeq<INTEGER>, R)’. 257 | auto TExecutorCRTP<SubC>::MapReduce(F func, ROOT::TSeq<INTEGER> args, R redfunc) -> typename std::result_of<F(INTEGER)>::type. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:142:70: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T*>&)’. 142 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, clas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:12390,performance,error,error,12390,"st<T>, R)’. 134 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:132:93: note: ‘template<class SubC> template<class F, class INTEGER, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, ROOT::TSeq<INTEGER>, R)’. 132 | template<class F, class INTEGER, class R, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:130:69: note: ‘template<class SubC> template<class F, class R, class Cond> typename std::result_of<F()>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, unsigned int, R)’. 130 | template<class F, class R, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:270:1: error: no declaration matches ‘typename std::result_of<F(INTEGER)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::initializer_list<T>, R)’. 270 | auto TExecutorCRTP<SubC>::MapReduce(F func, std::initializer_list<T> args, R redfunc) -> typename std::result_of<F(T)>::type. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:142:70: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T*>&)’. 142 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:15192,performance,error,error,15192,"st<T>, R)’. 134 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:132:93: note: ‘template<class SubC> template<class F, class INTEGER, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, ROOT::TSeq<INTEGER>, R)’. 132 | template<class F, class INTEGER, class R, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:130:69: note: ‘template<class SubC> template<class F, class R, class Cond> typename std::result_of<F()>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, unsigned int, R)’. 130 | template<class F, class R, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:284:1: error: no declaration matches ‘typename std::result_of<F(INTEGER)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T>&, R)’. 284 | auto TExecutorCRTP<SubC>::MapReduce(F func, std::vector<T> &args, R redfunc) -> typename std::result_of<F(T)>::type. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:142:70: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T*>&)’. 142 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typena",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:17976,performance,error,error,17976,"st<T>, R)’. 134 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:132:93: note: ‘template<class SubC> template<class F, class INTEGER, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, ROOT::TSeq<INTEGER>, R)’. 132 | template<class F, class INTEGER, class R, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:130:69: note: ‘template<class SubC> template<class F, class R, class Cond> typename std::result_of<F()>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, unsigned int, R)’. 130 | template<class F, class R, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:296:1: error: no declaration matches ‘typename std::result_of<F(INTEGER)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T>&, R)’. 296 | auto TExecutorCRTP<SubC>::MapReduce(F func, const std::vector<T> &args, R redfunc) -> typename std::result_of<F(T)>::type. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:142:70: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T*>&)’. 142 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, class ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:19843,performance,error,errors,19843,"plate<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T>&, R)’. 138 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:136:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T>&, R)’. 136 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:134:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::initializer_list<T>, R)’. ```. ### Expected behavior. a clean compilation without errors. ### To Reproduce. ```. setup kokkos (with CUDA backend), root, gcc, cmake. git clone git@github.com:cgleggett/FCS-GPU.git src. mkdir bld; cd bld. cmake ../src/FastCaloSimAnalyzer/ -DENABLE_XROOTD=Off -DENABLE_GPU=on -DINPUT_PATH=/tmp -DCMAKE_CXX_STANDARD=17 -DUSE_KOKKOS=ON -DCMAKE_CXX_EXTENSIONS=Off. make -j. ```. ### Setup. root: v6.24 - v6.26. CUDA: 11.6, 11.7 (OK with 11.5). gcc: 9.3 - 11.2. OS: Centos 7. ROOT was built with:. ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DCMAKE_INSTALL_PREFIX=/opt/root/v6-26-06_gcc112_c17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF ../src. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:19965,performance,GPU,GPU,19965,"plate<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T>&, R)’. 138 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:136:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T>&, R)’. 136 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:134:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::initializer_list<T>, R)’. ```. ### Expected behavior. a clean compilation without errors. ### To Reproduce. ```. setup kokkos (with CUDA backend), root, gcc, cmake. git clone git@github.com:cgleggett/FCS-GPU.git src. mkdir bld; cd bld. cmake ../src/FastCaloSimAnalyzer/ -DENABLE_XROOTD=Off -DENABLE_GPU=on -DINPUT_PATH=/tmp -DCMAKE_CXX_STANDARD=17 -DUSE_KOKKOS=ON -DCMAKE_CXX_EXTENSIONS=Off. make -j. ```. ### Setup. root: v6.24 - v6.26. CUDA: 11.6, 11.7 (OK with 11.5). gcc: 9.3 - 11.2. OS: Centos 7. ROOT was built with:. ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DCMAKE_INSTALL_PREFIX=/opt/root/v6-26-06_gcc112_c17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF ../src. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:223,reliability,doe,does,223,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:421,reliability,doe,does,421,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:38,safety,error,errors,38,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:124,safety,error,error,124,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:217,safety,error,error,217,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:441,safety,error,error,441,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:453,safety,error,error,453,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:687,safety,error,error,687,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:821,safety,error,error,821,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:908,safety,error,error,908,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:3082,safety,error,error,3082,"orCRTP<SubC>::Map(F, std::initializer_list<T>)’. 120 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:118:84: note: ‘template<class SubC> template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 118 | template<class F, class INTEGER, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:116:60: note: ‘template<class SubC> template<class F, class Cond> std::vector<typename std::result_of<F()>::type> ROOT::TExecutorCRTP<SubC>::Map(F, unsigned int)’. 116 | template<class F, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:203:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::initializer_list<T>)’. 203 | auto TExecutorCRTP<SubC>::Map(F func, std::initializer_list<T> args) -> std::vector<typename std::result_of<F(T)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:5260,safety,error,error,5260,"orCRTP<SubC>::Map(F, std::initializer_list<T>)’. 120 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:118:84: note: ‘template<class SubC> template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 118 | template<class F, class INTEGER, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:116:60: note: ‘template<class SubC> template<class F, class Cond> std::vector<typename std::result_of<F()>::type> ROOT::TExecutorCRTP<SubC>::Map(F, unsigned int)’. 116 | template<class F, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:217:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 217 | auto TExecutorCRTP<SubC>::Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:7420,safety,error,error,7420,"orCRTP<SubC>::Map(F, std::initializer_list<T>)’. 120 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:118:84: note: ‘template<class SubC> template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 118 | template<class F, class INTEGER, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:116:60: note: ‘template<class SubC> template<class F, class Cond> std::vector<typename std::result_of<F()>::type> ROOT::TExecutorCRTP<SubC>::Map(F, unsigned int)’. 116 | template<class F, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:230:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 230 | auto TExecutorCRTP<SubC>::Map(F func, const std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:9592,safety,error,error,9592,"orCRTP<SubC>::Map(F, std::initializer_list<T>)’. 120 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:118:84: note: ‘template<class SubC> template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 118 | template<class F, class INTEGER, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:116:60: note: ‘template<class SubC> template<class F, class Cond> std::vector<typename std::result_of<F()>::type> ROOT::TExecutorCRTP<SubC>::Map(F, unsigned int)’. 116 | template<class F, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:257:1: error: no declaration matches ‘typename std::result_of<F(INTEGER)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, ROOT::TSeq<INTEGER>, R)’. 257 | auto TExecutorCRTP<SubC>::MapReduce(F func, ROOT::TSeq<INTEGER> args, R redfunc) -> typename std::result_of<F(INTEGER)>::type. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:142:70: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T*>&)’. 142 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, clas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:12390,safety,error,error,12390,"st<T>, R)’. 134 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:132:93: note: ‘template<class SubC> template<class F, class INTEGER, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, ROOT::TSeq<INTEGER>, R)’. 132 | template<class F, class INTEGER, class R, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:130:69: note: ‘template<class SubC> template<class F, class R, class Cond> typename std::result_of<F()>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, unsigned int, R)’. 130 | template<class F, class R, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:270:1: error: no declaration matches ‘typename std::result_of<F(INTEGER)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::initializer_list<T>, R)’. 270 | auto TExecutorCRTP<SubC>::MapReduce(F func, std::initializer_list<T> args, R redfunc) -> typename std::result_of<F(T)>::type. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:142:70: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T*>&)’. 142 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:15192,safety,error,error,15192,"st<T>, R)’. 134 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:132:93: note: ‘template<class SubC> template<class F, class INTEGER, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, ROOT::TSeq<INTEGER>, R)’. 132 | template<class F, class INTEGER, class R, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:130:69: note: ‘template<class SubC> template<class F, class R, class Cond> typename std::result_of<F()>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, unsigned int, R)’. 130 | template<class F, class R, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:284:1: error: no declaration matches ‘typename std::result_of<F(INTEGER)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T>&, R)’. 284 | auto TExecutorCRTP<SubC>::MapReduce(F func, std::vector<T> &args, R redfunc) -> typename std::result_of<F(T)>::type. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:142:70: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T*>&)’. 142 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typena",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:17976,safety,error,error,17976,"st<T>, R)’. 134 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:132:93: note: ‘template<class SubC> template<class F, class INTEGER, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, ROOT::TSeq<INTEGER>, R)’. 132 | template<class F, class INTEGER, class R, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:130:69: note: ‘template<class SubC> template<class F, class R, class Cond> typename std::result_of<F()>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, unsigned int, R)’. 130 | template<class F, class R, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:296:1: error: no declaration matches ‘typename std::result_of<F(INTEGER)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T>&, R)’. 296 | auto TExecutorCRTP<SubC>::MapReduce(F func, const std::vector<T> &args, R redfunc) -> typename std::result_of<F(T)>::type. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:142:70: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T*>&)’. 142 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, class ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:19843,safety,error,errors,19843,"plate<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T>&, R)’. 138 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:136:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T>&, R)’. 136 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:134:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::initializer_list<T>, R)’. ```. ### Expected behavior. a clean compilation without errors. ### To Reproduce. ```. setup kokkos (with CUDA backend), root, gcc, cmake. git clone git@github.com:cgleggett/FCS-GPU.git src. mkdir bld; cd bld. cmake ../src/FastCaloSimAnalyzer/ -DENABLE_XROOTD=Off -DENABLE_GPU=on -DINPUT_PATH=/tmp -DCMAKE_CXX_STANDARD=17 -DUSE_KOKKOS=ON -DCMAKE_CXX_EXTENSIONS=Off. make -j. ```. ### Setup. root: v6.24 - v6.26. CUDA: 11.6, 11.7 (OK with 11.5). gcc: 9.3 - 11.2. OS: Centos 7. ROOT was built with:. ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DCMAKE_INSTALL_PREFIX=/opt/root/v6-26-06_gcc112_c17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF ../src. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:38,usability,error,errors,38,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:124,usability,error,error,124,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:217,usability,error,error,217,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:441,usability,error,error,441,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:453,usability,error,error,453,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:687,usability,error,error,687,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:821,usability,error,error,821,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:908,usability,error,error,908,"TExecutorCRTP and TSequentialExecutor errors when building application with CUDA 11.6+; ### Describe the bug. I'm seeing an error when building an application with root, kokkos and CUDA. The file that's producing the error does not explicitly include any Kokkos or CUDA headers, but the CUDA headers are somehow being pulled in. Kokkos is somehow involved in all this as another version of the code which uses plain CUDA does not throw this error. This error is apparent with root v6-24-00 through v6-26-06 (I haven't tried anything older or newer). It appeared with CUDA 11.6 and beyond- it's fine with older versions (I've tried back to 11.2 and up to 11.7. I haven't tried 11.8). The error is apparent with gcc 9.3 to 11.2. Nothing in the source is explicitly calling TExecutorCRTP or TSequentialExecutor. This is the error I see:. ```. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:191:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 191 | auto TExecutorCRTP<SubC>::Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:120:72: note: ‘template<class SubC> template<class F, class T, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:3082,usability,error,error,3082,"orCRTP<SubC>::Map(F, std::initializer_list<T>)’. 120 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:118:84: note: ‘template<class SubC> template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 118 | template<class F, class INTEGER, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:116:60: note: ‘template<class SubC> template<class F, class Cond> std::vector<typename std::result_of<F()>::type> ROOT::TExecutorCRTP<SubC>::Map(F, unsigned int)’. 116 | template<class F, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:203:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::initializer_list<T>)’. 203 | auto TExecutorCRTP<SubC>::Map(F func, std::initializer_list<T> args) -> std::vector<typename std::result_of<F(T)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:5260,usability,error,error,5260,"orCRTP<SubC>::Map(F, std::initializer_list<T>)’. 120 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:118:84: note: ‘template<class SubC> template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 118 | template<class F, class INTEGER, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:116:60: note: ‘template<class SubC> template<class F, class Cond> std::vector<typename std::result_of<F()>::type> ROOT::TExecutorCRTP<SubC>::Map(F, unsigned int)’. 116 | template<class F, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:217:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 217 | auto TExecutorCRTP<SubC>::Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:7420,usability,error,error,7420,"orCRTP<SubC>::Map(F, std::initializer_list<T>)’. 120 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:118:84: note: ‘template<class SubC> template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 118 | template<class F, class INTEGER, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:116:60: note: ‘template<class SubC> template<class F, class Cond> std::vector<typename std::result_of<F()>::type> ROOT::TExecutorCRTP<SubC>::Map(F, unsigned int)’. 116 | template<class F, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:230:1: error: no declaration matches ‘std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 230 | auto TExecutorCRTP<SubC>::Map(F func, const std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:124:72: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, const std::vector<T>&)’. 124 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:122:72: note: ‘template<class SubC> template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, std::vector<T>&)’. 122 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:9592,usability,error,error,9592,"orCRTP<SubC>::Map(F, std::initializer_list<T>)’. 120 | template<class F, class T, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:118:84: note: ‘template<class SubC> template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER, ...)>::type> ROOT::TExecutorCRTP<SubC>::Map(F, ROOT::TSeq<INTEGER>)’. 118 | template<class F, class INTEGER, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:116:60: note: ‘template<class SubC> template<class F, class Cond> std::vector<typename std::result_of<F()>::type> ROOT::TExecutorCRTP<SubC>::Map(F, unsigned int)’. 116 | template<class F, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:257:1: error: no declaration matches ‘typename std::result_of<F(INTEGER)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, ROOT::TSeq<INTEGER>, R)’. 257 | auto TExecutorCRTP<SubC>::MapReduce(F func, ROOT::TSeq<INTEGER> args, R redfunc) -> typename std::result_of<F(INTEGER)>::type. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:142:70: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T*>&)’. 142 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, clas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:12390,usability,error,error,12390,"st<T>, R)’. 134 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:132:93: note: ‘template<class SubC> template<class F, class INTEGER, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, ROOT::TSeq<INTEGER>, R)’. 132 | template<class F, class INTEGER, class R, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:130:69: note: ‘template<class SubC> template<class F, class R, class Cond> typename std::result_of<F()>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, unsigned int, R)’. 130 | template<class F, class R, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:270:1: error: no declaration matches ‘typename std::result_of<F(INTEGER)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::initializer_list<T>, R)’. 270 | auto TExecutorCRTP<SubC>::MapReduce(F func, std::initializer_list<T> args, R redfunc) -> typename std::result_of<F(T)>::type. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:142:70: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T*>&)’. 142 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:15192,usability,error,error,15192,"st<T>, R)’. 134 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:132:93: note: ‘template<class SubC> template<class F, class INTEGER, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, ROOT::TSeq<INTEGER>, R)’. 132 | template<class F, class INTEGER, class R, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:130:69: note: ‘template<class SubC> template<class F, class R, class Cond> typename std::result_of<F()>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, unsigned int, R)’. 130 | template<class F, class R, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:284:1: error: no declaration matches ‘typename std::result_of<F(INTEGER)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T>&, R)’. 284 | auto TExecutorCRTP<SubC>::MapReduce(F func, std::vector<T> &args, R redfunc) -> typename std::result_of<F(T)>::type. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:142:70: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T*>&)’. 142 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typena",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:17976,usability,error,error,17976,"st<T>, R)’. 134 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:132:93: note: ‘template<class SubC> template<class F, class INTEGER, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, ROOT::TSeq<INTEGER>, R)’. 132 | template<class F, class INTEGER, class R, class Cond = noReferenceCond<F, INTEGER>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:130:69: note: ‘template<class SubC> template<class F, class R, class Cond> typename std::result_of<F()>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, unsigned int, R)’. 130 | template<class F, class R, class Cond = noReferenceCond<F>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:102:7: note: ‘class ROOT::TExecutorCRTP<SubC>’ defined here. 102 | class TExecutorCRTP {. | ^~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:296:1: error: no declaration matches ‘typename std::result_of<F(INTEGER)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T>&, R)’. 296 | auto TExecutorCRTP<SubC>::MapReduce(F func, const std::vector<T> &args, R redfunc) -> typename std::result_of<F(T)>::type. | ^~~~~~~~~~~~~~~~~~~~. /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:142:70: note: candidates are: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T*>&)’. 142 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, class ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:19805,usability,behavi,behavior,19805,"plate<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T>&, R)’. 138 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:136:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T>&, R)’. 136 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:134:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::initializer_list<T>, R)’. ```. ### Expected behavior. a clean compilation without errors. ### To Reproduce. ```. setup kokkos (with CUDA backend), root, gcc, cmake. git clone git@github.com:cgleggett/FCS-GPU.git src. mkdir bld; cd bld. cmake ../src/FastCaloSimAnalyzer/ -DENABLE_XROOTD=Off -DENABLE_GPU=on -DINPUT_PATH=/tmp -DCMAKE_CXX_STANDARD=17 -DUSE_KOKKOS=ON -DCMAKE_CXX_EXTENSIONS=Off. make -j. ```. ### Setup. root: v6.24 - v6.26. CUDA: 11.6, 11.7 (OK with 11.5). gcc: 9.3 - 11.2. OS: Centos 7. ROOT was built with:. ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DCMAKE_INSTALL_PREFIX=/opt/root/v6-26-06_gcc112_c17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF ../src. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/issues/11511:19843,usability,error,errors,19843,"plate<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:140:70: note: ‘template<class SubC> template<class F, class T, class Cond> T* ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T*>&)’. 140 | template<class F, class T,class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:138:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::vector<T>&, R)’. 138 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:136:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, const std::vector<T>&, R)’. 136 | template<class F, class T, class R, class Cond = noReferenceCond<F, T>>. | ^ . /opt/root/v6-26-06_gcc112_c17/include/ROOT/TExecutorCRTP.hxx:134:81: note: ‘template<class SubC> template<class F, class T, class R, class Cond> typename std::result_of<F(INTEGER, ...)>::type ROOT::TExecutorCRTP<SubC>::MapReduce(F, std::initializer_list<T>, R)’. ```. ### Expected behavior. a clean compilation without errors. ### To Reproduce. ```. setup kokkos (with CUDA backend), root, gcc, cmake. git clone git@github.com:cgleggett/FCS-GPU.git src. mkdir bld; cd bld. cmake ../src/FastCaloSimAnalyzer/ -DENABLE_XROOTD=Off -DENABLE_GPU=on -DINPUT_PATH=/tmp -DCMAKE_CXX_STANDARD=17 -DUSE_KOKKOS=ON -DCMAKE_CXX_EXTENSIONS=Off. make -j. ```. ### Setup. root: v6.24 - v6.26. CUDA: 11.6, 11.7 (OK with 11.5). gcc: 9.3 - 11.2. OS: Centos 7. ROOT was built with:. ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DCMAKE_INSTALL_PREFIX=/opt/root/v6-26-06_gcc112_c17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF ../src. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11511
https://github.com/root-project/root/pull/11512:65,deployability,modul,modules,65,[TMVA][CMake] Fixes for Python2/3 compatibility in pythonization modules; Fixes #11437 . This PR:. - Separates Python sources that are compatible with Python3 only and those that are supported both in 2 and 3. - Makes a TMVA pythonization module compatible with Python2.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11512
https://github.com/root-project/root/pull/11512:239,deployability,modul,module,239,[TMVA][CMake] Fixes for Python2/3 compatibility in pythonization modules; Fixes #11437 . This PR:. - Separates Python sources that are compatible with Python3 only and those that are supported both in 2 and 3. - Makes a TMVA pythonization module compatible with Python2.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11512
https://github.com/root-project/root/pull/11512:34,interoperability,compatib,compatibility,34,[TMVA][CMake] Fixes for Python2/3 compatibility in pythonization modules; Fixes #11437 . This PR:. - Separates Python sources that are compatible with Python3 only and those that are supported both in 2 and 3. - Makes a TMVA pythonization module compatible with Python2.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11512
https://github.com/root-project/root/pull/11512:135,interoperability,compatib,compatible,135,[TMVA][CMake] Fixes for Python2/3 compatibility in pythonization modules; Fixes #11437 . This PR:. - Separates Python sources that are compatible with Python3 only and those that are supported both in 2 and 3. - Makes a TMVA pythonization module compatible with Python2.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11512
https://github.com/root-project/root/pull/11512:246,interoperability,compatib,compatible,246,[TMVA][CMake] Fixes for Python2/3 compatibility in pythonization modules; Fixes #11437 . This PR:. - Separates Python sources that are compatible with Python3 only and those that are supported both in 2 and 3. - Makes a TMVA pythonization module compatible with Python2.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11512
https://github.com/root-project/root/pull/11512:65,modifiability,modul,modules,65,[TMVA][CMake] Fixes for Python2/3 compatibility in pythonization modules; Fixes #11437 . This PR:. - Separates Python sources that are compatible with Python3 only and those that are supported both in 2 and 3. - Makes a TMVA pythonization module compatible with Python2.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11512
https://github.com/root-project/root/pull/11512:239,modifiability,modul,module,239,[TMVA][CMake] Fixes for Python2/3 compatibility in pythonization modules; Fixes #11437 . This PR:. - Separates Python sources that are compatible with Python3 only and those that are supported both in 2 and 3. - Makes a TMVA pythonization module compatible with Python2.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11512
https://github.com/root-project/root/pull/11512:65,safety,modul,modules,65,[TMVA][CMake] Fixes for Python2/3 compatibility in pythonization modules; Fixes #11437 . This PR:. - Separates Python sources that are compatible with Python3 only and those that are supported both in 2 and 3. - Makes a TMVA pythonization module compatible with Python2.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11512
https://github.com/root-project/root/pull/11512:239,safety,modul,module,239,[TMVA][CMake] Fixes for Python2/3 compatibility in pythonization modules; Fixes #11437 . This PR:. - Separates Python sources that are compatible with Python3 only and those that are supported both in 2 and 3. - Makes a TMVA pythonization module compatible with Python2.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11512
https://github.com/root-project/root/pull/11512:183,usability,support,supported,183,[TMVA][CMake] Fixes for Python2/3 compatibility in pythonization modules; Fixes #11437 . This PR:. - Separates Python sources that are compatible with Python3 only and those that are supported both in 2 and 3. - Makes a TMVA pythonization module compatible with Python2.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11512
https://github.com/root-project/root/pull/11514:66,deployability,modul,modules,66,"[cxxmodules] Avoid lookup from system headers; Avoid loading ROOT modules while Clang is instantiating a template class from STL, leading to ODR checks with an incomplete class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11514
https://github.com/root-project/root/pull/11514:53,energy efficiency,load,loading,53,"[cxxmodules] Avoid lookup from system headers; Avoid loading ROOT modules while Clang is instantiating a template class from STL, leading to ODR checks with an incomplete class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11514
https://github.com/root-project/root/pull/11514:66,modifiability,modul,modules,66,"[cxxmodules] Avoid lookup from system headers; Avoid loading ROOT modules while Clang is instantiating a template class from STL, leading to ODR checks with an incomplete class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11514
https://github.com/root-project/root/pull/11514:53,performance,load,loading,53,"[cxxmodules] Avoid lookup from system headers; Avoid loading ROOT modules while Clang is instantiating a template class from STL, leading to ODR checks with an incomplete class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11514
https://github.com/root-project/root/pull/11514:13,safety,Avoid,Avoid,13,"[cxxmodules] Avoid lookup from system headers; Avoid loading ROOT modules while Clang is instantiating a template class from STL, leading to ODR checks with an incomplete class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11514
https://github.com/root-project/root/pull/11514:47,safety,Avoid,Avoid,47,"[cxxmodules] Avoid lookup from system headers; Avoid loading ROOT modules while Clang is instantiating a template class from STL, leading to ODR checks with an incomplete class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11514
https://github.com/root-project/root/pull/11514:66,safety,modul,modules,66,"[cxxmodules] Avoid lookup from system headers; Avoid loading ROOT modules while Clang is instantiating a template class from STL, leading to ODR checks with an incomplete class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11514
https://github.com/root-project/root/issues/11515:0,availability,Error,Error,0,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:244,availability,servic,services,244,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:418,availability,error,error,418,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1184,availability,error,error,1184,"ality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1399,availability,state,state,1399,"/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuild",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1688,availability,error,error,1688,"n: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1705,availability,failur,failure,1705,"rgs: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1821,availability,error,error,1821,"33910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=316",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1874,availability,error,error,1874,"<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1935,availability,state,statements,1935,"mes', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2047,availability,Failur,Failure,2047,"tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2147,availability,Failur,Failure,2147,"hrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2281,availability,Failur,Failure,2281,"he cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2786,availability,Failur,Failure,2786,"stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame . 1 Thread 0x7f1370756740 (LWP 34502) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f131020075c) at futex-internal.c:57. 2 Thread 0x7f135fbff640 (LWP 34504) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2827,availability,error,errorCode,2827,"rtunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame . 1 Thread 0x7f1370756740 (LWP 34502) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f131020075c) at futex-internal.c:57. 2 Thread 0x7f135fbff640 (LWP 34504) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:10918,availability,error,error,10918,"lang::FunctionDecl const*, cling::Value*) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #2 0x00007f1332c451a3 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #3 0x00007f1332c45b1a in cling::Interpreter::evaluate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value&) () from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #4 0x00007f1332a74e9d in TCling::Calc (this=0x56290befde40, . line=0x7f12fa0f8290 ""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., error=0x7f131ad40bdc). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:3556. #5 0x00007f132bf6da60 in operator() (__closure=0x7f131ad40bc0, . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more detai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:11049,availability,operat,operator,11049,"o. #2 0x00007f1332c451a3 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #3 0x00007f1332c45b1a in cling::Interpreter::evaluate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value&) () from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #4 0x00007f1332a74e9d in TCling::Calc (this=0x56290befde40, . line=0x7f12fa0f8290 ""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., error=0x7f131ad40bdc). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:3556. #5 0x00007f132bf6da60 in operator() (__closure=0x7f131ad40bc0, . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:11976,availability,state,statements,11976,"ootsrc/core/metacling/src/TCling.cxx:3556. #5 0x00007f132bf6da60 in operator() (__closure=0x7f131ad40bc0, . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkCon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12067,availability,state,statements-for-DistRDF-Cling-failure,12067,", . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, spar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12171,availability,state,statements-for-DistRDF-Cling-failure,12171,"nterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test fil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14564,availability,echo,echo,14564," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:45,deployability,stack,stack,45,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:193,deployability,fail,fails,193,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:244,deployability,servic,services,244,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:296,deployability,build,build,296,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:524,deployability,log,log,524,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:621,deployability,Fail,Failed,621,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1705,deployability,fail,failure,1705,"rgs: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2017,deployability,patch,patch,2017,"tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2047,deployability,Fail,Failure,2047,"tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2147,deployability,Fail,Failure,2147,"hrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2281,deployability,Fail,Failure,2281,"he cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2786,deployability,Fail,Failure,2786,"stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame . 1 Thread 0x7f1370756740 (LWP 34502) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f131020075c) at futex-internal.c:57. 2 Thread 0x7f135fbff640 (LWP 34504) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:6351,deployability,continu,continue,6351,"4b3f6640 (LWP 34513) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292b60 <thread_status+1248>) at futex-internal.c:57. 12 Thread 0x7f134abf5640 (LWP 34514) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292be0 <thread_status+1376>) at futex-internal.c:57. 13 Thread 0x7f13483f4640 (LWP 34515) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292c60 <thread_status+1504>) at futex-internal.c:57. 14 Thread 0x7f1343bf3640 (LWP 34516) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ce0 <thread_status+1632>) at futex-internal.c:57. 15 Thread 0x7f13433f2640 (LWP 34517) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . --Type <RET> for more, q to quit, c to continue without paging--. futex_word=0x7f1362292d60 <thread_status+1760>) at futex-internal.c:57. 16 Thread 0x7f133ebf1640 (LWP 34518) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292de0 <thread_status+1888>) at futex-internal.c:57. 17 Thread 0x7f132aa21640 (LWP 34584) ""python"" __GI___libc_read (nbytes=4, buf=0x7f133827b950, fd=33) at ../sysdeps/unix/sysv/linux/read.c:26. 18 Thread 0x7f132a120640 (LWP 34585) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x7f132a11f330, op=137, . expected=0, futex_word=0x7f1370d85acc <_PyRuntime+428>) at futex-internal.c:57. 19 Thread 0x7f132991f640 (LWP 34586) ""python"" __GI___libc_read (nbytes=4, buf=0x7f13382bf140, fd=31) at ../sysdeps/unix/sysv/linux/read.c:26. 20 Thread 0x7f132911e640 (LWP 34587) ""python"" __futex_abstimed_wait_common64 (private=<optimized out>, cancel=true, abstime=0x0, op=393, . expected=0, futex_word=0x562911e622b0) at futex-internal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:11957,deployability,patch,patch,11957,"rograms/rootproject/rootsrc/core/metacling/src/TCling.cxx:3556. #5 0x00007f132bf6da60 in operator() (__closure=0x7f131ad40bc0, . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkco",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12096,deployability,fail,failure,12096,"ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". S",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12200,deployability,fail,failure,12200,"td::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14490,deployability,fail,fails,14490," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14682,deployability,fail,fails,14682," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:7246,energy efficiency,optim,optimized,7246," (private=0, cancel=true, abstime=0x0, op=393, expected=0, . --Type <RET> for more, q to quit, c to continue without paging--. futex_word=0x7f1362292d60 <thread_status+1760>) at futex-internal.c:57. 16 Thread 0x7f133ebf1640 (LWP 34518) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292de0 <thread_status+1888>) at futex-internal.c:57. 17 Thread 0x7f132aa21640 (LWP 34584) ""python"" __GI___libc_read (nbytes=4, buf=0x7f133827b950, fd=33) at ../sysdeps/unix/sysv/linux/read.c:26. 18 Thread 0x7f132a120640 (LWP 34585) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x7f132a11f330, op=137, . expected=0, futex_word=0x7f1370d85acc <_PyRuntime+428>) at futex-internal.c:57. 19 Thread 0x7f132991f640 (LWP 34586) ""python"" __GI___libc_read (nbytes=4, buf=0x7f13382bf140, fd=31) at ../sysdeps/unix/sysv/linux/read.c:26. 20 Thread 0x7f132911e640 (LWP 34587) ""python"" __futex_abstimed_wait_common64 (private=<optimized out>, cancel=true, abstime=0x0, op=393, . expected=0, futex_word=0x562911e622b0) at futex-internal.c:57. * 21 Thread 0x7f131ad44640 (LWP 34739) ""python"" 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. ```. The two most interesting ones are threads `1` and `21`:. Thread1. ```. #6 std::__condvar::wait (__m=..., this=<optimized out>). at /usr/src/debug/gcc-12.2.1-2.fc36.x86_64/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/std_mutex.h:155. #7 std::condition_variable::wait (this=<optimized out>, __lock=...) at ../../../../../libstdc++-v3/src/c++11/condition_variable.cc:41. #8 0x00007f133726f0aa in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex> > (this=0x7f1310200730, __lock=...). at /usr/include/c++/12/condition_variable:312. #9 0x00007f133726df05 in std::_V2::condition_variable_any::wait<std::uni",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:7720,energy efficiency,optim,optimized,7720,"ytes=4, buf=0x7f133827b950, fd=33) at ../sysdeps/unix/sysv/linux/read.c:26. 18 Thread 0x7f132a120640 (LWP 34585) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x7f132a11f330, op=137, . expected=0, futex_word=0x7f1370d85acc <_PyRuntime+428>) at futex-internal.c:57. 19 Thread 0x7f132991f640 (LWP 34586) ""python"" __GI___libc_read (nbytes=4, buf=0x7f13382bf140, fd=31) at ../sysdeps/unix/sysv/linux/read.c:26. 20 Thread 0x7f132911e640 (LWP 34587) ""python"" __futex_abstimed_wait_common64 (private=<optimized out>, cancel=true, abstime=0x0, op=393, . expected=0, futex_word=0x562911e622b0) at futex-internal.c:57. * 21 Thread 0x7f131ad44640 (LWP 34739) ""python"" 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. ```. The two most interesting ones are threads `1` and `21`:. Thread1. ```. #6 std::__condvar::wait (__m=..., this=<optimized out>). at /usr/src/debug/gcc-12.2.1-2.fc36.x86_64/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/std_mutex.h:155. #7 std::condition_variable::wait (this=<optimized out>, __lock=...) at ../../../../../libstdc++-v3/src/c++11/condition_variable.cc:41. #8 0x00007f133726f0aa in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex> > (this=0x7f1310200730, __lock=...). at /usr/include/c++/12/condition_variable:312. #9 0x00007f133726df05 in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex>, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}>(std::unique_lock<std::mutex>&, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}) (this=0x7f1310200730, __lock=..., __p=...) at /usr/include/c++/12/condition_variable:321. #10 0x00007f1337269c3e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f131",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:7907,energy efficiency,optim,optimized,7907,"x7f132a11f330, op=137, . expected=0, futex_word=0x7f1370d85acc <_PyRuntime+428>) at futex-internal.c:57. 19 Thread 0x7f132991f640 (LWP 34586) ""python"" __GI___libc_read (nbytes=4, buf=0x7f13382bf140, fd=31) at ../sysdeps/unix/sysv/linux/read.c:26. 20 Thread 0x7f132911e640 (LWP 34587) ""python"" __futex_abstimed_wait_common64 (private=<optimized out>, cancel=true, abstime=0x0, op=393, . expected=0, futex_word=0x562911e622b0) at futex-internal.c:57. * 21 Thread 0x7f131ad44640 (LWP 34739) ""python"" 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. ```. The two most interesting ones are threads `1` and `21`:. Thread1. ```. #6 std::__condvar::wait (__m=..., this=<optimized out>). at /usr/src/debug/gcc-12.2.1-2.fc36.x86_64/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/std_mutex.h:155. #7 std::condition_variable::wait (this=<optimized out>, __lock=...) at ../../../../../libstdc++-v3/src/c++11/condition_variable.cc:41. #8 0x00007f133726f0aa in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex> > (this=0x7f1310200730, __lock=...). at /usr/include/c++/12/condition_variable:312. #9 0x00007f133726df05 in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex>, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}>(std::unique_lock<std::mutex>&, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}) (this=0x7f1310200730, __lock=..., __p=...) at /usr/include/c++/12/condition_variable:321. #10 0x00007f1337269c3e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f13102006f8). at /home/vpadulan/programs/rootproject/rootsrc/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f1337277d74 in ROOT::TRWMutexImp<std::mutex, ROOT::Internal::RecurseCountsTBB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:8782,energy efficiency,core,core,8782,"x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/std_mutex.h:155. #7 std::condition_variable::wait (this=<optimized out>, __lock=...) at ../../../../../libstdc++-v3/src/c++11/condition_variable.cc:41. #8 0x00007f133726f0aa in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex> > (this=0x7f1310200730, __lock=...). at /usr/include/c++/12/condition_variable:312. #9 0x00007f133726df05 in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex>, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}>(std::unique_lock<std::mutex>&, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}) (this=0x7f1310200730, __lock=..., __p=...) at /usr/include/c++/12/condition_variable:321. #10 0x00007f1337269c3e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f13102006f8). at /home/vpadulan/programs/rootproject/rootsrc/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f1337277d74 in ROOT::TRWMutexImp<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/thread/src/TRWMutexImp.cxx:42. #12 0x00007f1337276797 in ROOT::TVirtualRWMutex::Lock (this=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/base/inc/TVirtualRWMutex.h:79. #13 0x00007f1332b7a3c8 in TLockGuard::TLockGuard (this=0x7fffa6ac5868, mutex=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/base/inc/TVirtualMutex.h:80. #14 0x00007f1332a80aa6 in TCling::AutoParse (this=0x56290befde40, cls=0x7fffa6ac5d40 ""_facade""). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:6452. #15 0x00007f1332a6667d in TCling__AutoParseCallback (className=0x7fffa6ac5d40 ""_facade""). ```. Thread 21:. ```. #0 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (). from /home",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:9001,energy efficiency,core,core,9001,"8 0x00007f133726f0aa in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex> > (this=0x7f1310200730, __lock=...). at /usr/include/c++/12/condition_variable:312. #9 0x00007f133726df05 in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex>, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}>(std::unique_lock<std::mutex>&, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}) (this=0x7f1310200730, __lock=..., __p=...) at /usr/include/c++/12/condition_variable:321. #10 0x00007f1337269c3e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f13102006f8). at /home/vpadulan/programs/rootproject/rootsrc/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f1337277d74 in ROOT::TRWMutexImp<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/thread/src/TRWMutexImp.cxx:42. #12 0x00007f1337276797 in ROOT::TVirtualRWMutex::Lock (this=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/base/inc/TVirtualRWMutex.h:79. #13 0x00007f1332b7a3c8 in TLockGuard::TLockGuard (this=0x7fffa6ac5868, mutex=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/base/inc/TVirtualMutex.h:80. #14 0x00007f1332a80aa6 in TCling::AutoParse (this=0x56290befde40, cls=0x7fffa6ac5d40 ""_facade""). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:6452. #15 0x00007f1332a6667d in TCling__AutoParseCallback (className=0x7fffa6ac5d40 ""_facade""). ```. Thread 21:. ```. #0 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #1 0x00007f1332c44ab1 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (). from /home/vpadulan/programs/rootpro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:9161,energy efficiency,core,core,9161,"n_variable:312. #9 0x00007f133726df05 in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex>, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}>(std::unique_lock<std::mutex>&, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}) (this=0x7f1310200730, __lock=..., __p=...) at /usr/include/c++/12/condition_variable:321. #10 0x00007f1337269c3e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f13102006f8). at /home/vpadulan/programs/rootproject/rootsrc/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f1337277d74 in ROOT::TRWMutexImp<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/thread/src/TRWMutexImp.cxx:42. #12 0x00007f1337276797 in ROOT::TVirtualRWMutex::Lock (this=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/base/inc/TVirtualRWMutex.h:79. #13 0x00007f1332b7a3c8 in TLockGuard::TLockGuard (this=0x7fffa6ac5868, mutex=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/base/inc/TVirtualMutex.h:80. #14 0x00007f1332a80aa6 in TCling::AutoParse (this=0x56290befde40, cls=0x7fffa6ac5d40 ""_facade""). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:6452. #15 0x00007f1332a6667d in TCling__AutoParseCallback (className=0x7fffa6ac5d40 ""_facade""). ```. Thread 21:. ```. #0 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #1 0x00007f1332c44ab1 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #2 0x00007f1332c451a3 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:9338,energy efficiency,core,core,9338,"Unique>::WriteLock()::{lambda()#1}>(std::unique_lock<std::mutex>&, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}) (this=0x7f1310200730, __lock=..., __p=...) at /usr/include/c++/12/condition_variable:321. #10 0x00007f1337269c3e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f13102006f8). at /home/vpadulan/programs/rootproject/rootsrc/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f1337277d74 in ROOT::TRWMutexImp<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/thread/src/TRWMutexImp.cxx:42. #12 0x00007f1337276797 in ROOT::TVirtualRWMutex::Lock (this=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/base/inc/TVirtualRWMutex.h:79. #13 0x00007f1332b7a3c8 in TLockGuard::TLockGuard (this=0x7fffa6ac5868, mutex=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/base/inc/TVirtualMutex.h:80. #14 0x00007f1332a80aa6 in TCling::AutoParse (this=0x56290befde40, cls=0x7fffa6ac5d40 ""_facade""). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:6452. #15 0x00007f1332a6667d in TCling__AutoParseCallback (className=0x7fffa6ac5d40 ""_facade""). ```. Thread 21:. ```. #0 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #1 0x00007f1332c44ab1 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #2 0x00007f1332c451a3 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (). from /home/vpadulan/programs/rootproject/rootbuild/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:9516,energy efficiency,core,core,9516,"7f1310200730, __lock=..., __p=...) at /usr/include/c++/12/condition_variable:321. #10 0x00007f1337269c3e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f13102006f8). at /home/vpadulan/programs/rootproject/rootsrc/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f1337277d74 in ROOT::TRWMutexImp<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/thread/src/TRWMutexImp.cxx:42. #12 0x00007f1337276797 in ROOT::TVirtualRWMutex::Lock (this=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/base/inc/TVirtualRWMutex.h:79. #13 0x00007f1332b7a3c8 in TLockGuard::TLockGuard (this=0x7fffa6ac5868, mutex=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/base/inc/TVirtualMutex.h:80. #14 0x00007f1332a80aa6 in TCling::AutoParse (this=0x56290befde40, cls=0x7fffa6ac5d40 ""_facade""). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:6452. #15 0x00007f1332a6667d in TCling__AutoParseCallback (className=0x7fffa6ac5d40 ""_facade""). ```. Thread 21:. ```. #0 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #1 0x00007f1332c44ab1 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #2 0x00007f1332c451a3 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #3 0x00007f1332c45b1a in cling::Interpreter::evaluate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:10180,energy efficiency,alloc,allocator,10180,"Mutex.h:79. #13 0x00007f1332b7a3c8 in TLockGuard::TLockGuard (this=0x7fffa6ac5868, mutex=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/base/inc/TVirtualMutex.h:80. #14 0x00007f1332a80aa6 in TCling::AutoParse (this=0x56290befde40, cls=0x7fffa6ac5d40 ""_facade""). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:6452. #15 0x00007f1332a6667d in TCling__AutoParseCallback (className=0x7fffa6ac5d40 ""_facade""). ```. Thread 21:. ```. #0 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #1 0x00007f1332c44ab1 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #2 0x00007f1332c451a3 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #3 0x00007f1332c45b1a in cling::Interpreter::evaluate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value&) () from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #4 0x00007f1332a74e9d in TCling::Calc (this=0x56290befde40, . line=0x7f12fa0f8290 ""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., error=0x7f131ad40bdc). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:3556. #5 0x00007f132bf6da60 in operator() (__closure=0x7f131ad40bc0, . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:10494,energy efficiency,alloc,allocator,10494,"tproject/rootsrc/core/metacling/src/TCling.cxx:6452. #15 0x00007f1332a6667d in TCling__AutoParseCallback (className=0x7fffa6ac5d40 ""_facade""). ```. Thread 21:. ```. #0 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #1 0x00007f1332c44ab1 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #2 0x00007f1332c451a3 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #3 0x00007f1332c45b1a in cling::Interpreter::evaluate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value&) () from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #4 0x00007f1332a74e9d in TCling::Calc (this=0x56290befde40, . line=0x7f12fa0f8290 ""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., error=0x7f131ad40bdc). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:3556. #5 0x00007f132bf6da60 in operator() (__closure=0x7f131ad40bc0, . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildActio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:10988,energy efficiency,core,core,10988,"grams/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #2 0x00007f1332c451a3 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #3 0x00007f1332c45b1a in cling::Interpreter::evaluate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value&) () from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #4 0x00007f1332a74e9d in TCling::Calc (this=0x56290befde40, . line=0x7f12fa0f8290 ""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., error=0x7f131ad40bdc). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:3556. #5 0x00007f132bf6da60 in operator() (__closure=0x7f131ad40bc0, . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements tha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:244,integrability,servic,services,244,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1349,integrability,event,event,1349,"rdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The proc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1399,integrability,state,state,1399,"/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuild",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1462,integrability,wrap,wrapper,1462,"serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1935,integrability,state,statements,1935,"mes', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:11976,integrability,state,statements,11976,"ootsrc/core/metacling/src/TCling.cxx:3556. #5 0x00007f132bf6da60 in operator() (__closure=0x7f131ad40bc0, . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkCon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12067,integrability,state,statements-for-DistRDF-Cling-failure,12067,", . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, spar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12171,integrability,state,statements-for-DistRDF-Cling-failure,12171,"nterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test fil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:13099,integrability,Sub,Submit,13099,"e.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for pro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:71,interoperability,distribut,distributed,71,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:132,interoperability,distribut,distributed,132,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:582,interoperability,distribut,distributed,582,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1462,interoperability,wrapper,wrapper,1462,"serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:3178,interoperability,distribut,distributed,3178,"otproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame . 1 Thread 0x7f1370756740 (LWP 34502) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f131020075c) at futex-internal.c:57. 2 Thread 0x7f135fbff640 (LWP 34504) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292760 <thread_status+224>) at futex-internal.c:57. 4 Thread 0x7f135ebfd640 (LWP 34506) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622927e0 <thread_status+352>) at futex-internal.c:57. 5 Thread 0x7f135e3fc640 (LWP 34507) ""python"" __futex_abstimed_wait_common64 (private=0, c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12306,interoperability,distribut,distributed,12306,"/home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12394,interoperability,Distribut,Distributed,12394,"007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12449,interoperability,Distribut,Distributed,12449,"(. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12510,interoperability,Distribut,Distributed,12510,":RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:13925,interoperability,prox,proxy,13925,"().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:13956,interoperability,prox,proxy,13956,"onn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=O",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14099,interoperability,prox,proxy,14099,"mit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14131,interoperability,prox,proxy,14131,"oncurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional con",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14877,interoperability,distribut,distributed,14877," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:244,modifiability,servic,services,244,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:0,performance,Error,Error,0,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:418,performance,error,error,418,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1184,performance,error,error,1184,"ality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1214,performance,time,time,1214,"this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1688,performance,error,error,1688,"n: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1705,performance,failur,failure,1705,"rgs: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1821,performance,error,error,1821,"33910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=316",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1874,performance,error,error,1874,"<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2047,performance,Failur,Failure,2047,"tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2147,performance,Failur,Failure,2147,"hrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2281,performance,Failur,Failure,2281,"he cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2786,performance,Failur,Failure,2786,"stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame . 1 Thread 0x7f1370756740 (LWP 34502) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f131020075c) at futex-internal.c:57. 2 Thread 0x7f135fbff640 (LWP 34504) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2827,performance,error,errorCode,2827,"rtunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame . 1 Thread 0x7f1370756740 (LWP 34502) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f131020075c) at futex-internal.c:57. 2 Thread 0x7f135fbff640 (LWP 34504) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:7246,performance,optimiz,optimized,7246," (private=0, cancel=true, abstime=0x0, op=393, expected=0, . --Type <RET> for more, q to quit, c to continue without paging--. futex_word=0x7f1362292d60 <thread_status+1760>) at futex-internal.c:57. 16 Thread 0x7f133ebf1640 (LWP 34518) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292de0 <thread_status+1888>) at futex-internal.c:57. 17 Thread 0x7f132aa21640 (LWP 34584) ""python"" __GI___libc_read (nbytes=4, buf=0x7f133827b950, fd=33) at ../sysdeps/unix/sysv/linux/read.c:26. 18 Thread 0x7f132a120640 (LWP 34585) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x7f132a11f330, op=137, . expected=0, futex_word=0x7f1370d85acc <_PyRuntime+428>) at futex-internal.c:57. 19 Thread 0x7f132991f640 (LWP 34586) ""python"" __GI___libc_read (nbytes=4, buf=0x7f13382bf140, fd=31) at ../sysdeps/unix/sysv/linux/read.c:26. 20 Thread 0x7f132911e640 (LWP 34587) ""python"" __futex_abstimed_wait_common64 (private=<optimized out>, cancel=true, abstime=0x0, op=393, . expected=0, futex_word=0x562911e622b0) at futex-internal.c:57. * 21 Thread 0x7f131ad44640 (LWP 34739) ""python"" 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. ```. The two most interesting ones are threads `1` and `21`:. Thread1. ```. #6 std::__condvar::wait (__m=..., this=<optimized out>). at /usr/src/debug/gcc-12.2.1-2.fc36.x86_64/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/std_mutex.h:155. #7 std::condition_variable::wait (this=<optimized out>, __lock=...) at ../../../../../libstdc++-v3/src/c++11/condition_variable.cc:41. #8 0x00007f133726f0aa in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex> > (this=0x7f1310200730, __lock=...). at /usr/include/c++/12/condition_variable:312. #9 0x00007f133726df05 in std::_V2::condition_variable_any::wait<std::uni",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:7720,performance,optimiz,optimized,7720,"ytes=4, buf=0x7f133827b950, fd=33) at ../sysdeps/unix/sysv/linux/read.c:26. 18 Thread 0x7f132a120640 (LWP 34585) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x7f132a11f330, op=137, . expected=0, futex_word=0x7f1370d85acc <_PyRuntime+428>) at futex-internal.c:57. 19 Thread 0x7f132991f640 (LWP 34586) ""python"" __GI___libc_read (nbytes=4, buf=0x7f13382bf140, fd=31) at ../sysdeps/unix/sysv/linux/read.c:26. 20 Thread 0x7f132911e640 (LWP 34587) ""python"" __futex_abstimed_wait_common64 (private=<optimized out>, cancel=true, abstime=0x0, op=393, . expected=0, futex_word=0x562911e622b0) at futex-internal.c:57. * 21 Thread 0x7f131ad44640 (LWP 34739) ""python"" 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. ```. The two most interesting ones are threads `1` and `21`:. Thread1. ```. #6 std::__condvar::wait (__m=..., this=<optimized out>). at /usr/src/debug/gcc-12.2.1-2.fc36.x86_64/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/std_mutex.h:155. #7 std::condition_variable::wait (this=<optimized out>, __lock=...) at ../../../../../libstdc++-v3/src/c++11/condition_variable.cc:41. #8 0x00007f133726f0aa in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex> > (this=0x7f1310200730, __lock=...). at /usr/include/c++/12/condition_variable:312. #9 0x00007f133726df05 in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex>, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}>(std::unique_lock<std::mutex>&, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}) (this=0x7f1310200730, __lock=..., __p=...) at /usr/include/c++/12/condition_variable:321. #10 0x00007f1337269c3e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f131",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:7907,performance,optimiz,optimized,7907,"x7f132a11f330, op=137, . expected=0, futex_word=0x7f1370d85acc <_PyRuntime+428>) at futex-internal.c:57. 19 Thread 0x7f132991f640 (LWP 34586) ""python"" __GI___libc_read (nbytes=4, buf=0x7f13382bf140, fd=31) at ../sysdeps/unix/sysv/linux/read.c:26. 20 Thread 0x7f132911e640 (LWP 34587) ""python"" __futex_abstimed_wait_common64 (private=<optimized out>, cancel=true, abstime=0x0, op=393, . expected=0, futex_word=0x562911e622b0) at futex-internal.c:57. * 21 Thread 0x7f131ad44640 (LWP 34739) ""python"" 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. ```. The two most interesting ones are threads `1` and `21`:. Thread1. ```. #6 std::__condvar::wait (__m=..., this=<optimized out>). at /usr/src/debug/gcc-12.2.1-2.fc36.x86_64/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/std_mutex.h:155. #7 std::condition_variable::wait (this=<optimized out>, __lock=...) at ../../../../../libstdc++-v3/src/c++11/condition_variable.cc:41. #8 0x00007f133726f0aa in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex> > (this=0x7f1310200730, __lock=...). at /usr/include/c++/12/condition_variable:312. #9 0x00007f133726df05 in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex>, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}>(std::unique_lock<std::mutex>&, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}) (this=0x7f1310200730, __lock=..., __p=...) at /usr/include/c++/12/condition_variable:321. #10 0x00007f1337269c3e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f13102006f8). at /home/vpadulan/programs/rootproject/rootsrc/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f1337277d74 in ROOT::TRWMutexImp<std::mutex, ROOT::Internal::RecurseCountsTBB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:9086,performance,Lock,Lock,9086,"mutex> > (this=0x7f1310200730, __lock=...). at /usr/include/c++/12/condition_variable:312. #9 0x00007f133726df05 in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex>, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}>(std::unique_lock<std::mutex>&, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}) (this=0x7f1310200730, __lock=..., __p=...) at /usr/include/c++/12/condition_variable:321. #10 0x00007f1337269c3e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f13102006f8). at /home/vpadulan/programs/rootproject/rootsrc/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f1337277d74 in ROOT::TRWMutexImp<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/thread/src/TRWMutexImp.cxx:42. #12 0x00007f1337276797 in ROOT::TVirtualRWMutex::Lock (this=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/base/inc/TVirtualRWMutex.h:79. #13 0x00007f1332b7a3c8 in TLockGuard::TLockGuard (this=0x7fffa6ac5868, mutex=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/base/inc/TVirtualMutex.h:80. #14 0x00007f1332a80aa6 in TCling::AutoParse (this=0x56290befde40, cls=0x7fffa6ac5d40 ""_facade""). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:6452. #15 0x00007f1332a6667d in TCling__AutoParseCallback (className=0x7fffa6ac5d40 ""_facade""). ```. Thread 21:. ```. #0 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #1 0x00007f1332c44ab1 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #2 0x00007f1332c451a3 in cling::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:10918,performance,error,error,10918,"lang::FunctionDecl const*, cling::Value*) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #2 0x00007f1332c451a3 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #3 0x00007f1332c45b1a in cling::Interpreter::evaluate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value&) () from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #4 0x00007f1332a74e9d in TCling::Calc (this=0x56290befde40, . line=0x7f12fa0f8290 ""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., error=0x7f131ad40bdc). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:3556. #5 0x00007f132bf6da60 in operator() (__closure=0x7f131ad40bc0, . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more detai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:11756,performance,content,contention,11756,"::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., error=0x7f131ad40bdc). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:3556. #5 0x00007f132bf6da60 in operator() (__closure=0x7f131ad40bc0, . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12096,performance,failur,failure,12096,"ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". S",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12200,performance,failur,failure,12200,"td::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12838,performance,memor,memory,12838,"ment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark +",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:13133,performance,concurren,concurrently,13133,"t/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:15244,performance,time,time,15244," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:193,reliability,fail,fails,193,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:621,reliability,Fail,Failed,621,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1705,reliability,fail,failure,1705,"rgs: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2047,reliability,Fail,Failure,2047,"tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2147,reliability,Fail,Failure,2147,"hrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2281,reliability,Fail,Failure,2281,"he cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2786,reliability,Fail,Failure,2786,"stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame . 1 Thread 0x7f1370756740 (LWP 34502) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f131020075c) at futex-internal.c:57. 2 Thread 0x7f135fbff640 (LWP 34504) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12096,reliability,fail,failure,12096,"ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". S",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12200,reliability,fail,failure,12200,"td::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14490,reliability,fail,fails,14490," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14682,reliability,fail,fails,14682," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:0,safety,Error,Error,0,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:87,safety,test,test,87,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:155,safety,test,test,155,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:309,safety,test,testReport,309,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:418,safety,error,error,418,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:524,safety,log,log,524,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1110,safety,Except,Exception,1110,"m. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1140,safety,except,exception,1140,"DataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1184,safety,error,error,1184,"ality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1688,safety,error,error,1688,"n: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1821,safety,error,error,1821,"33910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=316",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1853,safety,compl,completely,1853,"eRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1874,safety,error,error,1874,"<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2017,safety,patch,patch,2017,"tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2827,safety,error,errorCode,2827,"rtunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame . 1 Thread 0x7f1370756740 (LWP 34502) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f131020075c) at futex-internal.c:57. 2 Thread 0x7f135fbff640 (LWP 34504) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:10918,safety,error,error,10918,"lang::FunctionDecl const*, cling::Value*) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #2 0x00007f1332c451a3 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #3 0x00007f1332c45b1a in cling::Interpreter::evaluate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value&) () from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #4 0x00007f1332a74e9d in TCling::Calc (this=0x56290befde40, . line=0x7f12fa0f8290 ""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., error=0x7f131ad40bdc). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:3556. #5 0x00007f132bf6da60 in operator() (__closure=0x7f131ad40bc0, . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more detai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:11957,safety,patch,patch,11957,"rograms/rootproject/rootsrc/core/metacling/src/TCling.cxx:3556. #5 0x00007f132bf6da60 in operator() (__closure=0x7f131ad40bc0, . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkco",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12256,safety,test,test,12256,"be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:13181,safety,test,test,13181,"or-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14519,safety,test,test,14519," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14583,safety,test,test,14583," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14622,safety,test,test,14622," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14669,safety,test,test,14669," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:524,security,log,log,524,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1853,security,compl,completely,1853,"eRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2017,security,patch,patch,2017,"tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:9086,security,Lock,Lock,9086,"mutex> > (this=0x7f1310200730, __lock=...). at /usr/include/c++/12/condition_variable:312. #9 0x00007f133726df05 in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex>, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}>(std::unique_lock<std::mutex>&, ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock()::{lambda()#1}) (this=0x7f1310200730, __lock=..., __p=...) at /usr/include/c++/12/condition_variable:321. #10 0x00007f1337269c3e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f13102006f8). at /home/vpadulan/programs/rootproject/rootsrc/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f1337277d74 in ROOT::TRWMutexImp<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::WriteLock (this=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/thread/src/TRWMutexImp.cxx:42. #12 0x00007f1337276797 in ROOT::TVirtualRWMutex::Lock (this=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/base/inc/TVirtualRWMutex.h:79. #13 0x00007f1332b7a3c8 in TLockGuard::TLockGuard (this=0x7fffa6ac5868, mutex=0x7f13102006f0). at /home/vpadulan/programs/rootproject/rootsrc/core/base/inc/TVirtualMutex.h:80. #14 0x00007f1332a80aa6 in TCling::AutoParse (this=0x56290befde40, cls=0x7fffa6ac5d40 ""_facade""). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:6452. #15 0x00007f1332a6667d in TCling__AutoParseCallback (className=0x7fffa6ac5d40 ""_facade""). ```. Thread 21:. ```. #0 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #1 0x00007f1332c44ab1 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #2 0x00007f1332c451a3 in cling::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:11957,security,patch,patch,11957,"rograms/rootproject/rootsrc/core/metacling/src/TCling.cxx:3556. #5 0x00007f132bf6da60 in operator() (__closure=0x7f131ad40bc0, . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkco",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:87,testability,test,test,87,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:155,testability,test,test,155,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:309,testability,test,testReport,309,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:524,testability,log,log,524,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:11672,testability,context,context,11672,"90befde40, . line=0x7f12fa0f8290 ""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., error=0x7f131ad40bdc). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:3556. #5 0x00007f132bf6da60 in operator() (__closure=0x7f131ad40bc0, . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connecti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12256,testability,test,test,12256,"be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:13181,testability,test,test,13181,"or-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:13949,testability,assert,assert,13949," sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dmi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14157,testability,assert,assert,14157,"ask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively ass",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14194,testability,assert,assert,14194,"ocessing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vg",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14233,testability,assert,assert,14233," = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14519,testability,test,test,14519," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14583,testability,test,test,14583," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14622,testability,test,test,14622," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:14669,testability,test,test,14669," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:15131,testability,context,context,15131," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:15252,testability,understand,understanding,15252," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:15309,testability,simpl,simpler,15309," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:0,usability,Error,Error,0,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:418,usability,error,error,418,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:433,usability,user,user,433,"Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution; # The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1184,usability,error,error,1184,"ality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1275,usability,indicat,indicate,1275,"oot-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```. 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed. Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f. Function: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1688,usability,error,error,1688,"n: execute_task. args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1821,usability,error,error,1821,"33910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=316",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:1874,usability,error,error,1874,"<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))). kwargs: {}. Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')"". ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2827,usability,error,errorCode,2827,"rtunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame . 1 Thread 0x7f1370756740 (LWP 34502) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f131020075c) at futex-internal.c:57. 2 Thread 0x7f135fbff640 (LWP 34504) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:2936,usability,stop,stop,2936,"tements here and there, we can get to see some more details of this issue (the patch will be attached). ```. Failure in cling::IncrementalExecutor::jitInitOrWrapper: PID=31643,funcname=_Z16__cling_Un1Qu340Pv. Failure at /home/vpadulan/programs/rootproject/rootsrc/interpreter/cling/lib/Interpreter/Interpreter.cpp:1438 with ExecutionResult=3. Failure in Interpreter::EvaluateInternal: PID=31643,evalres=1. The process was evaluating: ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame . 1 Thread 0x7f1370756740 (LWP 34502) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f131020075c) at futex-internal.c:57. 2 Thread 0x7f135fbff640 (LWP 34504) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292760 <thread_status+224>) at futex-internal.c:57. 4 Thread 0x7f135ebfd640 (LWP 34506) ""python"" __fut",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:3376,usability,cancel,cancel,3376,"nternal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f0cc988e7d0), new const char*[1]{""b1""}, 1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame . 1 Thread 0x7f1370756740 (LWP 34502) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f131020075c) at futex-internal.c:57. 2 Thread 0x7f135fbff640 (LWP 34504) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292760 <thread_status+224>) at futex-internal.c:57. 4 Thread 0x7f135ebfd640 (LWP 34506) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622927e0 <thread_status+352>) at futex-internal.c:57. 5 Thread 0x7f135e3fc640 (LWP 34507) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292860 <thread_status+480>) at futex-internal.c:57. 6 Thread 0x7f1357bfb640 (LWP 34508) ""python"" __futex_abstimed_wait_common64 (",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:3563,usability,cancel,cancel,3563,"1, 1, reinterpret_cast<shared_ptr<TH1D>*>(0x7f0cd043c1f0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x7f0cc94b3830), reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x7f0cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame . 1 Thread 0x7f1370756740 (LWP 34502) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f131020075c) at futex-internal.c:57. 2 Thread 0x7f135fbff640 (LWP 34504) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292760 <thread_status+224>) at futex-internal.c:57. 4 Thread 0x7f135ebfd640 (LWP 34506) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622927e0 <thread_status+352>) at futex-internal.c:57. 5 Thread 0x7f135e3fc640 (LWP 34507) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292860 <thread_status+480>) at futex-internal.c:57. 6 Thread 0x7f1357bfb640 (LWP 34508) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622928e0 <thread_status+608>) at futex-internal.c:57. 7 Thread 0x7f13573fa640 (LWP 34509) ""python"" __futex_abst",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:3769,usability,cancel,cancel,3769,"cc29a41b0));. Failure in gInterpreter->Calc: PID=31643,errorCode=1. ```. Adding these two lines in `cling::IncrementalExecutor::jitInitOrWrapper` provides a way to stop the execution when the offending code is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame . 1 Thread 0x7f1370756740 (LWP 34502) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f131020075c) at futex-internal.c:57. 2 Thread 0x7f135fbff640 (LWP 34504) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292760 <thread_status+224>) at futex-internal.c:57. 4 Thread 0x7f135ebfd640 (LWP 34506) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622927e0 <thread_status+352>) at futex-internal.c:57. 5 Thread 0x7f135e3fc640 (LWP 34507) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292860 <thread_status+480>) at futex-internal.c:57. 6 Thread 0x7f1357bfb640 (LWP 34508) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622928e0 <thread_status+608>) at futex-internal.c:57. 7 Thread 0x7f13573fa640 (LWP 34509) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292960 <thread_status+736>) at futex-internal.c:57. 8 Thread 0x7f1356bf9640 (LWP 34510) ""python"" __futex_abs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:3976,usability,cancel,cancel,3976,"is triggered, so that we can step in with `gdb -p PID_OF_FAILING_DISTRDF_TASK`:. ```. volatile int a = 0;. while (a == 0) {}. ```. It shows that there are many threads in flight (`21`!), even if the distributed task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame . 1 Thread 0x7f1370756740 (LWP 34502) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f131020075c) at futex-internal.c:57. 2 Thread 0x7f135fbff640 (LWP 34504) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292760 <thread_status+224>) at futex-internal.c:57. 4 Thread 0x7f135ebfd640 (LWP 34506) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622927e0 <thread_status+352>) at futex-internal.c:57. 5 Thread 0x7f135e3fc640 (LWP 34507) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292860 <thread_status+480>) at futex-internal.c:57. 6 Thread 0x7f1357bfb640 (LWP 34508) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622928e0 <thread_status+608>) at futex-internal.c:57. 7 Thread 0x7f13573fa640 (LWP 34509) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292960 <thread_status+736>) at futex-internal.c:57. 8 Thread 0x7f1356bf9640 (LWP 34510) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622929e0 <thread_status+864>) at futex-internal.c:57. 9 Thread 0x7f13503f8640 (LWP 34511) ""python"" __futex_abs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:4183,usability,cancel,cancel,4183,"ted task from the RDF point of view runs sequentially:. ```. (gdb) info threads. Id Target Id Frame . 1 Thread 0x7f1370756740 (LWP 34502) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f131020075c) at futex-internal.c:57. 2 Thread 0x7f135fbff640 (LWP 34504) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292760 <thread_status+224>) at futex-internal.c:57. 4 Thread 0x7f135ebfd640 (LWP 34506) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622927e0 <thread_status+352>) at futex-internal.c:57. 5 Thread 0x7f135e3fc640 (LWP 34507) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292860 <thread_status+480>) at futex-internal.c:57. 6 Thread 0x7f1357bfb640 (LWP 34508) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622928e0 <thread_status+608>) at futex-internal.c:57. 7 Thread 0x7f13573fa640 (LWP 34509) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292960 <thread_status+736>) at futex-internal.c:57. 8 Thread 0x7f1356bf9640 (LWP 34510) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622929e0 <thread_status+864>) at futex-internal.c:57. 9 Thread 0x7f13503f8640 (LWP 34511) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292a60 <thread_status+992>) at futex-internal.c:57. 10 Thread 0x7f134dbf7640 (LWP 34512) ""python"" __futex_ab",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:4390,usability,cancel,cancel,4390,"ime=0x0, op=393, expected=0, . futex_word=0x7f131020075c) at futex-internal.c:57. 2 Thread 0x7f135fbff640 (LWP 34504) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292760 <thread_status+224>) at futex-internal.c:57. 4 Thread 0x7f135ebfd640 (LWP 34506) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622927e0 <thread_status+352>) at futex-internal.c:57. 5 Thread 0x7f135e3fc640 (LWP 34507) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292860 <thread_status+480>) at futex-internal.c:57. 6 Thread 0x7f1357bfb640 (LWP 34508) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622928e0 <thread_status+608>) at futex-internal.c:57. 7 Thread 0x7f13573fa640 (LWP 34509) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292960 <thread_status+736>) at futex-internal.c:57. 8 Thread 0x7f1356bf9640 (LWP 34510) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622929e0 <thread_status+864>) at futex-internal.c:57. 9 Thread 0x7f13503f8640 (LWP 34511) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292a60 <thread_status+992>) at futex-internal.c:57. 10 Thread 0x7f134dbf7640 (LWP 34512) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ae0 <thread_status+1120>) at futex-internal.c:57. 11 Thread 0x7f134b3f6640 (LWP 34513) ""python"" __futex_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:4597,usability,cancel,cancel,4597,"ected=0, . futex_word=0x7f13622926e0 <thread_status+96>) at futex-internal.c:57. 3 Thread 0x7f135f3fe640 (LWP 34505) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292760 <thread_status+224>) at futex-internal.c:57. 4 Thread 0x7f135ebfd640 (LWP 34506) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622927e0 <thread_status+352>) at futex-internal.c:57. 5 Thread 0x7f135e3fc640 (LWP 34507) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292860 <thread_status+480>) at futex-internal.c:57. 6 Thread 0x7f1357bfb640 (LWP 34508) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622928e0 <thread_status+608>) at futex-internal.c:57. 7 Thread 0x7f13573fa640 (LWP 34509) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292960 <thread_status+736>) at futex-internal.c:57. 8 Thread 0x7f1356bf9640 (LWP 34510) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622929e0 <thread_status+864>) at futex-internal.c:57. 9 Thread 0x7f13503f8640 (LWP 34511) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292a60 <thread_status+992>) at futex-internal.c:57. 10 Thread 0x7f134dbf7640 (LWP 34512) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ae0 <thread_status+1120>) at futex-internal.c:57. 11 Thread 0x7f134b3f6640 (LWP 34513) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292b60 <thread_status+1248>) at futex-internal.c:57. 12 Thread 0x7f134abf5640 (LWP 34514) ""python"" __fute",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:4804,usability,cancel,cancel,4804,"cted=0, . futex_word=0x7f1362292760 <thread_status+224>) at futex-internal.c:57. 4 Thread 0x7f135ebfd640 (LWP 34506) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622927e0 <thread_status+352>) at futex-internal.c:57. 5 Thread 0x7f135e3fc640 (LWP 34507) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292860 <thread_status+480>) at futex-internal.c:57. 6 Thread 0x7f1357bfb640 (LWP 34508) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622928e0 <thread_status+608>) at futex-internal.c:57. 7 Thread 0x7f13573fa640 (LWP 34509) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292960 <thread_status+736>) at futex-internal.c:57. 8 Thread 0x7f1356bf9640 (LWP 34510) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622929e0 <thread_status+864>) at futex-internal.c:57. 9 Thread 0x7f13503f8640 (LWP 34511) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292a60 <thread_status+992>) at futex-internal.c:57. 10 Thread 0x7f134dbf7640 (LWP 34512) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ae0 <thread_status+1120>) at futex-internal.c:57. 11 Thread 0x7f134b3f6640 (LWP 34513) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292b60 <thread_status+1248>) at futex-internal.c:57. 12 Thread 0x7f134abf5640 (LWP 34514) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292be0 <thread_status+1376>) at futex-internal.c:57. 13 Thread 0x7f13483f4640 (LWP 34515) ""python"" __fu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:5011,usability,cancel,cancel,5011,"cted=0, . futex_word=0x7f13622927e0 <thread_status+352>) at futex-internal.c:57. 5 Thread 0x7f135e3fc640 (LWP 34507) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292860 <thread_status+480>) at futex-internal.c:57. 6 Thread 0x7f1357bfb640 (LWP 34508) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622928e0 <thread_status+608>) at futex-internal.c:57. 7 Thread 0x7f13573fa640 (LWP 34509) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292960 <thread_status+736>) at futex-internal.c:57. 8 Thread 0x7f1356bf9640 (LWP 34510) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622929e0 <thread_status+864>) at futex-internal.c:57. 9 Thread 0x7f13503f8640 (LWP 34511) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292a60 <thread_status+992>) at futex-internal.c:57. 10 Thread 0x7f134dbf7640 (LWP 34512) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ae0 <thread_status+1120>) at futex-internal.c:57. 11 Thread 0x7f134b3f6640 (LWP 34513) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292b60 <thread_status+1248>) at futex-internal.c:57. 12 Thread 0x7f134abf5640 (LWP 34514) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292be0 <thread_status+1376>) at futex-internal.c:57. 13 Thread 0x7f13483f4640 (LWP 34515) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292c60 <thread_status+1504>) at futex-internal.c:57. 14 Thread 0x7f1343bf3640 (LWP 34516) ""python"" __",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:5219,usability,cancel,cancel,5219,"ted=0, . futex_word=0x7f1362292860 <thread_status+480>) at futex-internal.c:57. 6 Thread 0x7f1357bfb640 (LWP 34508) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622928e0 <thread_status+608>) at futex-internal.c:57. 7 Thread 0x7f13573fa640 (LWP 34509) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292960 <thread_status+736>) at futex-internal.c:57. 8 Thread 0x7f1356bf9640 (LWP 34510) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622929e0 <thread_status+864>) at futex-internal.c:57. 9 Thread 0x7f13503f8640 (LWP 34511) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292a60 <thread_status+992>) at futex-internal.c:57. 10 Thread 0x7f134dbf7640 (LWP 34512) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ae0 <thread_status+1120>) at futex-internal.c:57. 11 Thread 0x7f134b3f6640 (LWP 34513) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292b60 <thread_status+1248>) at futex-internal.c:57. 12 Thread 0x7f134abf5640 (LWP 34514) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292be0 <thread_status+1376>) at futex-internal.c:57. 13 Thread 0x7f13483f4640 (LWP 34515) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292c60 <thread_status+1504>) at futex-internal.c:57. 14 Thread 0x7f1343bf3640 (LWP 34516) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ce0 <thread_status+1632>) at futex-internal.c:57. 15 Thread 0x7f13433f2640 (LWP 34517) ""python"" _",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:5428,usability,cancel,cancel,5428,"d=0, . futex_word=0x7f13622928e0 <thread_status+608>) at futex-internal.c:57. 7 Thread 0x7f13573fa640 (LWP 34509) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292960 <thread_status+736>) at futex-internal.c:57. 8 Thread 0x7f1356bf9640 (LWP 34510) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622929e0 <thread_status+864>) at futex-internal.c:57. 9 Thread 0x7f13503f8640 (LWP 34511) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292a60 <thread_status+992>) at futex-internal.c:57. 10 Thread 0x7f134dbf7640 (LWP 34512) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ae0 <thread_status+1120>) at futex-internal.c:57. 11 Thread 0x7f134b3f6640 (LWP 34513) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292b60 <thread_status+1248>) at futex-internal.c:57. 12 Thread 0x7f134abf5640 (LWP 34514) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292be0 <thread_status+1376>) at futex-internal.c:57. 13 Thread 0x7f13483f4640 (LWP 34515) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292c60 <thread_status+1504>) at futex-internal.c:57. 14 Thread 0x7f1343bf3640 (LWP 34516) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ce0 <thread_status+1632>) at futex-internal.c:57. 15 Thread 0x7f13433f2640 (LWP 34517) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . --Type <RET> for more, q to quit, c to continue without paging--. futex_word=0x7f1362292d60 <thread_status+1760>) at fu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:5637,usability,cancel,cancel,5637,"0, . futex_word=0x7f1362292960 <thread_status+736>) at futex-internal.c:57. 8 Thread 0x7f1356bf9640 (LWP 34510) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f13622929e0 <thread_status+864>) at futex-internal.c:57. 9 Thread 0x7f13503f8640 (LWP 34511) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292a60 <thread_status+992>) at futex-internal.c:57. 10 Thread 0x7f134dbf7640 (LWP 34512) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ae0 <thread_status+1120>) at futex-internal.c:57. 11 Thread 0x7f134b3f6640 (LWP 34513) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292b60 <thread_status+1248>) at futex-internal.c:57. 12 Thread 0x7f134abf5640 (LWP 34514) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292be0 <thread_status+1376>) at futex-internal.c:57. 13 Thread 0x7f13483f4640 (LWP 34515) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292c60 <thread_status+1504>) at futex-internal.c:57. 14 Thread 0x7f1343bf3640 (LWP 34516) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ce0 <thread_status+1632>) at futex-internal.c:57. 15 Thread 0x7f13433f2640 (LWP 34517) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . --Type <RET> for more, q to quit, c to continue without paging--. futex_word=0x7f1362292d60 <thread_status+1760>) at futex-internal.c:57. 16 Thread 0x7f133ebf1640 (LWP 34518) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292de0 <thread_status+1888>) at fu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:5846,usability,cancel,cancel,5846," . futex_word=0x7f13622929e0 <thread_status+864>) at futex-internal.c:57. 9 Thread 0x7f13503f8640 (LWP 34511) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292a60 <thread_status+992>) at futex-internal.c:57. 10 Thread 0x7f134dbf7640 (LWP 34512) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ae0 <thread_status+1120>) at futex-internal.c:57. 11 Thread 0x7f134b3f6640 (LWP 34513) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292b60 <thread_status+1248>) at futex-internal.c:57. 12 Thread 0x7f134abf5640 (LWP 34514) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292be0 <thread_status+1376>) at futex-internal.c:57. 13 Thread 0x7f13483f4640 (LWP 34515) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292c60 <thread_status+1504>) at futex-internal.c:57. 14 Thread 0x7f1343bf3640 (LWP 34516) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ce0 <thread_status+1632>) at futex-internal.c:57. 15 Thread 0x7f13433f2640 (LWP 34517) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . --Type <RET> for more, q to quit, c to continue without paging--. futex_word=0x7f1362292d60 <thread_status+1760>) at futex-internal.c:57. 16 Thread 0x7f133ebf1640 (LWP 34518) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292de0 <thread_status+1888>) at futex-internal.c:57. 17 Thread 0x7f132aa21640 (LWP 34584) ""python"" __GI___libc_read (nbytes=4, buf=0x7f133827b950, fd=33) at ../sysdeps/unix/sysv/linux/read.c:26. 18 Thread 0x7f132a120640 (LWP 34585) ""python"" __",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:6055,usability,cancel,cancel,6055," futex_word=0x7f1362292a60 <thread_status+992>) at futex-internal.c:57. 10 Thread 0x7f134dbf7640 (LWP 34512) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ae0 <thread_status+1120>) at futex-internal.c:57. 11 Thread 0x7f134b3f6640 (LWP 34513) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292b60 <thread_status+1248>) at futex-internal.c:57. 12 Thread 0x7f134abf5640 (LWP 34514) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292be0 <thread_status+1376>) at futex-internal.c:57. 13 Thread 0x7f13483f4640 (LWP 34515) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292c60 <thread_status+1504>) at futex-internal.c:57. 14 Thread 0x7f1343bf3640 (LWP 34516) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ce0 <thread_status+1632>) at futex-internal.c:57. 15 Thread 0x7f13433f2640 (LWP 34517) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . --Type <RET> for more, q to quit, c to continue without paging--. futex_word=0x7f1362292d60 <thread_status+1760>) at futex-internal.c:57. 16 Thread 0x7f133ebf1640 (LWP 34518) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292de0 <thread_status+1888>) at futex-internal.c:57. 17 Thread 0x7f132aa21640 (LWP 34584) ""python"" __GI___libc_read (nbytes=4, buf=0x7f133827b950, fd=33) at ../sysdeps/unix/sysv/linux/read.c:26. 18 Thread 0x7f132a120640 (LWP 34585) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x7f132a11f330, op=137, . expected=0, futex_word=0x7f1370d85acc <_PyRuntime+428>) at futex-internal.c:57. 19 Thread 0x7f132991f640 (LWP 34586) ""pyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:6264,usability,cancel,cancel,6264,"futex_word=0x7f1362292ae0 <thread_status+1120>) at futex-internal.c:57. 11 Thread 0x7f134b3f6640 (LWP 34513) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292b60 <thread_status+1248>) at futex-internal.c:57. 12 Thread 0x7f134abf5640 (LWP 34514) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292be0 <thread_status+1376>) at futex-internal.c:57. 13 Thread 0x7f13483f4640 (LWP 34515) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292c60 <thread_status+1504>) at futex-internal.c:57. 14 Thread 0x7f1343bf3640 (LWP 34516) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ce0 <thread_status+1632>) at futex-internal.c:57. 15 Thread 0x7f13433f2640 (LWP 34517) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . --Type <RET> for more, q to quit, c to continue without paging--. futex_word=0x7f1362292d60 <thread_status+1760>) at futex-internal.c:57. 16 Thread 0x7f133ebf1640 (LWP 34518) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292de0 <thread_status+1888>) at futex-internal.c:57. 17 Thread 0x7f132aa21640 (LWP 34584) ""python"" __GI___libc_read (nbytes=4, buf=0x7f133827b950, fd=33) at ../sysdeps/unix/sysv/linux/read.c:26. 18 Thread 0x7f132a120640 (LWP 34585) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x7f132a11f330, op=137, . expected=0, futex_word=0x7f1370d85acc <_PyRuntime+428>) at futex-internal.c:57. 19 Thread 0x7f132991f640 (LWP 34586) ""python"" __GI___libc_read (nbytes=4, buf=0x7f13382bf140, fd=31) at ../sysdeps/unix/sysv/linux/read.c:26. 20 Thread 0x7f132911e640 (LWP 34587) ""python"" __futex_abstimed_wait_common64 (private=<optimized out>, cance",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:6539,usability,cancel,cancel,6539,"c:57. 12 Thread 0x7f134abf5640 (LWP 34514) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292be0 <thread_status+1376>) at futex-internal.c:57. 13 Thread 0x7f13483f4640 (LWP 34515) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292c60 <thread_status+1504>) at futex-internal.c:57. 14 Thread 0x7f1343bf3640 (LWP 34516) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ce0 <thread_status+1632>) at futex-internal.c:57. 15 Thread 0x7f13433f2640 (LWP 34517) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . --Type <RET> for more, q to quit, c to continue without paging--. futex_word=0x7f1362292d60 <thread_status+1760>) at futex-internal.c:57. 16 Thread 0x7f133ebf1640 (LWP 34518) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292de0 <thread_status+1888>) at futex-internal.c:57. 17 Thread 0x7f132aa21640 (LWP 34584) ""python"" __GI___libc_read (nbytes=4, buf=0x7f133827b950, fd=33) at ../sysdeps/unix/sysv/linux/read.c:26. 18 Thread 0x7f132a120640 (LWP 34585) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x7f132a11f330, op=137, . expected=0, futex_word=0x7f1370d85acc <_PyRuntime+428>) at futex-internal.c:57. 19 Thread 0x7f132991f640 (LWP 34586) ""python"" __GI___libc_read (nbytes=4, buf=0x7f13382bf140, fd=31) at ../sysdeps/unix/sysv/linux/read.c:26. 20 Thread 0x7f132911e640 (LWP 34587) ""python"" __futex_abstimed_wait_common64 (private=<optimized out>, cancel=true, abstime=0x0, op=393, . expected=0, futex_word=0x562911e622b0) at futex-internal.c:57. * 21 Thread 0x7f131ad44640 (LWP 34739) ""python"" 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/vpadulan/program",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:6890,usability,cancel,cancel,6890," futex_word=0x7f1362292c60 <thread_status+1504>) at futex-internal.c:57. 14 Thread 0x7f1343bf3640 (LWP 34516) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292ce0 <thread_status+1632>) at futex-internal.c:57. 15 Thread 0x7f13433f2640 (LWP 34517) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . --Type <RET> for more, q to quit, c to continue without paging--. futex_word=0x7f1362292d60 <thread_status+1760>) at futex-internal.c:57. 16 Thread 0x7f133ebf1640 (LWP 34518) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292de0 <thread_status+1888>) at futex-internal.c:57. 17 Thread 0x7f132aa21640 (LWP 34584) ""python"" __GI___libc_read (nbytes=4, buf=0x7f133827b950, fd=33) at ../sysdeps/unix/sysv/linux/read.c:26. 18 Thread 0x7f132a120640 (LWP 34585) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x7f132a11f330, op=137, . expected=0, futex_word=0x7f1370d85acc <_PyRuntime+428>) at futex-internal.c:57. 19 Thread 0x7f132991f640 (LWP 34586) ""python"" __GI___libc_read (nbytes=4, buf=0x7f13382bf140, fd=31) at ../sysdeps/unix/sysv/linux/read.c:26. 20 Thread 0x7f132911e640 (LWP 34587) ""python"" __futex_abstimed_wait_common64 (private=<optimized out>, cancel=true, abstime=0x0, op=393, . expected=0, futex_word=0x562911e622b0) at futex-internal.c:57. * 21 Thread 0x7f131ad44640 (LWP 34739) ""python"" 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. ```. The two most interesting ones are threads `1` and `21`:. Thread1. ```. #6 std::__condvar::wait (__m=..., this=<optimized out>). at /usr/src/debug/gcc-12.2.1-2.fc36.x86_64/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/std_mutex.h:155. #7 std::condition_variable",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:7262,usability,cancel,cancel,7262,"ancel=true, abstime=0x0, op=393, expected=0, . --Type <RET> for more, q to quit, c to continue without paging--. futex_word=0x7f1362292d60 <thread_status+1760>) at futex-internal.c:57. 16 Thread 0x7f133ebf1640 (LWP 34518) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, . futex_word=0x7f1362292de0 <thread_status+1888>) at futex-internal.c:57. 17 Thread 0x7f132aa21640 (LWP 34584) ""python"" __GI___libc_read (nbytes=4, buf=0x7f133827b950, fd=33) at ../sysdeps/unix/sysv/linux/read.c:26. 18 Thread 0x7f132a120640 (LWP 34585) ""python"" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x7f132a11f330, op=137, . expected=0, futex_word=0x7f1370d85acc <_PyRuntime+428>) at futex-internal.c:57. 19 Thread 0x7f132991f640 (LWP 34586) ""python"" __GI___libc_read (nbytes=4, buf=0x7f13382bf140, fd=31) at ../sysdeps/unix/sysv/linux/read.c:26. 20 Thread 0x7f132911e640 (LWP 34587) ""python"" __futex_abstimed_wait_common64 (private=<optimized out>, cancel=true, abstime=0x0, op=393, . expected=0, futex_word=0x562911e622b0) at futex-internal.c:57. * 21 Thread 0x7f131ad44640 (LWP 34739) ""python"" 0x00007f1332cbafdc in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. ```. The two most interesting ones are threads `1` and `21`:. Thread1. ```. #6 std::__condvar::wait (__m=..., this=<optimized out>). at /usr/src/debug/gcc-12.2.1-2.fc36.x86_64/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/std_mutex.h:155. #7 std::condition_variable::wait (this=<optimized out>, __lock=...) at ../../../../../libstdc++-v3/src/c++11/condition_variable.cc:41. #8 0x00007f133726f0aa in std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex> > (this=0x7f1310200730, __lock=...). at /usr/include/c++/12/condition_variable:312. #9 0x00007f133726df05 in std::_V2::condition_variable_any::wait<std::unique_lock<std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:10918,usability,error,error,10918,"lang::FunctionDecl const*, cling::Value*) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #2 0x00007f1332c451a3 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (). from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #3 0x00007f1332c45b1a in cling::Interpreter::evaluate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value&) () from /home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/libCling.so. #4 0x00007f1332a74e9d in TCling::Calc (this=0x56290befde40, . line=0x7f12fa0f8290 ""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., error=0x7f131ad40bdc). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:3556. #5 0x00007f132bf6da60 in operator() (__closure=0x7f131ad40bc0, . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more detai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:11733,usability,hint,hints,11733,"uildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., error=0x7f131ad40bdc). at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:3556. #5 0x00007f132bf6da60 in operator() (__closure=0x7f131ad40bc0, . codeSlice=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...). at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340. #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (. code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""). ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:12838,usability,memor,memory,12838,"ment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):. [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test. ```py. import os. import pyspark. from dask.distributed import Client, LocalCluster. import ROOT. RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():. daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}. sparkconf = pyspark.SparkConf().setAll(conf.items()). sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):. """""". Submit three different RDF graphs concurrently to Spark and Dask. """""". # Create a test file for processing. treename = ""myTree"". filename = ""2clusters.root"". nentries = 10000. opts = ROOT.RDF.RSnapshotOptions(). opts.fAutoFlush = 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark +",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:15290,usability,help,help,15290," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/issues/11515:15309,usability,simpl,simpler,15309," 5000. ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\. .Define(""b2"", ""42"")\. .Define(""b3"", ""42"")\. .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [. SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies_dask = [. DaskDF(treename, filename, daskclient=daskconn, npartitions=2). .Histo1D((col, col, 1, 40, 45), col). for col in [""b1"", ""b2"", ""b3""]. ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None. for proxy in histoproxies:. assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the. # node objects. for proxy in histoproxies:. histo = proxy.proxied_node.value. assert isinstance(histo, ROOT.TH1D). assert histo.GetEntries() == nentries. assert histo.GetMean() == 42. os.remove(filename). def main():. test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":. raise SystemExit(main()). ```. And here is a bash script that runs the previous Python script in a loop until it fails. ```. counter=0. while test $? -eq 0. do . counter=$(($counter+1)). echo -e ""\nRunning test $counter\n"". CLING_DEBUG=1 python test.py. done. # Remove leftover file from the test when it fails. rm 2clusters.root. ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8). Python 3.10.7. Java 19. pyspark 3.3.0. dask/distributed 2022.7.1. ROOT built with:. ```. cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON. ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11515
https://github.com/root-project/root/pull/11516:149,interoperability,specif,specific,149,Guard gInterpreterMutex in TClingClassInfo::IsEnum; Fixes https://github.com/root-project/root/issues/11515. This method leads to contention in some specific scenarios (see linked issue). Note: I'm opening this PR to see how the CI reacts. I would still like to add some comments to the usage of the lockguard in that method,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11516
https://github.com/root-project/root/pull/11516:158,modifiability,scenario,scenarios,158,Guard gInterpreterMutex in TClingClassInfo::IsEnum; Fixes https://github.com/root-project/root/issues/11515. This method leads to contention in some specific scenarios (see linked issue). Note: I'm opening this PR to see how the CI reacts. I would still like to add some comments to the usage of the lockguard in that method,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11516
https://github.com/root-project/root/pull/11516:130,performance,content,contention,130,Guard gInterpreterMutex in TClingClassInfo::IsEnum; Fixes https://github.com/root-project/root/issues/11515. This method leads to contention in some specific scenarios (see linked issue). Note: I'm opening this PR to see how the CI reacts. I would still like to add some comments to the usage of the lockguard in that method,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11516
https://github.com/root-project/root/pull/11516:300,performance,lock,lockguard,300,Guard gInterpreterMutex in TClingClassInfo::IsEnum; Fixes https://github.com/root-project/root/issues/11515. This method leads to contention in some specific scenarios (see linked issue). Note: I'm opening this PR to see how the CI reacts. I would still like to add some comments to the usage of the lockguard in that method,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11516
https://github.com/root-project/root/pull/11516:300,security,lock,lockguard,300,Guard gInterpreterMutex in TClingClassInfo::IsEnum; Fixes https://github.com/root-project/root/issues/11515. This method leads to contention in some specific scenarios (see linked issue). Note: I'm opening this PR to see how the CI reacts. I would still like to add some comments to the usage of the lockguard in that method,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11516
https://github.com/root-project/root/pull/11517:111,availability,operat,operate,111,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:134,availability,mask,masked,134,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:42,deployability,patch,patch,42,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:247,deployability,log,logic,247,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:493,deployability,log,logic,493,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:181,energy efficiency,Current,Currently,181,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:262,modifiability,paramet,parameterized,262,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:175,performance,time,time,175,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:578,performance,time,time,578,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:632,performance,perform,performance,632,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:42,safety,patch,patch,42,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:247,safety,log,logic,247,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:366,safety,compl,completely,366,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:493,safety,log,logic,493,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:42,security,patch,patch,42,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:247,security,log,logic,247,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:366,security,compl,completely,366,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:493,security,log,logic,493,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:710,security,sign,significant,710,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:247,testability,log,logic,247,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:493,testability,log,logic,493,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:98,usability,learn,learn,98,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11517:632,usability,perform,performance,632,"[DF] Bulkify internals; With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11517
https://github.com/root-project/root/pull/11518:126,availability,operat,operators,126,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:213,availability,operat,operators,213,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:512,availability,operat,operators,512,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:557,availability,operat,operator,557,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:722,availability,operat,operator,722,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1811,availability,Operat,Operator,1811,"ModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3171,availability,Operat,Operator,3171,"sor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::str",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3456,availability,operat,operator,3456,"elParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:238,deployability,automat,automatically,238,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:499,deployability,modul,modular,499,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3805,deployability,automat,automatically,3805,"string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }. };. } //TMVA_SOFIE_Sign. #endif // TMVA_SOFIE_SIGN. ```. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1369,energy efficiency,model,model,1369,"e and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1393,energy efficiency,model,model,1393," if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1521,energy efficiency,model,model,1521,"n be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1612,energy efficiency,model,model,1612,"nction to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1645,energy efficiency,model,model,1645," registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::stri",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3524,energy efficiency,model,model,3524,"nique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3538,energy efficiency,model,model,3538,"rator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3574,energy efficiency,model,model,3574," op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }. };. } //TMVA_SOFIE_Sign. #endif //",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3593,energy efficiency,model,model,3593,"nput_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }. };. } //TMVA_SOFIE_Sign. #endif // TMVA_SOFIE_SIGN. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3844,energy efficiency,Model,Model,3844,"string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }. };. } //TMVA_SOFIE_Sign. #endif // TMVA_SOFIE_SIGN. ```. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:499,integrability,modular,modular,499,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:928,integrability,pub,public,928,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:31,interoperability,registr,registry,31,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:80,interoperability,registr,registry,80,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:499,modifiability,modul,modular,499,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:577,modifiability,inherit,inherits,577,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3180,reliability,doe,does,3180,"< fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string fil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:387,safety,except,exception,387,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:499,safety,modul,modular,499,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1207,safety,input,input,1207,"ed operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. ou",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1233,safety,input,input,1233,"d automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1308,safety,input,input,1308,"sing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << S",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1334,safety,input,input,1334,"ser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:2674,safety,input,input,2674,"Y);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:2855,safety,input,input,2855,"onvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Si",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:4621,safety,test,tested,4621,"string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }. };. } //TMVA_SOFIE_Sign. #endif // TMVA_SOFIE_SIGN. ```. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1369,security,model,model,1369,"e and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1393,security,model,model,1393," if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1521,security,model,model,1521,"n be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1612,security,model,model,1612,"nction to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1645,security,model,model,1645," registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::stri",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:2415,security,Sign,Sign,2415,"dyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelPar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:2843,security,Sign,Sign,2843,"_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of M",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3166,security,Sign,Sign,3166,"<< ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3451,security,Sign,Sign,3451,"[](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3491,security,Sign,Sign,3491,"::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<floa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3524,security,model,model,3524,"nique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3538,security,model,model,3538,"rator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3560,security,Sign,Sign,3560,"_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }. };. } //TMVA_SOFIE_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3574,security,model,model,3574," op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }. };. } //TMVA_SOFIE_Sign. #endif //",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3593,security,model,model,3593,"nput_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }. };. } //TMVA_SOFIE_Sign. #endif // TMVA_SOFIE_SIGN. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3844,security,Model,Model,3844,"string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }. };. } //TMVA_SOFIE_Sign. #endif // TMVA_SOFIE_SIGN. ```. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3856,security,Sign,Sign,3856,"string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }. };. } //TMVA_SOFIE_Sign. #endif // TMVA_SOFIE_SIGN. ```. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:4055,security,Session,Session,4055,"string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }. };. } //TMVA_SOFIE_Sign. #endif // TMVA_SOFIE_SIGN. ```. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:4159,security,Session,Session,4159,"string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }. };. } //TMVA_SOFIE_Sign. #endif // TMVA_SOFIE_SIGN. ```. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:4230,security,Sign,Sign,4230,"string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }. };. } //TMVA_SOFIE_Sign. #endif // TMVA_SOFIE_SIGN. ```. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:238,testability,automat,automatically,238,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:499,testability,modula,modular,499,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:535,testability,simpl,simply,535,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3805,testability,automat,automatically,3805,"string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }. };. } //TMVA_SOFIE_Sign. #endif // TMVA_SOFIE_SIGN. ```. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:4621,testability,test,tested,4621,"string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {. if (filename.empty()) filename = ""Sign.dat"";. }. std::vector<float> infer(float* tensor_X){. . //---- Operatorop_0. for (size_t i = 0; i < 5; i++) {. if (tensor_X[i] > 0.) {. tensor_Y[i] = 1.;. } else if (tensor_X[i] < 0.) {. tensor_Y[i] = -1.;. } else {. tensor_Y[i] = 0.;. }. }. std::vector<float> ret (tensor_Y, tensor_Y + 5);. return ret;. }. };. } //TMVA_SOFIE_Sign. #endif // TMVA_SOFIE_SIGN. ```. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:535,usability,simpl,simply,535,"[TMVA][SOFIE] ONNX parser with registry like pattern; ## Changes or fixes:. Use registry pattern for the ONNX parser. Now the operators and the tensor types are stored in a std::unordered_map. All the implemented operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1207,usability,input,input,1207,"ed operators are registered automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. ou",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1233,usability,input,input,1233,"d automatically when creating an object of type RModelParser_ONNX. When parsing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1308,usability,input,input,1308,"sing an onnx graph the parser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << S",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:1334,usability,input,input,1334,"ser checks the type of the onnx node and throw an exception if it's not implemented or call the corresponding function to parse it. This PR also makes SOFIE more modular. Now operators can be added simply by defining an operator class that inherits from ROperator, defining a function to parse the onnx node and registering this function to the parser. ## Example of adding a new ONNX operator. ```{c++}. #include ""onnx_proto3.pb.h"". #include ""TMVA/RModel.hxx"". #include ""TMVA/RModelParser_ONNX.hxx"". using namespace TMVA::Experimental::SOFIE;. template<typename T>. struct ROperator_Sign : public ROperator {. std::string fNX;. std::string fNY;. std::vector<size_t> fShapeX;. std::vector<size_t> fShapeY;. ROperator_Sign(std::string nameX, std::string nameY) : fNX(nameX), fNY(nameY) {}. std::vector<std::vector<size_t>> ShapeInference(std::vector<std::vector<size_t>> input) override {. return input;. }. std::vector<ETensorType> TypeInference(std::vector<ETensorType> input) override {. return input;. }. void Initialize(RModel& model) override {. if (!model.CheckIfTensorAlreadyExist(fNX)) {. throw std::runtime_error(""TMVA::SOFIE - Tensor "" + fNX + "" not found."");. }. fShapeX = model.GetTensorShape(fNX);. fShapeY = fShapeX;. //fShapeY = ShapeInference({fShapeX})[0];. model.AddIntermediateTensor(fNY, model.GetTensorType(fNX), fShapeY);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:2674,usability,input,input,2674,"Y);. }. std::string Generate(std::string OpName) override {. OpName = ""op_"" + OpName;. std::stringstream out;. out << SP << ""\n//---- Operator"" << OpName << ""\n"";. size_t length = ConvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:2855,usability,input,input,2855,"onvertShapeToLength(fShapeX);. out << SP << ""for (size_t i = 0; i < "" << length << ""; i++) {\n"";. out << SP << SP << ""if (tensor_"" << fNX << ""[i] > 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 1.;\n"";. out << SP << SP << ""} else if (tensor_"" << fNX << ""[i] < 0.) {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Si",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/pull/11518:3189,usability,support,support,3189,"i] = -1.;\n"";. out << SP << SP << ""} else {\n"";. out << SP << SP << SP << ""tensor_"" << fNY << ""[i] = 0.;\n"";. out << SP << SP << ""}\n"";. out << SP << ""}\n"";. return out.str();. }. };. // Parser for onnx::NodeProto of type Sign. ParserFuncSignature ParseSign = [](RModelParser_ONNX& parser, const onnx::NodeProto& nodeproto). -> std::unique_ptr<ROperator> {. std::unique_ptr<ROperator> op;. ETensorType input_type = ETensorType::UNDEFINED;. const std::string input_name = nodeproto.input(0);. if (parser.IsRegisteredTensorType(input_name)) {. input_type = parser.GetTensorType(input_name);. } else {. throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +. "" but its type is not yet registered"");. }. const std::string output_name = nodeproto.output(0);. switch (input_type) {. case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;. default:. throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +. std::to_string(static_cast<int>(input_type)));. }. if (!parser.IsRegisteredTensorType(output_name)) {. parser.RegisterTensorType(output_name, input_type);. }. return op;. };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator. parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model. RModel model = parser.Parse(""Sign.onnx"");. model.Generate();. model.OutputGenerated();. }. ```. the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:. ```{c++}. //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN. #define TMVA_SOFIE_SIGN. #include<vector>. #include ""TMVA/SOFIE_common.hxx"". #include <fstream>. namespace TMVA_SOFIE_Sign{. struct Session {. std::vector<float> fTensor_Y = std::vector<float>(5);. float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11518
https://github.com/root-project/root/issues/11519:622,availability,Operat,Operating,622,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:682,availability,down,download,682,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:247,deployability,fail,fails,247,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:568,deployability,instal,install,568,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:601,deployability,version,version,601,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:786,deployability,build,build,786,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:199,energy efficiency,current,current,199,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:601,integrability,version,version,601,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:1000,integrability,topic,topic,1000,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:601,modifiability,version,version,601,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:247,reliability,fail,fails,247,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:325,reliability,doe,does,325,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:954,safety,Test,Tested,954,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:722,testability,context,context,722,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:954,testability,Test,Tested,954,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:334,usability,support,support,334,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:374,usability,behavi,behavior,374,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:847,usability,document,documentation,847,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/issues/11519:876,usability,learn,learn,876,"TBrowser non-ascii text scrambles on windows; - [x] Checked for duplicates. ### Describe the bug. Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior. TBrowser can see files and folders, select files and folders normally. ### To Reproduce. Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup. 1. ROOT version: 6.26/06. 2. Operating system: Windows. 3. How you obtained ROOT binary: download from cern site. ### Additional context. Should be self explanatory. ### Suggested fix:. A post-build step should fix this on newer windows systems, as this documentation says:. https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:. https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11519
https://github.com/root-project/root/pull/11520:5,usability,Prefer,Prefer,5,"[DF] Prefer the term ""defined columns"" to ""custom columns""; In line with what we did in https://github.com/root-project/root/pull/11217 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11520
https://github.com/root-project/root/pull/11520:43,usability,custom,custom,43,"[DF] Prefer the term ""defined columns"" to ""custom columns""; In line with what we did in https://github.com/root-project/root/pull/11217 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11520
https://github.com/root-project/root/pull/11521:80,interoperability,share,shared,80,"[NFC][DF] Remove a comment that does not apply anymore.; Column readers are now shared among all nodes in the computation graph, so `Get` can be called several times for the same column.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11521
https://github.com/root-project/root/pull/11521:160,performance,time,times,160,"[NFC][DF] Remove a comment that does not apply anymore.; Column readers are now shared among all nodes in the computation graph, so `Get` can be called several times for the same column.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11521
https://github.com/root-project/root/pull/11521:32,reliability,doe,does,32,"[NFC][DF] Remove a comment that does not apply anymore.; Column readers are now shared among all nodes in the computation graph, so `Get` can be called several times for the same column.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11521
https://github.com/root-project/root/pull/11522:26,modifiability,variab,variable,26,"[DF] Avoid using the same variable for 2 branches in in-memory tree; When reading in-memory trees that have just been filled in the same scope, TTreeReaderValue re-uses, as storage for the values being read, the variable that was used to fill the tree. When the same variable is used to fill more than one branch, this means that the addresses of the values of these branches will be the same when reading them back. This breaks the fundamental assumption in RDataFrame that TTreeReaderValues for different columns will store their values at different addresses. The test happens to work at the moment, but it will break once we switch to bulk I/O because of a different call order inside RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11522
https://github.com/root-project/root/pull/11522:212,modifiability,variab,variable,212,"[DF] Avoid using the same variable for 2 branches in in-memory tree; When reading in-memory trees that have just been filled in the same scope, TTreeReaderValue re-uses, as storage for the values being read, the variable that was used to fill the tree. When the same variable is used to fill more than one branch, this means that the addresses of the values of these branches will be the same when reading them back. This breaks the fundamental assumption in RDataFrame that TTreeReaderValues for different columns will store their values at different addresses. The test happens to work at the moment, but it will break once we switch to bulk I/O because of a different call order inside RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11522
https://github.com/root-project/root/pull/11522:267,modifiability,variab,variable,267,"[DF] Avoid using the same variable for 2 branches in in-memory tree; When reading in-memory trees that have just been filled in the same scope, TTreeReaderValue re-uses, as storage for the values being read, the variable that was used to fill the tree. When the same variable is used to fill more than one branch, this means that the addresses of the values of these branches will be the same when reading them back. This breaks the fundamental assumption in RDataFrame that TTreeReaderValues for different columns will store their values at different addresses. The test happens to work at the moment, but it will break once we switch to bulk I/O because of a different call order inside RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11522
https://github.com/root-project/root/pull/11522:56,performance,memor,memory,56,"[DF] Avoid using the same variable for 2 branches in in-memory tree; When reading in-memory trees that have just been filled in the same scope, TTreeReaderValue re-uses, as storage for the values being read, the variable that was used to fill the tree. When the same variable is used to fill more than one branch, this means that the addresses of the values of these branches will be the same when reading them back. This breaks the fundamental assumption in RDataFrame that TTreeReaderValues for different columns will store their values at different addresses. The test happens to work at the moment, but it will break once we switch to bulk I/O because of a different call order inside RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11522
https://github.com/root-project/root/pull/11522:85,performance,memor,memory,85,"[DF] Avoid using the same variable for 2 branches in in-memory tree; When reading in-memory trees that have just been filled in the same scope, TTreeReaderValue re-uses, as storage for the values being read, the variable that was used to fill the tree. When the same variable is used to fill more than one branch, this means that the addresses of the values of these branches will be the same when reading them back. This breaks the fundamental assumption in RDataFrame that TTreeReaderValues for different columns will store their values at different addresses. The test happens to work at the moment, but it will break once we switch to bulk I/O because of a different call order inside RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11522
https://github.com/root-project/root/pull/11522:644,performance,I/O,I/O,644,"[DF] Avoid using the same variable for 2 branches in in-memory tree; When reading in-memory trees that have just been filled in the same scope, TTreeReaderValue re-uses, as storage for the values being read, the variable that was used to fill the tree. When the same variable is used to fill more than one branch, this means that the addresses of the values of these branches will be the same when reading them back. This breaks the fundamental assumption in RDataFrame that TTreeReaderValues for different columns will store their values at different addresses. The test happens to work at the moment, but it will break once we switch to bulk I/O because of a different call order inside RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11522
https://github.com/root-project/root/pull/11522:5,safety,Avoid,Avoid,5,"[DF] Avoid using the same variable for 2 branches in in-memory tree; When reading in-memory trees that have just been filled in the same scope, TTreeReaderValue re-uses, as storage for the values being read, the variable that was used to fill the tree. When the same variable is used to fill more than one branch, this means that the addresses of the values of these branches will be the same when reading them back. This breaks the fundamental assumption in RDataFrame that TTreeReaderValues for different columns will store their values at different addresses. The test happens to work at the moment, but it will break once we switch to bulk I/O because of a different call order inside RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11522
https://github.com/root-project/root/pull/11522:567,safety,test,test,567,"[DF] Avoid using the same variable for 2 branches in in-memory tree; When reading in-memory trees that have just been filled in the same scope, TTreeReaderValue re-uses, as storage for the values being read, the variable that was used to fill the tree. When the same variable is used to fill more than one branch, this means that the addresses of the values of these branches will be the same when reading them back. This breaks the fundamental assumption in RDataFrame that TTreeReaderValues for different columns will store their values at different addresses. The test happens to work at the moment, but it will break once we switch to bulk I/O because of a different call order inside RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11522
https://github.com/root-project/root/pull/11522:567,testability,test,test,567,"[DF] Avoid using the same variable for 2 branches in in-memory tree; When reading in-memory trees that have just been filled in the same scope, TTreeReaderValue re-uses, as storage for the values being read, the variable that was used to fill the tree. When the same variable is used to fill more than one branch, this means that the addresses of the values of these branches will be the same when reading them back. This breaks the fundamental assumption in RDataFrame that TTreeReaderValues for different columns will store their values at different addresses. The test happens to work at the moment, but it will break once we switch to bulk I/O because of a different call order inside RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11522
https://github.com/root-project/root/pull/11522:56,usability,memor,memory,56,"[DF] Avoid using the same variable for 2 branches in in-memory tree; When reading in-memory trees that have just been filled in the same scope, TTreeReaderValue re-uses, as storage for the values being read, the variable that was used to fill the tree. When the same variable is used to fill more than one branch, this means that the addresses of the values of these branches will be the same when reading them back. This breaks the fundamental assumption in RDataFrame that TTreeReaderValues for different columns will store their values at different addresses. The test happens to work at the moment, but it will break once we switch to bulk I/O because of a different call order inside RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11522
https://github.com/root-project/root/pull/11522:85,usability,memor,memory,85,"[DF] Avoid using the same variable for 2 branches in in-memory tree; When reading in-memory trees that have just been filled in the same scope, TTreeReaderValue re-uses, as storage for the values being read, the variable that was used to fill the tree. When the same variable is used to fill more than one branch, this means that the addresses of the values of these branches will be the same when reading them back. This breaks the fundamental assumption in RDataFrame that TTreeReaderValues for different columns will store their values at different addresses. The test happens to work at the moment, but it will break once we switch to bulk I/O because of a different call order inside RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11522
https://github.com/root-project/root/issues/11523:492,deployability,stage,stages,492,"[ntuple] Support the storage of collections that use legacy `TVirtualCollectionProxy`; ### Explain what you would like to see improved. Support the storage of user-defined classes that behave as collections of elements. Such classes provide access to the collection via a class that overrides member functions in the `TVirtualCollectionProxy` class. . The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In later stages, RNTuple might provide this functionality through an interface different from the legacy `TVirtualCollectionProxy`. . ### Additional context. This is required for ATLAS data model, more specifically the `DataVector<T>` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11523
https://github.com/root-project/root/issues/11523:673,energy efficiency,model,model,673,"[ntuple] Support the storage of collections that use legacy `TVirtualCollectionProxy`; ### Explain what you would like to see improved. Support the storage of user-defined classes that behave as collections of elements. Such classes provide access to the collection via a class that overrides member functions in the `TVirtualCollectionProxy` class. . The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In later stages, RNTuple might provide this functionality through an interface different from the legacy `TVirtualCollectionProxy`. . ### Additional context. This is required for ATLAS data model, more specifically the `DataVector<T>` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11523
https://github.com/root-project/root/issues/11523:552,integrability,interfac,interface,552,"[ntuple] Support the storage of collections that use legacy `TVirtualCollectionProxy`; ### Explain what you would like to see improved. Support the storage of user-defined classes that behave as collections of elements. Such classes provide access to the collection via a class that overrides member functions in the `TVirtualCollectionProxy` class. . The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In later stages, RNTuple might provide this functionality through an interface different from the legacy `TVirtualCollectionProxy`. . ### Additional context. This is required for ATLAS data model, more specifically the `DataVector<T>` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11523
https://github.com/root-project/root/issues/11523:367,interoperability,prox,proxy,367,"[ntuple] Support the storage of collections that use legacy `TVirtualCollectionProxy`; ### Explain what you would like to see improved. Support the storage of user-defined classes that behave as collections of elements. Such classes provide access to the collection via a class that overrides member functions in the `TVirtualCollectionProxy` class. . The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In later stages, RNTuple might provide this functionality through an interface different from the legacy `TVirtualCollectionProxy`. . ### Additional context. This is required for ATLAS data model, more specifically the `DataVector<T>` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11523
https://github.com/root-project/root/issues/11523:552,interoperability,interfac,interface,552,"[ntuple] Support the storage of collections that use legacy `TVirtualCollectionProxy`; ### Explain what you would like to see improved. Support the storage of user-defined classes that behave as collections of elements. Such classes provide access to the collection via a class that overrides member functions in the `TVirtualCollectionProxy` class. . The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In later stages, RNTuple might provide this functionality through an interface different from the legacy `TVirtualCollectionProxy`. . ### Additional context. This is required for ATLAS data model, more specifically the `DataVector<T>` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11523
https://github.com/root-project/root/issues/11523:685,interoperability,specif,specifically,685,"[ntuple] Support the storage of collections that use legacy `TVirtualCollectionProxy`; ### Explain what you would like to see improved. Support the storage of user-defined classes that behave as collections of elements. Such classes provide access to the collection via a class that overrides member functions in the `TVirtualCollectionProxy` class. . The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In later stages, RNTuple might provide this functionality through an interface different from the legacy `TVirtualCollectionProxy`. . ### Additional context. This is required for ATLAS data model, more specifically the `DataVector<T>` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11523
https://github.com/root-project/root/issues/11523:552,modifiability,interfac,interface,552,"[ntuple] Support the storage of collections that use legacy `TVirtualCollectionProxy`; ### Explain what you would like to see improved. Support the storage of user-defined classes that behave as collections of elements. Such classes provide access to the collection via a class that overrides member functions in the `TVirtualCollectionProxy` class. . The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In later stages, RNTuple might provide this functionality through an interface different from the legacy `TVirtualCollectionProxy`. . ### Additional context. This is required for ATLAS data model, more specifically the `DataVector<T>` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11523
https://github.com/root-project/root/issues/11523:241,security,access,access,241,"[ntuple] Support the storage of collections that use legacy `TVirtualCollectionProxy`; ### Explain what you would like to see improved. Support the storage of user-defined classes that behave as collections of elements. Such classes provide access to the collection via a class that overrides member functions in the `TVirtualCollectionProxy` class. . The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In later stages, RNTuple might provide this functionality through an interface different from the legacy `TVirtualCollectionProxy`. . ### Additional context. This is required for ATLAS data model, more specifically the `DataVector<T>` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11523
https://github.com/root-project/root/issues/11523:673,security,model,model,673,"[ntuple] Support the storage of collections that use legacy `TVirtualCollectionProxy`; ### Explain what you would like to see improved. Support the storage of user-defined classes that behave as collections of elements. Such classes provide access to the collection via a class that overrides member functions in the `TVirtualCollectionProxy` class. . The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In later stages, RNTuple might provide this functionality through an interface different from the legacy `TVirtualCollectionProxy`. . ### Additional context. This is required for ATLAS data model, more specifically the `DataVector<T>` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11523
https://github.com/root-project/root/issues/11523:632,testability,context,context,632,"[ntuple] Support the storage of collections that use legacy `TVirtualCollectionProxy`; ### Explain what you would like to see improved. Support the storage of user-defined classes that behave as collections of elements. Such classes provide access to the collection via a class that overrides member functions in the `TVirtualCollectionProxy` class. . The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In later stages, RNTuple might provide this functionality through an interface different from the legacy `TVirtualCollectionProxy`. . ### Additional context. This is required for ATLAS data model, more specifically the `DataVector<T>` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11523
https://github.com/root-project/root/issues/11523:9,usability,Support,Support,9,"[ntuple] Support the storage of collections that use legacy `TVirtualCollectionProxy`; ### Explain what you would like to see improved. Support the storage of user-defined classes that behave as collections of elements. Such classes provide access to the collection via a class that overrides member functions in the `TVirtualCollectionProxy` class. . The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In later stages, RNTuple might provide this functionality through an interface different from the legacy `TVirtualCollectionProxy`. . ### Additional context. This is required for ATLAS data model, more specifically the `DataVector<T>` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11523
https://github.com/root-project/root/issues/11523:136,usability,Support,Support,136,"[ntuple] Support the storage of collections that use legacy `TVirtualCollectionProxy`; ### Explain what you would like to see improved. Support the storage of user-defined classes that behave as collections of elements. Such classes provide access to the collection via a class that overrides member functions in the `TVirtualCollectionProxy` class. . The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In later stages, RNTuple might provide this functionality through an interface different from the legacy `TVirtualCollectionProxy`. . ### Additional context. This is required for ATLAS data model, more specifically the `DataVector<T>` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11523
https://github.com/root-project/root/issues/11523:159,usability,user,user-defined,159,"[ntuple] Support the storage of collections that use legacy `TVirtualCollectionProxy`; ### Explain what you would like to see improved. Support the storage of user-defined classes that behave as collections of elements. Such classes provide access to the collection via a class that overrides member functions in the `TVirtualCollectionProxy` class. . The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In later stages, RNTuple might provide this functionality through an interface different from the legacy `TVirtualCollectionProxy`. . ### Additional context. This is required for ATLAS data model, more specifically the `DataVector<T>` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11523
https://github.com/root-project/root/pull/11524:184,modifiability,variab,variable,184,"[PyROOT][11344] Remove sterile setting of EXTRA_CLING_ARGS by cppyy; Fixes #11344 . Mostly quoting @eguiraud in #11344 :. import ROOT (via cppyy) causes the setting of the environment variable EXTRA_CLING_ARGS to -O2 -- but too late (after interpreter initialization), so that the setting actually has no effect: cling will still use its default of -O1, but checking EXTRA_CLING_ARGS will give users the wrong impression. Since there is no reason to set the environment variable in the first place, it has no effect anyway, and it can be confusing for users trying to figure out what options cling is running with, this PR removes the behavior from PyROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11524
https://github.com/root-project/root/pull/11524:470,modifiability,variab,variable,470,"[PyROOT][11344] Remove sterile setting of EXTRA_CLING_ARGS by cppyy; Fixes #11344 . Mostly quoting @eguiraud in #11344 :. import ROOT (via cppyy) causes the setting of the environment variable EXTRA_CLING_ARGS to -O2 -- but too late (after interpreter initialization), so that the setting actually has no effect: cling will still use its default of -O1, but checking EXTRA_CLING_ARGS will give users the wrong impression. Since there is no reason to set the environment variable in the first place, it has no effect anyway, and it can be confusing for users trying to figure out what options cling is running with, this PR removes the behavior from PyROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11524
https://github.com/root-project/root/pull/11524:394,usability,user,users,394,"[PyROOT][11344] Remove sterile setting of EXTRA_CLING_ARGS by cppyy; Fixes #11344 . Mostly quoting @eguiraud in #11344 :. import ROOT (via cppyy) causes the setting of the environment variable EXTRA_CLING_ARGS to -O2 -- but too late (after interpreter initialization), so that the setting actually has no effect: cling will still use its default of -O1, but checking EXTRA_CLING_ARGS will give users the wrong impression. Since there is no reason to set the environment variable in the first place, it has no effect anyway, and it can be confusing for users trying to figure out what options cling is running with, this PR removes the behavior from PyROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11524
https://github.com/root-project/root/pull/11524:552,usability,user,users,552,"[PyROOT][11344] Remove sterile setting of EXTRA_CLING_ARGS by cppyy; Fixes #11344 . Mostly quoting @eguiraud in #11344 :. import ROOT (via cppyy) causes the setting of the environment variable EXTRA_CLING_ARGS to -O2 -- but too late (after interpreter initialization), so that the setting actually has no effect: cling will still use its default of -O1, but checking EXTRA_CLING_ARGS will give users the wrong impression. Since there is no reason to set the environment variable in the first place, it has no effect anyway, and it can be confusing for users trying to figure out what options cling is running with, this PR removes the behavior from PyROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11524
https://github.com/root-project/root/pull/11524:635,usability,behavi,behavior,635,"[PyROOT][11344] Remove sterile setting of EXTRA_CLING_ARGS by cppyy; Fixes #11344 . Mostly quoting @eguiraud in #11344 :. import ROOT (via cppyy) causes the setting of the environment variable EXTRA_CLING_ARGS to -O2 -- but too late (after interpreter initialization), so that the setting actually has no effect: cling will still use its default of -O1, but checking EXTRA_CLING_ARGS will give users the wrong impression. Since there is no reason to set the environment variable in the first place, it has no effect anyway, and it can be confusing for users trying to figure out what options cling is running with, this PR removes the behavior from PyROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11524
https://github.com/root-project/root/pull/11525:687,deployability,stage,stages,687,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2962,deployability,Updat,Update,2962,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:3045,deployability,updat,updated,3045,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2044,energy efficiency,model,model,2044,"type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] up",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2095,energy efficiency,model,model,2095,")`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2177,energy efficiency,model,model,2177,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2501,energy efficiency,reduc,reduce,2501,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:80,integrability,interfac,interface,80,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:747,integrability,interfac,interface,747,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:767,integrability,interfac,interface,767,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:1490,integrability,complian,compliant,1490," using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:1535,integrability,interfac,interface,1535,"ilar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2335,integrability,interfac,interface,2335,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2645,integrability,buffer,buffer,2645,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:80,interoperability,interfac,interface,80,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:214,interoperability,specif,specify,214,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:236,interoperability,prox,proxy,236,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:319,interoperability,prox,proxy,319,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:430,interoperability,prox,proxy,430,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:611,interoperability,prox,proxies,611,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:747,interoperability,interfac,interface,747,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:767,interoperability,interfac,interface,767,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:1535,interoperability,interfac,interface,1535,"ilar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:1817,interoperability,prox,proxy,1817," provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassFi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:1882,interoperability,specif,specified,1882,"CollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, comp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:1998,interoperability,Prox,ProxiedCollection,1998,"tion about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2194,interoperability,Prox,ProxiedCollection,2194,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2269,interoperability,prox,proxy,2269,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2335,interoperability,interfac,interface,2335,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2406,interoperability,prox,proxy,2406,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2922,interoperability,prox,proxy,2922,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2951,interoperability,prox,proxies,2951,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2974,interoperability,specif,specifications,2974,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:80,modifiability,interfac,interface,80,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:747,modifiability,interfac,interface,747,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:767,modifiability,interfac,interface,767,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:1535,modifiability,interfac,interface,1535,"ilar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2335,modifiability,interfac,interface,2335,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2437,performance,time,time,2437,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:1490,safety,compl,compliant,1490," using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2767,safety,test,tests,2767,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2839,safety,test,tests,2839,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2962,safety,Updat,Update,2962,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:3015,safety,test,tested,3015,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:3045,safety,updat,updated,3045,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:257,security,access,access,257,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:1114,security,access,access,1114,"es RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyCla",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:1490,security,compl,compliant,1490," using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2044,security,model,model,2044,"type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] up",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2095,security,model,model,2095,")`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2177,security,model,model,2177,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2962,security,Updat,Update,2962,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:3045,security,updat,updated,3045,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2767,testability,test,tests,2767,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2834,testability,unit,unit,2834,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:2839,testability,test,tests,2839,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:3015,testability,test,tested,3015,"`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies. - Update `doc/specifications.md`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:9,usability,Support,Support,9,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:127,usability,support,support,127,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:139,usability,user,user-defined,139,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:581,usability,support,support,581,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:788,usability,minim,minimum,788,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:801,usability,user,user,801,"[ntuple] Support the storage of collections using the `TVirtualCollectionProxy` interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<Pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:1076,usability,Clear,Clear,1076," interface; This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection. A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. au",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:1434,usability,user,user-defined,1434,"a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run tim",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:1715,usability,help,helper,1715,"his functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:. - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:1917,usability,user,user-defined,1917,", `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11525:1945,usability,document,documentation,1945,"eClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type. - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access. - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:. - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface. Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below). ```c++. // Alternatively, this can be specified via a member type in the user-defined class; see the documentation. template <>. struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();. auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class. auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy. ```. **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`. - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes). - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`. - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11525
https://github.com/root-project/root/pull/11526:87,deployability,contain,container,87,"[DF] Introduce metadata handling in RDF; Introducing a class acting as a heterogenuous container to store. metadata. Since the intended use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:236,deployability,contain,container,236,"[DF] Introduce metadata handling in RDF; Introducing a class acting as a heterogenuous container to store. metadata. Since the intended use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:270,deployability,depend,dependency,270,"[DF] Introduce metadata handling in RDF; Introducing a class acting as a heterogenuous container to store. metadata. Since the intended use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:489,deployability,build,build,489,"[DF] Introduce metadata handling in RDF; Introducing a class acting as a heterogenuous container to store. metadata. Since the intended use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:705,deployability,Build,Build,705,"[DF] Introduce metadata handling in RDF; Introducing a class acting as a heterogenuous container to store. metadata. Since the intended use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:1029,deployability,updat,updated,1029,"in RDF; Introducing a class acting as a heterogenuous container to store. metadata. Since the intended use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experim",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:1131,energy efficiency,current,currently,1131,"use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		}. 	],. 	""friends"": {. 		""friendAlias1"": {. 			""trees"": [""subTree0""],. 			""files"":",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:270,integrability,depend,dependency,270,"[DF] Introduce metadata handling in RDF; Introducing a class acting as a heterogenuous container to store. metadata. Since the intended use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:1420,integrability,sub,subTree,1420,"le ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		}. 	],. 	""friends"": {. 		""friendAlias1"": {. 			""trees"": [""subTree0""],. 			""files"": [""specTestFile6*.root"", ""specTestFile6.root""]. 		},. 		""friendAlias2"": {. 			""trees"": [""subTree1"", ""subTree2""],. 			""files"": [""specTestFile7.root"", ""specTestFile8.root""]. 		}. 	},. 	""range"": [5, 10]. }. ```. TODO:. - [ ] Polish and push test suite. Open discussion items:. - [ ] Which im",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:1431,integrability,sub,subTree,1431,"ing a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		}. 	],. 	""friends"": {. 		""friendAlias1"": {. 			""trees"": [""subTree0""],. 			""files"": [""specTestFile6*.root"", ""specTestFile6.root""]. 		},. 		""friendAlias2"": {. 			""trees"": [""subTree1"", ""subTree2""],. 			""files"": [""specTestFile7.root"", ""specTestFile8.root""]. 		}. 	},. 	""range"": [5, 10]. }. ```. TODO:. - [ ] Polish and push test suite. Open discussion items:. - [ ] Which implicit type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:1686,integrability,sub,subTreeA,1686,"DatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		}. 	],. 	""friends"": {. 		""friendAlias1"": {. 			""trees"": [""subTree0""],. 			""files"": [""specTestFile6*.root"", ""specTestFile6.root""]. 		},. 		""friendAlias2"": {. 			""trees"": [""subTree1"", ""subTree2""],. 			""files"": [""specTestFile7.root"", ""specTestFile8.root""]. 		}. 	},. 	""range"": [5, 10]. }. ```. TODO:. - [ ] Polish and push test suite. Open discussion items:. - [ ] Which implicit type conversitions are allowed? - [ ] (How) can we pass chains locally in MT runs? - [ ] Renaming classes/methods/functions? - [ ] Which components of the Json file are mandatory and which not?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:1892,integrability,sub,subTreeA,1892,"DatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		}. 	],. 	""friends"": {. 		""friendAlias1"": {. 			""trees"": [""subTree0""],. 			""files"": [""specTestFile6*.root"", ""specTestFile6.root""]. 		},. 		""friendAlias2"": {. 			""trees"": [""subTree1"", ""subTree2""],. 			""files"": [""specTestFile7.root"", ""specTestFile8.root""]. 		}. 	},. 	""range"": [5, 10]. }. ```. TODO:. - [ ] Polish and push test suite. Open discussion items:. - [ ] Which implicit type conversitions are allowed? - [ ] (How) can we pass chains locally in MT runs? - [ ] Renaming classes/methods/functions? - [ ] Which components of the Json file are mandatory and which not?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:2568,integrability,compon,components,2568,"DatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		}. 	],. 	""friends"": {. 		""friendAlias1"": {. 			""trees"": [""subTree0""],. 			""files"": [""specTestFile6*.root"", ""specTestFile6.root""]. 		},. 		""friendAlias2"": {. 			""trees"": [""subTree1"", ""subTree2""],. 			""files"": [""specTestFile7.root"", ""specTestFile8.root""]. 		}. 	},. 	""range"": [5, 10]. }. ```. TODO:. - [ ] Polish and push test suite. Open discussion items:. - [ ] Which implicit type conversitions are allowed? - [ ] (How) can we pass chains locally in MT runs? - [ ] Renaming classes/methods/functions? - [ ] Which components of the Json file are mandatory and which not?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:73,interoperability,heterogen,heterogenuous,73,"[DF] Introduce metadata handling in RDF; Introducing a class acting as a heterogenuous container to store. metadata. Since the intended use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:2436,interoperability,convers,conversitions,2436,"DatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		}. 	],. 	""friends"": {. 		""friendAlias1"": {. 			""trees"": [""subTree0""],. 			""files"": [""specTestFile6*.root"", ""specTestFile6.root""]. 		},. 		""friendAlias2"": {. 			""trees"": [""subTree1"", ""subTree2""],. 			""files"": [""specTestFile7.root"", ""specTestFile8.root""]. 		}. 	},. 	""range"": [5, 10]. }. ```. TODO:. - [ ] Polish and push test suite. Open discussion items:. - [ ] Which implicit type conversitions are allowed? - [ ] (How) can we pass chains locally in MT runs? - [ ] Renaming classes/methods/functions? - [ ] Which components of the Json file are mandatory and which not?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:2568,interoperability,compon,components,2568,"DatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		}. 	],. 	""friends"": {. 		""friendAlias1"": {. 			""trees"": [""subTree0""],. 			""files"": [""specTestFile6*.root"", ""specTestFile6.root""]. 		},. 		""friendAlias2"": {. 			""trees"": [""subTree1"", ""subTree2""],. 			""files"": [""specTestFile7.root"", ""specTestFile8.root""]. 		}. 	},. 	""range"": [5, 10]. }. ```. TODO:. - [ ] Polish and push test suite. Open discussion items:. - [ ] Which implicit type conversitions are allowed? - [ ] (How) can we pass chains locally in MT runs? - [ ] Renaming classes/methods/functions? - [ ] Which components of the Json file are mandatory and which not?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:270,modifiability,depend,dependency,270,"[DF] Introduce metadata handling in RDF; Introducing a class acting as a heterogenuous container to store. metadata. Since the intended use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:2568,modifiability,compon,components,2568,"DatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		}. 	],. 	""friends"": {. 		""friendAlias1"": {. 			""trees"": [""subTree0""],. 			""files"": [""specTestFile6*.root"", ""specTestFile6.root""]. 		},. 		""friendAlias2"": {. 			""trees"": [""subTree1"", ""subTree2""],. 			""files"": [""specTestFile7.root"", ""specTestFile8.root""]. 		}. 	},. 	""range"": [5, 10]. }. ```. TODO:. - [ ] Polish and push test suite. Open discussion items:. - [ ] Which implicit type conversitions are allowed? - [ ] (How) can we pass chains locally in MT runs? - [ ] Renaming classes/methods/functions? - [ ] Which components of the Json file are mandatory and which not?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:270,safety,depend,dependency,270,"[DF] Introduce metadata handling in RDF; Introducing a class acting as a heterogenuous container to store. metadata. Since the intended use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:548,safety,test,tests,548,"[DF] Introduce metadata handling in RDF; Introducing a class acting as a heterogenuous container to store. metadata. Since the intended use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:1029,safety,updat,updated,1029,"in RDF; Introducing a class acting as a heterogenuous container to store. metadata. Since the intended use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experim",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:1316,safety,valid,valid,1316,"w only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		}. 	],. 	""friends"": {. 		""friendAlias1"": {. 			""trees"": [""subTree0""],. 			""files"": [""specTestFile6*.root"", ""specTestFile6.root""]. 		},. 		""friendAlias2"": {. 			""trees"": [""subTree1"", ""subTree2""],. 			""files"": [""specTestFile7.root"", ""specTestFile8.root""]. 		}. 	},. 	",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:2374,safety,test,test,2374,"DatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		}. 	],. 	""friends"": {. 		""friendAlias1"": {. 			""trees"": [""subTree0""],. 			""files"": [""specTestFile6*.root"", ""specTestFile6.root""]. 		},. 		""friendAlias2"": {. 			""trees"": [""subTree1"", ""subTree2""],. 			""files"": [""specTestFile7.root"", ""specTestFile8.root""]. 		}. 	},. 	""range"": [5, 10]. }. ```. TODO:. - [ ] Polish and push test suite. Open discussion items:. - [ ] Which implicit type conversitions are allowed? - [ ] (How) can we pass chains locally in MT runs? - [ ] Renaming classes/methods/functions? - [ ] Which components of the Json file are mandatory and which not?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:1029,security,updat,updated,1029,"in RDF; Introducing a class acting as a heterogenuous container to store. metadata. Since the intended use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experim",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:1216,security,RSa,RSampleInfo,1216,"he underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		}. 	],. 	""friends"": {. 		""friendAlias1"": {. 			""trees"": [""subTree0""],. 			""files"": [""specTestFile6*.root"", ""specTestFile6.root""]. 		},. 		""friendAlias2"": {. 			""trees"":",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:1267,security,access,accessed,1267,"ependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		}. 	],. 	""friends"": {. 		""friendAlias1"": {. 			""trees"": [""subTree0""],. 			""files"": [""specTestFile6*.root"", ""specTestFile6.root""]. 		},. 		""friendAlias2"": {. 			""trees"": [""subTree1"", ""subTree2""],. 			""files"": [""specTes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:270,testability,depend,dependency,270,"[DF] Introduce metadata handling in RDF; Introducing a class acting as a heterogenuous container to store. metadata. Since the intended use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:548,testability,test,tests,548,"[DF] Introduce metadata handling in RDF; Introducing a class acting as a heterogenuous container to store. metadata. Since the intended use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:1385,testability,SIMUL,SIMULATED,1385,"roupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		}. 	],. 	""friends"": {. 		""friendAlias1"": {. 			""trees"": [""subTree0""],. 			""files"": [""specTestFile6*.root"", ""specTestFile6.root""]. 		},. 		""friendAlias2"": {. 			""trees"": [""subTree1"", ""subTree2""],. 			""files"": [""specTestFile7.root"", ""specTestFile8.root""]. 		}. 	},. 	""range"": [5, 10]. }. ```. TODO:. - [ ] Polish and push test suite. Open",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:2374,testability,test,test,2374,"DatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		}. 	],. 	""friends"": {. 		""friendAlias1"": {. 			""trees"": [""subTree0""],. 			""files"": [""specTestFile6*.root"", ""specTestFile6.root""]. 		},. 		""friendAlias2"": {. 			""trees"": [""subTree1"", ""subTree2""],. 			""files"": [""specTestFile7.root"", ""specTestFile8.root""]. 		}. 	},. 	""range"": [5, 10]. }. ```. TODO:. - [ ] Polish and push test suite. Open discussion items:. - [ ] Which implicit type conversitions are allowed? - [ ] (How) can we pass chains locally in MT runs? - [ ] Renaming classes/methods/functions? - [ ] Which components of the Json file are mandatory and which not?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11526:459,usability,user,user,459,"[DF] Introduce metadata handling in RDF; Introducing a class acting as a heterogenuous container to store. metadata. Since the intended use case would be obtaining metadata from. json files, the nlohmann::json is used as the underlying container. This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,. entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder. The user is no longer supposed to build a RDatasetSpec directly. Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable. methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group. information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group. In the RLoopManager ctor (accepting a RDatasetSpec) the globs are. expanded and the group sizes are updated. However, group positioning. remains relevant to the global TChain in RLoopManager and hence. currently accesing groups/metadata requires global TTreeProcessorMT. chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---. Example of a valid json file to be parsed:. ```json. {. 	""groups"": [{. 			""tag"": ""SIMULATED"",. 			""trees"": [""tree"", ""subTree"", ""subTree""],. 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],. 			""metadata"": {. 				""year"": 2040,. 				""lumi"": 3.14,. 				""edeposit"": 19.0,. 				""datatype"": ""MC"". 			}. 		},. 		{. 			""tag"": ""REAL"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2012,. 				""century"": 20,. 				""experiment"": ""CMS"". 			}. 		},. 		{. 			""tag"": ""BLABLA"",. 			""trees"": [""subTreeA""],. 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],. 			""metadata"": {. 				""year"": 2030,.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11526
https://github.com/root-project/root/pull/11527:213,deployability,fail,fail,213,"[ACLiC] For macOS, make sure the syslib exists:; macOS 13 again moves many libraries into the binary blob: these. files do not exist anymore on disk, but the linker ""knows what. to do"". Linking against them would fail (""file not found""), so. rely on the non-system libraries to pull them in. An exception are. /usr/lib/system/libsystem_... which *do* exist on disk but must not. be linked against. 2nd attempt of #11424.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11527
https://github.com/root-project/root/pull/11527:144,performance,disk,disk,144,"[ACLiC] For macOS, make sure the syslib exists:; macOS 13 again moves many libraries into the binary blob: these. files do not exist anymore on disk, but the linker ""knows what. to do"". Linking against them would fail (""file not found""), so. rely on the non-system libraries to pull them in. An exception are. /usr/lib/system/libsystem_... which *do* exist on disk but must not. be linked against. 2nd attempt of #11424.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11527
https://github.com/root-project/root/pull/11527:360,performance,disk,disk,360,"[ACLiC] For macOS, make sure the syslib exists:; macOS 13 again moves many libraries into the binary blob: these. files do not exist anymore on disk, but the linker ""knows what. to do"". Linking against them would fail (""file not found""), so. rely on the non-system libraries to pull them in. An exception are. /usr/lib/system/libsystem_... which *do* exist on disk but must not. be linked against. 2nd attempt of #11424.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11527
https://github.com/root-project/root/pull/11527:213,reliability,fail,fail,213,"[ACLiC] For macOS, make sure the syslib exists:; macOS 13 again moves many libraries into the binary blob: these. files do not exist anymore on disk, but the linker ""knows what. to do"". Linking against them would fail (""file not found""), so. rely on the non-system libraries to pull them in. An exception are. /usr/lib/system/libsystem_... which *do* exist on disk but must not. be linked against. 2nd attempt of #11424.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11527
https://github.com/root-project/root/pull/11527:295,safety,except,exception,295,"[ACLiC] For macOS, make sure the syslib exists:; macOS 13 again moves many libraries into the binary blob: these. files do not exist anymore on disk, but the linker ""knows what. to do"". Linking against them would fail (""file not found""), so. rely on the non-system libraries to pull them in. An exception are. /usr/lib/system/libsystem_... which *do* exist on disk but must not. be linked against. 2nd attempt of #11424.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11527
https://github.com/root-project/root/pull/11528:48,deployability,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 23; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11507. 2. https://github.com/root-project/root/pull/10811. 3. https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11528
https://github.com/root-project/root/pull/11528:175,deployability,patch,patches,175,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 23; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11507. 2. https://github.com/root-project/root/pull/10811. 3. https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11528
https://github.com/root-project/root/pull/11528:48,safety,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 23; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11507. 2. https://github.com/root-project/root/pull/10811. 3. https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11528
https://github.com/root-project/root/pull/11528:175,safety,patch,patches,175,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 23; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11507. 2. https://github.com/root-project/root/pull/10811. 3. https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11528
https://github.com/root-project/root/pull/11528:411,safety,Except,Except,411,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 23; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11507. 2. https://github.com/root-project/root/pull/10811. 3. https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11528
https://github.com/root-project/root/pull/11528:48,security,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 23; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11507. 2. https://github.com/root-project/root/pull/10811. 3. https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11528
https://github.com/root-project/root/pull/11528:175,security,patch,patches,175,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 23; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11507. 2. https://github.com/root-project/root/pull/10811. 3. https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11528
https://github.com/root-project/root/pull/11529:279,availability,error,error,279,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:70,deployability,depend,dependency,70,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:107,deployability,depend,depend,107,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:70,integrability,depend,dependency,70,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:107,integrability,depend,depend,107,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:70,modifiability,depend,dependency,70,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:107,modifiability,depend,depend,107,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:279,performance,error,error,279,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:46,safety,test,tests,46,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:70,safety,depend,dependency,70,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:90,safety,test,tests,90,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:107,safety,depend,depend,107,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:156,safety,test,tests,156,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:175,safety,Test,Test,175,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:279,safety,error,error,279,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:239,security,session,session,239,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:323,security,Session,Session,323,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:46,testability,test,tests,46,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:70,testability,depend,dependency,70,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:90,testability,test,tests,90,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:107,testability,depend,depend,107,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:156,testability,test,tests,156,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:175,testability,Test,Test,175,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11529:279,usability,error,error,279,[tmva][sofie] Some improvements in TMVA SOFIE tests; -Fix the correct dependency of sofie tests. No ned to depend on protobuf. - Use weight file for Linear tests from ROOT. - Test also the case where the weight file is not present but the session is enabled. - Produce a runtime error when a weight file is enabled but the Session is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11529
https://github.com/root-project/root/pull/11530:8,availability,error,error,8,clarify error message with bash; See https://root-forum.cern.ch/t/problem-while-building-root-from-source/51895/4,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11530
https://github.com/root-project/root/pull/11530:80,deployability,build,building-root-from-source,80,clarify error message with bash; See https://root-forum.cern.ch/t/problem-while-building-root-from-source/51895/4,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11530
https://github.com/root-project/root/pull/11530:14,integrability,messag,message,14,clarify error message with bash; See https://root-forum.cern.ch/t/problem-while-building-root-from-source/51895/4,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11530
https://github.com/root-project/root/pull/11530:14,interoperability,messag,message,14,clarify error message with bash; See https://root-forum.cern.ch/t/problem-while-building-root-from-source/51895/4,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11530
https://github.com/root-project/root/pull/11530:8,performance,error,error,8,clarify error message with bash; See https://root-forum.cern.ch/t/problem-while-building-root-from-source/51895/4,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11530
https://github.com/root-project/root/pull/11530:8,safety,error,error,8,clarify error message with bash; See https://root-forum.cern.ch/t/problem-while-building-root-from-source/51895/4,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11530
https://github.com/root-project/root/pull/11530:8,usability,error,error,8,clarify error message with bash; See https://root-forum.cern.ch/t/problem-while-building-root-from-source/51895/4,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11530
https://github.com/root-project/root/pull/11531:430,deployability,log,logging,430,"[RF][PyROOT] Skip out-of-range events in `RooDataSet.from_numpy()` and other fixes; The recently-introduced `RooDataSet.from_numpy()` function was clipping. out-of-range events to the variable boundaries instead of clipping them. This behavior was misleading and confusing to the users, because the. import of a TTree just skips out out-of-range events. This commit implements the skipping for `RooDataSet.from_numpy()` as. well, logging also the same warnings when that happens. A unit test that checks the skipping works correctly for categories and. real-valued variables is also implemented. Closes https://github.com/root-project/root/issues/10447. Some other things are also fixed by the two first commits, see more detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11531
https://github.com/root-project/root/pull/11531:31,integrability,event,events,31,"[RF][PyROOT] Skip out-of-range events in `RooDataSet.from_numpy()` and other fixes; The recently-introduced `RooDataSet.from_numpy()` function was clipping. out-of-range events to the variable boundaries instead of clipping them. This behavior was misleading and confusing to the users, because the. import of a TTree just skips out out-of-range events. This commit implements the skipping for `RooDataSet.from_numpy()` as. well, logging also the same warnings when that happens. A unit test that checks the skipping works correctly for categories and. real-valued variables is also implemented. Closes https://github.com/root-project/root/issues/10447. Some other things are also fixed by the two first commits, see more detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11531
https://github.com/root-project/root/pull/11531:170,integrability,event,events,170,"[RF][PyROOT] Skip out-of-range events in `RooDataSet.from_numpy()` and other fixes; The recently-introduced `RooDataSet.from_numpy()` function was clipping. out-of-range events to the variable boundaries instead of clipping them. This behavior was misleading and confusing to the users, because the. import of a TTree just skips out out-of-range events. This commit implements the skipping for `RooDataSet.from_numpy()` as. well, logging also the same warnings when that happens. A unit test that checks the skipping works correctly for categories and. real-valued variables is also implemented. Closes https://github.com/root-project/root/issues/10447. Some other things are also fixed by the two first commits, see more detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11531
https://github.com/root-project/root/pull/11531:346,integrability,event,events,346,"[RF][PyROOT] Skip out-of-range events in `RooDataSet.from_numpy()` and other fixes; The recently-introduced `RooDataSet.from_numpy()` function was clipping. out-of-range events to the variable boundaries instead of clipping them. This behavior was misleading and confusing to the users, because the. import of a TTree just skips out out-of-range events. This commit implements the skipping for `RooDataSet.from_numpy()` as. well, logging also the same warnings when that happens. A unit test that checks the skipping works correctly for categories and. real-valued variables is also implemented. Closes https://github.com/root-project/root/issues/10447. Some other things are also fixed by the two first commits, see more detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11531
https://github.com/root-project/root/pull/11531:184,modifiability,variab,variable,184,"[RF][PyROOT] Skip out-of-range events in `RooDataSet.from_numpy()` and other fixes; The recently-introduced `RooDataSet.from_numpy()` function was clipping. out-of-range events to the variable boundaries instead of clipping them. This behavior was misleading and confusing to the users, because the. import of a TTree just skips out out-of-range events. This commit implements the skipping for `RooDataSet.from_numpy()` as. well, logging also the same warnings when that happens. A unit test that checks the skipping works correctly for categories and. real-valued variables is also implemented. Closes https://github.com/root-project/root/issues/10447. Some other things are also fixed by the two first commits, see more detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11531
https://github.com/root-project/root/pull/11531:565,modifiability,variab,variables,565,"[RF][PyROOT] Skip out-of-range events in `RooDataSet.from_numpy()` and other fixes; The recently-introduced `RooDataSet.from_numpy()` function was clipping. out-of-range events to the variable boundaries instead of clipping them. This behavior was misleading and confusing to the users, because the. import of a TTree just skips out out-of-range events. This commit implements the skipping for `RooDataSet.from_numpy()` as. well, logging also the same warnings when that happens. A unit test that checks the skipping works correctly for categories and. real-valued variables is also implemented. Closes https://github.com/root-project/root/issues/10447. Some other things are also fixed by the two first commits, see more detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11531
https://github.com/root-project/root/pull/11531:430,safety,log,logging,430,"[RF][PyROOT] Skip out-of-range events in `RooDataSet.from_numpy()` and other fixes; The recently-introduced `RooDataSet.from_numpy()` function was clipping. out-of-range events to the variable boundaries instead of clipping them. This behavior was misleading and confusing to the users, because the. import of a TTree just skips out out-of-range events. This commit implements the skipping for `RooDataSet.from_numpy()` as. well, logging also the same warnings when that happens. A unit test that checks the skipping works correctly for categories and. real-valued variables is also implemented. Closes https://github.com/root-project/root/issues/10447. Some other things are also fixed by the two first commits, see more detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11531
https://github.com/root-project/root/pull/11531:487,safety,test,test,487,"[RF][PyROOT] Skip out-of-range events in `RooDataSet.from_numpy()` and other fixes; The recently-introduced `RooDataSet.from_numpy()` function was clipping. out-of-range events to the variable boundaries instead of clipping them. This behavior was misleading and confusing to the users, because the. import of a TTree just skips out out-of-range events. This commit implements the skipping for `RooDataSet.from_numpy()` as. well, logging also the same warnings when that happens. A unit test that checks the skipping works correctly for categories and. real-valued variables is also implemented. Closes https://github.com/root-project/root/issues/10447. Some other things are also fixed by the two first commits, see more detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11531
https://github.com/root-project/root/pull/11531:430,security,log,logging,430,"[RF][PyROOT] Skip out-of-range events in `RooDataSet.from_numpy()` and other fixes; The recently-introduced `RooDataSet.from_numpy()` function was clipping. out-of-range events to the variable boundaries instead of clipping them. This behavior was misleading and confusing to the users, because the. import of a TTree just skips out out-of-range events. This commit implements the skipping for `RooDataSet.from_numpy()` as. well, logging also the same warnings when that happens. A unit test that checks the skipping works correctly for categories and. real-valued variables is also implemented. Closes https://github.com/root-project/root/issues/10447. Some other things are also fixed by the two first commits, see more detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11531
https://github.com/root-project/root/pull/11531:430,testability,log,logging,430,"[RF][PyROOT] Skip out-of-range events in `RooDataSet.from_numpy()` and other fixes; The recently-introduced `RooDataSet.from_numpy()` function was clipping. out-of-range events to the variable boundaries instead of clipping them. This behavior was misleading and confusing to the users, because the. import of a TTree just skips out out-of-range events. This commit implements the skipping for `RooDataSet.from_numpy()` as. well, logging also the same warnings when that happens. A unit test that checks the skipping works correctly for categories and. real-valued variables is also implemented. Closes https://github.com/root-project/root/issues/10447. Some other things are also fixed by the two first commits, see more detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11531
https://github.com/root-project/root/pull/11531:482,testability,unit,unit,482,"[RF][PyROOT] Skip out-of-range events in `RooDataSet.from_numpy()` and other fixes; The recently-introduced `RooDataSet.from_numpy()` function was clipping. out-of-range events to the variable boundaries instead of clipping them. This behavior was misleading and confusing to the users, because the. import of a TTree just skips out out-of-range events. This commit implements the skipping for `RooDataSet.from_numpy()` as. well, logging also the same warnings when that happens. A unit test that checks the skipping works correctly for categories and. real-valued variables is also implemented. Closes https://github.com/root-project/root/issues/10447. Some other things are also fixed by the two first commits, see more detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11531
https://github.com/root-project/root/pull/11531:487,testability,test,test,487,"[RF][PyROOT] Skip out-of-range events in `RooDataSet.from_numpy()` and other fixes; The recently-introduced `RooDataSet.from_numpy()` function was clipping. out-of-range events to the variable boundaries instead of clipping them. This behavior was misleading and confusing to the users, because the. import of a TTree just skips out out-of-range events. This commit implements the skipping for `RooDataSet.from_numpy()` as. well, logging also the same warnings when that happens. A unit test that checks the skipping works correctly for categories and. real-valued variables is also implemented. Closes https://github.com/root-project/root/issues/10447. Some other things are also fixed by the two first commits, see more detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11531
https://github.com/root-project/root/pull/11531:235,usability,behavi,behavior,235,"[RF][PyROOT] Skip out-of-range events in `RooDataSet.from_numpy()` and other fixes; The recently-introduced `RooDataSet.from_numpy()` function was clipping. out-of-range events to the variable boundaries instead of clipping them. This behavior was misleading and confusing to the users, because the. import of a TTree just skips out out-of-range events. This commit implements the skipping for `RooDataSet.from_numpy()` as. well, logging also the same warnings when that happens. A unit test that checks the skipping works correctly for categories and. real-valued variables is also implemented. Closes https://github.com/root-project/root/issues/10447. Some other things are also fixed by the two first commits, see more detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11531
https://github.com/root-project/root/pull/11531:280,usability,user,users,280,"[RF][PyROOT] Skip out-of-range events in `RooDataSet.from_numpy()` and other fixes; The recently-introduced `RooDataSet.from_numpy()` function was clipping. out-of-range events to the variable boundaries instead of clipping them. This behavior was misleading and confusing to the users, because the. import of a TTree just skips out out-of-range events. This commit implements the skipping for `RooDataSet.from_numpy()` as. well, logging also the same warnings when that happens. A unit test that checks the skipping works correctly for categories and. real-valued variables is also implemented. Closes https://github.com/root-project/root/issues/10447. Some other things are also fixed by the two first commits, see more detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11531
https://github.com/root-project/root/pull/11531:596,usability,Close,Closes,596,"[RF][PyROOT] Skip out-of-range events in `RooDataSet.from_numpy()` and other fixes; The recently-introduced `RooDataSet.from_numpy()` function was clipping. out-of-range events to the variable boundaries instead of clipping them. This behavior was misleading and confusing to the users, because the. import of a TTree just skips out out-of-range events. This commit implements the skipping for `RooDataSet.from_numpy()` as. well, logging also the same warnings when that happens. A unit test that checks the skipping works correctly for categories and. real-valued variables is also implemented. Closes https://github.com/root-project/root/issues/10447. Some other things are also fixed by the two first commits, see more detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11531
https://github.com/root-project/root/pull/11532:383,availability,servic,services,383,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:541,availability,servic,services,541,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:256,deployability,fail,fails,256,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:383,deployability,servic,services,383,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:541,deployability,servic,services,541,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:383,integrability,servic,services,383,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:541,integrability,servic,services,541,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:383,modifiability,servic,services,383,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:541,modifiability,servic,services,541,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:256,reliability,fail,fails,256,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:49,safety,test,test,49,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:221,safety,test,test,221,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:306,safety,test,test,306,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:49,testability,test,test,49,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:216,testability,unit,unit,216,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:221,testability,test,test,221,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:301,testability,unit,unit,301,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/pull/11532:306,testability,test,test,306,"[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows; Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink. * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11532
https://github.com/root-project/root/issues/11533:1002,modifiability,variab,variable,1002,"Problem with fprintf in root; Hi everybody,. I am using root on Win64:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for win64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With MSVC 19.32.31332.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. and I have the following function:. ```. void test() {. FILE *fid = fopen(""testfile.txt"", ""wt"");. if (fid != NULL) {. fprintf(fid, ""text\n"");. //fprintf(fid, "" %d \n"", 1);. fclose(fid);. } else {. printf(""File is not created.\n"");. }. }. ```. This function is working correctly. But if I remove the comment mark // with the intention to write a decimal number in the file (in this case, the decimal number is just 1), root terminates and the file is empty. This happens in all cases when I am trying to write any variable to the file. Do you have some idea where the problem is? ([See also the forum](https://root-forum.cern.ch/t/problem-with-fprintf-in-root/51924)). Vladimir.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11533
https://github.com/root-project/root/issues/11533:535,safety,test,test,535,"Problem with fprintf in root; Hi everybody,. I am using root on Win64:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for win64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With MSVC 19.32.31332.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. and I have the following function:. ```. void test() {. FILE *fid = fopen(""testfile.txt"", ""wt"");. if (fid != NULL) {. fprintf(fid, ""text\n"");. //fprintf(fid, "" %d \n"", 1);. fclose(fid);. } else {. printf(""File is not created.\n"");. }. }. ```. This function is working correctly. But if I remove the comment mark // with the intention to write a decimal number in the file (in this case, the decimal number is just 1), root terminates and the file is empty. This happens in all cases when I am trying to write any variable to the file. Do you have some idea where the problem is? ([See also the forum](https://root-forum.cern.ch/t/problem-with-fprintf-in-root/51924)). Vladimir.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11533
https://github.com/root-project/root/issues/11533:564,safety,test,testfile,564,"Problem with fprintf in root; Hi everybody,. I am using root on Win64:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for win64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With MSVC 19.32.31332.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. and I have the following function:. ```. void test() {. FILE *fid = fopen(""testfile.txt"", ""wt"");. if (fid != NULL) {. fprintf(fid, ""text\n"");. //fprintf(fid, "" %d \n"", 1);. fclose(fid);. } else {. printf(""File is not created.\n"");. }. }. ```. This function is working correctly. But if I remove the comment mark // with the intention to write a decimal number in the file (in this case, the decimal number is just 1), root terminates and the file is empty. This happens in all cases when I am trying to write any variable to the file. Do you have some idea where the problem is? ([See also the forum](https://root-forum.cern.ch/t/problem-with-fprintf-in-root/51924)). Vladimir.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11533
https://github.com/root-project/root/issues/11533:200,security,Team,Team,200,"Problem with fprintf in root; Hi everybody,. I am using root on Win64:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for win64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With MSVC 19.32.31332.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. and I have the following function:. ```. void test() {. FILE *fid = fopen(""testfile.txt"", ""wt"");. if (fid != NULL) {. fprintf(fid, ""text\n"");. //fprintf(fid, "" %d \n"", 1);. fclose(fid);. } else {. printf(""File is not created.\n"");. }. }. ```. This function is working correctly. But if I remove the comment mark // with the intention to write a decimal number in the file (in this case, the decimal number is just 1), root terminates and the file is empty. This happens in all cases when I am trying to write any variable to the file. Do you have some idea where the problem is? ([See also the forum](https://root-forum.cern.ch/t/problem-with-fprintf-in-root/51924)). Vladimir.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11533
https://github.com/root-project/root/issues/11533:535,testability,test,test,535,"Problem with fprintf in root; Hi everybody,. I am using root on Win64:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for win64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With MSVC 19.32.31332.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. and I have the following function:. ```. void test() {. FILE *fid = fopen(""testfile.txt"", ""wt"");. if (fid != NULL) {. fprintf(fid, ""text\n"");. //fprintf(fid, "" %d \n"", 1);. fclose(fid);. } else {. printf(""File is not created.\n"");. }. }. ```. This function is working correctly. But if I remove the comment mark // with the intention to write a decimal number in the file (in this case, the decimal number is just 1), root terminates and the file is empty. This happens in all cases when I am trying to write any variable to the file. Do you have some idea where the problem is? ([See also the forum](https://root-forum.cern.ch/t/problem-with-fprintf-in-root/51924)). Vladimir.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11533
https://github.com/root-project/root/issues/11533:564,testability,test,testfile,564,"Problem with fprintf in root; Hi everybody,. I am using root on Win64:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for win64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With MSVC 19.32.31332.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. and I have the following function:. ```. void test() {. FILE *fid = fopen(""testfile.txt"", ""wt"");. if (fid != NULL) {. fprintf(fid, ""text\n"");. //fprintf(fid, "" %d \n"", 1);. fclose(fid);. } else {. printf(""File is not created.\n"");. }. }. ```. This function is working correctly. But if I remove the comment mark // with the intention to write a decimal number in the file (in this case, the decimal number is just 1), root terminates and the file is empty. This happens in all cases when I am trying to write any variable to the file. Do you have some idea where the problem is? ([See also the forum](https://root-forum.cern.ch/t/problem-with-fprintf-in-root/51924)). Vladimir.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11533
https://github.com/root-project/root/issues/11533:360,usability,help,help,360,"Problem with fprintf in root; Hi everybody,. I am using root on Win64:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for win64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With MSVC 19.32.31332.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. and I have the following function:. ```. void test() {. FILE *fid = fopen(""testfile.txt"", ""wt"");. if (fid != NULL) {. fprintf(fid, ""text\n"");. //fprintf(fid, "" %d \n"", 1);. fclose(fid);. } else {. printf(""File is not created.\n"");. }. }. ```. This function is working correctly. But if I remove the comment mark // with the intention to write a decimal number in the file (in this case, the decimal number is just 1), root terminates and the file is empty. This happens in all cases when I am trying to write any variable to the file. Do you have some idea where the problem is? ([See also the forum](https://root-forum.cern.ch/t/problem-with-fprintf-in-root/51924)). Vladimir.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11533
https://github.com/root-project/root/issues/11534:50,deployability,releas,release,50,"[RF] RooFit open issues and backports for 6.26.12 release; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://git",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:129,deployability,patch,patch,129,"[RF] RooFit open issues and backports for 6.26.12 release; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://git",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:135,deployability,releas,release,135,"[RF] RooFit open issues and backports for 6.26.12 release; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://git",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:208,deployability,releas,releases,208,"[RF] RooFit open issues and backports for 6.26.12 release; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://git",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:551,deployability,patch,patch,551,"[RF] RooFit open issues and backports for 6.26.12 release; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://git",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:557,deployability,releas,release,557,"[RF] RooFit open issues and backports for 6.26.12 release; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://git",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:720,deployability,patch,patch,720,"[RF] RooFit open issues and backports for 6.26.12 release; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://git",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:726,deployability,releas,release,726,"[RF] RooFit open issues and backports for 6.26.12 release; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://git",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:1767,deployability,patch,patches,1767,"se, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://github.com/root-project/root/pull/12709. 6. https://github.com/root-project/root/pull/13728. 7. https://github.com/root-project/root/pull/13773",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:149,performance,time,time,149,"[RF] RooFit open issues and backports for 6.26.12 release; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://git",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:129,safety,patch,patch,129,"[RF] RooFit open issues and backports for 6.26.12 release; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://git",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:551,safety,patch,patch,551,"[RF] RooFit open issues and backports for 6.26.12 release; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://git",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:720,safety,patch,patch,720,"[RF] RooFit open issues and backports for 6.26.12 release; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://git",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:1767,safety,patch,patches,1767,"se, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://github.com/root-project/root/pull/12709. 6. https://github.com/root-project/root/pull/13728. 7. https://github.com/root-project/root/pull/13773",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:129,security,patch,patch,129,"[RF] RooFit open issues and backports for 6.26.12 release; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://git",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:551,security,patch,patch,551,"[RF] RooFit open issues and backports for 6.26.12 release; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://git",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:720,security,patch,patch,720,"[RF] RooFit open issues and backports for 6.26.12 release; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://git",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/issues/11534:1767,security,patch,patches,1767,"se, this time for 6.26.10. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. 5. https://github.com/root-project/root/issues/11059. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11760. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11566. - [x] https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/10873. - [x] https://github.com/root-project/root/pull/11455. Only the third commit that fixes a problem with the `RooBinSamplingPdf`, backporting the full multi-range fit implementation is way too dangerous. - [x] https://github.com/root-project/root/pull/11912. Only the second and third commit about the `RooBinIntegrator`. - [x] https://github.com/root-project/root/pull/12119. - [x] https://github.com/root-project/root/pull/12305. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/12696. - [x] https://github.com/root-project/root/pull/12707. - [x] https://github.com/root-project/root/pull/12867. - [x] https://github.com/root-project/root/pull/12969. - [x] https://github.com/root-project/root/pull/12973. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11748. 2. https://github.com/root-project/root/pull/11848. 3. https://github.com/root-project/root/pull/11961. 4. https://github.com/root-project/root/pull/12322. 5. https://github.com/root-project/root/pull/12709. 6. https://github.com/root-project/root/pull/13728. 7. https://github.com/root-project/root/pull/13773",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11534
https://github.com/root-project/root/pull/11535:330,deployability,patch,patch,330,fix display of items in TBrowser that have a checkbox on MAC; This fixes a display issue on TBrowser on the mac (compiled to coca) where items in the list that had checkboxes against them have their text erroneously displayed that the top of the list rather than next to the item. Please can we backport this fix as well into the patch releases. Thanks!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11535
https://github.com/root-project/root/pull/11535:336,deployability,releas,releases,336,fix display of items in TBrowser that have a checkbox on MAC; This fixes a display issue on TBrowser on the mac (compiled to coca) where items in the list that had checkboxes against them have their text erroneously displayed that the top of the list rather than next to the item. Please can we backport this fix as well into the patch releases. Thanks!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11535
https://github.com/root-project/root/pull/11535:330,safety,patch,patch,330,fix display of items in TBrowser that have a checkbox on MAC; This fixes a display issue on TBrowser on the mac (compiled to coca) where items in the list that had checkboxes against them have their text erroneously displayed that the top of the list rather than next to the item. Please can we backport this fix as well into the patch releases. Thanks!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11535
https://github.com/root-project/root/pull/11535:330,security,patch,patch,330,fix display of items in TBrowser that have a checkbox on MAC; This fixes a display issue on TBrowser on the mac (compiled to coca) where items in the list that had checkboxes against them have their text erroneously displayed that the top of the list rather than next to the item. Please can we backport this fix as well into the patch releases. Thanks!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11535
https://github.com/root-project/root/pull/11536:18,deployability,updat,update,18,TPaletteAxis menu update; Complete the TPaletteAxis menu.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11536
https://github.com/root-project/root/pull/11536:18,safety,updat,update,18,TPaletteAxis menu update; Complete the TPaletteAxis menu.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11536
https://github.com/root-project/root/pull/11536:26,safety,Compl,Complete,26,TPaletteAxis menu update; Complete the TPaletteAxis menu.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11536
https://github.com/root-project/root/pull/11536:18,security,updat,update,18,TPaletteAxis menu update; Complete the TPaletteAxis menu.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11536
https://github.com/root-project/root/pull/11536:26,security,Compl,Complete,26,TPaletteAxis menu update; Complete the TPaletteAxis menu.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11536
https://github.com/root-project/root/pull/11536:13,usability,menu,menu,13,TPaletteAxis menu update; Complete the TPaletteAxis menu.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11536
https://github.com/root-project/root/pull/11536:52,usability,menu,menu,52,TPaletteAxis menu update; Complete the TPaletteAxis menu.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11536
https://github.com/root-project/root/pull/11537:10,deployability,Updat,Update,10,[skip-ci] Update GetRMS help; Fix this issue https://github.com/root-project/root/issues/11456.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11537
https://github.com/root-project/root/pull/11537:10,safety,Updat,Update,10,[skip-ci] Update GetRMS help; Fix this issue https://github.com/root-project/root/issues/11456.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11537
https://github.com/root-project/root/pull/11537:10,security,Updat,Update,10,[skip-ci] Update GetRMS help; Fix this issue https://github.com/root-project/root/issues/11456.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11537
https://github.com/root-project/root/pull/11537:24,usability,help,help,24,[skip-ci] Update GetRMS help; Fix this issue https://github.com/root-project/root/issues/11456.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11537
https://github.com/root-project/root/pull/11538:135,deployability,patch,patch,135,"[DF] Avoid useless calls to TTree::GetBranch; If subBranchName is already in bNamesReg, then we don't need to try to reinsert it. This patch shaves off ~10% from the runtime of an exploration of a large test TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11538
https://github.com/root-project/root/pull/11538:49,integrability,sub,subBranchName,49,"[DF] Avoid useless calls to TTree::GetBranch; If subBranchName is already in bNamesReg, then we don't need to try to reinsert it. This patch shaves off ~10% from the runtime of an exploration of a large test TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11538
https://github.com/root-project/root/pull/11538:5,safety,Avoid,Avoid,5,"[DF] Avoid useless calls to TTree::GetBranch; If subBranchName is already in bNamesReg, then we don't need to try to reinsert it. This patch shaves off ~10% from the runtime of an exploration of a large test TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11538
https://github.com/root-project/root/pull/11538:135,safety,patch,patch,135,"[DF] Avoid useless calls to TTree::GetBranch; If subBranchName is already in bNamesReg, then we don't need to try to reinsert it. This patch shaves off ~10% from the runtime of an exploration of a large test TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11538
https://github.com/root-project/root/pull/11538:203,safety,test,test,203,"[DF] Avoid useless calls to TTree::GetBranch; If subBranchName is already in bNamesReg, then we don't need to try to reinsert it. This patch shaves off ~10% from the runtime of an exploration of a large test TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11538
https://github.com/root-project/root/pull/11538:135,security,patch,patch,135,"[DF] Avoid useless calls to TTree::GetBranch; If subBranchName is already in bNamesReg, then we don't need to try to reinsert it. This patch shaves off ~10% from the runtime of an exploration of a large test TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11538
https://github.com/root-project/root/pull/11538:203,testability,test,test,203,"[DF] Avoid useless calls to TTree::GetBranch; If subBranchName is already in bNamesReg, then we don't need to try to reinsert it. This patch shaves off ~10% from the runtime of an exploration of a large test TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11538
https://github.com/root-project/root/pull/11541:0,deployability,Updat,Updates,0,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:34,deployability,configurat,configuration,34,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:88,deployability,version,version,88,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:148,deployability,version,version,148,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:262,deployability,build,build,262,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:34,integrability,configur,configuration,34,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:88,integrability,version,version,88,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:148,integrability,version,version,148,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:194,integrability,messag,message,194,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:11,interoperability,distribut,distributed,11,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:194,interoperability,messag,message,194,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:220,interoperability,distribut,distributed,220,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:34,modifiability,configur,configuration,34,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:88,modifiability,version,version,88,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:148,modifiability,version,version,148,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:0,safety,Updat,Updates,0,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:0,security,Updat,Updates,0,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:34,security,configur,configuration,34,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:205,security,sign,signal,205,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:75,usability,minim,minimum,75,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11541:133,usability,minim,minimum,133,Updates to distributed RDataFrame configuration; These include:. - Bumping minimum Dask version to 2022.08.1 (see #11515). - Bumping minimum Python version to 3.8 (required by Dask). - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11541
https://github.com/root-project/root/pull/11544:267,availability,Error,Error,267,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:17,deployability,version,version,17,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:44,deployability,releas,release,44,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:297,deployability,Integr,Integration,297,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:398,deployability,Releas,ReleaseNotes,398,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:510,deployability,updat,updated,510,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:273,energy efficiency,Estimat,Estimation,273,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:17,integrability,version,version,17,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:297,integrability,Integr,Integration,297,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:297,interoperability,Integr,Integration,297,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:17,modifiability,version,version,17,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:297,modifiability,Integr,Integration,297,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:267,performance,Error,Error,267,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:297,reliability,Integr,Integration,297,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:267,safety,Error,Error,267,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:480,safety,test,tested,480,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:510,safety,updat,updated,510,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:297,security,Integr,Integration,297,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:510,security,updat,updated,510,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:297,testability,Integr,Integration,297,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:480,testability,test,tested,480,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:87,usability,support,support,87,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:149,usability,support,supported,149,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:214,usability,support,support,214,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11544:267,usability,Error,Error,267,[clad] Bump clad version to v1.0.; This new release includes some improvements:. * Add support for pushforward- and pullback-style functions. * More supported constructs in forward and reverse mode. * Forward mode support for CUDA programs. * AD-based Floating Point Error Estimation Framework. * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11544
https://github.com/root-project/root/pull/11545:81,availability,failur,failure,81,[tmva][sofie] Fix SOFIE tests for nortcxxmodules; This Pull request should fix a failure seen in the nortcxxmod builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11545
https://github.com/root-project/root/pull/11545:81,deployability,fail,failure,81,[tmva][sofie] Fix SOFIE tests for nortcxxmodules; This Pull request should fix a failure seen in the nortcxxmod builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11545
https://github.com/root-project/root/pull/11545:112,deployability,build,builds,112,[tmva][sofie] Fix SOFIE tests for nortcxxmodules; This Pull request should fix a failure seen in the nortcxxmod builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11545
https://github.com/root-project/root/pull/11545:81,performance,failur,failure,81,[tmva][sofie] Fix SOFIE tests for nortcxxmodules; This Pull request should fix a failure seen in the nortcxxmod builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11545
https://github.com/root-project/root/pull/11545:81,reliability,fail,failure,81,[tmva][sofie] Fix SOFIE tests for nortcxxmodules; This Pull request should fix a failure seen in the nortcxxmod builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11545
https://github.com/root-project/root/pull/11545:24,safety,test,tests,24,[tmva][sofie] Fix SOFIE tests for nortcxxmodules; This Pull request should fix a failure seen in the nortcxxmod builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11545
https://github.com/root-project/root/pull/11545:24,testability,test,tests,24,[tmva][sofie] Fix SOFIE tests for nortcxxmodules; This Pull request should fix a failure seen in the nortcxxmod builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11545
https://github.com/root-project/root/pull/11546:115,availability,avail,available,115,[tmva][pymva] Fix and improve Python tutorials and enable tf.keras by default; - Protect usage of pymva when it is available. - Enable tf.keras by default in MethodPyKeras since this is now the standard for Keras. Call also the option `tfkeras`. in addition to `tf.keras` since this form will not work as cmd arg in Python.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11546
https://github.com/root-project/root/pull/11546:194,interoperability,standard,standard,194,[tmva][pymva] Fix and improve Python tutorials and enable tf.keras by default; - Protect usage of pymva when it is available. - Enable tf.keras by default in MethodPyKeras since this is now the standard for Keras. Call also the option `tfkeras`. in addition to `tf.keras` since this form will not work as cmd arg in Python.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11546
https://github.com/root-project/root/pull/11546:115,reliability,availab,available,115,[tmva][pymva] Fix and improve Python tutorials and enable tf.keras by default; - Protect usage of pymva when it is available. - Enable tf.keras by default in MethodPyKeras since this is now the standard for Keras. Call also the option `tfkeras`. in addition to `tf.keras` since this form will not work as cmd arg in Python.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11546
https://github.com/root-project/root/pull/11546:115,safety,avail,available,115,[tmva][pymva] Fix and improve Python tutorials and enable tf.keras by default; - Protect usage of pymva when it is available. - Enable tf.keras by default in MethodPyKeras since this is now the standard for Keras. Call also the option `tfkeras`. in addition to `tf.keras` since this form will not work as cmd arg in Python.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11546
https://github.com/root-project/root/pull/11546:115,security,availab,available,115,[tmva][pymva] Fix and improve Python tutorials and enable tf.keras by default; - Protect usage of pymva when it is available. - Enable tf.keras by default in MethodPyKeras since this is now the standard for Keras. Call also the option `tfkeras`. in addition to `tf.keras` since this form will not work as cmd arg in Python.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11546
https://github.com/root-project/root/pull/11548:48,deployability,integr,integrated,48,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:150,energy efficiency,draw,draw,150,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:298,energy efficiency,Draw,Drawing,298,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:487,energy efficiency,draw,draw,487,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:48,integrability,integr,integrated,48,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:48,interoperability,integr,integrated,48,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:48,modifiability,integr,integrated,48,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:306,performance,perform,performed,306,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:48,reliability,integr,integrated,48,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:185,safety,Input,Input,185,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:48,security,integr,integrated,48,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:48,testability,integr,integrated,48,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:185,usability,Input,Input,185,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:191,usability,help,help,191,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:245,usability,dialog,dialog,245,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:306,usability,perform,performed,306,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:469,usability,widget,widget,469,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:515,usability,user,user-images,515,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11548:632,usability,user,user-images,632,"web-based tree viewer; Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:. 1. Edit draw expressions, cut, options. 2. Input help branch/leafs names as suggested items. 3. Select dialog with fulllist and search over branch list. 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - . like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png). ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11548
https://github.com/root-project/root/pull/11549:360,deployability,configurat,configuration,360,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:425,deployability,configurat,configuration,425,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:663,deployability,configurat,configuration,663,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:1177,deployability,updat,updated,1177,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:11,integrability,interfac,interface,11,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:90,integrability,interfac,interface,90,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:360,integrability,configur,configuration,360,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:425,integrability,configur,configuration,425,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:663,integrability,configur,configuration,663,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:11,interoperability,interfac,interface,11,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:90,interoperability,interfac,interface,90,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:1118,interoperability,format,format,1118,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:11,modifiability,interfac,interface,11,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:90,modifiability,interfac,interface,90,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:360,modifiability,configur,configuration,360,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:425,modifiability,configur,configuration,425,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:524,modifiability,paramet,parameters,524,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:570,modifiability,paramet,parameters,570,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:663,modifiability,configur,configuration,663,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:780,modifiability,maintain,maintain,780,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:849,modifiability,paramet,parameters,849,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:176,performance,parallel,parallel,176,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:251,performance,Parallel,Parallelize,251,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:344,performance,parallel,parallelisation,344,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:554,performance,parallel,parallelisation,554,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:833,performance,parallel,parallelisation,833,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:33,safety,Test,TestStatatistics,33,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:186,safety,test,teststatistics,186,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:780,safety,maintain,maintain,780,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:920,safety,test,tests,920,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:929,safety,test,test,929,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:1147,safety,test,tested,1147,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:1177,safety,updat,updated,1177,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:360,security,configur,configuration,360,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:425,security,configur,configuration,425,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:663,security,configur,configuration,663,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:1177,security,updat,updated,1177,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:33,testability,Test,TestStatatistics,33,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:186,testability,test,teststatistics,186,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:920,testability,test,tests,920,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:929,testability,test,test,929,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:1147,testability,test,tested,1147,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11549:152,usability,Minim,Minimize,152,"[RF] Added interface changes for TestStatatistics classes; # This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11549
https://github.com/root-project/root/pull/11551:247,deployability,version,versions,247,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:519,deployability,fail,fails,519,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:247,integrability,version,versions,247,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:448,integrability,messag,message,448,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:448,interoperability,messag,message,448,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:247,modifiability,version,versions,247,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:198,performance,time,times,198,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:494,reliability,diagno,diagnostic,494,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:519,reliability,fail,fails,519,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:568,reliability,diagno,diagnostic,568,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:40,safety,test,test,40,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:182,safety,compl,complete,182,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:299,safety,review,reviews,299,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:182,security,compl,complete,182,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:40,testability,test,test,40,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:299,testability,review,reviews,299,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:494,testability,diagno,diagnostic,494,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11551:568,testability,diagno,diagnostic,568,"Fix ROOT-7462 with libstdc++ >= 10; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11551
https://github.com/root-project/root/pull/11553:109,safety,input,input,109,[PyROOT] Fixes for Numba.Declare; Fixes #11294 . In particular:. - Properly parses const modifier in type of input argument. - Fixes wrong addition of extra ampersand when passing a reference. - Allows passing temporaries as arguments from RDataFrame,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11553
https://github.com/root-project/root/pull/11553:89,security,modif,modifier,89,[PyROOT] Fixes for Numba.Declare; Fixes #11294 . In particular:. - Properly parses const modifier in type of input argument. - Fixes wrong addition of extra ampersand when passing a reference. - Allows passing temporaries as arguments from RDataFrame,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11553
https://github.com/root-project/root/pull/11553:109,usability,input,input,109,[PyROOT] Fixes for Numba.Declare; Fixes #11294 . In particular:. - Properly parses const modifier in type of input argument. - Fixes wrong addition of extra ampersand when passing a reference. - Allows passing temporaries as arguments from RDataFrame,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11553
https://github.com/root-project/root/pull/11554:339,deployability,Updat,Update,339,"Split web geometry viewer from eve7; Web-based geometry viewer now extracted into separate library. Rename classes: `REveGeomViewer` -> `RGeomViewer`. By this also simplify handling of so-called ""server-side shapes"" - less data can be transferred, no extra workaround for normals calculations. Ease usage of geometry viewer in `RBrowser`. Update JSROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11554
https://github.com/root-project/root/pull/11554:339,safety,Updat,Update,339,"Split web geometry viewer from eve7; Web-based geometry viewer now extracted into separate library. Rename classes: `REveGeomViewer` -> `RGeomViewer`. By this also simplify handling of so-called ""server-side shapes"" - less data can be transferred, no extra workaround for normals calculations. Ease usage of geometry viewer in `RBrowser`. Update JSROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11554
https://github.com/root-project/root/pull/11554:339,security,Updat,Update,339,"Split web geometry viewer from eve7; Web-based geometry viewer now extracted into separate library. Rename classes: `REveGeomViewer` -> `RGeomViewer`. By this also simplify handling of so-called ""server-side shapes"" - less data can be transferred, no extra workaround for normals calculations. Ease usage of geometry viewer in `RBrowser`. Update JSROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11554
https://github.com/root-project/root/pull/11554:164,testability,simpl,simplify,164,"Split web geometry viewer from eve7; Web-based geometry viewer now extracted into separate library. Rename classes: `REveGeomViewer` -> `RGeomViewer`. By this also simplify handling of so-called ""server-side shapes"" - less data can be transferred, no extra workaround for normals calculations. Ease usage of geometry viewer in `RBrowser`. Update JSROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11554
https://github.com/root-project/root/pull/11554:164,usability,simpl,simplify,164,"Split web geometry viewer from eve7; Web-based geometry viewer now extracted into separate library. Rename classes: `REveGeomViewer` -> `RGeomViewer`. By this also simplify handling of so-called ""server-side shapes"" - less data can be transferred, no extra workaround for normals calculations. Ease usage of geometry viewer in `RBrowser`. Update JSROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11554
https://github.com/root-project/root/pull/11555:15,availability,redund,redundant,15,"[RF] Don't use redundant `RooPlot::findObject()` in RooFit tutorials; When using `TLegend::AddEntry()`, it is not necessary to get a pointer to the plotted object via `RooPlot::findObject()`. One can just use the `AddEntry` overload that takes the name as a string, and then looks up the object in the plot itself. This should be updated to avoid that users copy-paste overly verbose code from the tutorials. I noticed this when copy pasting code myself for a RooFit tutorial. Also fixes a typo in `rf711_lagrangianmorph.py`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11555
https://github.com/root-project/root/pull/11555:15,deployability,redundan,redundant,15,"[RF] Don't use redundant `RooPlot::findObject()` in RooFit tutorials; When using `TLegend::AddEntry()`, it is not necessary to get a pointer to the plotted object via `RooPlot::findObject()`. One can just use the `AddEntry` overload that takes the name as a string, and then looks up the object in the plot itself. This should be updated to avoid that users copy-paste overly verbose code from the tutorials. I noticed this when copy pasting code myself for a RooFit tutorial. Also fixes a typo in `rf711_lagrangianmorph.py`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11555
https://github.com/root-project/root/pull/11555:330,deployability,updat,updated,330,"[RF] Don't use redundant `RooPlot::findObject()` in RooFit tutorials; When using `TLegend::AddEntry()`, it is not necessary to get a pointer to the plotted object via `RooPlot::findObject()`. One can just use the `AddEntry` overload that takes the name as a string, and then looks up the object in the plot itself. This should be updated to avoid that users copy-paste overly verbose code from the tutorials. I noticed this when copy pasting code myself for a RooFit tutorial. Also fixes a typo in `rf711_lagrangianmorph.py`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11555
https://github.com/root-project/root/pull/11555:15,reliability,redundan,redundant,15,"[RF] Don't use redundant `RooPlot::findObject()` in RooFit tutorials; When using `TLegend::AddEntry()`, it is not necessary to get a pointer to the plotted object via `RooPlot::findObject()`. One can just use the `AddEntry` overload that takes the name as a string, and then looks up the object in the plot itself. This should be updated to avoid that users copy-paste overly verbose code from the tutorials. I noticed this when copy pasting code myself for a RooFit tutorial. Also fixes a typo in `rf711_lagrangianmorph.py`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11555
https://github.com/root-project/root/pull/11555:15,safety,redund,redundant,15,"[RF] Don't use redundant `RooPlot::findObject()` in RooFit tutorials; When using `TLegend::AddEntry()`, it is not necessary to get a pointer to the plotted object via `RooPlot::findObject()`. One can just use the `AddEntry` overload that takes the name as a string, and then looks up the object in the plot itself. This should be updated to avoid that users copy-paste overly verbose code from the tutorials. I noticed this when copy pasting code myself for a RooFit tutorial. Also fixes a typo in `rf711_lagrangianmorph.py`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11555
https://github.com/root-project/root/pull/11555:330,safety,updat,updated,330,"[RF] Don't use redundant `RooPlot::findObject()` in RooFit tutorials; When using `TLegend::AddEntry()`, it is not necessary to get a pointer to the plotted object via `RooPlot::findObject()`. One can just use the `AddEntry` overload that takes the name as a string, and then looks up the object in the plot itself. This should be updated to avoid that users copy-paste overly verbose code from the tutorials. I noticed this when copy pasting code myself for a RooFit tutorial. Also fixes a typo in `rf711_lagrangianmorph.py`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11555
https://github.com/root-project/root/pull/11555:341,safety,avoid,avoid,341,"[RF] Don't use redundant `RooPlot::findObject()` in RooFit tutorials; When using `TLegend::AddEntry()`, it is not necessary to get a pointer to the plotted object via `RooPlot::findObject()`. One can just use the `AddEntry` overload that takes the name as a string, and then looks up the object in the plot itself. This should be updated to avoid that users copy-paste overly verbose code from the tutorials. I noticed this when copy pasting code myself for a RooFit tutorial. Also fixes a typo in `rf711_lagrangianmorph.py`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11555
https://github.com/root-project/root/pull/11555:330,security,updat,updated,330,"[RF] Don't use redundant `RooPlot::findObject()` in RooFit tutorials; When using `TLegend::AddEntry()`, it is not necessary to get a pointer to the plotted object via `RooPlot::findObject()`. One can just use the `AddEntry` overload that takes the name as a string, and then looks up the object in the plot itself. This should be updated to avoid that users copy-paste overly verbose code from the tutorials. I noticed this when copy pasting code myself for a RooFit tutorial. Also fixes a typo in `rf711_lagrangianmorph.py`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11555
https://github.com/root-project/root/pull/11555:352,usability,user,users,352,"[RF] Don't use redundant `RooPlot::findObject()` in RooFit tutorials; When using `TLegend::AddEntry()`, it is not necessary to get a pointer to the plotted object via `RooPlot::findObject()`. One can just use the `AddEntry` overload that takes the name as a string, and then looks up the object in the plot itself. This should be updated to avoid that users copy-paste overly verbose code from the tutorials. I noticed this when copy pasting code myself for a RooFit tutorial. Also fixes a typo in `rf711_lagrangianmorph.py`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11555
https://github.com/root-project/root/pull/11556:685,availability,cluster,cluster,685,"MakeProject: workaound deficiency in gcc 11.2 warning; On Ubuntu 22, gcc 11.2 with get the apparently spurious message:. ```. aliceesdProjectSource.cxx: In copy constructor ‘AliESDkink::AliESDkink(const AliESDkink&)’:. aliceesdProjectSource.cxx:992:54: warning: writing 16 bytes into a region of size 8 [-Wstringop-overflow=]. 992 | for (Int_t i=0;i<4;i++) (&(fTPCdensity[0][0]))[i] = (&(rhs.fTPCdensity[0][0]))[i];. | ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In file included from aliceesdProjectHeaders.h:20,. from aliceesdProjectSource.cxx:3:. AliESDkink.h:36:26: note: destination object ‘AliESDkink::fTPCdensity’ of size 8. 36 | Float_t fTPCdensity[2][2]; //tpc cluster density before and after kink. | ^~~~~~~~~~~. ^~~~~~~~~~~. ```. I.e. complaining about having only 8 bytes when 16 are reserved. We work around this issue by using:. ```. for (Int_t i=0;i<4;i++) reinterpret_cast<Float_t*>(fTPCdensity)[i] = (&(rhs.fTPCdensity[0][0]))[i];. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11556
https://github.com/root-project/root/pull/11556:685,deployability,cluster,cluster,685,"MakeProject: workaound deficiency in gcc 11.2 warning; On Ubuntu 22, gcc 11.2 with get the apparently spurious message:. ```. aliceesdProjectSource.cxx: In copy constructor ‘AliESDkink::AliESDkink(const AliESDkink&)’:. aliceesdProjectSource.cxx:992:54: warning: writing 16 bytes into a region of size 8 [-Wstringop-overflow=]. 992 | for (Int_t i=0;i<4;i++) (&(fTPCdensity[0][0]))[i] = (&(rhs.fTPCdensity[0][0]))[i];. | ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In file included from aliceesdProjectHeaders.h:20,. from aliceesdProjectSource.cxx:3:. AliESDkink.h:36:26: note: destination object ‘AliESDkink::fTPCdensity’ of size 8. 36 | Float_t fTPCdensity[2][2]; //tpc cluster density before and after kink. | ^~~~~~~~~~~. ^~~~~~~~~~~. ```. I.e. complaining about having only 8 bytes when 16 are reserved. We work around this issue by using:. ```. for (Int_t i=0;i<4;i++) reinterpret_cast<Float_t*>(fTPCdensity)[i] = (&(rhs.fTPCdensity[0][0]))[i];. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11556
https://github.com/root-project/root/pull/11556:111,integrability,messag,message,111,"MakeProject: workaound deficiency in gcc 11.2 warning; On Ubuntu 22, gcc 11.2 with get the apparently spurious message:. ```. aliceesdProjectSource.cxx: In copy constructor ‘AliESDkink::AliESDkink(const AliESDkink&)’:. aliceesdProjectSource.cxx:992:54: warning: writing 16 bytes into a region of size 8 [-Wstringop-overflow=]. 992 | for (Int_t i=0;i<4;i++) (&(fTPCdensity[0][0]))[i] = (&(rhs.fTPCdensity[0][0]))[i];. | ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In file included from aliceesdProjectHeaders.h:20,. from aliceesdProjectSource.cxx:3:. AliESDkink.h:36:26: note: destination object ‘AliESDkink::fTPCdensity’ of size 8. 36 | Float_t fTPCdensity[2][2]; //tpc cluster density before and after kink. | ^~~~~~~~~~~. ^~~~~~~~~~~. ```. I.e. complaining about having only 8 bytes when 16 are reserved. We work around this issue by using:. ```. for (Int_t i=0;i<4;i++) reinterpret_cast<Float_t*>(fTPCdensity)[i] = (&(rhs.fTPCdensity[0][0]))[i];. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11556
https://github.com/root-project/root/pull/11556:111,interoperability,messag,message,111,"MakeProject: workaound deficiency in gcc 11.2 warning; On Ubuntu 22, gcc 11.2 with get the apparently spurious message:. ```. aliceesdProjectSource.cxx: In copy constructor ‘AliESDkink::AliESDkink(const AliESDkink&)’:. aliceesdProjectSource.cxx:992:54: warning: writing 16 bytes into a region of size 8 [-Wstringop-overflow=]. 992 | for (Int_t i=0;i<4;i++) (&(fTPCdensity[0][0]))[i] = (&(rhs.fTPCdensity[0][0]))[i];. | ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In file included from aliceesdProjectHeaders.h:20,. from aliceesdProjectSource.cxx:3:. AliESDkink.h:36:26: note: destination object ‘AliESDkink::fTPCdensity’ of size 8. 36 | Float_t fTPCdensity[2][2]; //tpc cluster density before and after kink. | ^~~~~~~~~~~. ^~~~~~~~~~~. ```. I.e. complaining about having only 8 bytes when 16 are reserved. We work around this issue by using:. ```. for (Int_t i=0;i<4;i++) reinterpret_cast<Float_t*>(fTPCdensity)[i] = (&(rhs.fTPCdensity[0][0]))[i];. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11556
https://github.com/root-project/root/pull/11556:762,safety,compl,complaining,762,"MakeProject: workaound deficiency in gcc 11.2 warning; On Ubuntu 22, gcc 11.2 with get the apparently spurious message:. ```. aliceesdProjectSource.cxx: In copy constructor ‘AliESDkink::AliESDkink(const AliESDkink&)’:. aliceesdProjectSource.cxx:992:54: warning: writing 16 bytes into a region of size 8 [-Wstringop-overflow=]. 992 | for (Int_t i=0;i<4;i++) (&(fTPCdensity[0][0]))[i] = (&(rhs.fTPCdensity[0][0]))[i];. | ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In file included from aliceesdProjectHeaders.h:20,. from aliceesdProjectSource.cxx:3:. AliESDkink.h:36:26: note: destination object ‘AliESDkink::fTPCdensity’ of size 8. 36 | Float_t fTPCdensity[2][2]; //tpc cluster density before and after kink. | ^~~~~~~~~~~. ^~~~~~~~~~~. ```. I.e. complaining about having only 8 bytes when 16 are reserved. We work around this issue by using:. ```. for (Int_t i=0;i<4;i++) reinterpret_cast<Float_t*>(fTPCdensity)[i] = (&(rhs.fTPCdensity[0][0]))[i];. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11556
https://github.com/root-project/root/pull/11556:762,security,compl,complaining,762,"MakeProject: workaound deficiency in gcc 11.2 warning; On Ubuntu 22, gcc 11.2 with get the apparently spurious message:. ```. aliceesdProjectSource.cxx: In copy constructor ‘AliESDkink::AliESDkink(const AliESDkink&)’:. aliceesdProjectSource.cxx:992:54: warning: writing 16 bytes into a region of size 8 [-Wstringop-overflow=]. 992 | for (Int_t i=0;i<4;i++) (&(fTPCdensity[0][0]))[i] = (&(rhs.fTPCdensity[0][0]))[i];. | ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In file included from aliceesdProjectHeaders.h:20,. from aliceesdProjectSource.cxx:3:. AliESDkink.h:36:26: note: destination object ‘AliESDkink::fTPCdensity’ of size 8. 36 | Float_t fTPCdensity[2][2]; //tpc cluster density before and after kink. | ^~~~~~~~~~~. ^~~~~~~~~~~. ```. I.e. complaining about having only 8 bytes when 16 are reserved. We work around this issue by using:. ```. for (Int_t i=0;i<4;i++) reinterpret_cast<Float_t*>(fTPCdensity)[i] = (&(rhs.fTPCdensity[0][0]))[i];. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11556
https://github.com/root-project/root/pull/11557:767,deployability,fail,fails,767,"thisroot.sh: refactor with shellcheck; thisroot.fish: `dirname` -> `path dirname` to reduce deps; # This Pull request:. ## Changes or fixes:. * `thisroot.sh`:. * Pass `shellcheck`. ```sh. shellcheck -s sh config/thisroot.sh. shellcheck -s dash config/thisroot.sh. shellcheck -s ksh config/thisroot.sh. shellcheck -s bash config/thisroot.sh. ```. Notable fixes:. * <code>&DiacriticalGrave;my-command&DiacriticalGrave;</code> -> `$(my-command)`. (SC2006, &DiacriticalGrave;&DiacriticalGrave; is a legacy Bourn shell syntax with several issues). * `[ ""x$foo"" = ""x"" ]` -> `[ -z ""${foo-}"" ]` and `[ ""x$foo"" != ""x"" ]` -> `[ -n ""${foo-}""]`. * `cond && run-true || run-false` -> `if cond; then run-true; else run false; fi`. (SC2015: run-false may be triggered when run-true fails). * [ ""$foo"" == ""$bar"" ] -> [ ""$foo"" = ""$bar"" ] (SC3014, POSIX-conformance). * Fix unbound variables. * Whenever a variable `$foo` is possibly not set, call it like `${foo-}`. * Now it can be sourced with `set -u`. * Unify indentation: use three spaces everywhere. * `thisroot.fish`:. * `dirname` -> `path dirname` so that Fish users don't have to call the `dirname` executable. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11557
https://github.com/root-project/root/pull/11557:1203,deployability,updat,updated,1203,"thisroot.sh: refactor with shellcheck; thisroot.fish: `dirname` -> `path dirname` to reduce deps; # This Pull request:. ## Changes or fixes:. * `thisroot.sh`:. * Pass `shellcheck`. ```sh. shellcheck -s sh config/thisroot.sh. shellcheck -s dash config/thisroot.sh. shellcheck -s ksh config/thisroot.sh. shellcheck -s bash config/thisroot.sh. ```. Notable fixes:. * <code>&DiacriticalGrave;my-command&DiacriticalGrave;</code> -> `$(my-command)`. (SC2006, &DiacriticalGrave;&DiacriticalGrave; is a legacy Bourn shell syntax with several issues). * `[ ""x$foo"" = ""x"" ]` -> `[ -z ""${foo-}"" ]` and `[ ""x$foo"" != ""x"" ]` -> `[ -n ""${foo-}""]`. * `cond && run-true || run-false` -> `if cond; then run-true; else run false; fi`. (SC2015: run-false may be triggered when run-true fails). * [ ""$foo"" == ""$bar"" ] -> [ ""$foo"" = ""$bar"" ] (SC3014, POSIX-conformance). * Fix unbound variables. * Whenever a variable `$foo` is possibly not set, call it like `${foo-}`. * Now it can be sourced with `set -u`. * Unify indentation: use three spaces everywhere. * `thisroot.fish`:. * `dirname` -> `path dirname` so that Fish users don't have to call the `dirname` executable. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11557
https://github.com/root-project/root/pull/11557:85,energy efficiency,reduc,reduce,85,"thisroot.sh: refactor with shellcheck; thisroot.fish: `dirname` -> `path dirname` to reduce deps; # This Pull request:. ## Changes or fixes:. * `thisroot.sh`:. * Pass `shellcheck`. ```sh. shellcheck -s sh config/thisroot.sh. shellcheck -s dash config/thisroot.sh. shellcheck -s ksh config/thisroot.sh. shellcheck -s bash config/thisroot.sh. ```. Notable fixes:. * <code>&DiacriticalGrave;my-command&DiacriticalGrave;</code> -> `$(my-command)`. (SC2006, &DiacriticalGrave;&DiacriticalGrave; is a legacy Bourn shell syntax with several issues). * `[ ""x$foo"" = ""x"" ]` -> `[ -z ""${foo-}"" ]` and `[ ""x$foo"" != ""x"" ]` -> `[ -n ""${foo-}""]`. * `cond && run-true || run-false` -> `if cond; then run-true; else run false; fi`. (SC2015: run-false may be triggered when run-true fails). * [ ""$foo"" == ""$bar"" ] -> [ ""$foo"" = ""$bar"" ] (SC3014, POSIX-conformance). * Fix unbound variables. * Whenever a variable `$foo` is possibly not set, call it like `${foo-}`. * Now it can be sourced with `set -u`. * Unify indentation: use three spaces everywhere. * `thisroot.fish`:. * `dirname` -> `path dirname` so that Fish users don't have to call the `dirname` executable. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11557
https://github.com/root-project/root/pull/11557:13,modifiability,refact,refactor,13,"thisroot.sh: refactor with shellcheck; thisroot.fish: `dirname` -> `path dirname` to reduce deps; # This Pull request:. ## Changes or fixes:. * `thisroot.sh`:. * Pass `shellcheck`. ```sh. shellcheck -s sh config/thisroot.sh. shellcheck -s dash config/thisroot.sh. shellcheck -s ksh config/thisroot.sh. shellcheck -s bash config/thisroot.sh. ```. Notable fixes:. * <code>&DiacriticalGrave;my-command&DiacriticalGrave;</code> -> `$(my-command)`. (SC2006, &DiacriticalGrave;&DiacriticalGrave; is a legacy Bourn shell syntax with several issues). * `[ ""x$foo"" = ""x"" ]` -> `[ -z ""${foo-}"" ]` and `[ ""x$foo"" != ""x"" ]` -> `[ -n ""${foo-}""]`. * `cond && run-true || run-false` -> `if cond; then run-true; else run false; fi`. (SC2015: run-false may be triggered when run-true fails). * [ ""$foo"" == ""$bar"" ] -> [ ""$foo"" = ""$bar"" ] (SC3014, POSIX-conformance). * Fix unbound variables. * Whenever a variable `$foo` is possibly not set, call it like `${foo-}`. * Now it can be sourced with `set -u`. * Unify indentation: use three spaces everywhere. * `thisroot.fish`:. * `dirname` -> `path dirname` so that Fish users don't have to call the `dirname` executable. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11557
https://github.com/root-project/root/pull/11557:864,modifiability,variab,variables,864,"thisroot.sh: refactor with shellcheck; thisroot.fish: `dirname` -> `path dirname` to reduce deps; # This Pull request:. ## Changes or fixes:. * `thisroot.sh`:. * Pass `shellcheck`. ```sh. shellcheck -s sh config/thisroot.sh. shellcheck -s dash config/thisroot.sh. shellcheck -s ksh config/thisroot.sh. shellcheck -s bash config/thisroot.sh. ```. Notable fixes:. * <code>&DiacriticalGrave;my-command&DiacriticalGrave;</code> -> `$(my-command)`. (SC2006, &DiacriticalGrave;&DiacriticalGrave; is a legacy Bourn shell syntax with several issues). * `[ ""x$foo"" = ""x"" ]` -> `[ -z ""${foo-}"" ]` and `[ ""x$foo"" != ""x"" ]` -> `[ -n ""${foo-}""]`. * `cond && run-true || run-false` -> `if cond; then run-true; else run false; fi`. (SC2015: run-false may be triggered when run-true fails). * [ ""$foo"" == ""$bar"" ] -> [ ""$foo"" = ""$bar"" ] (SC3014, POSIX-conformance). * Fix unbound variables. * Whenever a variable `$foo` is possibly not set, call it like `${foo-}`. * Now it can be sourced with `set -u`. * Unify indentation: use three spaces everywhere. * `thisroot.fish`:. * `dirname` -> `path dirname` so that Fish users don't have to call the `dirname` executable. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11557
https://github.com/root-project/root/pull/11557:888,modifiability,variab,variable,888,"thisroot.sh: refactor with shellcheck; thisroot.fish: `dirname` -> `path dirname` to reduce deps; # This Pull request:. ## Changes or fixes:. * `thisroot.sh`:. * Pass `shellcheck`. ```sh. shellcheck -s sh config/thisroot.sh. shellcheck -s dash config/thisroot.sh. shellcheck -s ksh config/thisroot.sh. shellcheck -s bash config/thisroot.sh. ```. Notable fixes:. * <code>&DiacriticalGrave;my-command&DiacriticalGrave;</code> -> `$(my-command)`. (SC2006, &DiacriticalGrave;&DiacriticalGrave; is a legacy Bourn shell syntax with several issues). * `[ ""x$foo"" = ""x"" ]` -> `[ -z ""${foo-}"" ]` and `[ ""x$foo"" != ""x"" ]` -> `[ -n ""${foo-}""]`. * `cond && run-true || run-false` -> `if cond; then run-true; else run false; fi`. (SC2015: run-false may be triggered when run-true fails). * [ ""$foo"" == ""$bar"" ] -> [ ""$foo"" = ""$bar"" ] (SC3014, POSIX-conformance). * Fix unbound variables. * Whenever a variable `$foo` is possibly not set, call it like `${foo-}`. * Now it can be sourced with `set -u`. * Unify indentation: use three spaces everywhere. * `thisroot.fish`:. * `dirname` -> `path dirname` so that Fish users don't have to call the `dirname` executable. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11557
https://github.com/root-project/root/pull/11557:13,performance,refactor,refactor,13,"thisroot.sh: refactor with shellcheck; thisroot.fish: `dirname` -> `path dirname` to reduce deps; # This Pull request:. ## Changes or fixes:. * `thisroot.sh`:. * Pass `shellcheck`. ```sh. shellcheck -s sh config/thisroot.sh. shellcheck -s dash config/thisroot.sh. shellcheck -s ksh config/thisroot.sh. shellcheck -s bash config/thisroot.sh. ```. Notable fixes:. * <code>&DiacriticalGrave;my-command&DiacriticalGrave;</code> -> `$(my-command)`. (SC2006, &DiacriticalGrave;&DiacriticalGrave; is a legacy Bourn shell syntax with several issues). * `[ ""x$foo"" = ""x"" ]` -> `[ -z ""${foo-}"" ]` and `[ ""x$foo"" != ""x"" ]` -> `[ -n ""${foo-}""]`. * `cond && run-true || run-false` -> `if cond; then run-true; else run false; fi`. (SC2015: run-false may be triggered when run-true fails). * [ ""$foo"" == ""$bar"" ] -> [ ""$foo"" = ""$bar"" ] (SC3014, POSIX-conformance). * Fix unbound variables. * Whenever a variable `$foo` is possibly not set, call it like `${foo-}`. * Now it can be sourced with `set -u`. * Unify indentation: use three spaces everywhere. * `thisroot.fish`:. * `dirname` -> `path dirname` so that Fish users don't have to call the `dirname` executable. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11557
https://github.com/root-project/root/pull/11557:767,reliability,fail,fails,767,"thisroot.sh: refactor with shellcheck; thisroot.fish: `dirname` -> `path dirname` to reduce deps; # This Pull request:. ## Changes or fixes:. * `thisroot.sh`:. * Pass `shellcheck`. ```sh. shellcheck -s sh config/thisroot.sh. shellcheck -s dash config/thisroot.sh. shellcheck -s ksh config/thisroot.sh. shellcheck -s bash config/thisroot.sh. ```. Notable fixes:. * <code>&DiacriticalGrave;my-command&DiacriticalGrave;</code> -> `$(my-command)`. (SC2006, &DiacriticalGrave;&DiacriticalGrave; is a legacy Bourn shell syntax with several issues). * `[ ""x$foo"" = ""x"" ]` -> `[ -z ""${foo-}"" ]` and `[ ""x$foo"" != ""x"" ]` -> `[ -n ""${foo-}""]`. * `cond && run-true || run-false` -> `if cond; then run-true; else run false; fi`. (SC2015: run-false may be triggered when run-true fails). * [ ""$foo"" == ""$bar"" ] -> [ ""$foo"" = ""$bar"" ] (SC3014, POSIX-conformance). * Fix unbound variables. * Whenever a variable `$foo` is possibly not set, call it like `${foo-}`. * Now it can be sourced with `set -u`. * Unify indentation: use three spaces everywhere. * `thisroot.fish`:. * `dirname` -> `path dirname` so that Fish users don't have to call the `dirname` executable. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11557
https://github.com/root-project/root/pull/11557:1173,safety,test,tested,1173,"thisroot.sh: refactor with shellcheck; thisroot.fish: `dirname` -> `path dirname` to reduce deps; # This Pull request:. ## Changes or fixes:. * `thisroot.sh`:. * Pass `shellcheck`. ```sh. shellcheck -s sh config/thisroot.sh. shellcheck -s dash config/thisroot.sh. shellcheck -s ksh config/thisroot.sh. shellcheck -s bash config/thisroot.sh. ```. Notable fixes:. * <code>&DiacriticalGrave;my-command&DiacriticalGrave;</code> -> `$(my-command)`. (SC2006, &DiacriticalGrave;&DiacriticalGrave; is a legacy Bourn shell syntax with several issues). * `[ ""x$foo"" = ""x"" ]` -> `[ -z ""${foo-}"" ]` and `[ ""x$foo"" != ""x"" ]` -> `[ -n ""${foo-}""]`. * `cond && run-true || run-false` -> `if cond; then run-true; else run false; fi`. (SC2015: run-false may be triggered when run-true fails). * [ ""$foo"" == ""$bar"" ] -> [ ""$foo"" = ""$bar"" ] (SC3014, POSIX-conformance). * Fix unbound variables. * Whenever a variable `$foo` is possibly not set, call it like `${foo-}`. * Now it can be sourced with `set -u`. * Unify indentation: use three spaces everywhere. * `thisroot.fish`:. * `dirname` -> `path dirname` so that Fish users don't have to call the `dirname` executable. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11557
https://github.com/root-project/root/pull/11557:1203,safety,updat,updated,1203,"thisroot.sh: refactor with shellcheck; thisroot.fish: `dirname` -> `path dirname` to reduce deps; # This Pull request:. ## Changes or fixes:. * `thisroot.sh`:. * Pass `shellcheck`. ```sh. shellcheck -s sh config/thisroot.sh. shellcheck -s dash config/thisroot.sh. shellcheck -s ksh config/thisroot.sh. shellcheck -s bash config/thisroot.sh. ```. Notable fixes:. * <code>&DiacriticalGrave;my-command&DiacriticalGrave;</code> -> `$(my-command)`. (SC2006, &DiacriticalGrave;&DiacriticalGrave; is a legacy Bourn shell syntax with several issues). * `[ ""x$foo"" = ""x"" ]` -> `[ -z ""${foo-}"" ]` and `[ ""x$foo"" != ""x"" ]` -> `[ -n ""${foo-}""]`. * `cond && run-true || run-false` -> `if cond; then run-true; else run false; fi`. (SC2015: run-false may be triggered when run-true fails). * [ ""$foo"" == ""$bar"" ] -> [ ""$foo"" = ""$bar"" ] (SC3014, POSIX-conformance). * Fix unbound variables. * Whenever a variable `$foo` is possibly not set, call it like `${foo-}`. * Now it can be sourced with `set -u`. * Unify indentation: use three spaces everywhere. * `thisroot.fish`:. * `dirname` -> `path dirname` so that Fish users don't have to call the `dirname` executable. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11557
https://github.com/root-project/root/pull/11557:1203,security,updat,updated,1203,"thisroot.sh: refactor with shellcheck; thisroot.fish: `dirname` -> `path dirname` to reduce deps; # This Pull request:. ## Changes or fixes:. * `thisroot.sh`:. * Pass `shellcheck`. ```sh. shellcheck -s sh config/thisroot.sh. shellcheck -s dash config/thisroot.sh. shellcheck -s ksh config/thisroot.sh. shellcheck -s bash config/thisroot.sh. ```. Notable fixes:. * <code>&DiacriticalGrave;my-command&DiacriticalGrave;</code> -> `$(my-command)`. (SC2006, &DiacriticalGrave;&DiacriticalGrave; is a legacy Bourn shell syntax with several issues). * `[ ""x$foo"" = ""x"" ]` -> `[ -z ""${foo-}"" ]` and `[ ""x$foo"" != ""x"" ]` -> `[ -n ""${foo-}""]`. * `cond && run-true || run-false` -> `if cond; then run-true; else run false; fi`. (SC2015: run-false may be triggered when run-true fails). * [ ""$foo"" == ""$bar"" ] -> [ ""$foo"" = ""$bar"" ] (SC3014, POSIX-conformance). * Fix unbound variables. * Whenever a variable `$foo` is possibly not set, call it like `${foo-}`. * Now it can be sourced with `set -u`. * Unify indentation: use three spaces everywhere. * `thisroot.fish`:. * `dirname` -> `path dirname` so that Fish users don't have to call the `dirname` executable. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11557
https://github.com/root-project/root/pull/11557:1173,testability,test,tested,1173,"thisroot.sh: refactor with shellcheck; thisroot.fish: `dirname` -> `path dirname` to reduce deps; # This Pull request:. ## Changes or fixes:. * `thisroot.sh`:. * Pass `shellcheck`. ```sh. shellcheck -s sh config/thisroot.sh. shellcheck -s dash config/thisroot.sh. shellcheck -s ksh config/thisroot.sh. shellcheck -s bash config/thisroot.sh. ```. Notable fixes:. * <code>&DiacriticalGrave;my-command&DiacriticalGrave;</code> -> `$(my-command)`. (SC2006, &DiacriticalGrave;&DiacriticalGrave; is a legacy Bourn shell syntax with several issues). * `[ ""x$foo"" = ""x"" ]` -> `[ -z ""${foo-}"" ]` and `[ ""x$foo"" != ""x"" ]` -> `[ -n ""${foo-}""]`. * `cond && run-true || run-false` -> `if cond; then run-true; else run false; fi`. (SC2015: run-false may be triggered when run-true fails). * [ ""$foo"" == ""$bar"" ] -> [ ""$foo"" = ""$bar"" ] (SC3014, POSIX-conformance). * Fix unbound variables. * Whenever a variable `$foo` is possibly not set, call it like `${foo-}`. * Now it can be sourced with `set -u`. * Unify indentation: use three spaces everywhere. * `thisroot.fish`:. * `dirname` -> `path dirname` so that Fish users don't have to call the `dirname` executable. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11557
https://github.com/root-project/root/pull/11557:391,usability,command,command,391,"thisroot.sh: refactor with shellcheck; thisroot.fish: `dirname` -> `path dirname` to reduce deps; # This Pull request:. ## Changes or fixes:. * `thisroot.sh`:. * Pass `shellcheck`. ```sh. shellcheck -s sh config/thisroot.sh. shellcheck -s dash config/thisroot.sh. shellcheck -s ksh config/thisroot.sh. shellcheck -s bash config/thisroot.sh. ```. Notable fixes:. * <code>&DiacriticalGrave;my-command&DiacriticalGrave;</code> -> `$(my-command)`. (SC2006, &DiacriticalGrave;&DiacriticalGrave; is a legacy Bourn shell syntax with several issues). * `[ ""x$foo"" = ""x"" ]` -> `[ -z ""${foo-}"" ]` and `[ ""x$foo"" != ""x"" ]` -> `[ -n ""${foo-}""]`. * `cond && run-true || run-false` -> `if cond; then run-true; else run false; fi`. (SC2015: run-false may be triggered when run-true fails). * [ ""$foo"" == ""$bar"" ] -> [ ""$foo"" = ""$bar"" ] (SC3014, POSIX-conformance). * Fix unbound variables. * Whenever a variable `$foo` is possibly not set, call it like `${foo-}`. * Now it can be sourced with `set -u`. * Unify indentation: use three spaces everywhere. * `thisroot.fish`:. * `dirname` -> `path dirname` so that Fish users don't have to call the `dirname` executable. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11557
https://github.com/root-project/root/pull/11557:433,usability,command,command,433,"thisroot.sh: refactor with shellcheck; thisroot.fish: `dirname` -> `path dirname` to reduce deps; # This Pull request:. ## Changes or fixes:. * `thisroot.sh`:. * Pass `shellcheck`. ```sh. shellcheck -s sh config/thisroot.sh. shellcheck -s dash config/thisroot.sh. shellcheck -s ksh config/thisroot.sh. shellcheck -s bash config/thisroot.sh. ```. Notable fixes:. * <code>&DiacriticalGrave;my-command&DiacriticalGrave;</code> -> `$(my-command)`. (SC2006, &DiacriticalGrave;&DiacriticalGrave; is a legacy Bourn shell syntax with several issues). * `[ ""x$foo"" = ""x"" ]` -> `[ -z ""${foo-}"" ]` and `[ ""x$foo"" != ""x"" ]` -> `[ -n ""${foo-}""]`. * `cond && run-true || run-false` -> `if cond; then run-true; else run false; fi`. (SC2015: run-false may be triggered when run-true fails). * [ ""$foo"" == ""$bar"" ] -> [ ""$foo"" = ""$bar"" ] (SC3014, POSIX-conformance). * Fix unbound variables. * Whenever a variable `$foo` is possibly not set, call it like `${foo-}`. * Now it can be sourced with `set -u`. * Unify indentation: use three spaces everywhere. * `thisroot.fish`:. * `dirname` -> `path dirname` so that Fish users don't have to call the `dirname` executable. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11557
https://github.com/root-project/root/pull/11557:1101,usability,user,users,1101,"thisroot.sh: refactor with shellcheck; thisroot.fish: `dirname` -> `path dirname` to reduce deps; # This Pull request:. ## Changes or fixes:. * `thisroot.sh`:. * Pass `shellcheck`. ```sh. shellcheck -s sh config/thisroot.sh. shellcheck -s dash config/thisroot.sh. shellcheck -s ksh config/thisroot.sh. shellcheck -s bash config/thisroot.sh. ```. Notable fixes:. * <code>&DiacriticalGrave;my-command&DiacriticalGrave;</code> -> `$(my-command)`. (SC2006, &DiacriticalGrave;&DiacriticalGrave; is a legacy Bourn shell syntax with several issues). * `[ ""x$foo"" = ""x"" ]` -> `[ -z ""${foo-}"" ]` and `[ ""x$foo"" != ""x"" ]` -> `[ -n ""${foo-}""]`. * `cond && run-true || run-false` -> `if cond; then run-true; else run false; fi`. (SC2015: run-false may be triggered when run-true fails). * [ ""$foo"" == ""$bar"" ] -> [ ""$foo"" = ""$bar"" ] (SC3014, POSIX-conformance). * Fix unbound variables. * Whenever a variable `$foo` is possibly not set, call it like `${foo-}`. * Now it can be sourced with `set -u`. * Unify indentation: use three spaces everywhere. * `thisroot.fish`:. * `dirname` -> `path dirname` so that Fish users don't have to call the `dirname` executable. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11557
https://github.com/root-project/root/pull/11558:14,deployability,Updat,Update,14,[skip-ci] NFC Update to double32/float16 doc; And minor white space in TEntryList header.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11558
https://github.com/root-project/root/pull/11558:14,safety,Updat,Update,14,[skip-ci] NFC Update to double32/float16 doc; And minor white space in TEntryList header.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11558
https://github.com/root-project/root/pull/11558:14,security,Updat,Update,14,[skip-ci] NFC Update to double32/float16 doc; And minor white space in TEntryList header.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11558
https://github.com/root-project/root/pull/11560:255,deployability,version,versions,255,"Fix ROOT-7462 with libstdc++ >= 10 [v6.26]; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11560
https://github.com/root-project/root/pull/11560:404,deployability,fail,fails,404,"Fix ROOT-7462 with libstdc++ >= 10 [v6.26]; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11560
https://github.com/root-project/root/pull/11560:255,integrability,version,versions,255,"Fix ROOT-7462 with libstdc++ >= 10 [v6.26]; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11560
https://github.com/root-project/root/pull/11560:333,integrability,messag,message,333,"Fix ROOT-7462 with libstdc++ >= 10 [v6.26]; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11560
https://github.com/root-project/root/pull/11560:333,interoperability,messag,message,333,"Fix ROOT-7462 with libstdc++ >= 10 [v6.26]; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11560
https://github.com/root-project/root/pull/11560:255,modifiability,version,versions,255,"Fix ROOT-7462 with libstdc++ >= 10 [v6.26]; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11560
https://github.com/root-project/root/pull/11560:206,performance,time,times,206,"Fix ROOT-7462 with libstdc++ >= 10 [v6.26]; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11560
https://github.com/root-project/root/pull/11560:379,reliability,diagno,diagnostic,379,"Fix ROOT-7462 with libstdc++ >= 10 [v6.26]; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11560
https://github.com/root-project/root/pull/11560:404,reliability,fail,fails,404,"Fix ROOT-7462 with libstdc++ >= 10 [v6.26]; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11560
https://github.com/root-project/root/pull/11560:453,reliability,diagno,diagnostic,453,"Fix ROOT-7462 with libstdc++ >= 10 [v6.26]; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11560
https://github.com/root-project/root/pull/11560:48,safety,test,test,48,"Fix ROOT-7462 with libstdc++ >= 10 [v6.26]; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11560
https://github.com/root-project/root/pull/11560:190,safety,compl,complete,190,"Fix ROOT-7462 with libstdc++ >= 10 [v6.26]; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11560
https://github.com/root-project/root/pull/11560:190,security,compl,complete,190,"Fix ROOT-7462 with libstdc++ >= 10 [v6.26]; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11560
https://github.com/root-project/root/pull/11560:48,testability,test,test,48,"Fix ROOT-7462 with libstdc++ >= 10 [v6.26]; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11560
https://github.com/root-project/root/pull/11560:379,testability,diagno,diagnostic,379,"Fix ROOT-7462 with libstdc++ >= 10 [v6.26]; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11560
https://github.com/root-project/root/pull/11560:453,testability,diagno,diagnostic,453,"Fix ROOT-7462 with libstdc++ >= 10 [v6.26]; The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:. ```. [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus. ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11560
https://github.com/root-project/root/pull/11561:160,energy efficiency,draw,draw,160,Improve RBrowser and RTreeViewer; 1. Handle branch/leaf click when tree viewer is active. 2. Fix tree viewer layout. 3. Fix compiler warning. 4. Handle default draw options on server side - in Browsable classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11561
https://github.com/root-project/root/issues/11562:436,deployability,fail,fail,436,"Interpreter warns when calling [[nodiscard]] functions; Similar to https://github.com/root-project/root/issues/8622, but in the interpreter:. ```. root [0] std::vector<int> v;. root [1] v.size(). ROOT_prompt_1:1:1: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]. v.size(). ^~~~~~. (unsigned long) 0. ```. (with libstdc++12). This currently makes `roottest-cling-stl-default-VectorSort` fail with GCC 12.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11562
https://github.com/root-project/root/issues/11562:380,energy efficiency,current,currently,380,"Interpreter warns when calling [[nodiscard]] functions; Similar to https://github.com/root-project/root/issues/8622, but in the interpreter:. ```. root [0] std::vector<int> v;. root [1] v.size(). ROOT_prompt_1:1:1: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]. v.size(). ^~~~~~. (unsigned long) 0. ```. (with libstdc++12). This currently makes `roottest-cling-stl-default-VectorSort` fail with GCC 12.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11562
https://github.com/root-project/root/issues/11562:436,reliability,fail,fail,436,"Interpreter warns when calling [[nodiscard]] functions; Similar to https://github.com/root-project/root/issues/8622, but in the interpreter:. ```. root [0] std::vector<int> v;. root [1] v.size(). ROOT_prompt_1:1:1: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]. v.size(). ^~~~~~. (unsigned long) 0. ```. (with libstdc++12). This currently makes `roottest-cling-stl-default-VectorSort` fail with GCC 12.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11562
https://github.com/root-project/root/pull/11563:100,deployability,Updat,Update,100,[webgui] Introduce MS Edge browser support; It behaves exactly as Chrome. Provided only on Windows. Update release notes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11563
https://github.com/root-project/root/pull/11563:107,deployability,releas,release,107,[webgui] Introduce MS Edge browser support; It behaves exactly as Chrome. Provided only on Windows. Update release notes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11563
https://github.com/root-project/root/pull/11563:100,safety,Updat,Update,100,[webgui] Introduce MS Edge browser support; It behaves exactly as Chrome. Provided only on Windows. Update release notes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11563
https://github.com/root-project/root/pull/11563:100,security,Updat,Update,100,[webgui] Introduce MS Edge browser support; It behaves exactly as Chrome. Provided only on Windows. Update release notes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11563
https://github.com/root-project/root/pull/11563:35,usability,support,support,35,[webgui] Introduce MS Edge browser support; It behaves exactly as Chrome. Provided only on Windows. Update release notes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11563
https://github.com/root-project/root/issues/11565:432,deployability,Version,Version,432,"[RF] Crash in RooStats::ToyMCSample::GenerateToyData; - [x] Checked for duplicates. ### Describe the bug. A segmentation violation is encountered when trying to run fit on toys during the toy generation. ### To Reproduce. To reproduce the crash, please use the attached (minimal) code and the ROOT file with the RooWorkspace inside: [link to cernbox](https://cernbox.cern.ch/index.php/s/ADF23igrMghZPzk). ### Setup. Tested on. ROOT Version: 6.27/01. Built for linuxx8664gcc on Jul 18 2022, 09:11:00. From heads/master@ffdbbb6d. as well as . LCG_101 x86_64-centos7-gcc8-opt. ### Additional context. Note that the code here tries to reproduce what is done in a bigger framework, It is entirely possible that we are doing something dumb and this is not an actual bug in GenerateToyData, but it is interestingly seen only for ""gammas"" NPs (i.e. one NP per bin).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11565
https://github.com/root-project/root/issues/11565:432,integrability,Version,Version,432,"[RF] Crash in RooStats::ToyMCSample::GenerateToyData; - [x] Checked for duplicates. ### Describe the bug. A segmentation violation is encountered when trying to run fit on toys during the toy generation. ### To Reproduce. To reproduce the crash, please use the attached (minimal) code and the ROOT file with the RooWorkspace inside: [link to cernbox](https://cernbox.cern.ch/index.php/s/ADF23igrMghZPzk). ### Setup. Tested on. ROOT Version: 6.27/01. Built for linuxx8664gcc on Jul 18 2022, 09:11:00. From heads/master@ffdbbb6d. as well as . LCG_101 x86_64-centos7-gcc8-opt. ### Additional context. Note that the code here tries to reproduce what is done in a bigger framework, It is entirely possible that we are doing something dumb and this is not an actual bug in GenerateToyData, but it is interestingly seen only for ""gammas"" NPs (i.e. one NP per bin).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11565
https://github.com/root-project/root/issues/11565:432,modifiability,Version,Version,432,"[RF] Crash in RooStats::ToyMCSample::GenerateToyData; - [x] Checked for duplicates. ### Describe the bug. A segmentation violation is encountered when trying to run fit on toys during the toy generation. ### To Reproduce. To reproduce the crash, please use the attached (minimal) code and the ROOT file with the RooWorkspace inside: [link to cernbox](https://cernbox.cern.ch/index.php/s/ADF23igrMghZPzk). ### Setup. Tested on. ROOT Version: 6.27/01. Built for linuxx8664gcc on Jul 18 2022, 09:11:00. From heads/master@ffdbbb6d. as well as . LCG_101 x86_64-centos7-gcc8-opt. ### Additional context. Note that the code here tries to reproduce what is done in a bigger framework, It is entirely possible that we are doing something dumb and this is not an actual bug in GenerateToyData, but it is interestingly seen only for ""gammas"" NPs (i.e. one NP per bin).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11565
https://github.com/root-project/root/issues/11565:416,safety,Test,Tested,416,"[RF] Crash in RooStats::ToyMCSample::GenerateToyData; - [x] Checked for duplicates. ### Describe the bug. A segmentation violation is encountered when trying to run fit on toys during the toy generation. ### To Reproduce. To reproduce the crash, please use the attached (minimal) code and the ROOT file with the RooWorkspace inside: [link to cernbox](https://cernbox.cern.ch/index.php/s/ADF23igrMghZPzk). ### Setup. Tested on. ROOT Version: 6.27/01. Built for linuxx8664gcc on Jul 18 2022, 09:11:00. From heads/master@ffdbbb6d. as well as . LCG_101 x86_64-centos7-gcc8-opt. ### Additional context. Note that the code here tries to reproduce what is done in a bigger framework, It is entirely possible that we are doing something dumb and this is not an actual bug in GenerateToyData, but it is interestingly seen only for ""gammas"" NPs (i.e. one NP per bin).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11565
https://github.com/root-project/root/issues/11565:416,testability,Test,Tested,416,"[RF] Crash in RooStats::ToyMCSample::GenerateToyData; - [x] Checked for duplicates. ### Describe the bug. A segmentation violation is encountered when trying to run fit on toys during the toy generation. ### To Reproduce. To reproduce the crash, please use the attached (minimal) code and the ROOT file with the RooWorkspace inside: [link to cernbox](https://cernbox.cern.ch/index.php/s/ADF23igrMghZPzk). ### Setup. Tested on. ROOT Version: 6.27/01. Built for linuxx8664gcc on Jul 18 2022, 09:11:00. From heads/master@ffdbbb6d. as well as . LCG_101 x86_64-centos7-gcc8-opt. ### Additional context. Note that the code here tries to reproduce what is done in a bigger framework, It is entirely possible that we are doing something dumb and this is not an actual bug in GenerateToyData, but it is interestingly seen only for ""gammas"" NPs (i.e. one NP per bin).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11565
https://github.com/root-project/root/issues/11565:589,testability,context,context,589,"[RF] Crash in RooStats::ToyMCSample::GenerateToyData; - [x] Checked for duplicates. ### Describe the bug. A segmentation violation is encountered when trying to run fit on toys during the toy generation. ### To Reproduce. To reproduce the crash, please use the attached (minimal) code and the ROOT file with the RooWorkspace inside: [link to cernbox](https://cernbox.cern.ch/index.php/s/ADF23igrMghZPzk). ### Setup. Tested on. ROOT Version: 6.27/01. Built for linuxx8664gcc on Jul 18 2022, 09:11:00. From heads/master@ffdbbb6d. as well as . LCG_101 x86_64-centos7-gcc8-opt. ### Additional context. Note that the code here tries to reproduce what is done in a bigger framework, It is entirely possible that we are doing something dumb and this is not an actual bug in GenerateToyData, but it is interestingly seen only for ""gammas"" NPs (i.e. one NP per bin).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11565
https://github.com/root-project/root/issues/11565:271,usability,minim,minimal,271,"[RF] Crash in RooStats::ToyMCSample::GenerateToyData; - [x] Checked for duplicates. ### Describe the bug. A segmentation violation is encountered when trying to run fit on toys during the toy generation. ### To Reproduce. To reproduce the crash, please use the attached (minimal) code and the ROOT file with the RooWorkspace inside: [link to cernbox](https://cernbox.cern.ch/index.php/s/ADF23igrMghZPzk). ### Setup. Tested on. ROOT Version: 6.27/01. Built for linuxx8664gcc on Jul 18 2022, 09:11:00. From heads/master@ffdbbb6d. as well as . LCG_101 x86_64-centos7-gcc8-opt. ### Additional context. Note that the code here tries to reproduce what is done in a bigger framework, It is entirely possible that we are doing something dumb and this is not an actual bug in GenerateToyData, but it is interestingly seen only for ""gammas"" NPs (i.e. one NP per bin).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11565
https://github.com/root-project/root/pull/11566:236,usability,support,support,236,"[RF] Fix wrong order of iterating over curves in `RooPlot::residHist() `; The iteration over the plotted `_items` should be in reverse order to. consider the last-plotted curve for the residual histogram. Also, this commit imporves the support for multi-range residuals by. making sure that multiple curves with the same name are only considered. if the curves are not overlapping. This commit is a fixup to commit https://github.com/root-project/root/commit/b4bf80c63a8097c2e1fde274bec5d5380e043080. The PR also includes another commit that removed the dummy member function `RooPlot::GetBinContent()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11566
https://github.com/root-project/root/pull/11568:58,deployability,updat,update,58,"[tmva] Backport fix of TMVA tutorials; With the new MacOS update python (and python2) is not existing anymore, only python3. Add then a new function TMVA::Python_executable() using ROOT config to determine if ROOT is using python version 2 or 3. In case of 3 returns as executable ""python3"". Fix also the correct location of the input ONNX file for TMVA_SOFIE_ONNX.C (copying the file at configure time). This PR is a backport in 6.26 of PR #10160.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11568
https://github.com/root-project/root/pull/11568:230,deployability,version,version,230,"[tmva] Backport fix of TMVA tutorials; With the new MacOS update python (and python2) is not existing anymore, only python3. Add then a new function TMVA::Python_executable() using ROOT config to determine if ROOT is using python version 2 or 3. In case of 3 returns as executable ""python3"". Fix also the correct location of the input ONNX file for TMVA_SOFIE_ONNX.C (copying the file at configure time). This PR is a backport in 6.26 of PR #10160.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11568
https://github.com/root-project/root/pull/11568:230,integrability,version,version,230,"[tmva] Backport fix of TMVA tutorials; With the new MacOS update python (and python2) is not existing anymore, only python3. Add then a new function TMVA::Python_executable() using ROOT config to determine if ROOT is using python version 2 or 3. In case of 3 returns as executable ""python3"". Fix also the correct location of the input ONNX file for TMVA_SOFIE_ONNX.C (copying the file at configure time). This PR is a backport in 6.26 of PR #10160.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11568
https://github.com/root-project/root/pull/11568:388,integrability,configur,configure,388,"[tmva] Backport fix of TMVA tutorials; With the new MacOS update python (and python2) is not existing anymore, only python3. Add then a new function TMVA::Python_executable() using ROOT config to determine if ROOT is using python version 2 or 3. In case of 3 returns as executable ""python3"". Fix also the correct location of the input ONNX file for TMVA_SOFIE_ONNX.C (copying the file at configure time). This PR is a backport in 6.26 of PR #10160.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11568
https://github.com/root-project/root/pull/11568:230,modifiability,version,version,230,"[tmva] Backport fix of TMVA tutorials; With the new MacOS update python (and python2) is not existing anymore, only python3. Add then a new function TMVA::Python_executable() using ROOT config to determine if ROOT is using python version 2 or 3. In case of 3 returns as executable ""python3"". Fix also the correct location of the input ONNX file for TMVA_SOFIE_ONNX.C (copying the file at configure time). This PR is a backport in 6.26 of PR #10160.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11568
https://github.com/root-project/root/pull/11568:388,modifiability,configur,configure,388,"[tmva] Backport fix of TMVA tutorials; With the new MacOS update python (and python2) is not existing anymore, only python3. Add then a new function TMVA::Python_executable() using ROOT config to determine if ROOT is using python version 2 or 3. In case of 3 returns as executable ""python3"". Fix also the correct location of the input ONNX file for TMVA_SOFIE_ONNX.C (copying the file at configure time). This PR is a backport in 6.26 of PR #10160.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11568
https://github.com/root-project/root/pull/11568:398,performance,time,time,398,"[tmva] Backport fix of TMVA tutorials; With the new MacOS update python (and python2) is not existing anymore, only python3. Add then a new function TMVA::Python_executable() using ROOT config to determine if ROOT is using python version 2 or 3. In case of 3 returns as executable ""python3"". Fix also the correct location of the input ONNX file for TMVA_SOFIE_ONNX.C (copying the file at configure time). This PR is a backport in 6.26 of PR #10160.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11568
https://github.com/root-project/root/pull/11568:58,safety,updat,update,58,"[tmva] Backport fix of TMVA tutorials; With the new MacOS update python (and python2) is not existing anymore, only python3. Add then a new function TMVA::Python_executable() using ROOT config to determine if ROOT is using python version 2 or 3. In case of 3 returns as executable ""python3"". Fix also the correct location of the input ONNX file for TMVA_SOFIE_ONNX.C (copying the file at configure time). This PR is a backport in 6.26 of PR #10160.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11568
https://github.com/root-project/root/pull/11568:329,safety,input,input,329,"[tmva] Backport fix of TMVA tutorials; With the new MacOS update python (and python2) is not existing anymore, only python3. Add then a new function TMVA::Python_executable() using ROOT config to determine if ROOT is using python version 2 or 3. In case of 3 returns as executable ""python3"". Fix also the correct location of the input ONNX file for TMVA_SOFIE_ONNX.C (copying the file at configure time). This PR is a backport in 6.26 of PR #10160.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11568
https://github.com/root-project/root/pull/11568:58,security,updat,update,58,"[tmva] Backport fix of TMVA tutorials; With the new MacOS update python (and python2) is not existing anymore, only python3. Add then a new function TMVA::Python_executable() using ROOT config to determine if ROOT is using python version 2 or 3. In case of 3 returns as executable ""python3"". Fix also the correct location of the input ONNX file for TMVA_SOFIE_ONNX.C (copying the file at configure time). This PR is a backport in 6.26 of PR #10160.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11568
https://github.com/root-project/root/pull/11568:388,security,configur,configure,388,"[tmva] Backport fix of TMVA tutorials; With the new MacOS update python (and python2) is not existing anymore, only python3. Add then a new function TMVA::Python_executable() using ROOT config to determine if ROOT is using python version 2 or 3. In case of 3 returns as executable ""python3"". Fix also the correct location of the input ONNX file for TMVA_SOFIE_ONNX.C (copying the file at configure time). This PR is a backport in 6.26 of PR #10160.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11568
https://github.com/root-project/root/pull/11568:329,usability,input,input,329,"[tmva] Backport fix of TMVA tutorials; With the new MacOS update python (and python2) is not existing anymore, only python3. Add then a new function TMVA::Python_executable() using ROOT config to determine if ROOT is using python version 2 or 3. In case of 3 returns as executable ""python3"". Fix also the correct location of the input ONNX file for TMVA_SOFIE_ONNX.C (copying the file at configure time). This PR is a backport in 6.26 of PR #10160.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11568
https://github.com/root-project/root/issues/11569:305,safety,input,input,305,"[VecOps] `Sum(vec_of_bool)` should not return a `bool`; `bool(true + true + false) == true == 1`, but that's not what users expect when they have a `RVec<bool>{true, true, false}` and they call `Sum(vec_bool)`. `Sum` should be overloaded to return a `std::size_t` in the special case of a `RVec<bool>` as input.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11569
https://github.com/root-project/root/issues/11569:118,usability,user,users,118,"[VecOps] `Sum(vec_of_bool)` should not return a `bool`; `bool(true + true + false) == true == 1`, but that's not what users expect when they have a `RVec<bool>{true, true, false}` and they call `Sum(vec_bool)`. `Sum` should be overloaded to return a `std::size_t` in the special case of a `RVec<bool>` as input.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11569
https://github.com/root-project/root/issues/11569:305,usability,input,input,305,"[VecOps] `Sum(vec_of_bool)` should not return a `bool`; `bool(true + true + false) == true == 1`, but that's not what users expect when they have a `RVec<bool>{true, true, false}` and they call `Sum(vec_bool)`. `Sum` should be overloaded to return a `std::size_t` in the special case of a `RVec<bool>` as input.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11569
https://github.com/root-project/root/pull/11571:52,deployability,contain,contain,52,"[backport] Revert ""[cxxmodules] Allow submodules to contain headers which may be…; … missing."". This reverts commit f4ea5ad76c74671ebbdfb64fdaeffb986811420d. We do not need to support gcc 4.8 anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11571
https://github.com/root-project/root/pull/11571:38,integrability,sub,submodules,38,"[backport] Revert ""[cxxmodules] Allow submodules to contain headers which may be…; … missing."". This reverts commit f4ea5ad76c74671ebbdfb64fdaeffb986811420d. We do not need to support gcc 4.8 anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11571
https://github.com/root-project/root/pull/11571:176,usability,support,support,176,"[backport] Revert ""[cxxmodules] Allow submodules to contain headers which may be…; … missing."". This reverts commit f4ea5ad76c74671ebbdfb64fdaeffb986811420d. We do not need to support gcc 4.8 anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11571
https://github.com/root-project/root/pull/11572:105,deployability,build,buildable,105,[skip-ci] Move the docs in the parent folder as in clang.; Adjust a few options to make the docs locally buildable.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11572
https://github.com/root-project/root/pull/11573:99,deployability,modul,modules,99,"[backport] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11573
https://github.com/root-project/root/pull/11573:637,deployability,patch,patch,637,"[backport] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11573
https://github.com/root-project/root/pull/11573:510,energy efficiency,model,model,510,"[backport] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11573
https://github.com/root-project/root/pull/11573:660,energy efficiency,current,current,660,"[backport] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11573
https://github.com/root-project/root/pull/11573:376,interoperability,semant,semantically,376,"[backport] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11573
https://github.com/root-project/root/pull/11573:99,modifiability,modul,modules,99,"[backport] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11573
https://github.com/root-project/root/pull/11573:348,performance,time,time,348,"[backport] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11573
https://github.com/root-project/root/pull/11573:99,safety,modul,modules,99,"[backport] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11573
https://github.com/root-project/root/pull/11573:637,safety,patch,patch,637,"[backport] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11573
https://github.com/root-project/root/pull/11573:510,security,model,model,510,"[backport] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11573
https://github.com/root-project/root/pull/11573:622,security,modif,modifier,622,"[backport] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11573
https://github.com/root-project/root/pull/11573:637,security,patch,patch,637,"[backport] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11573
https://github.com/root-project/root/pull/11573:757,security,control,control,757,"[backport] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11573
https://github.com/root-project/root/pull/11573:757,testability,control,control,757,"[backport] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11573
https://github.com/root-project/root/pull/11573:423,usability,user,user,423,"[backport] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11573
https://github.com/root-project/root/pull/11574:95,deployability,modul,modules,95,"[v624] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11574
https://github.com/root-project/root/pull/11574:633,deployability,patch,patch,633,"[v624] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11574
https://github.com/root-project/root/pull/11574:506,energy efficiency,model,model,506,"[v624] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11574
https://github.com/root-project/root/pull/11574:656,energy efficiency,current,current,656,"[v624] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11574
https://github.com/root-project/root/pull/11574:372,interoperability,semant,semantically,372,"[v624] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11574
https://github.com/root-project/root/pull/11574:95,modifiability,modul,modules,95,"[v624] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11574
https://github.com/root-project/root/pull/11574:344,performance,time,time,344,"[v624] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11574
https://github.com/root-project/root/pull/11574:95,safety,modul,modules,95,"[v624] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11574
https://github.com/root-project/root/pull/11574:633,safety,patch,patch,633,"[v624] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11574
https://github.com/root-project/root/pull/11574:506,security,model,model,506,"[v624] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11574
https://github.com/root-project/root/pull/11574:618,security,modif,modifier,618,"[v624] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11574
https://github.com/root-project/root/pull/11574:633,security,patch,patch,633,"[v624] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11574
https://github.com/root-project/root/pull/11574:753,security,control,control,753,"[v624] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11574
https://github.com/root-project/root/pull/11574:753,testability,control,control,753,"[v624] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11574
https://github.com/root-project/root/pull/11574:419,usability,user,user,419,"[v624] gcc12's regex header file relies on a std::vector<int> instance, expo…; …rt it. The C++ modules marks the std::vector<int> instantiation as not visible because it came from the `regex` header file which we did not explicitly include. root-project/root@a785402 introduces checks if certain declaration is visible in dictionary generation time which was intending to semantically improve the coherence by what the user ""allowed"" (or requested) rootcling to see vs what it can see globally. While this model works well it seems to not work for template instantiations as they won't be re-instantiated with visible modifier. This patch works around the current issue seen with libstdc++ 12 but a better solution would be to implement a finer grained control over the implicit template instatiations when generating a dictionary. Fixes root-project/root#11329",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11574
https://github.com/root-project/root/pull/11575:108,availability,avail,available,108,Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11575
https://github.com/root-project/root/pull/11575:65,deployability,build,builder,65,Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11575
https://github.com/root-project/root/pull/11575:108,reliability,availab,available,108,Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11575
https://github.com/root-project/root/pull/11575:25,safety,test,test,25,Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11575
https://github.com/root-project/root/pull/11575:57,safety,test,testing,57,Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11575
https://github.com/root-project/root/pull/11575:108,safety,avail,available,108,Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11575
https://github.com/root-project/root/pull/11575:108,security,availab,available,108,Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11575
https://github.com/root-project/root/pull/11575:25,testability,test,test,25,Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11575
https://github.com/root-project/root/pull/11575:57,testability,test,testing,57,Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11575
https://github.com/root-project/root/pull/11576:115,deployability,build,build,115,[tmva][sofie] Backport some fixes in tmva sofie for 6.26 ; This PR backports in 6.26 some fixes from master in the build configuration for SOFIE. . - backport fix from #PR 11481 (movie some Sofie parser definition in implementation). - backport fix from #PR 11545 (fix some issues with no rt modules). - backport fix from the tests #11529 (apply some fixes in the building of SOFIE tests).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11576
https://github.com/root-project/root/pull/11576:121,deployability,configurat,configuration,121,[tmva][sofie] Backport some fixes in tmva sofie for 6.26 ; This PR backports in 6.26 some fixes from master in the build configuration for SOFIE. . - backport fix from #PR 11481 (movie some Sofie parser definition in implementation). - backport fix from #PR 11545 (fix some issues with no rt modules). - backport fix from the tests #11529 (apply some fixes in the building of SOFIE tests).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11576
https://github.com/root-project/root/pull/11576:292,deployability,modul,modules,292,[tmva][sofie] Backport some fixes in tmva sofie for 6.26 ; This PR backports in 6.26 some fixes from master in the build configuration for SOFIE. . - backport fix from #PR 11481 (movie some Sofie parser definition in implementation). - backport fix from #PR 11545 (fix some issues with no rt modules). - backport fix from the tests #11529 (apply some fixes in the building of SOFIE tests).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11576
https://github.com/root-project/root/pull/11576:364,deployability,build,building,364,[tmva][sofie] Backport some fixes in tmva sofie for 6.26 ; This PR backports in 6.26 some fixes from master in the build configuration for SOFIE. . - backport fix from #PR 11481 (movie some Sofie parser definition in implementation). - backport fix from #PR 11545 (fix some issues with no rt modules). - backport fix from the tests #11529 (apply some fixes in the building of SOFIE tests).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11576
https://github.com/root-project/root/pull/11576:121,integrability,configur,configuration,121,[tmva][sofie] Backport some fixes in tmva sofie for 6.26 ; This PR backports in 6.26 some fixes from master in the build configuration for SOFIE. . - backport fix from #PR 11481 (movie some Sofie parser definition in implementation). - backport fix from #PR 11545 (fix some issues with no rt modules). - backport fix from the tests #11529 (apply some fixes in the building of SOFIE tests).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11576
https://github.com/root-project/root/pull/11576:121,modifiability,configur,configuration,121,[tmva][sofie] Backport some fixes in tmva sofie for 6.26 ; This PR backports in 6.26 some fixes from master in the build configuration for SOFIE. . - backport fix from #PR 11481 (movie some Sofie parser definition in implementation). - backport fix from #PR 11545 (fix some issues with no rt modules). - backport fix from the tests #11529 (apply some fixes in the building of SOFIE tests).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11576
https://github.com/root-project/root/pull/11576:292,modifiability,modul,modules,292,[tmva][sofie] Backport some fixes in tmva sofie for 6.26 ; This PR backports in 6.26 some fixes from master in the build configuration for SOFIE. . - backport fix from #PR 11481 (movie some Sofie parser definition in implementation). - backport fix from #PR 11545 (fix some issues with no rt modules). - backport fix from the tests #11529 (apply some fixes in the building of SOFIE tests).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11576
https://github.com/root-project/root/pull/11576:292,safety,modul,modules,292,[tmva][sofie] Backport some fixes in tmva sofie for 6.26 ; This PR backports in 6.26 some fixes from master in the build configuration for SOFIE. . - backport fix from #PR 11481 (movie some Sofie parser definition in implementation). - backport fix from #PR 11545 (fix some issues with no rt modules). - backport fix from the tests #11529 (apply some fixes in the building of SOFIE tests).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11576
https://github.com/root-project/root/pull/11576:326,safety,test,tests,326,[tmva][sofie] Backport some fixes in tmva sofie for 6.26 ; This PR backports in 6.26 some fixes from master in the build configuration for SOFIE. . - backport fix from #PR 11481 (movie some Sofie parser definition in implementation). - backport fix from #PR 11545 (fix some issues with no rt modules). - backport fix from the tests #11529 (apply some fixes in the building of SOFIE tests).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11576
https://github.com/root-project/root/pull/11576:382,safety,test,tests,382,[tmva][sofie] Backport some fixes in tmva sofie for 6.26 ; This PR backports in 6.26 some fixes from master in the build configuration for SOFIE. . - backport fix from #PR 11481 (movie some Sofie parser definition in implementation). - backport fix from #PR 11545 (fix some issues with no rt modules). - backport fix from the tests #11529 (apply some fixes in the building of SOFIE tests).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11576
https://github.com/root-project/root/pull/11576:121,security,configur,configuration,121,[tmva][sofie] Backport some fixes in tmva sofie for 6.26 ; This PR backports in 6.26 some fixes from master in the build configuration for SOFIE. . - backport fix from #PR 11481 (movie some Sofie parser definition in implementation). - backport fix from #PR 11545 (fix some issues with no rt modules). - backport fix from the tests #11529 (apply some fixes in the building of SOFIE tests).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11576
https://github.com/root-project/root/pull/11576:326,testability,test,tests,326,[tmva][sofie] Backport some fixes in tmva sofie for 6.26 ; This PR backports in 6.26 some fixes from master in the build configuration for SOFIE. . - backport fix from #PR 11481 (movie some Sofie parser definition in implementation). - backport fix from #PR 11545 (fix some issues with no rt modules). - backport fix from the tests #11529 (apply some fixes in the building of SOFIE tests).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11576
https://github.com/root-project/root/pull/11576:382,testability,test,tests,382,[tmva][sofie] Backport some fixes in tmva sofie for 6.26 ; This PR backports in 6.26 some fixes from master in the build configuration for SOFIE. . - backport fix from #PR 11481 (movie some Sofie parser definition in implementation). - backport fix from #PR 11545 (fix some issues with no rt modules). - backport fix from the tests #11529 (apply some fixes in the building of SOFIE tests).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11576
https://github.com/root-project/root/pull/11577:377,deployability,configurat,configuration,377,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:442,deployability,configurat,configuration,442,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:680,deployability,configurat,configuration,680,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:1392,deployability,updat,updated,1392,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:11,integrability,interfac,interface,11,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:107,integrability,interfac,interface,107,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:377,integrability,configur,configuration,377,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:442,integrability,configur,configuration,442,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:680,integrability,configur,configuration,680,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:11,interoperability,interfac,interface,11,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:107,interoperability,interfac,interface,107,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:1135,interoperability,format,format,1135,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:11,modifiability,interfac,interface,11,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:107,modifiability,interfac,interface,107,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:377,modifiability,configur,configuration,377,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:442,modifiability,configur,configuration,442,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:541,modifiability,paramet,parameters,541,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:587,modifiability,paramet,parameters,587,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:680,modifiability,configur,configuration,680,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:797,modifiability,maintain,maintain,797,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:866,modifiability,paramet,parameters,866,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:193,performance,parallel,parallel,193,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:268,performance,Parallel,Parallelize,268,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:361,performance,parallel,parallelisation,361,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:571,performance,parallel,parallelisation,571,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:850,performance,parallel,parallelisation,850,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:33,safety,Test,TestStatistics,33,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:203,safety,test,teststatistics,203,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:797,safety,maintain,maintain,797,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:937,safety,test,tests,937,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:946,safety,test,test,946,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:1362,safety,test,tested,1362,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:1392,safety,updat,updated,1392,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:377,security,configur,configuration,377,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:442,security,configur,configuration,442,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:680,security,configur,configuration,680,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:1392,security,updat,updated,1392,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:33,testability,Test,TestStatistics,33,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:203,testability,test,teststatistics,203,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:937,testability,test,tests,937,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:946,testability,test,test,946,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:1362,testability,test,tested,1362,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:169,usability,Minim,Minimize,169,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/pull/11577:1282,usability,behavi,behaviour,1282,"[RF] Added interface changes for TestStatistics classes; # This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods. - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor. - Adds tests to test the aforementioned new functionality. - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11577
https://github.com/root-project/root/issues/11578:2875,availability,Operat,Operating,2875," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:2950,availability,down,download,2950," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:25,deployability,integr,integral,25,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:546,deployability,contain,containing,546,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:621,deployability,integr,integral,621,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:780,deployability,contain,containing,780,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:868,deployability,integr,integral,868,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1077,deployability,contain,contains,1077,"Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), Roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1106,deployability,integr,integral,1106," Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1264,deployability,integr,integral,1264,"T). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1397,deployability,Integr,Integral,1397,"l exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1669,deployability,build,build,1669,"yVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.set",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:2863,deployability,version,version,2863," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:2932,deployability,instal,install,2932," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:3217,deployability,integr,integral,3217," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:540,energy efficiency,model,model,540,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:2395,energy efficiency,cpu,cpu,2395," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:25,integrability,integr,integral,25,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:64,integrability,batch,batchmode,64,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:581,integrability,wrap,wraps,581,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:621,integrability,integr,integral,621,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:831,integrability,batch,batchmode,831,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:868,integrability,integr,integral,868,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1001,integrability,transform,transformed,1001,"rameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1106,integrability,integr,integral,1106," Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1205,integrability,transform,transformed,1205,"(https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1264,integrability,integr,integral,1264,"T). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1397,integrability,Integr,Integral,1397,"l exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:2384,integrability,Batch,BatchMode,2384," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:2863,integrability,version,version,2863," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:3217,integrability,integr,integral,3217," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:25,interoperability,integr,integral,25,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:621,interoperability,integr,integral,621,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:868,interoperability,integr,integral,868,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1001,interoperability,transform,transformed,1001,"rameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1106,interoperability,integr,integral,1106," Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1205,interoperability,transform,transformed,1205,"(https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1264,interoperability,integr,integral,1264,"T). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1397,interoperability,Integr,Integral,1397,"l exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:3217,interoperability,integr,integral,3217," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:5,modifiability,Paramet,Parameter,5,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:25,modifiability,integr,integral,25,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:621,modifiability,integr,integral,621,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:691,modifiability,paramet,parameters,691,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:754,modifiability,paramet,parameter,754,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:868,modifiability,integr,integral,868,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1013,modifiability,paramet,parameter,1013,"ync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1106,modifiability,integr,integral,1106," Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1217,modifiability,paramet,parameter,1217,"t.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSum",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1264,modifiability,integr,integral,1264,"T). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1397,modifiability,Integr,Integral,1397,"l exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1419,modifiability,paramet,parameters,1419,"ter"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:2491,modifiability,paramet,parameter,2491," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:2863,modifiability,version,version,2863," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:3217,modifiability,integr,integral,3217," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:64,performance,batch,batchmode,64,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:831,performance,batch,batchmode,831,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1146,performance,content,contents,1146,"thub.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooAr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:2384,performance,Batch,BatchMode,2384," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:2395,performance,cpu,cpu,2395," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:25,reliability,integr,integral,25,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:621,reliability,integr,integral,621,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:868,reliability,integr,integral,868,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1106,reliability,integr,integral,1106," Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1264,reliability,integr,integral,1264,"T). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1397,reliability,Integr,Integral,1397,"l exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:3217,reliability,integr,integral,3217," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:633,safety,test,tested,633,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1623,safety,input,input,1623,"ral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1724,safety,test,testIntegralDesync,1724,"on of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:3099,safety,test,tested,3099," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:25,security,integr,integral,25,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:540,security,model,model,540,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:621,security,integr,integral,621,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:868,security,integr,integral,868,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1106,security,integr,integral,1106," Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1264,security,integr,integral,1264,"T). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1397,security,Integr,Integral,1397,"l exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:3217,security,integr,integral,3217," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:25,testability,integr,integral,25,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:621,testability,integr,integral,621,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:633,testability,test,tested,633,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:868,testability,integr,integral,868,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1106,testability,integr,integral,1106," Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1264,testability,integr,integral,1264,"T). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1397,testability,Integr,Integral,1397,"l exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1724,testability,test,testIntegralDesync,1724,"on of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:3031,testability,context,context,3031," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:3060,testability,context,context,3060," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:3099,testability,test,tested,3099," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:3217,testability,integr,integral,3217," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:465,usability,clear,clear,465,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:513,usability,behavi,behavior,513,"[RF] Parameter desync in integral of `RooRealSumPdf` when using batchmode; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1312,usability,behavi,behavior,1312,"ind one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1330,usability,clear,clear,1330,"very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.creat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1478,usability,behavi,behavior,1478," description of what the wrong behavior is. -->. I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:1623,usability,input,input,1623,"ral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example). When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral. Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/issues/11578:2438,usability,help,helps,2438," has the correct value, it's just the integral which uses the wrong one. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Integral uses correct parameters. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```C++. void testIntegralDesync() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. . RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));. . // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));. // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));. . RooGaussModel gm(""gm"", """", x, RooConst(0), RooConst(0.001));. RooFormulaVar formula(""formula"", ""exp(-@0/@1)"", RooArgList(x, par_mod));. auto fn = gm.convolution(&formula, &x);. RooRealSumPdf pdf(""pdf"", """", *fn, RooConst(1));. . auto data = pdf.generate(x, NumEvents(1));. . auto nllBase = pdf.createNLL(*data);. auto nllBatch = pdf.createNLL(*data, BatchMode(""cpu""));. . gm.verboseEval(10); // printout helps showing the exact problem, since it prints the parameter. . double nllBaseVal = nllBase->getVal();. double nllBatchVal = nllBatch->getVal();. clog << ""Before changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl;. . par.setVal(-0.1);. nllBaseVal = nllBase->getVal();. nllBatchVal = nllBatch->getVal(); . clog << ""After changing: "" << nllBaseVal << "" vs "" << nllBatchVal << endl; . }. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->. I tested this with a `RooRealSumPdf` but I'm not sure it is the only one affected or if it is anything with an internal integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11578
https://github.com/root-project/root/pull/11579:47,availability,error,error,47,"Add ENABLE_EXPORTS to rootcling; Try to fix an error when building the system PCH with cppyy's Root on Android, as described [on the forum](https://root-forum.cern.ch/t/errors-building-system-pch-with-cppyys-root-on-android/51961).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11579
https://github.com/root-project/root/pull/11579:169,availability,error,errors-building-system-pch-with-cppyys-root-on-android,169,"Add ENABLE_EXPORTS to rootcling; Try to fix an error when building the system PCH with cppyy's Root on Android, as described [on the forum](https://root-forum.cern.ch/t/errors-building-system-pch-with-cppyys-root-on-android/51961).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11579
https://github.com/root-project/root/pull/11579:58,deployability,build,building,58,"Add ENABLE_EXPORTS to rootcling; Try to fix an error when building the system PCH with cppyy's Root on Android, as described [on the forum](https://root-forum.cern.ch/t/errors-building-system-pch-with-cppyys-root-on-android/51961).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11579
https://github.com/root-project/root/pull/11579:176,deployability,build,building-system-pch-with-cppyys-root-on-android,176,"Add ENABLE_EXPORTS to rootcling; Try to fix an error when building the system PCH with cppyy's Root on Android, as described [on the forum](https://root-forum.cern.ch/t/errors-building-system-pch-with-cppyys-root-on-android/51961).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11579
https://github.com/root-project/root/pull/11579:47,performance,error,error,47,"Add ENABLE_EXPORTS to rootcling; Try to fix an error when building the system PCH with cppyy's Root on Android, as described [on the forum](https://root-forum.cern.ch/t/errors-building-system-pch-with-cppyys-root-on-android/51961).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11579
https://github.com/root-project/root/pull/11579:169,performance,error,errors-building-system-pch-with-cppyys-root-on-android,169,"Add ENABLE_EXPORTS to rootcling; Try to fix an error when building the system PCH with cppyy's Root on Android, as described [on the forum](https://root-forum.cern.ch/t/errors-building-system-pch-with-cppyys-root-on-android/51961).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11579
https://github.com/root-project/root/pull/11579:47,safety,error,error,47,"Add ENABLE_EXPORTS to rootcling; Try to fix an error when building the system PCH with cppyy's Root on Android, as described [on the forum](https://root-forum.cern.ch/t/errors-building-system-pch-with-cppyys-root-on-android/51961).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11579
https://github.com/root-project/root/pull/11579:169,safety,error,errors-building-system-pch-with-cppyys-root-on-android,169,"Add ENABLE_EXPORTS to rootcling; Try to fix an error when building the system PCH with cppyy's Root on Android, as described [on the forum](https://root-forum.cern.ch/t/errors-building-system-pch-with-cppyys-root-on-android/51961).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11579
https://github.com/root-project/root/pull/11579:47,usability,error,error,47,"Add ENABLE_EXPORTS to rootcling; Try to fix an error when building the system PCH with cppyy's Root on Android, as described [on the forum](https://root-forum.cern.ch/t/errors-building-system-pch-with-cppyys-root-on-android/51961).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11579
https://github.com/root-project/root/pull/11579:169,usability,error,errors-building-system-pch-with-cppyys-root-on-android,169,"Add ENABLE_EXPORTS to rootcling; Try to fix an error when building the system PCH with cppyy's Root on Android, as described [on the forum](https://root-forum.cern.ch/t/errors-building-system-pch-with-cppyys-root-on-android/51961).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11579
https://github.com/root-project/root/issues/11580:506,deployability,Version,Version,506,TDatabasePDG::GetParticle(...) not being thread safe; ### Describe the bug. concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior. ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce. Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup. ```. ROOT Version: 6.26/06. Platform: Fedora 37 Beta. Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2). ```. ### Additional context. https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11580
https://github.com/root-project/root/issues/11580:747,deployability,log,log-spam,747,TDatabasePDG::GetParticle(...) not being thread safe; ### Describe the bug. concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior. ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce. Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup. ```. ROOT Version: 6.26/06. Platform: Fedora 37 Beta. Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2). ```. ### Additional context. https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11580
https://github.com/root-project/root/issues/11580:506,integrability,Version,Version,506,TDatabasePDG::GetParticle(...) not being thread safe; ### Describe the bug. concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior. ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce. Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup. ```. ROOT Version: 6.26/06. Platform: Fedora 37 Beta. Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2). ```. ### Additional context. https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11580
https://github.com/root-project/root/issues/11580:524,interoperability,Platform,Platform,524,TDatabasePDG::GetParticle(...) not being thread safe; ### Describe the bug. concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior. ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce. Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup. ```. ROOT Version: 6.26/06. Platform: Fedora 37 Beta. Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2). ```. ### Additional context. https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11580
https://github.com/root-project/root/issues/11580:506,modifiability,Version,Version,506,TDatabasePDG::GetParticle(...) not being thread safe; ### Describe the bug. concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior. ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce. Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup. ```. ROOT Version: 6.26/06. Platform: Fedora 37 Beta. Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2). ```. ### Additional context. https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11580
https://github.com/root-project/root/issues/11580:76,performance,concurren,concurrent,76,TDatabasePDG::GetParticle(...) not being thread safe; ### Describe the bug. concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior. ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce. Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup. ```. ROOT Version: 6.26/06. Platform: Fedora 37 Beta. Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2). ```. ### Additional context. https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11580
https://github.com/root-project/root/issues/11580:363,performance,lock,locks,363,TDatabasePDG::GetParticle(...) not being thread safe; ### Describe the bug. concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior. ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce. Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup. ```. ROOT Version: 6.26/06. Platform: Fedora 37 Beta. Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2). ```. ### Additional context. https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11580
https://github.com/root-project/root/issues/11580:48,safety,safe,safe,48,TDatabasePDG::GetParticle(...) not being thread safe; ### Describe the bug. concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior. ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce. Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup. ```. ROOT Version: 6.26/06. Platform: Fedora 37 Beta. Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2). ```. ### Additional context. https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11580
https://github.com/root-project/root/issues/11580:338,safety,safe,safe,338,TDatabasePDG::GetParticle(...) not being thread safe; ### Describe the bug. concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior. ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce. Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup. ```. ROOT Version: 6.26/06. Platform: Fedora 37 Beta. Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2). ```. ### Additional context. https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11580
https://github.com/root-project/root/issues/11580:691,safety,safe,safe-while-creating-multiple-thread-only-instance-cause-log-spam,691,TDatabasePDG::GetParticle(...) not being thread safe; ### Describe the bug. concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior. ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce. Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup. ```. ROOT Version: 6.26/06. Platform: Fedora 37 Beta. Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2). ```. ### Additional context. https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11580
https://github.com/root-project/root/issues/11580:363,security,lock,locks,363,TDatabasePDG::GetParticle(...) not being thread safe; ### Describe the bug. concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior. ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce. Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup. ```. ROOT Version: 6.26/06. Platform: Fedora 37 Beta. Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2). ```. ### Additional context. https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11580
https://github.com/root-project/root/issues/11580:747,security,log,log-spam,747,TDatabasePDG::GetParticle(...) not being thread safe; ### Describe the bug. concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior. ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce. Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup. ```. ROOT Version: 6.26/06. Platform: Fedora 37 Beta. Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2). ```. ### Additional context. https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11580
https://github.com/root-project/root/issues/11580:626,testability,context,context,626,TDatabasePDG::GetParticle(...) not being thread safe; ### Describe the bug. concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior. ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce. Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup. ```. ROOT Version: 6.26/06. Platform: Fedora 37 Beta. Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2). ```. ### Additional context. https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11580
https://github.com/root-project/root/issues/11580:747,testability,log,log-spam,747,TDatabasePDG::GetParticle(...) not being thread safe; ### Describe the bug. concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior. ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce. Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup. ```. ROOT Version: 6.26/06. Platform: Fedora 37 Beta. Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2). ```. ### Additional context. https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11580
https://github.com/root-project/root/issues/11580:253,usability,behavi,behavior,253,TDatabasePDG::GetParticle(...) not being thread safe; ### Describe the bug. concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior. ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce. Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup. ```. ROOT Version: 6.26/06. Platform: Fedora 37 Beta. Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2). ```. ### Additional context. https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11580
https://github.com/root-project/root/issues/11580:351,usability,user,user,351,TDatabasePDG::GetParticle(...) not being thread safe; ### Describe the bug. concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior. ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce. Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup. ```. ROOT Version: 6.26/06. Platform: Fedora 37 Beta. Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2). ```. ### Additional context. https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11580
https://github.com/root-project/root/issues/11581:475,availability,Error,Error,475,"Broken pythonization of std::vector<const char*>; - [x] Checked for duplicates: seems to be similar to #10522 but this is unrelated to complex numbers. ### Describe the bug. Trying to declare a `std::vector<const char*>` from python fails in ROOT 6.26 (also tested in master) with:. ```. In [1]: import ROOT. In [2]: ROOT.gROOT.GetVersion(). Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:233,deployability,fail,fails,233,"Broken pythonization of std::vector<const char*>; - [x] Checked for duplicates: seems to be similar to #10522 but this is unrelated to complex numbers. ### Describe the bug. Trying to declare a `std::vector<const char*>` from python fails in ROOT 6.26 (also tested in master) with:. ```. In [1]: import ROOT. In [2]: ROOT.gROOT.GetVersion(). Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1391,deployability,modul,module,1391,"('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected beh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1597,deployability,Fail,Failed,1597,"_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1699,deployability,Fail,Failed,1699,"honizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.Lo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:2025,deployability,modul,module,2025,"ct 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ```. Note that I don't need to use the object in python as such, I just need to pass it to a C++ function that happens to expect a `std::vector<const char*>`, so I do not care about pythonizations. ### Setup. Tested on ROOT 6.24/06 (LCG101), 6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1635,interoperability,format,format,1635,"OOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> ob",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1391,modifiability,modul,module,1391,"('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected beh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:2025,modifiability,modul,module,2025,"ct 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ```. Note that I don't need to use the object in python as such, I just need to pass it to a C++ function that happens to expect a `std::vector<const char*>`, so I do not care about pythonizations. ### Setup. Tested on ROOT 6.24/06 (LCG101), 6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:475,performance,Error,Error,475,"Broken pythonization of std::vector<const char*>; - [x] Checked for duplicates: seems to be similar to #10522 but this is unrelated to complex numbers. ### Describe the bug. Trying to declare a `std::vector<const char*>` from python fails in ROOT 6.26 (also tested in master) with:. ```. In [1]: import ROOT. In [2]: ROOT.gROOT.GetVersion(). Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:233,reliability,fail,fails,233,"Broken pythonization of std::vector<const char*>; - [x] Checked for duplicates: seems to be similar to #10522 but this is unrelated to complex numbers. ### Describe the bug. Trying to declare a `std::vector<const char*>` from python fails in ROOT 6.26 (also tested in master) with:. ```. In [1]: import ROOT. In [2]: ROOT.gROOT.GetVersion(). Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1597,reliability,Fail,Failed,1597,"_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1699,reliability,Fail,Failed,1699,"honizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.Lo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1785,reliability,doe,does,1785,"11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ``",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:3090,reliability,doe,does,3090,"ue_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ```. Note that I don't need to use the object in python as such, I just need to pass it to a C++ function that happens to expect a `std::vector<const char*>`, so I do not care about pythonizations. ### Setup. Tested on ROOT 6.24/06 (LCG101), 6.26/00 (LCG102rc1), master (LCGdev3): the pythonization issue does not appear in 6.24.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:135,safety,compl,complex,135,"Broken pythonization of std::vector<const char*>; - [x] Checked for duplicates: seems to be similar to #10522 but this is unrelated to complex numbers. ### Describe the bug. Trying to declare a `std::vector<const char*>` from python fails in ROOT 6.26 (also tested in master) with:. ```. In [1]: import ROOT. In [2]: ROOT.gROOT.GetVersion(). Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:258,safety,test,tested,258,"Broken pythonization of std::vector<const char*>; - [x] Checked for duplicates: seems to be similar to #10522 but this is unrelated to complex numbers. ### Describe the bug. Trying to declare a `std::vector<const char*>` from python fails in ROOT 6.26 (also tested in master) with:. ```. In [1]: import ROOT. In [2]: ROOT.gROOT.GetVersion(). Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:421,safety,test,test,421,"Broken pythonization of std::vector<const char*>; - [x] Checked for duplicates: seems to be similar to #10522 but this is unrelated to complex numbers. ### Describe the bug. Trying to declare a `std::vector<const char*>` from python fails in ROOT 6.26 (also tested in master) with:. ```. In [1]: import ROOT. In [2]: ROOT.gROOT.GetVersion(). Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:469,safety,test,test,469,"Broken pythonization of std::vector<const char*>; - [x] Checked for duplicates: seems to be similar to #10522 but this is unrelated to complex numbers. ### Describe the bug. Trying to declare a `std::vector<const char*>` from python fails in ROOT 6.26 (also tested in master) with:. ```. In [1]: import ROOT. In [2]: ROOT.gROOT.GetVersion(). Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:475,safety,Error,Error,475,"Broken pythonization of std::vector<const char*>; - [x] Checked for duplicates: seems to be similar to #10522 but this is unrelated to complex numbers. ### Describe the bug. Trying to declare a `std::vector<const char*>` from python fails in ROOT 6.26 (also tested in master) with:. ```. In [1]: import ROOT. In [2]: ROOT.gROOT.GetVersion(). Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1365,safety,input,input-,1365," ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argumen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1391,safety,modul,module,1391,"('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected beh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1413,safety,test,test,1413,"har*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1723,safety,test,test,1723,"le ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1999,safety,input,input-,1999,". Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ```. Note that I don't need to use the object in python as such, I just need to pass it to a C++ function that happens to expect a `std::vector<const char*>`, so I do not care about pythonizations. ### Setup. Tested o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:2025,safety,modul,module,2025,"ct 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ```. Note that I don't need to use the object in python as such, I just need to pass it to a C++ function that happens to expect a `std::vector<const char*>`, so I do not care about pythonizations. ### Setup. Tested on ROOT 6.24/06 (LCG101), 6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:2539,safety,test,test,2539,"ue_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ```. Note that I don't need to use the object in python as such, I just need to pass it to a C++ function that happens to expect a `std::vector<const char*>`, so I do not care about pythonizations. ### Setup. Tested on ROOT 6.24/06 (LCG101), 6.26/00 (LCG102rc1), master (LCGdev3): the pythonization issue does not appear in 6.24.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:2587,safety,test,test,2587,"ue_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ```. Note that I don't need to use the object in python as such, I just need to pass it to a C++ function that happens to expect a `std::vector<const char*>`, so I do not care about pythonizations. ### Setup. Tested on ROOT 6.24/06 (LCG101), 6.26/00 (LCG102rc1), master (LCGdev3): the pythonization issue does not appear in 6.24.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:2676,safety,test,test,2676,"ue_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ```. Note that I don't need to use the object in python as such, I just need to pass it to a C++ function that happens to expect a `std::vector<const char*>`, so I do not care about pythonizations. ### Setup. Tested on ROOT 6.24/06 (LCG101), 6.26/00 (LCG102rc1), master (LCGdev3): the pythonization issue does not appear in 6.24.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:2994,safety,Test,Tested,2994,"ue_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ```. Note that I don't need to use the object in python as such, I just need to pass it to a C++ function that happens to expect a `std::vector<const char*>`, so I do not care about pythonizations. ### Setup. Tested on ROOT 6.24/06 (LCG101), 6.26/00 (LCG102rc1), master (LCGdev3): the pythonization issue does not appear in 6.24.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:135,security,compl,complex,135,"Broken pythonization of std::vector<const char*>; - [x] Checked for duplicates: seems to be similar to #10522 but this is unrelated to complex numbers. ### Describe the bug. Trying to declare a `std::vector<const char*>` from python fails in ROOT 6.26 (also tested in master) with:. ```. In [1]: import ROOT. In [2]: ROOT.gROOT.GetVersion(). Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:258,testability,test,tested,258,"Broken pythonization of std::vector<const char*>; - [x] Checked for duplicates: seems to be similar to #10522 but this is unrelated to complex numbers. ### Describe the bug. Trying to declare a `std::vector<const char*>` from python fails in ROOT 6.26 (also tested in master) with:. ```. In [1]: import ROOT. In [2]: ROOT.gROOT.GetVersion(). Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:421,testability,test,test,421,"Broken pythonization of std::vector<const char*>; - [x] Checked for duplicates: seems to be similar to #10522 but this is unrelated to complex numbers. ### Describe the bug. Trying to declare a `std::vector<const char*>` from python fails in ROOT 6.26 (also tested in master) with:. ```. In [1]: import ROOT. In [2]: ROOT.gROOT.GetVersion(). Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:469,testability,test,test,469,"Broken pythonization of std::vector<const char*>; - [x] Checked for duplicates: seems to be similar to #10522 but this is unrelated to complex numbers. ### Describe the bug. Trying to declare a `std::vector<const char*>` from python fails in ROOT 6.26 (also tested in master) with:. ```. In [1]: import ROOT. In [2]: ROOT.gROOT.GetVersion(). Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:526,testability,Trace,Traceback,526,"Broken pythonization of std::vector<const char*>; - [x] Checked for duplicates: seems to be similar to #10522 but this is unrelated to complex numbers. ### Describe the bug. Trying to declare a `std::vector<const char*>` from python fails in ROOT 6.26 (also tested in master) with:. ```. In [1]: import ROOT. In [2]: ROOT.gROOT.GetVersion(). Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1321,testability,Trace,Traceback,1321,"T.GetVersion(). Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1413,testability,test,test,1413,"har*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1723,testability,test,test,1723,"le ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1955,testability,Trace,Traceback,1955,"t 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ```. Note that I don't need to use the object in python as such, I just need to pass it to a C++ function that happens to expect a `std::vector<const char*>`, so I do not care",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:2539,testability,test,test,2539,"ue_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ```. Note that I don't need to use the object in python as such, I just need to pass it to a C++ function that happens to expect a `std::vector<const char*>`, so I do not care about pythonizations. ### Setup. Tested on ROOT 6.24/06 (LCG101), 6.26/00 (LCG102rc1), master (LCGdev3): the pythonization issue does not appear in 6.24.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:2587,testability,test,test,2587,"ue_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ```. Note that I don't need to use the object in python as such, I just need to pass it to a C++ function that happens to expect a `std::vector<const char*>`, so I do not care about pythonizations. ### Setup. Tested on ROOT 6.24/06 (LCG101), 6.26/00 (LCG102rc1), master (LCGdev3): the pythonization issue does not appear in 6.24.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:2676,testability,test,test,2676,"ue_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ```. Note that I don't need to use the object in python as such, I just need to pass it to a C++ function that happens to expect a `std::vector<const char*>`, so I do not care about pythonizations. ### Setup. Tested on ROOT 6.24/06 (LCG101), 6.26/00 (LCG102rc1), master (LCGdev3): the pythonization issue does not appear in 6.24.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:2994,testability,Test,Tested,2994,"ue_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ```. Note that I don't need to use the object in python as such, I just need to pass it to a C++ function that happens to expect a `std::vector<const char*>`, so I do not care about pythonizations. ### Setup. Tested on ROOT 6.24/06 (LCG101), 6.26/00 (LCG102rc1), master (LCGdev3): the pythonization issue does not appear in 6.24.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:475,usability,Error,Error,475,"Broken pythonization of std::vector<const char*>; - [x] Checked for duplicates: seems to be similar to #10522 but this is unrelated to complex numbers. ### Describe the bug. Trying to declare a `std::vector<const char*>` from python fails in ROOT 6.26 (also tested in master) with:. ```. In [1]: import ROOT. In [2]: ROOT.gROOT.GetVersion(). Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1365,usability,input,input-,1365," ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[3]: True. In [4]: ROOT.test. Error pythonizing class std::vector<const char*>:. Traceback (most recent call last):. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke . user_pythonizor(klass, fqn). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector . if klass.value_type == 'char':. AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argumen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:1999,usability,input,input-,1999,". Full details:. type object 'vector<const char*>' has no attribute 'value_type'. 'std::vector<const char*>::value_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ```. Note that I don't need to use the object in python as such, I just need to pass it to a C++ function that happens to expect a `std::vector<const char*>`, so I do not care about pythonizations. ### Setup. Tested o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/issues/11581:2391,usability,behavi,behavior,2391,"ue_type' is not a known C++ class. 'value_type' is not a known C++ template. 'value_type' is not a known C++ enum. ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-4-9dea63bfe1b1> in <module>. ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name). 193 if res:. 194 return res. --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)). 196. 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT. ```. Creating the object directly from python does not work either:. ```. In [5]: t = ROOT.std.vector[""const char*""]([""hello""]). ---------------------------------------------------------------------------. TypeError Traceback (most recent call last). <ipython-input-5-fac447a0dff2> in <module>. ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:. void std::vector<const char*>::push_back(const char*&& __x) =>. TypeError: could not convert argument 1. void std::vector<const char*>::push_back(const char*const& __x) =>. TypeError: could not convert argument 1. ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:. ```. In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'). Out[2]: True. In [3]: ROOT.test. Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]. Out[4]: <cppyy.LowLevelView at 0x7f2c6f18e490>. In [5]: ROOT.gROOT.GetVersion(). Out[5]: '6.24/06'. ```. Note that I don't need to use the object in python as such, I just need to pass it to a C++ function that happens to expect a `std::vector<const char*>`, so I do not care about pythonizations. ### Setup. Tested on ROOT 6.24/06 (LCG101), 6.26/00 (LCG102rc1), master (LCGdev3): the pythonization issue does not appear in 6.24.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11581
https://github.com/root-project/root/pull/11582:49,deployability,contain,contain,49,"Revert ""Revert ""[cxxmodules] Allow submodules to contain headers which may be missing.""""; ROOT 6.24 only requires C++11 and we want to continue supporting the likes of GCC 4.8.5 (on CentOS 7) and GCC 5.4.0 (on Ubuntu 16.04). This reverts commit 44a0c8dcc3e47b3bc7d9677f940384d63074fd97.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11582
https://github.com/root-project/root/pull/11582:135,deployability,continu,continue,135,"Revert ""Revert ""[cxxmodules] Allow submodules to contain headers which may be missing.""""; ROOT 6.24 only requires C++11 and we want to continue supporting the likes of GCC 4.8.5 (on CentOS 7) and GCC 5.4.0 (on Ubuntu 16.04). This reverts commit 44a0c8dcc3e47b3bc7d9677f940384d63074fd97.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11582
https://github.com/root-project/root/pull/11582:35,integrability,sub,submodules,35,"Revert ""Revert ""[cxxmodules] Allow submodules to contain headers which may be missing.""""; ROOT 6.24 only requires C++11 and we want to continue supporting the likes of GCC 4.8.5 (on CentOS 7) and GCC 5.4.0 (on Ubuntu 16.04). This reverts commit 44a0c8dcc3e47b3bc7d9677f940384d63074fd97.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11582
https://github.com/root-project/root/pull/11582:144,usability,support,supporting,144,"Revert ""Revert ""[cxxmodules] Allow submodules to contain headers which may be missing.""""; ROOT 6.24 only requires C++11 and we want to continue supporting the likes of GCC 4.8.5 (on CentOS 7) and GCC 5.4.0 (on Ubuntu 16.04). This reverts commit 44a0c8dcc3e47b3bc7d9677f940384d63074fd97.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11582
https://github.com/root-project/root/pull/11583:163,performance,content,content,163,"[webgui] use default web browser, let reload RWebWindow; 1. Use default system web browser by default for interactive session. 2. Provide way to reload RWebWindow content with key generation. 3. Provide `Ctrl-R` handler in RBrowser, RGeomViewer, RWebCanvas, RFitPanel. 4. Fix problem in `RGeomViewer` - removing last refs from eve7 . 5. Fix problem with `RFitPanel` - still was using global JSROOT handle which is removed in `v7`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11583
https://github.com/root-project/root/pull/11583:118,security,session,session,118,"[webgui] use default web browser, let reload RWebWindow; 1. Use default system web browser by default for interactive session. 2. Provide way to reload RWebWindow content with key generation. 3. Provide `Ctrl-R` handler in RBrowser, RGeomViewer, RWebCanvas, RFitPanel. 4. Fix problem in `RGeomViewer` - removing last refs from eve7 . 5. Fix problem with `RFitPanel` - still was using global JSROOT handle which is removed in `v7`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11583
https://github.com/root-project/root/pull/11583:106,usability,interact,interactive,106,"[webgui] use default web browser, let reload RWebWindow; 1. Use default system web browser by default for interactive session. 2. Provide way to reload RWebWindow content with key generation. 3. Provide `Ctrl-R` handler in RBrowser, RGeomViewer, RWebCanvas, RFitPanel. 4. Fix problem in `RGeomViewer` - removing last refs from eve7 . 5. Fix problem with `RFitPanel` - still was using global JSROOT handle which is removed in `v7`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11583
https://github.com/root-project/root/pull/11584:12,availability,error,error,12,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:168,availability,error,error,168,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:315,availability,error,error,315,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:559,availability,error,error,559,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:622,availability,error,error,622,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:679,availability,error,error,679,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:12,performance,error,error,12,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:168,performance,error,error,168,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:315,performance,error,error,315,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:559,performance,error,error,559,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:622,performance,error,error,622,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:679,performance,error,error,679,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:12,safety,error,error,12,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:168,safety,error,error,168,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:315,safety,error,error,315,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:559,safety,error,error,559,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:622,safety,error,error,622,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:679,safety,error,error,679,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:688,safety,except,exception,688,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:360,security,access,access,360,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:12,usability,error,error,12,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:168,usability,error,error,168,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:315,usability,error,error,315,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:419,usability,user,users,419,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:559,usability,error,error,559,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:622,usability,error,error,622,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11584:679,usability,error,error,679,"[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found; In this forum post, the point was made that. `RooWorkspace::getSnapshot()` should not print an error if a snapshot. with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,. `pdf()`, or `function()`, users expect to use `getSnapshot()` also to. query if a snapshot exists and check if the returned value is `nullptr`. So there should be no error printed in `getSnapshot()` itself. If it is. actually an error for th caller that no snapshot has been found, an. error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11584
https://github.com/root-project/root/pull/11585:246,deployability,manag,managed,246,"[webgui] improve RBrowser, fix other problems; 1. When filter expression entered, reopen folders again. Means if `TFile` keys were shown, they will be shown again. . 2. When object like `TH1` or `TTree` read from `TFile`, it will be removed from managed objects and owned by `RBrowser`. This allows to correctly work with different histograms version at the time. 3. Show `TFile` size . 4. Fix two LGTM warnings. 5. Add `root7` as dependency for `RGeomViewer`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11585
https://github.com/root-project/root/pull/11585:343,deployability,version,version,343,"[webgui] improve RBrowser, fix other problems; 1. When filter expression entered, reopen folders again. Means if `TFile` keys were shown, they will be shown again. . 2. When object like `TH1` or `TTree` read from `TFile`, it will be removed from managed objects and owned by `RBrowser`. This allows to correctly work with different histograms version at the time. 3. Show `TFile` size . 4. Fix two LGTM warnings. 5. Add `root7` as dependency for `RGeomViewer`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11585
https://github.com/root-project/root/pull/11585:431,deployability,depend,dependency,431,"[webgui] improve RBrowser, fix other problems; 1. When filter expression entered, reopen folders again. Means if `TFile` keys were shown, they will be shown again. . 2. When object like `TH1` or `TTree` read from `TFile`, it will be removed from managed objects and owned by `RBrowser`. This allows to correctly work with different histograms version at the time. 3. Show `TFile` size . 4. Fix two LGTM warnings. 5. Add `root7` as dependency for `RGeomViewer`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11585
https://github.com/root-project/root/pull/11585:246,energy efficiency,manag,managed,246,"[webgui] improve RBrowser, fix other problems; 1. When filter expression entered, reopen folders again. Means if `TFile` keys were shown, they will be shown again. . 2. When object like `TH1` or `TTree` read from `TFile`, it will be removed from managed objects and owned by `RBrowser`. This allows to correctly work with different histograms version at the time. 3. Show `TFile` size . 4. Fix two LGTM warnings. 5. Add `root7` as dependency for `RGeomViewer`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11585
https://github.com/root-project/root/pull/11585:55,integrability,filter,filter,55,"[webgui] improve RBrowser, fix other problems; 1. When filter expression entered, reopen folders again. Means if `TFile` keys were shown, they will be shown again. . 2. When object like `TH1` or `TTree` read from `TFile`, it will be removed from managed objects and owned by `RBrowser`. This allows to correctly work with different histograms version at the time. 3. Show `TFile` size . 4. Fix two LGTM warnings. 5. Add `root7` as dependency for `RGeomViewer`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11585
https://github.com/root-project/root/pull/11585:343,integrability,version,version,343,"[webgui] improve RBrowser, fix other problems; 1. When filter expression entered, reopen folders again. Means if `TFile` keys were shown, they will be shown again. . 2. When object like `TH1` or `TTree` read from `TFile`, it will be removed from managed objects and owned by `RBrowser`. This allows to correctly work with different histograms version at the time. 3. Show `TFile` size . 4. Fix two LGTM warnings. 5. Add `root7` as dependency for `RGeomViewer`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11585
https://github.com/root-project/root/pull/11585:431,integrability,depend,dependency,431,"[webgui] improve RBrowser, fix other problems; 1. When filter expression entered, reopen folders again. Means if `TFile` keys were shown, they will be shown again. . 2. When object like `TH1` or `TTree` read from `TFile`, it will be removed from managed objects and owned by `RBrowser`. This allows to correctly work with different histograms version at the time. 3. Show `TFile` size . 4. Fix two LGTM warnings. 5. Add `root7` as dependency for `RGeomViewer`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11585
https://github.com/root-project/root/pull/11585:343,modifiability,version,version,343,"[webgui] improve RBrowser, fix other problems; 1. When filter expression entered, reopen folders again. Means if `TFile` keys were shown, they will be shown again. . 2. When object like `TH1` or `TTree` read from `TFile`, it will be removed from managed objects and owned by `RBrowser`. This allows to correctly work with different histograms version at the time. 3. Show `TFile` size . 4. Fix two LGTM warnings. 5. Add `root7` as dependency for `RGeomViewer`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11585
https://github.com/root-project/root/pull/11585:431,modifiability,depend,dependency,431,"[webgui] improve RBrowser, fix other problems; 1. When filter expression entered, reopen folders again. Means if `TFile` keys were shown, they will be shown again. . 2. When object like `TH1` or `TTree` read from `TFile`, it will be removed from managed objects and owned by `RBrowser`. This allows to correctly work with different histograms version at the time. 3. Show `TFile` size . 4. Fix two LGTM warnings. 5. Add `root7` as dependency for `RGeomViewer`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11585
https://github.com/root-project/root/pull/11585:358,performance,time,time,358,"[webgui] improve RBrowser, fix other problems; 1. When filter expression entered, reopen folders again. Means if `TFile` keys were shown, they will be shown again. . 2. When object like `TH1` or `TTree` read from `TFile`, it will be removed from managed objects and owned by `RBrowser`. This allows to correctly work with different histograms version at the time. 3. Show `TFile` size . 4. Fix two LGTM warnings. 5. Add `root7` as dependency for `RGeomViewer`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11585
https://github.com/root-project/root/pull/11585:246,safety,manag,managed,246,"[webgui] improve RBrowser, fix other problems; 1. When filter expression entered, reopen folders again. Means if `TFile` keys were shown, they will be shown again. . 2. When object like `TH1` or `TTree` read from `TFile`, it will be removed from managed objects and owned by `RBrowser`. This allows to correctly work with different histograms version at the time. 3. Show `TFile` size . 4. Fix two LGTM warnings. 5. Add `root7` as dependency for `RGeomViewer`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11585
https://github.com/root-project/root/pull/11585:431,safety,depend,dependency,431,"[webgui] improve RBrowser, fix other problems; 1. When filter expression entered, reopen folders again. Means if `TFile` keys were shown, they will be shown again. . 2. When object like `TH1` or `TTree` read from `TFile`, it will be removed from managed objects and owned by `RBrowser`. This allows to correctly work with different histograms version at the time. 3. Show `TFile` size . 4. Fix two LGTM warnings. 5. Add `root7` as dependency for `RGeomViewer`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11585
https://github.com/root-project/root/pull/11585:431,testability,depend,dependency,431,"[webgui] improve RBrowser, fix other problems; 1. When filter expression entered, reopen folders again. Means if `TFile` keys were shown, they will be shown again. . 2. When object like `TH1` or `TTree` read from `TFile`, it will be removed from managed objects and owned by `RBrowser`. This allows to correctly work with different histograms version at the time. 3. Show `TFile` size . 4. Fix two LGTM warnings. 5. Add `root7` as dependency for `RGeomViewer`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11585
https://github.com/root-project/root/pull/11586:19,availability,operat,operators,19,[TMVA][SOFIE] Nary operators with multidirectional broadcasting; ## This Pull request:. Development of the nary operators with multi directional broadcasting for TMVA/SOFIE. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11586
https://github.com/root-project/root/pull/11586:112,availability,operat,operators,112,[TMVA][SOFIE] Nary operators with multidirectional broadcasting; ## This Pull request:. Development of the nary operators with multi directional broadcasting for TMVA/SOFIE. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11586
https://github.com/root-project/root/pull/11586:195,safety,test,tested,195,[TMVA][SOFIE] Nary operators with multidirectional broadcasting; ## This Pull request:. Development of the nary operators with multi directional broadcasting for TMVA/SOFIE. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11586
https://github.com/root-project/root/pull/11586:195,testability,test,tested,195,[TMVA][SOFIE] Nary operators with multidirectional broadcasting; ## This Pull request:. Development of the nary operators with multi directional broadcasting for TMVA/SOFIE. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11586
https://github.com/root-project/root/issues/11587:721,availability,error,error,721,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:964,availability,error,error,964,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:1510,availability,error,error,1510,"ies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:1703,availability,error,error,1703,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:1939,availability,error,error,1939,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2336,availability,error,error,2336,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2517,availability,Error,Error,2517,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2590,availability,Error,Error,2590,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2628,availability,Error,Error,2628,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:504,deployability,depend,dependencies,504,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:540,deployability,Build,Building,540,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2470,deployability,build,build,2470,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:504,integrability,depend,dependencies,504,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:166,interoperability,standard,standard,166,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:504,modifiability,depend,dependencies,504,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:154,performance,time,time,154,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:721,performance,error,error,721,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:964,performance,error,error,964,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:1510,performance,error,error,1510,"ies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:1703,performance,error,error,1703,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:1939,performance,error,error,1939,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2336,performance,error,error,2336,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2517,performance,Error,Error,2517,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2590,performance,Error,Error,2590,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2628,performance,Error,Error,2628,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:504,safety,depend,dependencies,504,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:721,safety,error,error,721,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:964,safety,error,error,964,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:1510,safety,error,error,1510,"ies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:1703,safety,error,error,1703,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:1939,safety,error,error,1939,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2336,safety,error,error,2336,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2517,safety,Error,Error,2517,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2590,safety,Error,Error,2590,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2628,safety,Error,Error,2628,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:1556,security,token,token,1556," CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2382,security,token,token,2382,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:504,testability,depend,dependencies,504,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:290,usability,minim,minimal,290,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:721,usability,error,error,721,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:964,usability,error,error,964,"`TCollection.h` triggers an ambiguous use of `std::span` with GCC 12.2.0 in C++20; Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp. #include <span>. #include <TCollection.h>. ```. and here is the output:. ```. Consolidate compiler generated dependencies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:1510,usability,error,error,1510,"ies of target main. [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o. In file included from /usr/include/TCollection.h:33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:1703,usability,error,error,1703,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:1939,usability,error,error,1939,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2336,usability,error,error,2336,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2517,usability,Error,Error,2517,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2590,usability,Error,Error,2590,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/issues/11587:2628,usability,Error,Error,2628,":33,. from /tmp/scratchpad/main.cpp:2:. /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. | ^~~~. In file included from /usr/include/ROOT/RSpan.hxx:33,. from /usr/include/ROOT/RRangeCast.hxx:17:. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. In file included from /tmp/scratchpad/main.cpp:1:. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token. 188 | return std::span<U>(arr, arr + N);. | ^. /usr/include/ROOT/RRangeCast.hxx: At global scope:. /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid. 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]). | ^~. /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:. /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous. 227 | return std::span<U>(arr, arr + N);. | ^~~~. /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’. 155 | class span {. | ^~~~. /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’. 56 | class span;. | ^~~~. /usr/include/ROOT/RRangeCast.hxx:227:22: error: expected primary-expression before ‘>’ token. 227 | return std::span<U>(arr, arr + N);. | ^. make[2]: *** [CMakeFiles/main.dir/build.make:76: CMakeFiles/main.dir/main.cpp.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/main.dir/all] Error 2. make: *** [Makefile:91: all] Error 2. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11587
https://github.com/root-project/root/pull/11588:274,deployability,updat,updated,274,TSystem::DirName(): make static vars thread-local; . # This Pull request:. ## Changes or fixes:. thread safety of DirName. as suggested by pcanal here: https://github.com/root-project/root/pull/11443#discussion_r997428823. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11588
https://github.com/root-project/root/pull/11588:104,safety,safe,safety,104,TSystem::DirName(): make static vars thread-local; . # This Pull request:. ## Changes or fixes:. thread safety of DirName. as suggested by pcanal here: https://github.com/root-project/root/pull/11443#discussion_r997428823. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11588
https://github.com/root-project/root/pull/11588:244,safety,test,tested,244,TSystem::DirName(): make static vars thread-local; . # This Pull request:. ## Changes or fixes:. thread safety of DirName. as suggested by pcanal here: https://github.com/root-project/root/pull/11443#discussion_r997428823. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11588
https://github.com/root-project/root/pull/11588:274,safety,updat,updated,274,TSystem::DirName(): make static vars thread-local; . # This Pull request:. ## Changes or fixes:. thread safety of DirName. as suggested by pcanal here: https://github.com/root-project/root/pull/11443#discussion_r997428823. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11588
https://github.com/root-project/root/pull/11588:274,security,updat,updated,274,TSystem::DirName(): make static vars thread-local; . # This Pull request:. ## Changes or fixes:. thread safety of DirName. as suggested by pcanal here: https://github.com/root-project/root/pull/11443#discussion_r997428823. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11588
https://github.com/root-project/root/pull/11588:244,testability,test,tested,244,TSystem::DirName(): make static vars thread-local; . # This Pull request:. ## Changes or fixes:. thread safety of DirName. as suggested by pcanal here: https://github.com/root-project/root/pull/11443#discussion_r997428823. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11588
https://github.com/root-project/root/pull/11589:8,energy efficiency,core,core,8,[6.26] [core] Guard gInterpreterMutex in TClingClassInfo::IsEnum ; Backport of #11516,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11589
https://github.com/root-project/root/pull/11590:8,energy efficiency,core,core,8,[6.24] [core] Guard gInterpreterMutex in TClingClassInfo::IsEnum; Backport of #11516,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11590
https://github.com/root-project/root/pull/11591:8,energy efficiency,core,core,8,[6.22] [core] Guard gInterpreterMutex in TClingClassInfo::IsEnum; Backport of #11516,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11591
https://github.com/root-project/root/pull/11592:89,reliability,doe,does,89,[PyROOT][11581] Fix std::vector pythonization; Fixes #11581 . `std::vector<const char*>` does not provide a `value_type` attribute. This PR makes the pythonization of `std::vector<char>` resilient to the absence of such attribute.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11592
https://github.com/root-project/root/pull/11592:187,reliability,resilien,resilient,187,[PyROOT][11581] Fix std::vector pythonization; Fixes #11581 . `std::vector<const char*>` does not provide a `value_type` attribute. This PR makes the pythonization of `std::vector<char>` resilient to the absence of such attribute.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11592
https://github.com/root-project/root/pull/11592:187,safety,resilien,resilient,187,[PyROOT][11581] Fix std::vector pythonization; Fixes #11581 . `std::vector<const char*>` does not provide a `value_type` attribute. This PR makes the pythonization of `std::vector<char>` resilient to the absence of such attribute.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11592
https://github.com/root-project/root/pull/11594:25,availability,operat,operator,25,[TMVA][SOFIE] Fix concat operator; This PR fixes the Concat operator for concatenating on the 0th axis and adds corresponding test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11594
https://github.com/root-project/root/pull/11594:60,availability,operat,operator,60,[TMVA][SOFIE] Fix concat operator; This PR fixes the Concat operator for concatenating on the 0th axis and adds corresponding test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11594
https://github.com/root-project/root/pull/11594:126,safety,test,test,126,[TMVA][SOFIE] Fix concat operator; This PR fixes the Concat operator for concatenating on the 0th axis and adds corresponding test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11594
https://github.com/root-project/root/pull/11594:126,testability,test,test,126,[TMVA][SOFIE] Fix concat operator; This PR fixes the Concat operator for concatenating on the 0th axis and adds corresponding test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11594
https://github.com/root-project/root/pull/11595:37,availability,operat,operator,37,[TMVA][SOFIE] Add LayerNormalization operator; ## This Pull request:. Development of the LayerNormalization operator for TMVA/SOFIE. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11595
https://github.com/root-project/root/pull/11595:108,availability,operat,operator,108,[TMVA][SOFIE] Add LayerNormalization operator; ## This Pull request:. Development of the LayerNormalization operator for TMVA/SOFIE. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11595
https://github.com/root-project/root/pull/11595:18,modifiability,Layer,LayerNormalization,18,[TMVA][SOFIE] Add LayerNormalization operator; ## This Pull request:. Development of the LayerNormalization operator for TMVA/SOFIE. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11595
https://github.com/root-project/root/pull/11595:89,modifiability,Layer,LayerNormalization,89,[TMVA][SOFIE] Add LayerNormalization operator; ## This Pull request:. Development of the LayerNormalization operator for TMVA/SOFIE. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11595
https://github.com/root-project/root/pull/11595:154,safety,test,tested,154,[TMVA][SOFIE] Add LayerNormalization operator; ## This Pull request:. Development of the LayerNormalization operator for TMVA/SOFIE. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11595
https://github.com/root-project/root/pull/11595:154,testability,test,tested,154,[TMVA][SOFIE] Add LayerNormalization operator; ## This Pull request:. Development of the LayerNormalization operator for TMVA/SOFIE. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11595
https://github.com/root-project/root/issues/11596:6,reliability,doe,does,6,cppyy does not retrieve correct size of type when pythonizing vector; ```cpp. root [0] auto a = std::vector<const char*>::value_type();. root [1] a. (const char *) nullptr. ```. Whereas it should return the correct `const char*` type https://godbolt.org/z/a3s95cex3. ## Setup. ROOT master and 6.26. Fedora 36. GCC 12. Feel free to change assignees if needed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11596
https://github.com/root-project/root/pull/11597:32,deployability,integr,integrals,32,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:73,deployability,Integr,Integrals,73,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:778,deployability,integr,integral,778,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1053,deployability,integr,integral,1053," value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1721,deployability,log,logic,1721,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1804,deployability,depend,depend,1804,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1819,deployability,integr,integration,1819,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1917,deployability,integr,integral,1917,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2171,deployability,integr,integral,2171,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2313,deployability,integr,integral,2313,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:32,integrability,integr,integrals,32,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:73,integrability,Integr,Integrals,73,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:124,integrability,interfac,interface,124,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:778,integrability,integr,integral,778,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1053,integrability,integr,integral,1053," value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1529,integrability,Batch,BatchMode,1529,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1576,integrability,interfac,interface,1576,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1804,integrability,depend,depend,1804,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1819,integrability,integr,integration,1819,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1917,integrability,integr,integral,1917,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2171,integrability,integr,integral,2171,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2180,integrability,wrap,wrapper,2180,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2222,integrability,interfac,interface,2222,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2313,integrability,integr,integral,2313,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:32,interoperability,integr,integrals,32,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:73,interoperability,Integr,Integrals,73,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:110,interoperability,client-serv,client-server,110,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:124,interoperability,interfac,interface,124,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:778,interoperability,integr,integral,778,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1053,interoperability,integr,integral,1053," value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1493,interoperability,client-serv,client-server,1493,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1576,interoperability,interfac,interface,1576,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1819,interoperability,integr,integration,1819,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1917,interoperability,integr,integral,1917,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2171,interoperability,integr,integral,2171,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2180,interoperability,wrapper,wrapper,2180,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2222,interoperability,interfac,interface,2222,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2313,interoperability,integr,integral,2313,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:32,modifiability,integr,integrals,32,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:73,modifiability,Integr,Integrals,73,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:124,modifiability,interfac,interface,124,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:778,modifiability,integr,integral,778,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:844,modifiability,paramet,parameters,844,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1053,modifiability,integr,integral,1053," value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1576,modifiability,interfac,interface,1576,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1804,modifiability,depend,depend,1804,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1819,modifiability,integr,integration,1819,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1831,modifiability,variab,variable,1831,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1917,modifiability,integr,integral,1917,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2171,modifiability,integr,integral,2171,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2222,modifiability,interfac,interface,2222,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2313,modifiability,integr,integral,2313,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1529,performance,Batch,BatchMode,1529,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:32,reliability,integr,integrals,32,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:73,reliability,Integr,Integrals,73,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:778,reliability,integr,integral,778,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1053,reliability,integr,integral,1053," value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1129,reliability,doe,doesn,1129,"e messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1819,reliability,integr,integration,1819,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1917,reliability,integr,integral,1917,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2171,reliability,integr,integral,2171,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2313,reliability,integr,integral,2313,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1721,safety,log,logic,1721,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1804,safety,depend,depend,1804,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1868,safety,test,test,1868,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:32,security,integr,integrals,32,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:73,security,Integr,Integrals,73,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:778,security,integr,integral,778,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1053,security,integr,integral,1053," value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1721,security,log,logic,1721,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1819,security,integr,integration,1819,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1917,security,integr,integral,1917,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2171,security,integr,integral,2171,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2313,security,integr,integral,2313,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:32,testability,integr,integrals,32,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:73,testability,Integr,Integrals,73,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:778,testability,integr,integral,778,"[RF] Make sure value servers of integrals are next direct value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1053,testability,integr,integral,1053," value servers; Integrals of derived PDFs have their client-server interface messed up,. and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++. void repro() {. using namespace RooFit;. RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);. RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1721,testability,log,logic,1721,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1804,testability,depend,depend,1804,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1819,testability,integr,integration,1819,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1863,testability,unit,unit,1863,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1868,testability,test,test,1868,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1878,testability,verif,verifies,1878,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:1917,testability,integr,integral,1917,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2171,testability,integr,integral,2171,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2247,testability,simpl,simply,2247,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2313,testability,integr,integral,2313,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2030,usability,Close,Closes,2030,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11597:2247,usability,simpl,simply,2247,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));. RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};. integ2->Print(""v"");. }. ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bf240,--) RooGaussian::gauss """". (0x7ffc9b9bff68,V-) RooProduct::par_mod """". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. The integral of the `RooGenericPdf` should have the same value servers,. but it doesn't. Instead, it uses the leaves of the computation graph:. ```. (0x7ffc9b9bf798,-S) RooRealVar::x """". (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """". (0x7ffc9b9bfb80,V-) RooRealVar::par """". (0x55ac51984c50,V-) RooConstVar::10 ""10"". (0x55ac531cd470,V-) RooConstVar::2 ""2"". ```. That means, the direct value server `par_mod` is **skipped** now,. misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the. `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it. wrong. That's why this commit suggests to change the logic in `RooRealIntegral`. to always add the next direct value servers that don't depend on the. integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the. mathematically direct value servers and not the computation graph leaves. is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11597
https://github.com/root-project/root/pull/11598:6,deployability,instal,install,6,Don't install h2root.1 and g2root.1 man pages when fortran is OFF; Fixes the issue #11182,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11598
https://github.com/root-project/root/pull/11600:67,availability,operat,operators,67,"[TMVA][SOFIE] Bring back Flatten, Squeeze, Unsqueeze and fix fused operators; . - [x] tested changes locally. This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11600
https://github.com/root-project/root/pull/11600:86,safety,test,tested,86,"[TMVA][SOFIE] Bring back Flatten, Squeeze, Unsqueeze and fix fused operators; . - [x] tested changes locally. This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11600
https://github.com/root-project/root/pull/11600:86,testability,test,tested,86,"[TMVA][SOFIE] Bring back Flatten, Squeeze, Unsqueeze and fix fused operators; . - [x] tested changes locally. This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11600
https://github.com/root-project/root/issues/11601:37,deployability,updat,update,37,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:70,deployability,updat,updating,70,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:155,deployability,fail,failing,155,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:211,deployability,configurat,configuration,211,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:621,deployability,build,building,621,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:815,deployability,instal,install,815,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:879,deployability,build,building,879,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:943,deployability,instal,installation,943,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:211,integrability,configur,configuration,211,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:718,interoperability,compatib,compatibility,718,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:211,modifiability,configur,configuration,211,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:155,reliability,fail,failing,155,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:697,reliability,doe,does,697,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:12,safety,test,tests,12,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:37,safety,updat,update,37,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:70,safety,updat,updating,70,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:141,safety,test,tests,141,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:199,safety,test,tests,199,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:415,safety,detect,detect,415,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:37,security,updat,update,37,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:70,security,updat,updating,70,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:211,security,configur,configuration,211,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:415,security,detect,detect,415,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:12,testability,test,tests,12,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:141,testability,test,tests,141,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:199,testability,test,tests,199,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:312,usability,tool,toolset-,312,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11601:677,usability,document,documentation,677,"Many broken tests after recent Clang update on CentOS 8 Stream; After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11601
https://github.com/root-project/root/issues/11602:646,availability,FAILUR,FAILURES,646,"RDataFrame Snapshot throws a SystemError?; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exception occurs with `pytest` running the test code:. ```python. ============================================================================ FAILURES =============================================================================. _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________. RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):. filename = os.path.join(tmp_path, ""test-listarray.root""). . ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). . data_frame = ak.to_rdataframe({""x"": ak_array_in}). . assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""). . ak_array_out = ak.from_rdataframe(. data_frame,. columns=(""x"",),. ). assert ak_array_in.to_list() == ak_array_out[""x""].to_list(). . #with pytest.raises(SystemError):. > data_frame.Snapshot(""ListArray"", filename, (""x"",)). E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:3742,availability,Error,Error,3742,"view<char,char_traits<char> > filename, basic_string_view<char,char_traits<char> > columnNameRegexp = """", const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()) returned a result with an exception set. ak_array_in = <Array [[[1.1], [2.2]], [[3.3], ...]] type='2 * var * var * float64'>. ak_array_out = <Array [{x: [[1.1], [2.2]]}, {...}] type='2 * {x: var * var * float64}'>. data_frame = <cppyy.gbl.ROOT.RDF.RInterface<ROOT::Detail::RDF::RLoopManager,void> object at 0x7f857a496dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4241,availability,error,error,4241,"6dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkwar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:5520,availability,Operat,Operating,5520,"discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7fc2238521d0>. >>> . ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ```python. >>> ROOT.__version__. '6.26/06'. >>> ak.__version__. '2.0.0rc1'. ```. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:5595,availability,down,download,5595,"discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7fc2238521d0>. >>> . ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ```python. >>> ROOT.__version__. '6.26/06'. >>> ak.__version__. '2.0.0rc1'. ```. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:646,deployability,FAIL,FAILURES,646,"RDataFrame Snapshot throws a SystemError?; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exception occurs with `pytest` running the test code:. ```python. ============================================================================ FAILURES =============================================================================. _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________. RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):. filename = os.path.join(tmp_path, ""test-listarray.root""). . ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). . data_frame = ak.to_rdataframe({""x"": ak_array_in}). . assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""). . ak_array_out = ak.from_rdataframe(. data_frame,. columns=(""x"",),. ). assert ak_array_in.to_list() == ak_array_out[""x""].to_list(). . #with pytest.raises(SystemError):. > data_frame.Snapshot(""ListArray"", filename, (""x"",)). E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:3767,deployability,Build,Build,3767,"r> > filename, basic_string_view<char,char_traits<char> > columnNameRegexp = """", const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()) returned a result with an exception set. ak_array_in = <Array [[[1.1], [2.2]], [[3.3], ...]] type='2 * var * var * float64'>. ak_array_out = <Array [{x: [[1.1], [2.2]]}, {...}] type='2 * {x: var * var * float64}'>. data_frame = <cppyy.gbl.ROOT.RDF.RInterface<ROOT::Detail::RDF::RLoopManager,void> object at 0x7f857a496dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Py",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:3851,deployability,Build,Build,3851,"st ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()) returned a result with an exception set. ak_array_in = <Array [[[1.1], [2.2]], [[3.3], ...]] type='2 * var * var * float64'>. ak_array_out = <Array [{x: [[1.1], [2.2]]}, {...}] type='2 * {x: var * var * float64}'>. data_frame = <cppyy.gbl.ROOT.RDF.RInterface<ROOT::Detail::RDF::RLoopManager,void> object at 0x7f857a496dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4234,deployability,Build,Build,4234,"f857a496dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4368,deployability,Build,Build,4368,"_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4652,deployability,build,build,4652,"in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7fc2238521d0>. >>> . ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ```python. >>> ROOT._",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:5213,deployability,Build,Build,5213,"discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7fc2238521d0>. >>> . ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ```python. >>> ROOT.__version__. '6.26/06'. >>> ak.__version__. '2.0.0rc1'. ```. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:5508,deployability,version,version,5508,"discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7fc2238521d0>. >>> . ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ```python. >>> ROOT.__version__. '6.26/06'. >>> ak.__version__. '2.0.0rc1'. ```. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:5577,deployability,instal,install,5577,"discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7fc2238521d0>. >>> . ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ```python. >>> ROOT.__version__. '6.26/06'. >>> ak.__version__. '2.0.0rc1'. ```. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4393,integrability,messag,message,4393,". tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RIn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:5508,integrability,version,version,5508,"discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7fc2238521d0>. >>> . ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ```python. >>> ROOT.__version__. '6.26/06'. >>> ak.__version__. '2.0.0rc1'. ```. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4393,interoperability,messag,message,4393,". tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RIn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4816,modifiability,pac,packaged,4816,"discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7fc2238521d0>. >>> . ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ```python. >>> ROOT.__version__. '6.26/06'. >>> ak.__version__. '2.0.0rc1'. ```. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:5508,modifiability,version,version,5508,"discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7fc2238521d0>. >>> . ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ```python. >>> ROOT.__version__. '6.26/06'. >>> ak.__version__. '2.0.0rc1'. ```. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:646,performance,FAILUR,FAILURES,646,"RDataFrame Snapshot throws a SystemError?; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exception occurs with `pytest` running the test code:. ```python. ============================================================================ FAILURES =============================================================================. _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________. RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):. filename = os.path.join(tmp_path, ""test-listarray.root""). . ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). . data_frame = ak.to_rdataframe({""x"": ak_array_in}). . assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""). . ak_array_out = ak.from_rdataframe(. data_frame,. columns=(""x"",),. ). assert ak_array_in.to_list() == ak_array_out[""x""].to_list(). . #with pytest.raises(SystemError):. > data_frame.Snapshot(""ListArray"", filename, (""x"",)). E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:3742,performance,Error,Error,3742,"view<char,char_traits<char> > filename, basic_string_view<char,char_traits<char> > columnNameRegexp = """", const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()) returned a result with an exception set. ak_array_in = <Array [[[1.1], [2.2]], [[3.3], ...]] type='2 * var * var * float64'>. ak_array_out = <Array [{x: [[1.1], [2.2]]}, {...}] type='2 * {x: var * var * float64}'>. data_frame = <cppyy.gbl.ROOT.RDF.RInterface<ROOT::Detail::RDF::RLoopManager,void> object at 0x7f857a496dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4241,performance,error,error,4241,"6dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkwar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:646,reliability,FAIL,FAILURES,646,"RDataFrame Snapshot throws a SystemError?; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exception occurs with `pytest` running the test code:. ```python. ============================================================================ FAILURES =============================================================================. _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________. RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):. filename = os.path.join(tmp_path, ""test-listarray.root""). . ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). . data_frame = ak.to_rdataframe({""x"": ak_array_in}). . assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""). . ak_array_out = ak.from_rdataframe(. data_frame,. columns=(""x"",),. ). assert ak_array_in.to_list() == ak_array_out[""x""].to_list(). . #with pytest.raises(SystemError):. > data_frame.Snapshot(""ListArray"", filename, (""x"",)). E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:503,safety,except,exception,503,"RDataFrame Snapshot throws a SystemError?; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exception occurs with `pytest` running the test code:. ```python. ============================================================================ FAILURES =============================================================================. _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________. RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):. filename = os.path.join(tmp_path, ""test-listarray.root""). . ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). . data_frame = ak.to_rdataframe({""x"": ak_array_in}). . assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""). . ak_array_out = ak.from_rdataframe(. data_frame,. columns=(""x"",),. ). assert ak_array_in.to_list() == ak_array_out[""x""].to_list(). . #with pytest.raises(SystemError):. > data_frame.Snapshot(""ListArray"", filename, (""x"",)). E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:546,safety,test,test,546,"RDataFrame Snapshot throws a SystemError?; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exception occurs with `pytest` running the test code:. ```python. ============================================================================ FAILURES =============================================================================. _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________. RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):. filename = os.path.join(tmp_path, ""test-listarray.root""). . ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). . data_frame = ak.to_rdataframe({""x"": ak_array_in}). . assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""). . ak_array_out = ak.from_rdataframe(. data_frame,. columns=(""x"",),. ). assert ak_array_in.to_list() == ak_array_out[""x""].to_list(). . #with pytest.raises(SystemError):. > data_frame.Snapshot(""ListArray"", filename, (""x"",)). E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:1038,safety,except,exception,1038,"- [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exception occurs with `pytest` running the test code:. ```python. ============================================================================ FAILURES =============================================================================. _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________. RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):. filename = os.path.join(tmp_path, ""test-listarray.root""). . ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). . data_frame = ak.to_rdataframe({""x"": ak_array_in}). . assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""). . ak_array_out = ak.from_rdataframe(. data_frame,. columns=(""x"",),. ). assert ak_array_in.to_list() == ak_array_out[""x""].to_list(). . #with pytest.raises(SystemError):. > data_frame.Snapshot(""ListArray"", filename, (""x"",)). E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, initial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:1086,safety,except,exception,1086,"h in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exception occurs with `pytest` running the test code:. ```python. ============================================================================ FAILURES =============================================================================. _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________. RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):. filename = os.path.join(tmp_path, ""test-listarray.root""). . ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). . data_frame = ak.to_rdataframe({""x"": ak_array_in}). . assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""). . ak_array_out = ak.from_rdataframe(. data_frame,. columns=(""x"",),. ). assert ak_array_in.to_list() == ak_array_out[""x""].to_list(). . #with pytest.raises(SystemError):. > data_frame.Snapshot(""ListArray"", filename, (""x"",)). E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, initializer_list<string> columnList, const ROOT::RDF::R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:1323,safety,test,test-listarray,1323,"isting report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exception occurs with `pytest` running the test code:. ```python. ============================================================================ FAILURES =============================================================================. _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________. RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):. filename = os.path.join(tmp_path, ""test-listarray.root""). . ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). . data_frame = ak.to_rdataframe({""x"": ak_array_in}). . assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""). . ak_array_out = ak.from_rdataframe(. data_frame,. columns=(""x"",),. ). assert ak_array_in.to_list() == ak_array_out[""x""].to_list(). . #with pytest.raises(SystemError):. > data_frame.Snapshot(""ListArray"", filename, (""x"",)). E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, initializer_list<string> columnList, const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()). E ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:2953,safety,except,exception,2953,"traits<char> > treename, basic_string_view<char,char_traits<char> > filename, initializer_list<string> columnList, const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()). E ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, const vector<string>& columnList, const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()). E ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, basic_string_view<char,char_traits<char> > columnNameRegexp = """", const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()) returned a result with an exception set. ak_array_in = <Array [[[1.1], [2.2]], [[3.3], ...]] type='2 * var * var * float64'>. ak_array_out = <Array [{x: [[1.1], [2.2]]}, {...}] type='2 * {x: var * var * float64}'>. data_frame = <cppyy.gbl.ROOT.RDF.RInterface<ROOT::Detail::RDF::RLoopManager,void> object at 0x7f857a496dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:3377,safety,test,test-listarray,3377,"ar_traits<char> > filename, const vector<string>& columnList, const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()). E ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, basic_string_view<char,char_traits<char> > columnNameRegexp = """", const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()) returned a result with an exception set. ak_array_in = <Array [[[1.1], [2.2]], [[3.3], ...]] type='2 * var * var * float64'>. ak_array_out = <Array [{x: [[1.1], [2.2]]}, {...}] type='2 * {x: var * var * float64}'>. data_frame = <cppyy.gbl.ROOT.RDF.RInterface<ROOT::Detail::RDF::RLoopManager,void> object at 0x7f857a496dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: Runtime",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:3538,safety,test,tests,3538,"ltPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, basic_string_view<char,char_traits<char> > columnNameRegexp = """", const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()) returned a result with an exception set. ak_array_in = <Array [[[1.1], [2.2]], [[3.3], ...]] type='2 * var * var * float64'>. ak_array_out = <Array [{x: [[1.1], [2.2]]}, {...}] type='2 * {x: var * var * float64}'>. data_frame = <cppyy.gbl.ROOT.RDF.RInterface<ROOT::Detail::RDF::RLoopManager,void> object at 0x7f857a496dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally someth",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:3742,safety,Error,Error,3742,"view<char,char_traits<char> > filename, basic_string_view<char,char_traits<char> > columnNameRegexp = """", const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()) returned a result with an exception set. ak_array_in = <Array [[[1.1], [2.2]], [[3.3], ...]] type='2 * var * var * float64'>. ak_array_out = <Array [{x: [[1.1], [2.2]]}, {...}] type='2 * {x: var * var * float64}'>. data_frame = <cppyy.gbl.ROOT.RDF.RInterface<ROOT::Detail::RDF::RLoopManager,void> object at 0x7f857a496dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4241,safety,error,error,4241,"6dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkwar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4254,safety,avoid,avoided,4254,"e = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4606,safety,input,input,4606,"ing the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7fc2238521d0>. >>> . ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:546,testability,test,test,546,"RDataFrame Snapshot throws a SystemError?; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exception occurs with `pytest` running the test code:. ```python. ============================================================================ FAILURES =============================================================================. _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________. RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):. filename = os.path.join(tmp_path, ""test-listarray.root""). . ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). . data_frame = ak.to_rdataframe({""x"": ak_array_in}). . assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""). . ak_array_out = ak.from_rdataframe(. data_frame,. columns=(""x"",),. ). assert ak_array_in.to_list() == ak_array_out[""x""].to_list(). . #with pytest.raises(SystemError):. > data_frame.Snapshot(""ListArray"", filename, (""x"",)). E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:1323,testability,test,test-listarray,1323,"isting report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exception occurs with `pytest` running the test code:. ```python. ============================================================================ FAILURES =============================================================================. _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________. RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):. filename = os.path.join(tmp_path, ""test-listarray.root""). . ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). . data_frame = ak.to_rdataframe({""x"": ak_array_in}). . assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""). . ak_array_out = ak.from_rdataframe(. data_frame,. columns=(""x"",),. ). assert ak_array_in.to_list() == ak_array_out[""x""].to_list(). . #with pytest.raises(SystemError):. > data_frame.Snapshot(""ListArray"", filename, (""x"",)). E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, initializer_list<string> columnList, const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()). E ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:1466,testability,assert,assert,1466,"t the wrong behavior is. -->. The exception occurs with `pytest` running the test code:. ```python. ============================================================================ FAILURES =============================================================================. _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________. RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):. filename = os.path.join(tmp_path, ""test-listarray.root""). . ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). . data_frame = ak.to_rdataframe({""x"": ak_array_in}). . assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""). . ak_array_out = ak.from_rdataframe(. data_frame,. columns=(""x"",),. ). assert ak_array_in.to_list() == ak_array_out[""x""].to_list(). . #with pytest.raises(SystemError):. > data_frame.Snapshot(""ListArray"", filename, (""x"",)). E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, initializer_list<string> columnList, const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()). E ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, const vector<string>& columnList, const ROOT::RDF::RSnaps",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:1609,testability,assert,assert,1609,"================================= FAILURES =============================================================================. _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________. RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):. filename = os.path.join(tmp_path, ""test-listarray.root""). . ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). . data_frame = ak.to_rdataframe({""x"": ak_array_in}). . assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""). . ak_array_out = ak.from_rdataframe(. data_frame,. columns=(""x"",),. ). assert ak_array_in.to_list() == ak_array_out[""x""].to_list(). . #with pytest.raises(SystemError):. > data_frame.Snapshot(""ListArray"", filename, (""x"",)). E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, initializer_list<string> columnList, const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()). E ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, const vector<string>& columnList, const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()). E ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:3377,testability,test,test-listarray,3377,"ar_traits<char> > filename, const vector<string>& columnList, const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()). E ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, basic_string_view<char,char_traits<char> > columnNameRegexp = """", const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()) returned a result with an exception set. ak_array_in = <Array [[[1.1], [2.2]], [[3.3], ...]] type='2 * var * var * float64'>. ak_array_out = <Array [{x: [[1.1], [2.2]]}, {...}] type='2 * {x: var * var * float64}'>. data_frame = <cppyy.gbl.ROOT.RDF.RInterface<ROOT::Detail::RDF::RLoopManager,void> object at 0x7f857a496dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: Runtime",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:3538,testability,test,tests,3538,"ltPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, basic_string_view<char,char_traits<char> > columnNameRegexp = """", const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()) returned a result with an exception set. ak_array_in = <Array [[[1.1], [2.2]], [[3.3], ...]] type='2 * var * var * float64'>. ak_array_out = <Array [{x: [[1.1], [2.2]]}, {...}] type='2 * {x: var * var * float64}'>. data_frame = <cppyy.gbl.ROOT.RDF.RInterface<ROOT::Detail::RDF::RLoopManager,void> object at 0x7f857a496dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally someth",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:5730,testability,context,context,5730,"discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7fc2238521d0>. >>> . ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ```python. >>> ROOT.__version__. '6.26/06'. >>> ak.__version__. '2.0.0rc1'. ```. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:5759,testability,context,context,5759,"discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7fc2238521d0>. >>> . ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ```python. >>> ROOT.__version__. '6.26/06'. >>> ak.__version__. '2.0.0rc1'. ```. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:433,usability,clear,clear,433,"RDataFrame Snapshot throws a SystemError?; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exception occurs with `pytest` running the test code:. ```python. ============================================================================ FAILURES =============================================================================. _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________. RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):. filename = os.path.join(tmp_path, ""test-listarray.root""). . ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). . data_frame = ak.to_rdataframe({""x"": ak_array_in}). . assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""). . ak_array_out = ak.from_rdataframe(. data_frame,. columns=(""x"",),. ). assert ak_array_in.to_list() == ak_array_out[""x""].to_list(). . #with pytest.raises(SystemError):. > data_frame.Snapshot(""ListArray"", filename, (""x"",)). E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:481,usability,behavi,behavior,481,"RDataFrame Snapshot throws a SystemError?; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exception occurs with `pytest` running the test code:. ```python. ============================================================================ FAILURES =============================================================================. _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________. RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):. filename = os.path.join(tmp_path, ""test-listarray.root""). . ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). . data_frame = ak.to_rdataframe({""x"": ak_array_in}). . assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""). . ak_array_out = ak.from_rdataframe(. data_frame,. columns=(""x"",),. ). assert ak_array_in.to_list() == ak_array_out[""x""].to_list(). . #with pytest.raises(SystemError):. > data_frame.Snapshot(""ListArray"", filename, (""x"",)). E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:3742,usability,Error,Error,3742,"view<char,char_traits<char> > filename, basic_string_view<char,char_traits<char> > columnNameRegexp = """", const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()) returned a result with an exception set. ak_array_in = <Array [[[1.1], [2.2]], [[3.3], ...]] type='2 * var * var * float64'>. ak_array_out = <Array [{x: [[1.1], [2.2]]}, {...}] type='2 * {x: var * var * float64}'>. data_frame = <cppyy.gbl.ROOT.RDF.RInterface<ROOT::Detail::RDF::RLoopManager,void> object at 0x7f857a496dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4123,usability,behavi,behavior,4123," * float64}'>. data_frame = <cppyy.gbl.ROOT.RDF.RInterface<ROOT::Detail::RDF::RLoopManager,void> object at 0x7f857a496dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_arra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4141,usability,clear,clear,4141,"ta_frame = <cppyy.gbl.ROOT.RDF.RInterface<ROOT::Detail::RDF::RLoopManager,void> object at 0x7f857a496dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4241,usability,error,error,4241,"6dc0>. filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkwar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4408,usability,user,user,4408,"PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4461,usability,behavi,behavior,4461,"35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError. ```. while running the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7fc22385",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4606,usability,input,input,4606,"ing the same code line by line in `Python` or in `lldb`:. ```python. >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)). Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7fc2238521d0>. >>> . ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11602:4905,usability,help,help,4905,"discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line. Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Unfortunately, it is not reproducible if the code is run line by line in `Python`:. ```python. % python . Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import awkward as ak. >>> import ROOT. >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]). >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}). >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)). TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_T4lNHLu6jVU: base class awkward::ArrayView has no streamer or dictionary it will not be saved. <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7fc2238521d0>. >>> . ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ```python. >>> ROOT.__version__. '6.26/06'. >>> ak.__version__. '2.0.0rc1'. ```. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11602
https://github.com/root-project/root/issues/11603:664,availability,down,downloaded,664,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:1520,availability,down,downloaded,1520,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:1626,availability,down,downloading,1626,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:8,deployability,automat,automatic,8,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:295,deployability,instal,install,295,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:363,deployability,build,build,363,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:1416,deployability,depend,depend,1416,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:1798,deployability,instal,install,1798,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:1863,deployability,releas,releases,1863,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:591,energy efficiency,current,currently,591,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:1416,integrability,depend,depend,1416,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:1416,modifiability,depend,depend,1416,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:311,performance,network,network-isolated,311,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:383,performance,network,network-connected,383,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:649,performance,content,content,649,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:1613,reliability,alert,alerted,1613,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:319,safety,isol,isolated,319,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:1416,safety,depend,depend,1416,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:1613,safety,aler,alerted,1613,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:311,security,network,network-isolated,311,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:383,security,network,network-connected,383,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:767,security,polic,policy,767,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:779,security,govern,governs,779,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:947,security,GDPR,GDPR,947,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:972,security,gdpr,gdpr,972,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:988,security,gdpr,gdpr,988,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:1504,security,checksum,checksum,1504,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:8,testability,automat,automatic,8,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:319,testability,isol,isolated,319,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:1416,testability,depend,depend,1416,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:422,usability,prefer,prefer,422,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:867,usability,user,user,867,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:914,usability,user,user,914,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:1085,usability,minim,minimization,1085,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:1351,usability,user,user,1351,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/issues/11603:1601,usability,user,user,1601,"Disable automatic 'call home' in cmake when not needed; ### Is your feature request related to a problem? Please describe. 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private. 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy. 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like. The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered. Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11603
https://github.com/root-project/root/pull/11604:11,integrability,interfac,interface,11,"[RF] Added interface changes for TestStatistics classes; See the original PR for more information and the detailed code review:. https://github.com/root-project/root/pull/11577. Since the first two commits were already reviewed in the linked PR, this PR only needs a review for the last commit before it can be merged. More info on the changes in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11604
https://github.com/root-project/root/pull/11604:11,interoperability,interfac,interface,11,"[RF] Added interface changes for TestStatistics classes; See the original PR for more information and the detailed code review:. https://github.com/root-project/root/pull/11577. Since the first two commits were already reviewed in the linked PR, this PR only needs a review for the last commit before it can be merged. More info on the changes in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11604
https://github.com/root-project/root/pull/11604:11,modifiability,interfac,interface,11,"[RF] Added interface changes for TestStatistics classes; See the original PR for more information and the detailed code review:. https://github.com/root-project/root/pull/11577. Since the first two commits were already reviewed in the linked PR, this PR only needs a review for the last commit before it can be merged. More info on the changes in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11604
https://github.com/root-project/root/pull/11604:33,safety,Test,TestStatistics,33,"[RF] Added interface changes for TestStatistics classes; See the original PR for more information and the detailed code review:. https://github.com/root-project/root/pull/11577. Since the first two commits were already reviewed in the linked PR, this PR only needs a review for the last commit before it can be merged. More info on the changes in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11604
https://github.com/root-project/root/pull/11604:120,safety,review,review,120,"[RF] Added interface changes for TestStatistics classes; See the original PR for more information and the detailed code review:. https://github.com/root-project/root/pull/11577. Since the first two commits were already reviewed in the linked PR, this PR only needs a review for the last commit before it can be merged. More info on the changes in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11604
https://github.com/root-project/root/pull/11604:219,safety,review,reviewed,219,"[RF] Added interface changes for TestStatistics classes; See the original PR for more information and the detailed code review:. https://github.com/root-project/root/pull/11577. Since the first two commits were already reviewed in the linked PR, this PR only needs a review for the last commit before it can be merged. More info on the changes in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11604
https://github.com/root-project/root/pull/11604:267,safety,review,review,267,"[RF] Added interface changes for TestStatistics classes; See the original PR for more information and the detailed code review:. https://github.com/root-project/root/pull/11577. Since the first two commits were already reviewed in the linked PR, this PR only needs a review for the last commit before it can be merged. More info on the changes in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11604
https://github.com/root-project/root/pull/11604:33,testability,Test,TestStatistics,33,"[RF] Added interface changes for TestStatistics classes; See the original PR for more information and the detailed code review:. https://github.com/root-project/root/pull/11577. Since the first two commits were already reviewed in the linked PR, this PR only needs a review for the last commit before it can be merged. More info on the changes in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11604
https://github.com/root-project/root/pull/11604:120,testability,review,review,120,"[RF] Added interface changes for TestStatistics classes; See the original PR for more information and the detailed code review:. https://github.com/root-project/root/pull/11577. Since the first two commits were already reviewed in the linked PR, this PR only needs a review for the last commit before it can be merged. More info on the changes in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11604
https://github.com/root-project/root/pull/11604:219,testability,review,reviewed,219,"[RF] Added interface changes for TestStatistics classes; See the original PR for more information and the detailed code review:. https://github.com/root-project/root/pull/11577. Since the first two commits were already reviewed in the linked PR, this PR only needs a review for the last commit before it can be merged. More info on the changes in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11604
https://github.com/root-project/root/pull/11604:267,testability,review,review,267,"[RF] Added interface changes for TestStatistics classes; See the original PR for more information and the detailed code review:. https://github.com/root-project/root/pull/11577. Since the first two commits were already reviewed in the linked PR, this PR only needs a review for the last commit before it can be merged. More info on the changes in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11604
https://github.com/root-project/root/issues/11605:88,availability,servic,services,88,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:32,deployability,fail,fail,32,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:88,deployability,servic,services,88,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:140,deployability,build,build,140,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:198,deployability,build,build,198,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:332,deployability,fail,fails,332,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:443,deployability,FAIL,FAILED,443,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:511,deployability,Fail,Failed,511,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:575,deployability,Fail,Failed,575,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:647,deployability,Fail,Failed,647,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:705,deployability,Fail,Failed,705,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:771,deployability,Fail,Failed,771,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:840,deployability,Fail,Failed,840,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:910,deployability,Fail,Failed,910,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:982,deployability,Fail,Failed,982,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:1052,deployability,Fail,Failed,1052,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:1122,deployability,Fail,Failed,1122,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:1178,deployability,Fail,Failed,1178,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:1233,deployability,Fail,Failed,1233,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:1306,deployability,Fail,Failed,1306,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:1371,deployability,Fail,Failed,1371,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:355,energy efficiency,load,load,355,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:88,integrability,servic,services,88,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:88,modifiability,servic,services,88,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:217,performance,perform,performance-,217,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:355,performance,load,load,355,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:32,reliability,fail,fail,32,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:332,reliability,fail,fails,332,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:443,reliability,FAIL,FAILED,443,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:511,reliability,Fail,Failed,511,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:575,reliability,Fail,Failed,575,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:647,reliability,Fail,Failed,647,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:705,reliability,Fail,Failed,705,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:771,reliability,Fail,Failed,771,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:840,reliability,Fail,Failed,840,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:910,reliability,Fail,Failed,910,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:982,reliability,Fail,Failed,982,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:1052,reliability,Fail,Failed,1052,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:1122,reliability,Fail,Failed,1122,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:1178,reliability,Fail,Failed,1178,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:1233,reliability,Fail,Failed,1233,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:1306,reliability,Fail,Failed,1306,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:1371,reliability,Fail,Failed,1371,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:13,safety,test,test,13,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:437,safety,test,tests,437,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:13,testability,test,test,13,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:437,testability,test,tests,437,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:1348,testability,regress,regression-regression,1348,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/issues/11605:217,usability,perform,performance-,217,[RF] Several test and tutorials fail when roofit is disabled; As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of. ```. @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF. ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```. 15:15:19 The following tests FAILED:. 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed). 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed). 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed). 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed). 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed). 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed). 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed). 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed). 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed). 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed). 15:15:19 	1193 - roottest-python-pickle-write (Failed). 15:15:19 	1194 - roottest-python-pickle-read (Failed). 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed). 15:15:19 	1197 - roottest-python-regression-regression (Failed). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11605
https://github.com/root-project/root/pull/11606:922,availability,down,downstream,922,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11606:199,deployability,fail,failed,199,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11606:335,deployability,fail,failed,335,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11606:585,deployability,fail,failed,585,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11606:37,integrability,Batch,BatchMode,37,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11606:56,integrability,Batch,BatchMode,56,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11606:219,modifiability,scenario,scenarios,219,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11606:37,performance,Batch,BatchMode,37,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11606:56,performance,Batch,BatchMode,56,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11606:199,reliability,fail,failed,199,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11606:335,reliability,fail,failed,335,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11606:585,reliability,fail,failed,585,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11606:716,safety,safe,safer,716,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11606:974,safety,avoid,avoid,974,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11606:82,security,hack,hacky,82,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11606:233,security,hack,hack,233,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11606:422,security,hack,hack,422,"[RF] Fix dealing with constraints in BatchMode; The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then). * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11606
https://github.com/root-project/root/pull/11608:25,availability,Operat,Operator,25,[TMVA][SOFIE]Expand ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Expand ONNX Operator in SOFIE. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11608
https://github.com/root-project/root/pull/11608:123,availability,Operat,Operator,123,[TMVA][SOFIE]Expand ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Expand ONNX Operator in SOFIE. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11608
https://github.com/root-project/root/pull/11608:193,deployability,updat,updated,193,[TMVA][SOFIE]Expand ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Expand ONNX Operator in SOFIE. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11608
https://github.com/root-project/root/pull/11608:74,safety,test,tests,74,[TMVA][SOFIE]Expand ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Expand ONNX Operator in SOFIE. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11608
https://github.com/root-project/root/pull/11608:163,safety,test,tested,163,[TMVA][SOFIE]Expand ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Expand ONNX Operator in SOFIE. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11608
https://github.com/root-project/root/pull/11608:193,safety,updat,updated,193,[TMVA][SOFIE]Expand ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Expand ONNX Operator in SOFIE. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11608
https://github.com/root-project/root/pull/11608:193,security,updat,updated,193,[TMVA][SOFIE]Expand ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Expand ONNX Operator in SOFIE. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11608
https://github.com/root-project/root/pull/11608:69,testability,unit,unit,69,[TMVA][SOFIE]Expand ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Expand ONNX Operator in SOFIE. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11608
https://github.com/root-project/root/pull/11608:74,testability,test,tests,74,[TMVA][SOFIE]Expand ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Expand ONNX Operator in SOFIE. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11608
https://github.com/root-project/root/pull/11608:163,testability,test,tested,163,[TMVA][SOFIE]Expand ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Expand ONNX Operator in SOFIE. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11608
https://github.com/root-project/root/pull/11609:263,reliability,doe,doesn,263,"[RF] Veto `.py` tutorial tests of RooStats and HistFactory if ROOT is built without `roofit`; Veto also tutorial tests of RooStats and HistFactory if ROOT was built without RooFit. Also removes the `fit/RooFitdemo.C` tutorial from the veto list, as this tutorial doesn't exist anymore. Partially closes #11605.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11609
https://github.com/root-project/root/pull/11609:25,safety,test,tests,25,"[RF] Veto `.py` tutorial tests of RooStats and HistFactory if ROOT is built without `roofit`; Veto also tutorial tests of RooStats and HistFactory if ROOT was built without RooFit. Also removes the `fit/RooFitdemo.C` tutorial from the veto list, as this tutorial doesn't exist anymore. Partially closes #11605.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11609
https://github.com/root-project/root/pull/11609:113,safety,test,tests,113,"[RF] Veto `.py` tutorial tests of RooStats and HistFactory if ROOT is built without `roofit`; Veto also tutorial tests of RooStats and HistFactory if ROOT was built without RooFit. Also removes the `fit/RooFitdemo.C` tutorial from the veto list, as this tutorial doesn't exist anymore. Partially closes #11605.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11609
https://github.com/root-project/root/pull/11609:25,testability,test,tests,25,"[RF] Veto `.py` tutorial tests of RooStats and HistFactory if ROOT is built without `roofit`; Veto also tutorial tests of RooStats and HistFactory if ROOT was built without RooFit. Also removes the `fit/RooFitdemo.C` tutorial from the veto list, as this tutorial doesn't exist anymore. Partially closes #11605.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11609
https://github.com/root-project/root/pull/11609:113,testability,test,tests,113,"[RF] Veto `.py` tutorial tests of RooStats and HistFactory if ROOT is built without `roofit`; Veto also tutorial tests of RooStats and HistFactory if ROOT was built without RooFit. Also removes the `fit/RooFitdemo.C` tutorial from the veto list, as this tutorial doesn't exist anymore. Partially closes #11605.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11609
https://github.com/root-project/root/pull/11609:296,usability,close,closes,296,"[RF] Veto `.py` tutorial tests of RooStats and HistFactory if ROOT is built without `roofit`; Veto also tutorial tests of RooStats and HistFactory if ROOT was built without RooFit. Also removes the `fit/RooFitdemo.C` tutorial from the veto list, as this tutorial doesn't exist anymore. Partially closes #11605.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11609
https://github.com/root-project/root/pull/11610:86,reliability,pra,practical,86,"[RF][PyROOT] Move RooFit pythonization tests from roottest to main repo; This is more practical, because most RooFit tests are already here and and different from when these tests were in `roottest`, it's also to exclude them if ROOT is not built with RooFit enabled. Technically independent of https://github.com/root-project/roottest/pull/909, but they go together. Closes https://github.com/root-project/root/issues/11605.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11610
https://github.com/root-project/root/pull/11610:39,safety,test,tests,39,"[RF][PyROOT] Move RooFit pythonization tests from roottest to main repo; This is more practical, because most RooFit tests are already here and and different from when these tests were in `roottest`, it's also to exclude them if ROOT is not built with RooFit enabled. Technically independent of https://github.com/root-project/roottest/pull/909, but they go together. Closes https://github.com/root-project/root/issues/11605.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11610
https://github.com/root-project/root/pull/11610:117,safety,test,tests,117,"[RF][PyROOT] Move RooFit pythonization tests from roottest to main repo; This is more practical, because most RooFit tests are already here and and different from when these tests were in `roottest`, it's also to exclude them if ROOT is not built with RooFit enabled. Technically independent of https://github.com/root-project/roottest/pull/909, but they go together. Closes https://github.com/root-project/root/issues/11605.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11610
https://github.com/root-project/root/pull/11610:174,safety,test,tests,174,"[RF][PyROOT] Move RooFit pythonization tests from roottest to main repo; This is more practical, because most RooFit tests are already here and and different from when these tests were in `roottest`, it's also to exclude them if ROOT is not built with RooFit enabled. Technically independent of https://github.com/root-project/roottest/pull/909, but they go together. Closes https://github.com/root-project/root/issues/11605.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11610
https://github.com/root-project/root/pull/11610:39,testability,test,tests,39,"[RF][PyROOT] Move RooFit pythonization tests from roottest to main repo; This is more practical, because most RooFit tests are already here and and different from when these tests were in `roottest`, it's also to exclude them if ROOT is not built with RooFit enabled. Technically independent of https://github.com/root-project/roottest/pull/909, but they go together. Closes https://github.com/root-project/root/issues/11605.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11610
https://github.com/root-project/root/pull/11610:117,testability,test,tests,117,"[RF][PyROOT] Move RooFit pythonization tests from roottest to main repo; This is more practical, because most RooFit tests are already here and and different from when these tests were in `roottest`, it's also to exclude them if ROOT is not built with RooFit enabled. Technically independent of https://github.com/root-project/roottest/pull/909, but they go together. Closes https://github.com/root-project/root/issues/11605.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11610
https://github.com/root-project/root/pull/11610:174,testability,test,tests,174,"[RF][PyROOT] Move RooFit pythonization tests from roottest to main repo; This is more practical, because most RooFit tests are already here and and different from when these tests were in `roottest`, it's also to exclude them if ROOT is not built with RooFit enabled. Technically independent of https://github.com/root-project/roottest/pull/909, but they go together. Closes https://github.com/root-project/root/issues/11605.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11610
https://github.com/root-project/root/pull/11610:368,usability,Close,Closes,368,"[RF][PyROOT] Move RooFit pythonization tests from roottest to main repo; This is more practical, because most RooFit tests are already here and and different from when these tests were in `roottest`, it's also to exclude them if ROOT is not built with RooFit enabled. Technically independent of https://github.com/root-project/roottest/pull/909, but they go together. Closes https://github.com/root-project/root/issues/11605.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11610
https://github.com/root-project/root/issues/11612:2212,availability,Incid,Incidentally,2212,"rpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path. It's also inconsistent with respect to the previous point because a compiler in `PATH` takes precedence over the directories determined at build time, while a compiler outside is asked last. Incidentally, this is exactly what seems to ""save"" CMS right now. I actually started working on cleaning this up, but stopped when I discovered the problem report from CMS. I think what we need to have first is a proper discussion how we want things to work, and then implement that in a clean way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:140,deployability,build,build-time,140,"Clean up and improve Cling's C++ header search; Clang's search for the standard C++ headers is complex, up to messy. It is a combination of build-time decisions in `interpreter/cling/lib/Interpreter/CMakeLists.txt` and runtime searches in `interpreter/cling/lib/Interpreter/CIFactory.cpp`. Below I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:709,deployability,build,build,709,"Clean up and improve Cling's C++ header search; Clang's search for the standard C++ headers is complex, up to messy. It is a combination of build-time decisions in `interpreter/cling/lib/Interpreter/CMakeLists.txt` and runtime searches in `interpreter/cling/lib/Interpreter/CIFactory.cpp`. Below I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:1232,deployability,build,build,1232," in `interpreter/cling/lib/Interpreter/CIFactory.cpp`. Below I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path. It's also inconsistent with respect to the previous point because a compiler in `PATH` takes precedence over the directories determined at build time, while a compiler outside is asked last. Incidentally, this is e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:1286,deployability,configurat,configuration,1286,"ow I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path. It's also inconsistent with respect to the previous point because a compiler in `PATH` takes precedence over the directories determined at build time, while a compiler outside is asked last. Incidentally, this is exactly what seems to ""save"" CMS right now. I actually star",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:1768,deployability,build,build,1768,"rpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path. It's also inconsistent with respect to the previous point because a compiler in `PATH` takes precedence over the directories determined at build time, while a compiler outside is asked last. Incidentally, this is exactly what seems to ""save"" CMS right now. I actually started working on cleaning this up, but stopped when I discovered the problem report from CMS. I think what we need to have first is a proper discussion how we want things to work, and then implement that in a clean way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:2160,deployability,build,build,2160,"rpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path. It's also inconsistent with respect to the previous point because a compiler in `PATH` takes precedence over the directories determined at build time, while a compiler outside is asked last. Incidentally, this is exactly what seems to ""save"" CMS right now. I actually started working on cleaning this up, but stopped when I discovered the problem report from CMS. I think what we need to have first is a proper discussion how we want things to work, and then implement that in a clean way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:1270,integrability,messag,messages,1270,"CIFactory.cpp`. Below I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path. It's also inconsistent with respect to the previous point because a compiler in `PATH` takes precedence over the directories determined at build time, while a compiler outside is asked last. Incidentally, this is exactly what seems to ""save"" CMS right n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:1286,integrability,configur,configuration,1286,"ow I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path. It's also inconsistent with respect to the previous point because a compiler in `PATH` takes precedence over the directories determined at build time, while a compiler outside is asked last. Incidentally, this is exactly what seems to ""save"" CMS right now. I actually star",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:2345,integrability,discover,discovered,2345,"rpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path. It's also inconsistent with respect to the previous point because a compiler in `PATH` takes precedence over the directories determined at build time, while a compiler outside is asked last. Incidentally, this is exactly what seems to ""save"" CMS right now. I actually started working on cleaning this up, but stopped when I discovered the problem report from CMS. I think what we need to have first is a proper discussion how we want things to work, and then implement that in a clean way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:71,interoperability,standard,standard,71,"Clean up and improve Cling's C++ header search; Clang's search for the standard C++ headers is complex, up to messy. It is a combination of build-time decisions in `interpreter/cling/lib/Interpreter/CMakeLists.txt` and runtime searches in `interpreter/cling/lib/Interpreter/CIFactory.cpp`. Below I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:1270,interoperability,messag,messages,1270,"CIFactory.cpp`. Below I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path. It's also inconsistent with respect to the previous point because a compiler in `PATH` takes precedence over the directories determined at build time, while a compiler outside is asked last. Incidentally, this is exactly what seems to ""save"" CMS right n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:2345,interoperability,discover,discovered,2345,"rpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path. It's also inconsistent with respect to the previous point because a compiler in `PATH` takes precedence over the directories determined at build time, while a compiler outside is asked last. Incidentally, this is exactly what seems to ""save"" CMS right now. I actually started working on cleaning this up, but stopped when I discovered the problem report from CMS. I think what we need to have first is a proper discussion how we want things to work, and then implement that in a clean way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:670,modifiability,variab,variables,670,"Clean up and improve Cling's C++ header search; Clang's search for the standard C++ headers is complex, up to messy. It is a combination of build-time decisions in `interpreter/cling/lib/Interpreter/CMakeLists.txt` and runtime searches in `interpreter/cling/lib/Interpreter/CIFactory.cpp`. Below I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:1015,modifiability,variab,variable,1015,"e Cling's C++ header search; Clang's search for the standard C++ headers is complex, up to messy. It is a combination of build-time decisions in `interpreter/cling/lib/Interpreter/CMakeLists.txt` and runtime searches in `interpreter/cling/lib/Interpreter/CIFactory.cpp`. Below I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:1286,modifiability,configur,configuration,1286,"ow I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path. It's also inconsistent with respect to the previous point because a compiler in `PATH` takes precedence over the directories determined at build time, while a compiler outside is asked last. Incidentally, this is exactly what seems to ""save"" CMS right now. I actually star",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:146,performance,time,time,146,"Clean up and improve Cling's C++ header search; Clang's search for the standard C++ headers is complex, up to messy. It is a combination of build-time decisions in `interpreter/cling/lib/Interpreter/CMakeLists.txt` and runtime searches in `interpreter/cling/lib/Interpreter/CIFactory.cpp`. Below I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:797,performance,CACH,CACHE,797,"Clean up and improve Cling's C++ header search; Clang's search for the standard C++ headers is complex, up to messy. It is a combination of build-time decisions in `interpreter/cling/lib/Interpreter/CMakeLists.txt` and runtime searches in `interpreter/cling/lib/Interpreter/CIFactory.cpp`. Below I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:2166,performance,time,time,2166,"rpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path. It's also inconsistent with respect to the previous point because a compiler in `PATH` takes precedence over the directories determined at build time, while a compiler outside is asked last. Incidentally, this is exactly what seems to ""save"" CMS right now. I actually started working on cleaning this up, but stopped when I discovered the problem report from CMS. I think what we need to have first is a proper discussion how we want things to work, and then implement that in a clean way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:2212,reliability,Incid,Incidentally,2212,"rpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path. It's also inconsistent with respect to the previous point because a compiler in `PATH` takes precedence over the directories determined at build time, while a compiler outside is asked last. Incidentally, this is exactly what seems to ""save"" CMS right now. I actually started working on cleaning this up, but stopped when I discovered the problem report from CMS. I think what we need to have first is a proper discussion how we want things to work, and then implement that in a clean way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:95,safety,compl,complex,95,"Clean up and improve Cling's C++ header search; Clang's search for the standard C++ headers is complex, up to messy. It is a combination of build-time decisions in `interpreter/cling/lib/Interpreter/CMakeLists.txt` and runtime searches in `interpreter/cling/lib/Interpreter/CIFactory.cpp`. Below I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:95,security,compl,complex,95,"Clean up and improve Cling's C++ header search; Clang's search for the standard C++ headers is complex, up to messy. It is a combination of build-time decisions in `interpreter/cling/lib/Interpreter/CMakeLists.txt` and runtime searches in `interpreter/cling/lib/Interpreter/CIFactory.cpp`. Below I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:1286,security,configur,configuration,1286,"ow I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path. It's also inconsistent with respect to the previous point because a compiler in `PATH` takes precedence over the directories determined at build time, while a compiler outside is asked last. Incidentally, this is exactly what seems to ""save"" CMS right now. I actually star",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:699,usability,user,user,699,"Clean up and improve Cling's C++ header search; Clang's search for the standard C++ headers is complex, up to messy. It is a combination of build-time decisions in `interpreter/cling/lib/Interpreter/CMakeLists.txt` and runtime searches in `interpreter/cling/lib/Interpreter/CIFactory.cpp`. Below I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:989,usability,user,users,989,"Clean up and improve Cling's C++ header search; Clang's search for the standard C++ headers is complex, up to messy. It is a combination of build-time decisions in `interpreter/cling/lib/Interpreter/CMakeLists.txt` and runtime searches in `interpreter/cling/lib/Interpreter/CIFactory.cpp`. Below I'm listing a number of things I noticed, and I think it would be worth it to clean up this business:. - [ ] Let's start with the obvious: `CLING_CXX_PATH` and `CLING_CXX_HEADERS` are declared as `option`s in `interpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:2330,usability,stop,stopped,2330,"rpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path. It's also inconsistent with respect to the previous point because a compiler in `PATH` takes precedence over the directories determined at build time, while a compiler outside is asked last. Incidentally, this is exactly what seems to ""save"" CMS right now. I actually started working on cleaning this up, but stopped when I discovered the problem report from CMS. I think what we need to have first is a proper discussion how we want things to work, and then implement that in a clean way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/issues/11612:2345,usability,discov,discovered,2345,"rpreter/cling/lib/Interpreter/CMakeLists.txt`. This gives them a type of `BOOL` instead of `STRING` (or maybe `FILEPATH` for `CLING_CXX_PATH`?). - [ ] If these variables are not set by the user, the build system starts to make some guesses. These choices are not `FORCE`d back into the `CACHE`, so it will be re-computed on every CMake invocation. - [ ] The code for determining `CLING_CXX_PATH` has a large section dealing with `ccache` and `distcc`, which can only be taken if users set the environment variable `CXX=""ccache g++""`. Since CMake 3.4, it is recommended to instead use `CMAKE_CXX_COMPILER_LAUNCHER=ccache`, or ROOT's `ccache=ON`, so this may be obsolete? - [ ] The header lookup is inconsistent between the build system and the `CIFactory`: The messages during configuration suggest that the order is. 1. Determined directories of C++ headers, or if not found. 2. Invocation of the compiler's full path, or as a fallback. 3. Invocation of the compiler's relative path. I think this matches the initial implementation, but it's not true anymore since commit afabc3b63885427251fd69b4aeda887bae35a289 switched to asking the compiler in the `PATH` first, to address a problem report from CMS. - [ ] It also appears that the default guess from the build system is to *either* set the compiler's full path *or* its relative path. This is potentially problematic because changing the `PATH` could make the interpreter pick up a different compiler, even though it could still ask the existing full path. It's also inconsistent with respect to the previous point because a compiler in `PATH` takes precedence over the directories determined at build time, while a compiler outside is asked last. Incidentally, this is exactly what seems to ""save"" CMS right now. I actually started working on cleaning this up, but stopped when I discovered the problem report from CMS. I think what we need to have first is a proper discussion how we want things to work, and then implement that in a clean way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11612
https://github.com/root-project/root/pull/11613:8,deployability,Updat,Update,8,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:57,deployability,Updat,Update,57,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:142,deployability,releas,releases,142,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:270,deployability,Updat,Update,270,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:369,deployability,build,build,369,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:483,deployability,build,build,483,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:528,deployability,updat,updated,528,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:8,safety,Updat,Update,8,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:57,safety,Updat,Update,57,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:270,safety,Updat,Update,270,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:336,safety,test,tested,336,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:528,safety,updat,updated,528,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:8,security,Updat,Update,8,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:57,security,Updat,Update,57,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:270,security,Updat,Update,270,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:528,security,updat,updated,528,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:336,testability,test,tested,336,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11613:494,usability,effectiv,effectively,494,[cmake] Update XRootD to v5.5.1; # This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1. - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1. * Follow up to PR #11328. * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11613
https://github.com/root-project/root/pull/11614:183,availability,servic,services,183,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:309,availability,down,down,309,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:115,deployability,build,building,115,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:183,deployability,servic,services,183,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:426,deployability,pipelin,pipelines,426,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:498,deployability,updat,updated,498,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:104,energy efficiency,Current,Currently,104,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:283,energy efficiency,current,current,283,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:183,integrability,servic,services,183,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:426,integrability,pipelin,pipelines,426,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:183,modifiability,servic,services,183,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:365,performance,tune,tune,365,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:50,safety,compl,complain,50,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:468,safety,test,tested,468,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:498,safety,updat,updated,498,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:50,security,compl,complain,50,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:291,security,hack,hack,291,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:498,security,updat,updated,498,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:468,testability,test,tested,468,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11614:128,usability,document,documentation,128,"create dummy images in advance for doxygen not to complain; # This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11614
https://github.com/root-project/root/pull/11615:8,deployability,Updat,Update,8,[cmake] Update XRootD to v5.5.1; # This Pull request:. This PR is a backport of PR #11613 for `v6.26`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11615
https://github.com/root-project/root/pull/11615:8,safety,Updat,Update,8,[cmake] Update XRootD to v5.5.1; # This Pull request:. This PR is a backport of PR #11613 for `v6.26`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11615
https://github.com/root-project/root/pull/11615:8,security,Updat,Update,8,[cmake] Update XRootD to v5.5.1; # This Pull request:. This PR is a backport of PR #11613 for `v6.26`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11615
https://github.com/root-project/root/issues/11616:101,interoperability,platform,platforms,101,"[ntuple] Check the usage of `Long_t` in RField (size of the type might differ between 32- and 64-bit platforms); - [X] Checked for duplicates. ### Describe the bug. As discussed in PR #11525 ([here](https://github.com/root-project/root/pull/11525#discussion_r997329752)), the type `Long_t` might have different sizes on 32- or 64- bit platforms. Both, `RFieldBase::Create()` (see [here](https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RField.cxx#L77)), and the aforementioned PR incorrectly assume this to be equivalent to `std::int64_t` - which, again, might or not be the case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11616
https://github.com/root-project/root/issues/11616:335,interoperability,platform,platforms,335,"[ntuple] Check the usage of `Long_t` in RField (size of the type might differ between 32- and 64-bit platforms); - [X] Checked for duplicates. ### Describe the bug. As discussed in PR #11525 ([here](https://github.com/root-project/root/pull/11525#discussion_r997329752)), the type `Long_t` might have different sizes on 32- or 64- bit platforms. Both, `RFieldBase::Create()` (see [here](https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RField.cxx#L77)), and the aforementioned PR incorrectly assume this to be equivalent to `std::int64_t` - which, again, might or not be the case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11616
https://github.com/root-project/root/pull/11617:130,deployability,updat,updated,130,[GSOC22] TMVA Pythonization Tests; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11617
https://github.com/root-project/root/pull/11617:28,safety,Test,Tests,28,[GSOC22] TMVA Pythonization Tests; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11617
https://github.com/root-project/root/pull/11617:100,safety,test,tested,100,[GSOC22] TMVA Pythonization Tests; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11617
https://github.com/root-project/root/pull/11617:130,safety,updat,updated,130,[GSOC22] TMVA Pythonization Tests; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11617
https://github.com/root-project/root/pull/11617:130,security,updat,updated,130,[GSOC22] TMVA Pythonization Tests; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11617
https://github.com/root-project/root/pull/11617:28,testability,Test,Tests,28,[GSOC22] TMVA Pythonization Tests; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11617
https://github.com/root-project/root/pull/11617:100,testability,test,tested,100,[GSOC22] TMVA Pythonization Tests; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11617
https://github.com/root-project/root/pull/11618:231,deployability,log,logic,231,"Improve `RBrowser` data handling, improve `RTreeViewer`; 1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance. 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder. 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances. 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`. 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside. 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11618
https://github.com/root-project/root/pull/11618:710,energy efficiency,Draw,Draw,710,"Improve `RBrowser` data handling, improve `RTreeViewer`; 1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance. 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder. 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances. 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`. 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside. 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11618
https://github.com/root-project/root/pull/11618:884,energy efficiency,load,loading,884,"Improve `RBrowser` data handling, improve `RTreeViewer`; 1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance. 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder. 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances. 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`. 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside. 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11618
https://github.com/root-project/root/pull/11618:949,energy efficiency,load,load,949,"Improve `RBrowser` data handling, improve `RTreeViewer`; 1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance. 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder. 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances. 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`. 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside. 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11618
https://github.com/root-project/root/pull/11618:978,integrability,compon,components,978,"Improve `RBrowser` data handling, improve `RTreeViewer`; 1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance. 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder. 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances. 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`. 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside. 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11618
https://github.com/root-project/root/pull/11618:978,interoperability,compon,components,978,"Improve `RBrowser` data handling, improve `RTreeViewer`; 1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance. 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder. 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances. 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`. 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside. 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11618
https://github.com/root-project/root/pull/11618:978,modifiability,compon,components,978,"Improve `RBrowser` data handling, improve `RTreeViewer`; 1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance. 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder. 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances. 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`. 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside. 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11618
https://github.com/root-project/root/pull/11618:509,performance,time,time,509,"Improve `RBrowser` data handling, improve `RTreeViewer`; 1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance. 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder. 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances. 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`. 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside. 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11618
https://github.com/root-project/root/pull/11618:884,performance,load,loading,884,"Improve `RBrowser` data handling, improve `RTreeViewer`; 1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance. 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder. 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances. 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`. 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside. 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11618
https://github.com/root-project/root/pull/11618:949,performance,load,load,949,"Improve `RBrowser` data handling, improve `RTreeViewer`; 1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance. 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder. 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances. 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`. 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside. 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11618
https://github.com/root-project/root/pull/11618:231,safety,log,logic,231,"Improve `RBrowser` data handling, improve `RTreeViewer`; 1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance. 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder. 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances. 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`. 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside. 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11618
https://github.com/root-project/root/pull/11618:231,security,log,logic,231,"Improve `RBrowser` data handling, improve `RTreeViewer`; 1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance. 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder. 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances. 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`. 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside. 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11618
https://github.com/root-project/root/pull/11618:496,security,modif,modification,496,"Improve `RBrowser` data handling, improve `RTreeViewer`; 1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance. 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder. 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances. 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`. 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside. 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11618
https://github.com/root-project/root/pull/11618:559,security,Sign,Significantly,559,"Improve `RBrowser` data handling, improve `RTreeViewer`; 1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance. 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder. 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances. 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`. 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside. 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11618
https://github.com/root-project/root/pull/11618:231,testability,log,logic,231,"Improve `RBrowser` data handling, improve `RTreeViewer`; 1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance. 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder. 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances. 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`. 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside. 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11618
https://github.com/root-project/root/pull/11618:895,usability,custom,custom,895,"Improve `RBrowser` data handling, improve `RTreeViewer`; 1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance. 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder. 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances. 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`. 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside. 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11618
https://github.com/root-project/root/pull/11619:965,availability,state,state,965,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:516,deployability,depend,depend,516,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:530,deployability,integr,integration,530,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:566,deployability,log,logic,566,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:5,energy efficiency,Optim,Optimize,5,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:929,energy efficiency,model,model,929,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:516,integrability,depend,depend,516,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:530,integrability,integr,integration,530,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:965,integrability,state,state,965,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:530,interoperability,integr,integration,530,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:516,modifiability,depend,depend,516,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:530,modifiability,integr,integration,530,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:542,modifiability,variab,variables,542,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:5,performance,Optimiz,Optimize,5,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:784,performance,perform,performance,784,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:858,performance,perform,performance,858,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:530,reliability,integr,integration,530,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:516,safety,depend,depend,516,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:566,safety,log,logic,566,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:530,security,integr,integration,530,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:566,security,log,logic,566,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:929,security,model,model,929,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:948,security,ident,identical,948,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:516,testability,depend,depend,516,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:530,testability,integr,integration,530,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:566,testability,log,logic,566,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:598,testability,understand,understand,598,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:823,testability,verif,verified,823,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:585,usability,intuit,intuitive,585,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:620,usability,learn,learned,620,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:784,usability,perform,performance,784,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11619:858,usability,perform,performance,858,"[RF] Optimize new algo to figure out RooRealIntegral servers; This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11619
https://github.com/root-project/root/pull/11620:731,availability,Slo,Slot,731,"[skip-ci][DF] Dashboard for RunTreeProcessorMT; This is not intended to enter master (as of now at least). I am sharing a patch to produce taskstream for RunTreeProcessorMT. The RLoopManager produces a raw data, that can very easily be given to this small program that does the magic:. ```py. import pandas as pd. samples = pd.read_csv('test.csv'). startTime = min(samples['StartTime']) # the earliest . allEntries = sum(samples['EntriesProcessed']). samples['StartTime'] -= startTime. samples['EndTime'] -= startTime. samples['Duration'] = samples['EndTime'] - samples['StartTime']. samples['EntriesPercentProc'] = samples['EntriesProcessed']/allEntries*100. import altair as alt. import altair_saver. chart = alt.Chart(samples[['Slot','ThreadID','CoreID',. 'StartTime','EndTime','EntriesProcessed', 'EntriesPercentProc', 'Duration']]).mark_bar(. cornerRadiusTopLeft=2,. cornerRadiusTopRight=2,. cornerRadiusBottomLeft=2,. cornerRadiusBottomRight=2. ).encode(. x='StartTime',. x2='EndTime',. y='ThreadID',. tooltip=['Slot', 'CoreID', 'EntriesProcessed', 'EntriesPercentProc', 'Duration']. ).properties(width=1200).interactive(). chart.save('taskstream.html'). ```. Requirements are pandas, altair and altair_saver. Example resulting taskstream is in this draft PR: https://github.com/root-project/root/blob/2dffbaab2ef3c280cc1b5a98fe8123250353d35e/tutorials/dataframe/dashboard/taskstream.html. Any suggestions for improvements are welcome :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11620
https://github.com/root-project/root/pull/11620:1018,availability,Slo,Slot,1018,"[skip-ci][DF] Dashboard for RunTreeProcessorMT; This is not intended to enter master (as of now at least). I am sharing a patch to produce taskstream for RunTreeProcessorMT. The RLoopManager produces a raw data, that can very easily be given to this small program that does the magic:. ```py. import pandas as pd. samples = pd.read_csv('test.csv'). startTime = min(samples['StartTime']) # the earliest . allEntries = sum(samples['EntriesProcessed']). samples['StartTime'] -= startTime. samples['EndTime'] -= startTime. samples['Duration'] = samples['EndTime'] - samples['StartTime']. samples['EntriesPercentProc'] = samples['EntriesProcessed']/allEntries*100. import altair as alt. import altair_saver. chart = alt.Chart(samples[['Slot','ThreadID','CoreID',. 'StartTime','EndTime','EntriesProcessed', 'EntriesPercentProc', 'Duration']]).mark_bar(. cornerRadiusTopLeft=2,. cornerRadiusTopRight=2,. cornerRadiusBottomLeft=2,. cornerRadiusBottomRight=2. ).encode(. x='StartTime',. x2='EndTime',. y='ThreadID',. tooltip=['Slot', 'CoreID', 'EntriesProcessed', 'EntriesPercentProc', 'Duration']. ).properties(width=1200).interactive(). chart.save('taskstream.html'). ```. Requirements are pandas, altair and altair_saver. Example resulting taskstream is in this draft PR: https://github.com/root-project/root/blob/2dffbaab2ef3c280cc1b5a98fe8123250353d35e/tutorials/dataframe/dashboard/taskstream.html. Any suggestions for improvements are welcome :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11620
https://github.com/root-project/root/pull/11620:122,deployability,patch,patch,122,"[skip-ci][DF] Dashboard for RunTreeProcessorMT; This is not intended to enter master (as of now at least). I am sharing a patch to produce taskstream for RunTreeProcessorMT. The RLoopManager produces a raw data, that can very easily be given to this small program that does the magic:. ```py. import pandas as pd. samples = pd.read_csv('test.csv'). startTime = min(samples['StartTime']) # the earliest . allEntries = sum(samples['EntriesProcessed']). samples['StartTime'] -= startTime. samples['EndTime'] -= startTime. samples['Duration'] = samples['EndTime'] - samples['StartTime']. samples['EntriesPercentProc'] = samples['EntriesProcessed']/allEntries*100. import altair as alt. import altair_saver. chart = alt.Chart(samples[['Slot','ThreadID','CoreID',. 'StartTime','EndTime','EntriesProcessed', 'EntriesPercentProc', 'Duration']]).mark_bar(. cornerRadiusTopLeft=2,. cornerRadiusTopRight=2,. cornerRadiusBottomLeft=2,. cornerRadiusBottomRight=2. ).encode(. x='StartTime',. x2='EndTime',. y='ThreadID',. tooltip=['Slot', 'CoreID', 'EntriesProcessed', 'EntriesPercentProc', 'Duration']. ).properties(width=1200).interactive(). chart.save('taskstream.html'). ```. Requirements are pandas, altair and altair_saver. Example resulting taskstream is in this draft PR: https://github.com/root-project/root/blob/2dffbaab2ef3c280cc1b5a98fe8123250353d35e/tutorials/dataframe/dashboard/taskstream.html. Any suggestions for improvements are welcome :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11620
https://github.com/root-project/root/pull/11620:749,energy efficiency,Core,CoreID,749,"[skip-ci][DF] Dashboard for RunTreeProcessorMT; This is not intended to enter master (as of now at least). I am sharing a patch to produce taskstream for RunTreeProcessorMT. The RLoopManager produces a raw data, that can very easily be given to this small program that does the magic:. ```py. import pandas as pd. samples = pd.read_csv('test.csv'). startTime = min(samples['StartTime']) # the earliest . allEntries = sum(samples['EntriesProcessed']). samples['StartTime'] -= startTime. samples['EndTime'] -= startTime. samples['Duration'] = samples['EndTime'] - samples['StartTime']. samples['EntriesPercentProc'] = samples['EntriesProcessed']/allEntries*100. import altair as alt. import altair_saver. chart = alt.Chart(samples[['Slot','ThreadID','CoreID',. 'StartTime','EndTime','EntriesProcessed', 'EntriesPercentProc', 'Duration']]).mark_bar(. cornerRadiusTopLeft=2,. cornerRadiusTopRight=2,. cornerRadiusBottomLeft=2,. cornerRadiusBottomRight=2. ).encode(. x='StartTime',. x2='EndTime',. y='ThreadID',. tooltip=['Slot', 'CoreID', 'EntriesProcessed', 'EntriesPercentProc', 'Duration']. ).properties(width=1200).interactive(). chart.save('taskstream.html'). ```. Requirements are pandas, altair and altair_saver. Example resulting taskstream is in this draft PR: https://github.com/root-project/root/blob/2dffbaab2ef3c280cc1b5a98fe8123250353d35e/tutorials/dataframe/dashboard/taskstream.html. Any suggestions for improvements are welcome :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11620
https://github.com/root-project/root/pull/11620:1026,energy efficiency,Core,CoreID,1026,"[skip-ci][DF] Dashboard for RunTreeProcessorMT; This is not intended to enter master (as of now at least). I am sharing a patch to produce taskstream for RunTreeProcessorMT. The RLoopManager produces a raw data, that can very easily be given to this small program that does the magic:. ```py. import pandas as pd. samples = pd.read_csv('test.csv'). startTime = min(samples['StartTime']) # the earliest . allEntries = sum(samples['EntriesProcessed']). samples['StartTime'] -= startTime. samples['EndTime'] -= startTime. samples['Duration'] = samples['EndTime'] - samples['StartTime']. samples['EntriesPercentProc'] = samples['EntriesProcessed']/allEntries*100. import altair as alt. import altair_saver. chart = alt.Chart(samples[['Slot','ThreadID','CoreID',. 'StartTime','EndTime','EntriesProcessed', 'EntriesPercentProc', 'Duration']]).mark_bar(. cornerRadiusTopLeft=2,. cornerRadiusTopRight=2,. cornerRadiusBottomLeft=2,. cornerRadiusBottomRight=2. ).encode(. x='StartTime',. x2='EndTime',. y='ThreadID',. tooltip=['Slot', 'CoreID', 'EntriesProcessed', 'EntriesPercentProc', 'Duration']. ).properties(width=1200).interactive(). chart.save('taskstream.html'). ```. Requirements are pandas, altair and altair_saver. Example resulting taskstream is in this draft PR: https://github.com/root-project/root/blob/2dffbaab2ef3c280cc1b5a98fe8123250353d35e/tutorials/dataframe/dashboard/taskstream.html. Any suggestions for improvements are welcome :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11620
https://github.com/root-project/root/pull/11620:269,reliability,doe,does,269,"[skip-ci][DF] Dashboard for RunTreeProcessorMT; This is not intended to enter master (as of now at least). I am sharing a patch to produce taskstream for RunTreeProcessorMT. The RLoopManager produces a raw data, that can very easily be given to this small program that does the magic:. ```py. import pandas as pd. samples = pd.read_csv('test.csv'). startTime = min(samples['StartTime']) # the earliest . allEntries = sum(samples['EntriesProcessed']). samples['StartTime'] -= startTime. samples['EndTime'] -= startTime. samples['Duration'] = samples['EndTime'] - samples['StartTime']. samples['EntriesPercentProc'] = samples['EntriesProcessed']/allEntries*100. import altair as alt. import altair_saver. chart = alt.Chart(samples[['Slot','ThreadID','CoreID',. 'StartTime','EndTime','EntriesProcessed', 'EntriesPercentProc', 'Duration']]).mark_bar(. cornerRadiusTopLeft=2,. cornerRadiusTopRight=2,. cornerRadiusBottomLeft=2,. cornerRadiusBottomRight=2. ).encode(. x='StartTime',. x2='EndTime',. y='ThreadID',. tooltip=['Slot', 'CoreID', 'EntriesProcessed', 'EntriesPercentProc', 'Duration']. ).properties(width=1200).interactive(). chart.save('taskstream.html'). ```. Requirements are pandas, altair and altair_saver. Example resulting taskstream is in this draft PR: https://github.com/root-project/root/blob/2dffbaab2ef3c280cc1b5a98fe8123250353d35e/tutorials/dataframe/dashboard/taskstream.html. Any suggestions for improvements are welcome :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11620
https://github.com/root-project/root/pull/11620:731,reliability,Slo,Slot,731,"[skip-ci][DF] Dashboard for RunTreeProcessorMT; This is not intended to enter master (as of now at least). I am sharing a patch to produce taskstream for RunTreeProcessorMT. The RLoopManager produces a raw data, that can very easily be given to this small program that does the magic:. ```py. import pandas as pd. samples = pd.read_csv('test.csv'). startTime = min(samples['StartTime']) # the earliest . allEntries = sum(samples['EntriesProcessed']). samples['StartTime'] -= startTime. samples['EndTime'] -= startTime. samples['Duration'] = samples['EndTime'] - samples['StartTime']. samples['EntriesPercentProc'] = samples['EntriesProcessed']/allEntries*100. import altair as alt. import altair_saver. chart = alt.Chart(samples[['Slot','ThreadID','CoreID',. 'StartTime','EndTime','EntriesProcessed', 'EntriesPercentProc', 'Duration']]).mark_bar(. cornerRadiusTopLeft=2,. cornerRadiusTopRight=2,. cornerRadiusBottomLeft=2,. cornerRadiusBottomRight=2. ).encode(. x='StartTime',. x2='EndTime',. y='ThreadID',. tooltip=['Slot', 'CoreID', 'EntriesProcessed', 'EntriesPercentProc', 'Duration']. ).properties(width=1200).interactive(). chart.save('taskstream.html'). ```. Requirements are pandas, altair and altair_saver. Example resulting taskstream is in this draft PR: https://github.com/root-project/root/blob/2dffbaab2ef3c280cc1b5a98fe8123250353d35e/tutorials/dataframe/dashboard/taskstream.html. Any suggestions for improvements are welcome :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11620
https://github.com/root-project/root/pull/11620:1018,reliability,Slo,Slot,1018,"[skip-ci][DF] Dashboard for RunTreeProcessorMT; This is not intended to enter master (as of now at least). I am sharing a patch to produce taskstream for RunTreeProcessorMT. The RLoopManager produces a raw data, that can very easily be given to this small program that does the magic:. ```py. import pandas as pd. samples = pd.read_csv('test.csv'). startTime = min(samples['StartTime']) # the earliest . allEntries = sum(samples['EntriesProcessed']). samples['StartTime'] -= startTime. samples['EndTime'] -= startTime. samples['Duration'] = samples['EndTime'] - samples['StartTime']. samples['EntriesPercentProc'] = samples['EntriesProcessed']/allEntries*100. import altair as alt. import altair_saver. chart = alt.Chart(samples[['Slot','ThreadID','CoreID',. 'StartTime','EndTime','EntriesProcessed', 'EntriesPercentProc', 'Duration']]).mark_bar(. cornerRadiusTopLeft=2,. cornerRadiusTopRight=2,. cornerRadiusBottomLeft=2,. cornerRadiusBottomRight=2. ).encode(. x='StartTime',. x2='EndTime',. y='ThreadID',. tooltip=['Slot', 'CoreID', 'EntriesProcessed', 'EntriesPercentProc', 'Duration']. ).properties(width=1200).interactive(). chart.save('taskstream.html'). ```. Requirements are pandas, altair and altair_saver. Example resulting taskstream is in this draft PR: https://github.com/root-project/root/blob/2dffbaab2ef3c280cc1b5a98fe8123250353d35e/tutorials/dataframe/dashboard/taskstream.html. Any suggestions for improvements are welcome :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11620
https://github.com/root-project/root/pull/11620:122,safety,patch,patch,122,"[skip-ci][DF] Dashboard for RunTreeProcessorMT; This is not intended to enter master (as of now at least). I am sharing a patch to produce taskstream for RunTreeProcessorMT. The RLoopManager produces a raw data, that can very easily be given to this small program that does the magic:. ```py. import pandas as pd. samples = pd.read_csv('test.csv'). startTime = min(samples['StartTime']) # the earliest . allEntries = sum(samples['EntriesProcessed']). samples['StartTime'] -= startTime. samples['EndTime'] -= startTime. samples['Duration'] = samples['EndTime'] - samples['StartTime']. samples['EntriesPercentProc'] = samples['EntriesProcessed']/allEntries*100. import altair as alt. import altair_saver. chart = alt.Chart(samples[['Slot','ThreadID','CoreID',. 'StartTime','EndTime','EntriesProcessed', 'EntriesPercentProc', 'Duration']]).mark_bar(. cornerRadiusTopLeft=2,. cornerRadiusTopRight=2,. cornerRadiusBottomLeft=2,. cornerRadiusBottomRight=2. ).encode(. x='StartTime',. x2='EndTime',. y='ThreadID',. tooltip=['Slot', 'CoreID', 'EntriesProcessed', 'EntriesPercentProc', 'Duration']. ).properties(width=1200).interactive(). chart.save('taskstream.html'). ```. Requirements are pandas, altair and altair_saver. Example resulting taskstream is in this draft PR: https://github.com/root-project/root/blob/2dffbaab2ef3c280cc1b5a98fe8123250353d35e/tutorials/dataframe/dashboard/taskstream.html. Any suggestions for improvements are welcome :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11620
https://github.com/root-project/root/pull/11620:337,safety,test,test,337,"[skip-ci][DF] Dashboard for RunTreeProcessorMT; This is not intended to enter master (as of now at least). I am sharing a patch to produce taskstream for RunTreeProcessorMT. The RLoopManager produces a raw data, that can very easily be given to this small program that does the magic:. ```py. import pandas as pd. samples = pd.read_csv('test.csv'). startTime = min(samples['StartTime']) # the earliest . allEntries = sum(samples['EntriesProcessed']). samples['StartTime'] -= startTime. samples['EndTime'] -= startTime. samples['Duration'] = samples['EndTime'] - samples['StartTime']. samples['EntriesPercentProc'] = samples['EntriesProcessed']/allEntries*100. import altair as alt. import altair_saver. chart = alt.Chart(samples[['Slot','ThreadID','CoreID',. 'StartTime','EndTime','EntriesProcessed', 'EntriesPercentProc', 'Duration']]).mark_bar(. cornerRadiusTopLeft=2,. cornerRadiusTopRight=2,. cornerRadiusBottomLeft=2,. cornerRadiusBottomRight=2. ).encode(. x='StartTime',. x2='EndTime',. y='ThreadID',. tooltip=['Slot', 'CoreID', 'EntriesProcessed', 'EntriesPercentProc', 'Duration']. ).properties(width=1200).interactive(). chart.save('taskstream.html'). ```. Requirements are pandas, altair and altair_saver. Example resulting taskstream is in this draft PR: https://github.com/root-project/root/blob/2dffbaab2ef3c280cc1b5a98fe8123250353d35e/tutorials/dataframe/dashboard/taskstream.html. Any suggestions for improvements are welcome :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11620
https://github.com/root-project/root/pull/11620:122,security,patch,patch,122,"[skip-ci][DF] Dashboard for RunTreeProcessorMT; This is not intended to enter master (as of now at least). I am sharing a patch to produce taskstream for RunTreeProcessorMT. The RLoopManager produces a raw data, that can very easily be given to this small program that does the magic:. ```py. import pandas as pd. samples = pd.read_csv('test.csv'). startTime = min(samples['StartTime']) # the earliest . allEntries = sum(samples['EntriesProcessed']). samples['StartTime'] -= startTime. samples['EndTime'] -= startTime. samples['Duration'] = samples['EndTime'] - samples['StartTime']. samples['EntriesPercentProc'] = samples['EntriesProcessed']/allEntries*100. import altair as alt. import altair_saver. chart = alt.Chart(samples[['Slot','ThreadID','CoreID',. 'StartTime','EndTime','EntriesProcessed', 'EntriesPercentProc', 'Duration']]).mark_bar(. cornerRadiusTopLeft=2,. cornerRadiusTopRight=2,. cornerRadiusBottomLeft=2,. cornerRadiusBottomRight=2. ).encode(. x='StartTime',. x2='EndTime',. y='ThreadID',. tooltip=['Slot', 'CoreID', 'EntriesProcessed', 'EntriesPercentProc', 'Duration']. ).properties(width=1200).interactive(). chart.save('taskstream.html'). ```. Requirements are pandas, altair and altair_saver. Example resulting taskstream is in this draft PR: https://github.com/root-project/root/blob/2dffbaab2ef3c280cc1b5a98fe8123250353d35e/tutorials/dataframe/dashboard/taskstream.html. Any suggestions for improvements are welcome :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11620
https://github.com/root-project/root/pull/11620:337,testability,test,test,337,"[skip-ci][DF] Dashboard for RunTreeProcessorMT; This is not intended to enter master (as of now at least). I am sharing a patch to produce taskstream for RunTreeProcessorMT. The RLoopManager produces a raw data, that can very easily be given to this small program that does the magic:. ```py. import pandas as pd. samples = pd.read_csv('test.csv'). startTime = min(samples['StartTime']) # the earliest . allEntries = sum(samples['EntriesProcessed']). samples['StartTime'] -= startTime. samples['EndTime'] -= startTime. samples['Duration'] = samples['EndTime'] - samples['StartTime']. samples['EntriesPercentProc'] = samples['EntriesProcessed']/allEntries*100. import altair as alt. import altair_saver. chart = alt.Chart(samples[['Slot','ThreadID','CoreID',. 'StartTime','EndTime','EntriesProcessed', 'EntriesPercentProc', 'Duration']]).mark_bar(. cornerRadiusTopLeft=2,. cornerRadiusTopRight=2,. cornerRadiusBottomLeft=2,. cornerRadiusBottomRight=2. ).encode(. x='StartTime',. x2='EndTime',. y='ThreadID',. tooltip=['Slot', 'CoreID', 'EntriesProcessed', 'EntriesPercentProc', 'Duration']. ).properties(width=1200).interactive(). chart.save('taskstream.html'). ```. Requirements are pandas, altair and altair_saver. Example resulting taskstream is in this draft PR: https://github.com/root-project/root/blob/2dffbaab2ef3c280cc1b5a98fe8123250353d35e/tutorials/dataframe/dashboard/taskstream.html. Any suggestions for improvements are welcome :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11620
https://github.com/root-project/root/pull/11620:1008,usability,tool,tooltip,1008,"[skip-ci][DF] Dashboard for RunTreeProcessorMT; This is not intended to enter master (as of now at least). I am sharing a patch to produce taskstream for RunTreeProcessorMT. The RLoopManager produces a raw data, that can very easily be given to this small program that does the magic:. ```py. import pandas as pd. samples = pd.read_csv('test.csv'). startTime = min(samples['StartTime']) # the earliest . allEntries = sum(samples['EntriesProcessed']). samples['StartTime'] -= startTime. samples['EndTime'] -= startTime. samples['Duration'] = samples['EndTime'] - samples['StartTime']. samples['EntriesPercentProc'] = samples['EntriesProcessed']/allEntries*100. import altair as alt. import altair_saver. chart = alt.Chart(samples[['Slot','ThreadID','CoreID',. 'StartTime','EndTime','EntriesProcessed', 'EntriesPercentProc', 'Duration']]).mark_bar(. cornerRadiusTopLeft=2,. cornerRadiusTopRight=2,. cornerRadiusBottomLeft=2,. cornerRadiusBottomRight=2. ).encode(. x='StartTime',. x2='EndTime',. y='ThreadID',. tooltip=['Slot', 'CoreID', 'EntriesProcessed', 'EntriesPercentProc', 'Duration']. ).properties(width=1200).interactive(). chart.save('taskstream.html'). ```. Requirements are pandas, altair and altair_saver. Example resulting taskstream is in this draft PR: https://github.com/root-project/root/blob/2dffbaab2ef3c280cc1b5a98fe8123250353d35e/tutorials/dataframe/dashboard/taskstream.html. Any suggestions for improvements are welcome :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11620
https://github.com/root-project/root/pull/11620:1115,usability,interact,interactive,1115,"[skip-ci][DF] Dashboard for RunTreeProcessorMT; This is not intended to enter master (as of now at least). I am sharing a patch to produce taskstream for RunTreeProcessorMT. The RLoopManager produces a raw data, that can very easily be given to this small program that does the magic:. ```py. import pandas as pd. samples = pd.read_csv('test.csv'). startTime = min(samples['StartTime']) # the earliest . allEntries = sum(samples['EntriesProcessed']). samples['StartTime'] -= startTime. samples['EndTime'] -= startTime. samples['Duration'] = samples['EndTime'] - samples['StartTime']. samples['EntriesPercentProc'] = samples['EntriesProcessed']/allEntries*100. import altair as alt. import altair_saver. chart = alt.Chart(samples[['Slot','ThreadID','CoreID',. 'StartTime','EndTime','EntriesProcessed', 'EntriesPercentProc', 'Duration']]).mark_bar(. cornerRadiusTopLeft=2,. cornerRadiusTopRight=2,. cornerRadiusBottomLeft=2,. cornerRadiusBottomRight=2. ).encode(. x='StartTime',. x2='EndTime',. y='ThreadID',. tooltip=['Slot', 'CoreID', 'EntriesProcessed', 'EntriesPercentProc', 'Duration']. ).properties(width=1200).interactive(). chart.save('taskstream.html'). ```. Requirements are pandas, altair and altair_saver. Example resulting taskstream is in this draft PR: https://github.com/root-project/root/blob/2dffbaab2ef3c280cc1b5a98fe8123250353d35e/tutorials/dataframe/dashboard/taskstream.html. Any suggestions for improvements are welcome :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11620
https://github.com/root-project/root/pull/11621:66,availability,failur,failures,66,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:213,availability,failur,failures,213,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:692,availability,failur,failure,692,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:66,deployability,fail,failures,66,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:153,deployability,configurat,configuration,153,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:213,deployability,fail,failures,213,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:692,deployability,fail,failure,692,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:331,energy efficiency,load,load-libs,331,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:153,integrability,configur,configuration,153,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:153,modifiability,configur,configuration,153,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:66,performance,failur,failures,66,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:213,performance,failur,failures,213,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:331,performance,load,load-libs,331,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:692,performance,failur,failure,692,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:66,reliability,fail,failures,66,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:213,reliability,fail,failures,213,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:639,reliability,rca,rcanvas-,639,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:692,reliability,fail,failure,692,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:87,safety,test,tests,87,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:294,safety,test,tests,294,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:153,security,configur,configuration,153,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:87,testability,test,tests,87,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:294,testability,test,tests,294,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11621:595,testability,regress,regression-regression,595,"Tweaks for AddressSanitizer; Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:. * `pyunittests-pyroot-import-load-libs`. * `tutorial-roofit-rf104_classfactory-py`. * `roottest-python-JupyROOT-simpleCppMagic_notebook`. * `roottest-python-JupyROOT-thread_local_notebook`. * `roottest-python-JupyROOT-ROOT_kernel_notebook`. * `roottest-python-basic-basic`. * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11621
https://github.com/root-project/root/pull/11622:30,integrability,Batch,BatchMode,30,"[RF] Make NLL creation in new BatchMode feature complete; This PR applies many fixes to the new RooFit BatchMode to make sure that the NLL is created correctly, respecting all the command arguments of `RooAbsPdf::fitTo()` that were so far not considered. More detail in the individual commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11622
https://github.com/root-project/root/pull/11622:103,integrability,Batch,BatchMode,103,"[RF] Make NLL creation in new BatchMode feature complete; This PR applies many fixes to the new RooFit BatchMode to make sure that the NLL is created correctly, respecting all the command arguments of `RooAbsPdf::fitTo()` that were so far not considered. More detail in the individual commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11622
https://github.com/root-project/root/pull/11622:30,performance,Batch,BatchMode,30,"[RF] Make NLL creation in new BatchMode feature complete; This PR applies many fixes to the new RooFit BatchMode to make sure that the NLL is created correctly, respecting all the command arguments of `RooAbsPdf::fitTo()` that were so far not considered. More detail in the individual commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11622
https://github.com/root-project/root/pull/11622:103,performance,Batch,BatchMode,103,"[RF] Make NLL creation in new BatchMode feature complete; This PR applies many fixes to the new RooFit BatchMode to make sure that the NLL is created correctly, respecting all the command arguments of `RooAbsPdf::fitTo()` that were so far not considered. More detail in the individual commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11622
https://github.com/root-project/root/pull/11622:48,safety,compl,complete,48,"[RF] Make NLL creation in new BatchMode feature complete; This PR applies many fixes to the new RooFit BatchMode to make sure that the NLL is created correctly, respecting all the command arguments of `RooAbsPdf::fitTo()` that were so far not considered. More detail in the individual commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11622
https://github.com/root-project/root/pull/11622:48,security,compl,complete,48,"[RF] Make NLL creation in new BatchMode feature complete; This PR applies many fixes to the new RooFit BatchMode to make sure that the NLL is created correctly, respecting all the command arguments of `RooAbsPdf::fitTo()` that were so far not considered. More detail in the individual commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11622
https://github.com/root-project/root/pull/11622:180,usability,command,command,180,"[RF] Make NLL creation in new BatchMode feature complete; This PR applies many fixes to the new RooFit BatchMode to make sure that the NLL is created correctly, respecting all the command arguments of `RooAbsPdf::fitTo()` that were so far not considered. More detail in the individual commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11622
https://github.com/root-project/root/pull/11623:188,safety,detect,detected,188,"[DO NOT MERGE][PyROOT] Fix setting of value_type in std::vector; This is a follow up of what was investigated for https://github.com/root-project/root/issues/11581. In that ticket, it was detected that for certain types, for example `const char*`, the attribute `value_type` was not set for std::vector classes. This PR aligns with upstream cppyy in terms of setting the `value_type` and `value_size` attributes of a std::vector class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11623
https://github.com/root-project/root/pull/11623:188,security,detect,detected,188,"[DO NOT MERGE][PyROOT] Fix setting of value_type in std::vector; This is a follow up of what was investigated for https://github.com/root-project/root/issues/11581. In that ticket, it was detected that for certain types, for example `const char*`, the attribute `value_type` was not set for std::vector classes. This PR aligns with upstream cppyy in terms of setting the `value_type` and `value_size` attributes of a std::vector class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11623
https://github.com/root-project/root/issues/11624:892,deployability,configurat,configuration,892,"A standard schema for semi-structured dataset specification formats; Many analyses and frameworks offer the possibility of using a semi-structured format to represent both the full dataset (in terms of the files that need to be processed) and some metadata attached to it. Most often, the files are split into multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:11,integrability,schema,schema,11,"A standard schema for semi-structured dataset specification formats; Many analyses and frameworks offer the possibility of using a semi-structured format to represent both the full dataset (in terms of the files that need to be processed) and some metadata attached to it. Most often, the files are split into multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:892,integrability,configur,configuration,892,"A standard schema for semi-structured dataset specification formats; Many analyses and frameworks offer the possibility of using a semi-structured format to represent both the full dataset (in terms of the files that need to be processed) and some metadata attached to it. Most often, the files are split into multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:1102,integrability,schema,schema,1102,"he possibility of using a semi-structured format to represent both the full dataset (in terms of the files that need to be processed) and some metadata attached to it. Most often, the files are split into multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files"": [""fileb_1.root"", ""fileb_2.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:1292,integrability,schema,schema,1292,"are split into multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files"": [""fileb_1.root"", ""fileb_2.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [50000, 60000],. ""metadata"": {...}. },. # ... },. # other optional values from here on. ""optional"": ""value"",. # ... }. ```. Any ideas? @NJManganelli , @bendavid , @swertz , @n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:1790,integrability,Event,Events,1790,""". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files"": [""fileb_1.root"", ""fileb_2.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [50000, 60000],. ""metadata"": {...}. },. # ... },. # other optional values from here on. ""optional"": ""value"",. # ... }. ```. Any ideas? @NJManganelli , @bendavid , @swertz , @nsmith- , @lgray , @hageboeck , @eguiraud , @etejedor , @valsdav , @alexander-held.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:2,interoperability,standard,standard,2,"A standard schema for semi-structured dataset specification formats; Many analyses and frameworks offer the possibility of using a semi-structured format to represent both the full dataset (in terms of the files that need to be processed) and some metadata attached to it. Most often, the files are split into multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:46,interoperability,specif,specification,46,"A standard schema for semi-structured dataset specification formats; Many analyses and frameworks offer the possibility of using a semi-structured format to represent both the full dataset (in terms of the files that need to be processed) and some metadata attached to it. Most often, the files are split into multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:60,interoperability,format,formats,60,"A standard schema for semi-structured dataset specification formats; Many analyses and frameworks offer the possibility of using a semi-structured format to represent both the full dataset (in terms of the files that need to be processed) and some metadata attached to it. Most often, the files are split into multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:147,interoperability,format,format,147,"A standard schema for semi-structured dataset specification formats; Many analyses and frameworks offer the possibility of using a semi-structured format to represent both the full dataset (in terms of the files that need to be processed) and some metadata attached to it. Most often, the files are split into multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:981,interoperability,share,shared,981,"A standard schema for semi-structured dataset specification formats; Many analyses and frameworks offer the possibility of using a semi-structured format to represent both the full dataset (in terms of the files that need to be processed) and some metadata attached to it. Most often, the files are split into multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:1093,interoperability,standard,standard,1093," offer the possibility of using a semi-structured format to represent both the full dataset (in terms of the files that need to be processed) and some metadata attached to it. Most often, the files are split into multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files"": [""fileb_1.root"", ""fileb_2.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:1283,interoperability,standard,standard,1283,"e files are split into multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files"": [""fileb_1.root"", ""fileb_2.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [50000, 60000],. ""metadata"": {...}. },. # ... },. # other optional values from here on. ""optional"": ""value"",. # ... }. ```. Any ideas? @NJManganelli , @bendavid , @swe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:1368,interoperability,Specif,Specify,1368,"asets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files"": [""fileb_1.root"", ""fileb_2.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [50000, 60000],. ""metadata"": {...}. },. # ... },. # other optional values from here on. ""optional"": ""value"",. # ... }. ```. Any ideas? @NJManganelli , @bendavid , @swertz , @nsmith- , @lgray , @hageboeck , @eguiraud , @etejedor , @valsdav , @alexander-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:892,modifiability,configur,configuration,892,"A standard schema for semi-structured dataset specification formats; Many analyses and frameworks offer the possibility of using a semi-structured format to represent both the full dataset (in terms of the files that need to be processed) and some metadata attached to it. Most often, the files are split into multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:1394,safety,input,input,1394,""". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files"": [""fileb_1.root"", ""fileb_2.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [50000, 60000],. ""metadata"": {...}. },. # ... },. # other optional values from here on. ""optional"": ""value"",. # ... }. ```. Any ideas? @NJManganelli , @bendavid , @swertz , @nsmith- , @lgray , @hageboeck , @eguiraud , @etejedor , @valsdav , @alexander-held.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:892,security,configur,configuration,892,"A standard schema for semi-structured dataset specification formats; Many analyses and frameworks offer the possibility of using a semi-structured format to represent both the full dataset (in terms of the files that need to be processed) and some metadata attached to it. Most often, the files are split into multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:1503,testability,plan,plan,1503,""". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files"": [""fileb_1.root"", ""fileb_2.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [50000, 60000],. ""metadata"": {...}. },. # ... },. # other optional values from here on. ""optional"": ""value"",. # ... }. ```. Any ideas? @NJManganelli , @bendavid , @swertz , @nsmith- , @lgray , @hageboeck , @eguiraud , @etejedor , @valsdav , @alexander-held.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:865,usability,help,helps,865,"A standard schema for semi-structured dataset specification formats; Many analyses and frameworks offer the possibility of using a semi-structured format to represent both the full dataset (in terms of the files that need to be processed) and some metadata attached to it. Most often, the files are split into multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:1178,usability,workflow,workflows,1178,"taset (in terms of the files that need to be processed) and some metadata attached to it. Most often, the files are split into multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files"": [""fileb_1.root"", ""fileb_2.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [50000, 60000],. ""metadata"": {...}. },. # ... },. # other optio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:1306,usability,support,support,1306,"multiple groupings, which are usually called ""samples"" or ""datasets"". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files"": [""fileb_1.root"", ""fileb_2.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [50000, 60000],. ""metadata"": {...}. },. # ... },. # other optional values from here on. ""optional"": ""value"",. # ... }. ```. Any ideas? @NJManganelli , @bendavid , @swertz , @nsmith- , @lgray",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:1394,usability,input,input,1394,""". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files"": [""fileb_1.root"", ""fileb_2.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [50000, 60000],. ""metadata"": {...}. },. # ... },. # other optional values from here on. ""optional"": ""value"",. # ... }. ```. Any ideas? @NJManganelli , @bendavid , @swertz , @nsmith- , @lgray , @hageboeck , @eguiraud , @etejedor , @valsdav , @alexander-held.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:1520,usability,support,support,1520,""". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files"": [""fileb_1.root"", ""fileb_2.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [50000, 60000],. ""metadata"": {...}. },. # ... },. # other optional values from here on. ""optional"": ""value"",. # ... }. ```. Any ideas? @NJManganelli , @bendavid , @swertz , @nsmith- , @lgray , @hageboeck , @eguiraud , @etejedor , @valsdav , @alexander-held.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:1538,usability,support,support,1538,""". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files"": [""fileb_1.root"", ""fileb_2.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [50000, 60000],. ""metadata"": {...}. },. # ... },. # other optional values from here on. ""optional"": ""value"",. # ... }. ```. Any ideas? @NJManganelli , @bendavid , @swertz , @nsmith- , @lgray , @hageboeck , @eguiraud , @etejedor , @valsdav , @alexander-held.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/issues/11624:1579,usability,support,support,1579,""". A few examples of this pattern are:. * [AGC](https://github.com/iris-hep/analysis-grand-challenge/blob/main/analyses/cms-open-data-ttbar/ntuples.json). * [PocketCoffea](https://github.com/PocketCoffea/PocketCoffea/blob/main/datasets/DATA_DoubleMuon_local.json). * [WRemnants](https://github.com/WMass/WRemnants/blob/4068b8622fd54867ae779ee3d79a4d4aa270a4a5/wremnants/datasets/datasetDict_v9.py). * [Bamboo](https://gitlab.cern.ch/swertz/bambooexamples/-/blob/master/samples.yml). This helps a lot in keeping the configuration of the analysis dataset tidy and short, so that it can also be more easily shared to others and compared between different executions. But this also calls for a discussion on providing a standard schema that all frameworks could accept and digest into their own execution workflows. For example, it is quite natural to always include a list of files in each ""sample"". This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata. * Decide what term to use instead of ""groups"". * Cover TTree but plan for RNTuple support. * Should support friend trees per group. * Should support entry ranges per group. * No indexed friend trees (at least for now). One possible starting point would be (using ""samples""=""groups""=""datasets""):. ```python. {. ""samples"":{. ""sample_a"":{. ""treenames"": [""Events""],. ""files"": [""fa*.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [0, 1000],. ""metadata"": {...}. },. ""sample_b"":{. ""treenames"": [""treeb_1"", ""treeb_2""],. ""files"": [""fileb_1.root"", ""fileb_2.root""],. ""friends"":{. ""treenames"": [""Friend""],. ""files"": [""fr*.root""],. },. ""entry_range"": [50000, 60000],. ""metadata"": {...}. },. # ... },. # other optional values from here on. ""optional"": ""value"",. # ... }. ```. Any ideas? @NJManganelli , @bendavid , @swertz , @nsmith- , @lgray , @hageboeck , @eguiraud , @etejedor , @valsdav , @alexander-held.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11624
https://github.com/root-project/root/pull/11625:322,modifiability,layer,layers,322,"[TMVA][SOFIE] Fix infer function input tensors order; This PR fixes the ordering of input tensors in the generated `infer` function. Previously, the tensors were iterated from an unordered map and thus were not in the order in which they were added. The correct ordering in which they are added is necessary for different layers in other parsers like Keras, and in the inference of GNN. With this PR, the tensors are iterated from a vector, thus the ordering is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11625
https://github.com/root-project/root/pull/11625:33,safety,input,input,33,"[TMVA][SOFIE] Fix infer function input tensors order; This PR fixes the ordering of input tensors in the generated `infer` function. Previously, the tensors were iterated from an unordered map and thus were not in the order in which they were added. The correct ordering in which they are added is necessary for different layers in other parsers like Keras, and in the inference of GNN. With this PR, the tensors are iterated from a vector, thus the ordering is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11625
https://github.com/root-project/root/pull/11625:84,safety,input,input,84,"[TMVA][SOFIE] Fix infer function input tensors order; This PR fixes the ordering of input tensors in the generated `infer` function. Previously, the tensors were iterated from an unordered map and thus were not in the order in which they were added. The correct ordering in which they are added is necessary for different layers in other parsers like Keras, and in the inference of GNN. With this PR, the tensors are iterated from a vector, thus the ordering is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11625
https://github.com/root-project/root/pull/11625:33,usability,input,input,33,"[TMVA][SOFIE] Fix infer function input tensors order; This PR fixes the ordering of input tensors in the generated `infer` function. Previously, the tensors were iterated from an unordered map and thus were not in the order in which they were added. The correct ordering in which they are added is necessary for different layers in other parsers like Keras, and in the inference of GNN. With this PR, the tensors are iterated from a vector, thus the ordering is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11625
https://github.com/root-project/root/pull/11625:84,usability,input,input,84,"[TMVA][SOFIE] Fix infer function input tensors order; This PR fixes the ordering of input tensors in the generated `infer` function. Previously, the tensors were iterated from an unordered map and thus were not in the order in which they were added. The correct ordering in which they are added is necessary for different layers in other parsers like Keras, and in the inference of GNN. With this PR, the tensors are iterated from a vector, thus the ordering is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11625
https://github.com/root-project/root/issues/11626:431,availability,error,error,431,STARlight simulation; I installed root via this video [https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30](https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30) . To build a starlight . ![Screenshot 2022-10-23 133107](https://user-images.githubusercontent.com/116489914/197387186-122e8d49-1751-4152-bc5c-c9ce70a8f60a.png). I tried a lot to fix this error . ![Screenshot 2022-10-22 220723](https://user-images.githubusercontent.com/116489914/197386889-d40c094c-b457-4e2c-a549-caf0d6d39a61.png) . Please help me,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11626
https://github.com/root-project/root/issues/11626:24,deployability,instal,installed,24,STARlight simulation; I installed root via this video [https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30](https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30) . To build a starlight . ![Screenshot 2022-10-23 133107](https://user-images.githubusercontent.com/116489914/197387186-122e8d49-1751-4152-bc5c-c9ce70a8f60a.png). I tried a lot to fix this error . ![Screenshot 2022-10-22 220723](https://user-images.githubusercontent.com/116489914/197386889-d40c094c-b457-4e2c-a549-caf0d6d39a61.png) . Please help me,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11626
https://github.com/root-project/root/issues/11626:248,deployability,build,build,248,STARlight simulation; I installed root via this video [https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30](https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30) . To build a starlight . ![Screenshot 2022-10-23 133107](https://user-images.githubusercontent.com/116489914/197387186-122e8d49-1751-4152-bc5c-c9ce70a8f60a.png). I tried a lot to fix this error . ![Screenshot 2022-10-22 220723](https://user-images.githubusercontent.com/116489914/197386889-d40c094c-b457-4e2c-a549-caf0d6d39a61.png) . Please help me,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11626
https://github.com/root-project/root/issues/11626:431,performance,error,error,431,STARlight simulation; I installed root via this video [https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30](https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30) . To build a starlight . ![Screenshot 2022-10-23 133107](https://user-images.githubusercontent.com/116489914/197387186-122e8d49-1751-4152-bc5c-c9ce70a8f60a.png). I tried a lot to fix this error . ![Screenshot 2022-10-22 220723](https://user-images.githubusercontent.com/116489914/197386889-d40c094c-b457-4e2c-a549-caf0d6d39a61.png) . Please help me,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11626
https://github.com/root-project/root/issues/11626:431,safety,error,error,431,STARlight simulation; I installed root via this video [https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30](https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30) . To build a starlight . ![Screenshot 2022-10-23 133107](https://user-images.githubusercontent.com/116489914/197387186-122e8d49-1751-4152-bc5c-c9ce70a8f60a.png). I tried a lot to fix this error . ![Screenshot 2022-10-22 220723](https://user-images.githubusercontent.com/116489914/197386889-d40c094c-b457-4e2c-a549-caf0d6d39a61.png) . Please help me,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11626
https://github.com/root-project/root/issues/11626:10,testability,simul,simulation,10,STARlight simulation; I installed root via this video [https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30](https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30) . To build a starlight . ![Screenshot 2022-10-23 133107](https://user-images.githubusercontent.com/116489914/197387186-122e8d49-1751-4152-bc5c-c9ce70a8f60a.png). I tried a lot to fix this error . ![Screenshot 2022-10-22 220723](https://user-images.githubusercontent.com/116489914/197386889-d40c094c-b457-4e2c-a549-caf0d6d39a61.png) . Please help me,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11626
https://github.com/root-project/root/issues/11626:308,usability,user,user-images,308,STARlight simulation; I installed root via this video [https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30](https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30) . To build a starlight . ![Screenshot 2022-10-23 133107](https://user-images.githubusercontent.com/116489914/197387186-122e8d49-1751-4152-bc5c-c9ce70a8f60a.png). I tried a lot to fix this error . ![Screenshot 2022-10-22 220723](https://user-images.githubusercontent.com/116489914/197386889-d40c094c-b457-4e2c-a549-caf0d6d39a61.png) . Please help me,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11626
https://github.com/root-project/root/issues/11626:431,usability,error,error,431,STARlight simulation; I installed root via this video [https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30](https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30) . To build a starlight . ![Screenshot 2022-10-23 133107](https://user-images.githubusercontent.com/116489914/197387186-122e8d49-1751-4152-bc5c-c9ce70a8f60a.png). I tried a lot to fix this error . ![Screenshot 2022-10-22 220723](https://user-images.githubusercontent.com/116489914/197386889-d40c094c-b457-4e2c-a549-caf0d6d39a61.png) . Please help me,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11626
https://github.com/root-project/root/issues/11626:479,usability,user,user-images,479,STARlight simulation; I installed root via this video [https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30](https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30) . To build a starlight . ![Screenshot 2022-10-23 133107](https://user-images.githubusercontent.com/116489914/197387186-122e8d49-1751-4152-bc5c-c9ce70a8f60a.png). I tried a lot to fix this error . ![Screenshot 2022-10-22 220723](https://user-images.githubusercontent.com/116489914/197386889-d40c094c-b457-4e2c-a549-caf0d6d39a61.png) . Please help me,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11626
https://github.com/root-project/root/issues/11626:584,usability,help,help,584,STARlight simulation; I installed root via this video [https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30](https://www.youtube.com/watch?v=pmfM4Zq6OQU&list=PLLybgCU6QCGWLdDO4ZDaB0kLrO3maeYAe&index=30) . To build a starlight . ![Screenshot 2022-10-23 133107](https://user-images.githubusercontent.com/116489914/197387186-122e8d49-1751-4152-bc5c-c9ce70a8f60a.png). I tried a lot to fix this error . ![Screenshot 2022-10-22 220723](https://user-images.githubusercontent.com/116489914/197386889-d40c094c-b457-4e2c-a549-caf0d6d39a61.png) . Please help me,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11626
https://github.com/root-project/root/pull/11627:796,deployability,updat,updated,796,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:110,energy efficiency,optim,optimizations,110,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:181,integrability,Queue,Queue,181,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:191,integrability,Queue,Queue,191,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:214,integrability,abstract,abstract,214,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:306,integrability,Queue,Queue,306,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:349,integrability,Queue,Queue,349,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:375,integrability,Queue,Queue,375,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:409,integrability,Queue,Queue,409,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:523,integrability,Queue,Queue,523,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:639,integrability,queue,queue,639,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:658,integrability,Queue,Queue,658,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:738,integrability,Queue,Queue,738,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:214,modifiability,abstract,abstract,214,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:110,performance,optimiz,optimizations,110,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:181,performance,Queue,Queue,181,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:191,performance,Queue,Queue,191,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:306,performance,Queue,Queue,306,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:349,performance,Queue,Queue,349,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:375,performance,Queue,Queue,375,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:409,performance,Queue,Queue,409,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:523,performance,Queue,Queue,523,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:639,performance,queue,queue,639,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:658,performance,Queue,Queue,658,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:738,performance,Queue,Queue,738,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:766,safety,test,tested,766,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:796,safety,updat,updated,796,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:254,security,access,access,254,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:796,security,updat,updated,796,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11627:766,testability,test,tested,766,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
