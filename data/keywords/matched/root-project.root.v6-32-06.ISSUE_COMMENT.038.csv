id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/7502:466,safety,avail,available,466,"@vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > I thought we have a way to do that with TMemFile already. It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:91,security,patch,patch,91,"@vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > I thought we have a way to do that with TMemFile already. It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:177,security,expos,exposing,177,"@vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > I thought we have a way to do that with TMemFile already. It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:466,security,availab,available,466,"@vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > I thought we have a way to do that with TMemFile already. It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:234,usability,help,help,234,"@vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > I thought we have a way to do that with TMemFile already. It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:481,usability,memor,memory,481,"@vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > I thought we have a way to do that with TMemFile already. It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:31,availability,reboot,rebooted,31,"@eguiraud FYI the Windows node rebooted, so I killed the build to avoid a too long time-out",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:57,deployability,build,build,57,"@eguiraud FYI the Windows node rebooted, so I killed the build to avoid a too long time-out",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:83,performance,time,time-out,83,"@eguiraud FYI the Windows node rebooted, so I killed the build to avoid a too long time-out",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:66,safety,avoid,avoid,66,"@eguiraud FYI the Windows node rebooted, so I killed the build to avoid a too long time-out",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:66,safety,test,test,66,> Ah I broke pretty-printing of `std::map` ü§¶‚Äç‚ôÇÔ∏è. I'm proud of our test coverage :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:66,testability,test,test,66,> Ah I broke pretty-printing of `std::map` ü§¶‚Äç‚ôÇÔ∏è. I'm proud of our test coverage :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:71,testability,coverag,coverage,71,> Ah I broke pretty-printing of `std::map` ü§¶‚Äç‚ôÇÔ∏è. I'm proud of our test coverage :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:378,energy efficiency,load,load,378,"Fixed pretty-printing, remaining issues seem related to autoloading:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6VecOps15SmallVectorBaseIjE8grow_podEPvmm' unresolved while linking [cling interface function]! You are probably missing the definition of ROOT::VecOps::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long). Maybe you need to load the corresponding shared library? ```. Not sure what's going on on Windows, will have to investigate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:204,integrability,interfac,interface,204,"Fixed pretty-printing, remaining issues seem related to autoloading:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6VecOps15SmallVectorBaseIjE8grow_podEPvmm' unresolved while linking [cling interface function]! You are probably missing the definition of ROOT::VecOps::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long). Maybe you need to load the corresponding shared library? ```. Not sure what's going on on Windows, will have to investigate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:204,interoperability,interfac,interface,204,"Fixed pretty-printing, remaining issues seem related to autoloading:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6VecOps15SmallVectorBaseIjE8grow_podEPvmm' unresolved while linking [cling interface function]! You are probably missing the definition of ROOT::VecOps::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long). Maybe you need to load the corresponding shared library? ```. Not sure what's going on on Windows, will have to investigate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:401,interoperability,share,shared,401,"Fixed pretty-printing, remaining issues seem related to autoloading:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6VecOps15SmallVectorBaseIjE8grow_podEPvmm' unresolved while linking [cling interface function]! You are probably missing the definition of ROOT::VecOps::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long). Maybe you need to load the corresponding shared library? ```. Not sure what's going on on Windows, will have to investigate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:204,modifiability,interfac,interface,204,"Fixed pretty-printing, remaining issues seem related to autoloading:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6VecOps15SmallVectorBaseIjE8grow_podEPvmm' unresolved while linking [cling interface function]! You are probably missing the definition of ROOT::VecOps::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long). Maybe you need to load the corresponding shared library? ```. Not sure what's going on on Windows, will have to investigate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:378,performance,load,load,378,"Fixed pretty-printing, remaining issues seem related to autoloading:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6VecOps15SmallVectorBaseIjE8grow_podEPvmm' unresolved while linking [cling interface function]! You are probably missing the definition of ROOT::VecOps::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long). Maybe you need to load the corresponding shared library? ```. Not sure what's going on on Windows, will have to investigate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:392,energy efficiency,load,load,392,"> Fixed pretty-printing, remaining issues seem related to autoloading:. > . > ```. > IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6VecOps15SmallVectorBaseIjE8grow_podEPvmm' unresolved while linking [cling interface function]! > You are probably missing the definition of ROOT::VecOps::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long). > Maybe you need to load the corresponding shared library? > ```. > . > Not sure what's going on on Windows, will have to investigate. Could be due to an an inline function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:214,integrability,interfac,interface,214,"> Fixed pretty-printing, remaining issues seem related to autoloading:. > . > ```. > IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6VecOps15SmallVectorBaseIjE8grow_podEPvmm' unresolved while linking [cling interface function]! > You are probably missing the definition of ROOT::VecOps::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long). > Maybe you need to load the corresponding shared library? > ```. > . > Not sure what's going on on Windows, will have to investigate. Could be due to an an inline function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:214,interoperability,interfac,interface,214,"> Fixed pretty-printing, remaining issues seem related to autoloading:. > . > ```. > IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6VecOps15SmallVectorBaseIjE8grow_podEPvmm' unresolved while linking [cling interface function]! > You are probably missing the definition of ROOT::VecOps::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long). > Maybe you need to load the corresponding shared library? > ```. > . > Not sure what's going on on Windows, will have to investigate. Could be due to an an inline function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:415,interoperability,share,shared,415,"> Fixed pretty-printing, remaining issues seem related to autoloading:. > . > ```. > IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6VecOps15SmallVectorBaseIjE8grow_podEPvmm' unresolved while linking [cling interface function]! > You are probably missing the definition of ROOT::VecOps::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long). > Maybe you need to load the corresponding shared library? > ```. > . > Not sure what's going on on Windows, will have to investigate. Could be due to an an inline function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:214,modifiability,interfac,interface,214,"> Fixed pretty-printing, remaining issues seem related to autoloading:. > . > ```. > IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6VecOps15SmallVectorBaseIjE8grow_podEPvmm' unresolved while linking [cling interface function]! > You are probably missing the definition of ROOT::VecOps::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long). > Maybe you need to load the corresponding shared library? > ```. > . > Not sure what's going on on Windows, will have to investigate. Could be due to an an inline function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:392,performance,load,load,392,"> Fixed pretty-printing, remaining issues seem related to autoloading:. > . > ```. > IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6VecOps15SmallVectorBaseIjE8grow_podEPvmm' unresolved while linking [cling interface function]! > You are probably missing the definition of ROOT::VecOps::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long). > Maybe you need to load the corresponding shared library? > ```. > . > Not sure what's going on on Windows, will have to investigate. Could be due to an an inline function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:480,availability,avail,available,480,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:93,deployability,patch,patch,93,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:151,deployability,version,version,151,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:266,deployability,roll,roll,266,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:213,energy efficiency,core,core,213,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:151,integrability,version,version,151,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:502,integrability,buffer,buffer,502,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:151,modifiability,version,version,151,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:470,performance,disk,disk,470,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:495,performance,memor,memory,495,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:593,performance,perform,performance,593,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:127,reliability,doe,does,127,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:480,reliability,availab,available,480,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:683,reliability,doe,does,683,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:93,safety,patch,patch,93,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:480,safety,avail,available,480,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:660,safety,except,exception,660,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:670,safety,safe,safe,670,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:705,safety,except,exceptions,705,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:93,security,patch,patch,93,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:179,security,expos,exposing,179,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:480,security,availab,available,480,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:236,usability,help,help,236,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:495,usability,memor,memory,495,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:593,usability,perform,performance,593,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > . > > I thought we have a way to do that with TMemFile already. > . > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:184,energy efficiency,optim,optimization,184,"> the performance of the llvm::SmallVector comes from the fact it is not exception safe. Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:204,energy efficiency,reduc,reduces,204,"> the performance of the llvm::SmallVector comes from the fact it is not exception safe. Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:231,energy efficiency,alloc,allocations,231,"> the performance of the llvm::SmallVector comes from the fact it is not exception safe. Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:177,integrability,buffer,buffer,177,"> the performance of the llvm::SmallVector comes from the fact it is not exception safe. Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:259,integrability,event,event,259,"> the performance of the llvm::SmallVector comes from the fact it is not exception safe. Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:6,performance,perform,performance,6,"> the performance of the llvm::SmallVector comes from the fact it is not exception safe. Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:126,performance,perform,performance,126,"> the performance of the llvm::SmallVector comes from the fact it is not exception safe. Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:184,performance,optimiz,optimization,184,"> the performance of the llvm::SmallVector comes from the fact it is not exception safe. Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:73,safety,except,exception,73,"> the performance of the llvm::SmallVector comes from the fact it is not exception safe. Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:83,safety,safe,safe,83,"> the performance of the llvm::SmallVector comes from the fact it is not exception safe. Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:6,usability,perform,performance,6,"> the performance of the llvm::SmallVector comes from the fact it is not exception safe. Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:126,usability,perform,performance,126,"> the performance of the llvm::SmallVector comes from the fact it is not exception safe. Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:931,deployability,stack,stack,931,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:192,energy efficiency,optim,optimization,192,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:212,energy efficiency,reduc,reduces,212,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:239,energy efficiency,alloc,allocations,239,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:683,energy efficiency,optim,optimization,683,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:898,energy efficiency,alloc,allocate,898,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:185,integrability,buffer,buffer,185,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:267,integrability,event,event,267,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:676,integrability,buffer,buffer,676,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:722,integrability,wrap,wrapper,722,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:828,integrability,wrap,wrapper,828,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:722,interoperability,wrapper,wrapper,722,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:828,interoperability,wrapper,wrapper,828,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:8,performance,perform,performance,8,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:134,performance,perform,performance,134,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:192,performance,optimiz,optimization,192,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:683,performance,optimiz,optimization,683,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:1032,performance,perform,performance,1032,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:75,safety,except,exception,75,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:85,safety,safe,safe,85,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:362,safety,except,exception,362,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:1104,safety,except,exception,1104,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:1114,safety,safe,safe,1114,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:8,usability,perform,performance,8,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:134,usability,perform,performance,134,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:372,usability,support,support,372,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:503,usability,document,documentation,503,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:1032,usability,perform,performance,1032,"> > the performance of the llvm::SmallVector comes from the fact it is not exception safe. > . > Can you elaborate a bit? For us, the performance boost in RVec 2.0 comes from the small buffer optimization, which reduces the amount of heap allocations during analysis event loops. The implementation of SmallVector in llvm assumes it is used in codebases without exception support (like llvm itself). Thus the implementation can make some assumptions which the general std::vector cannot. See some terse documentation [here](https://llvm.org/doxygen/classllvm_1_1SmallVector.html). There are two things I'd encourage you to try and see if you can reach the same level of small buffer optimization as you got now:. * Make a wrapper class which always takes an assumed size over std::vector and call std::vector::reserve. * Make a wrapper class which takes a template argument assumed size and try to allocate the assumed size on the stack, if it exceeds that, call underlying std::vector and move things there. If either gets similar performance that'd be probably better approach in my opinion as it'd be exception safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:1093,availability,state,state,1093,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:573,energy efficiency,alloc,allocator,573,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:596,energy efficiency,current,current,596,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:688,energy efficiency,current,current,688,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:522,integrability,buffer,buffers,522,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:1093,integrability,state,state,1093,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:515,performance,memor,memory,515,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:850,performance,perform,perform,850,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:858,performance,I/O,I/O,858,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:918,performance,I/O,I/O,918,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:84,reliability,doe,does,84,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:20,safety,except,exception,20,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:30,safety,safe,safe,30,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:143,safety,except,exception,143,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:153,safety,safe,safe,153,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:798,safety,compl,complex,798,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:893,safety,compl,complicates,893,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:1178,safety,except,exception,1178,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:1188,safety,safe,safe,1188,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:798,security,compl,complex,798,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:893,security,compl,complicates,893,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:1208,testability,context,context,1208,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:515,usability,memor,memory,515,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:566,usability,custom,custom,566,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:850,usability,perform,perform,850,"@vgvassilev if ""not exception safe"" here means w.r.t. `bad_allocs`, ROOT in general does not care (nothing works in that case anyway). If ""not exception safe"" means ""might leak if constructors of elements throw"", I don't think we care too much:. - RVec is mostly used with fundamental types . - anyway that's not a situation in which analyses can/want to keep running, typically. Regarding your alternative proposals: we can't use a vanilla `std::vector` as a workhorse because we want to be able to adopt existing memory buffers. That would require std::vector + a custom allocator (like in the current implementation of RVec) which is fairly tricky to implement correctly (in fact, the current implementation has [broken usecases](https://github.com/root-project/root/issues/6796)), and the more complex class layout makes it harder for RNTuple to perform I/O. `std::vector<bool>` weirdness complicates matters (and I/O) further. So the alternative is basically re-implementing vector-with-adoption-and-sbo ourselves. All considered I think we could be ok with leaving the object in a ""bad"" state in case the construction of vector elements throws (which I think is what ""not exception safe"" means in this context), for the two reasons mentioned above -- but I'd like @Axel-Naumann to make the call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:103,energy efficiency,optim,optimization,103,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:178,energy efficiency,adapt,adapted,178,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:96,integrability,buffer,buffer,96,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:178,integrability,adapt,adapted,178,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:178,interoperability,adapt,adapted,178,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:178,modifiability,adapt,adapted,178,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:298,modifiability,concern,concern,298,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:379,modifiability,concern,concern,379,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:103,performance,optimiz,optimization,103,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:33,safety,except,exception,33,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:43,safety,safe,safe,43,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:267,safety,except,exception,267,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:277,safety,safe,safety,277,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:298,testability,concern,concern,298,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:379,testability,concern,concern,379,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:16,energy efficiency,green,green,16,This is finally green and ready for a first round of review.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:53,safety,review,review,53,This is finally green and ready for a first round of review.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:53,testability,review,review,53,This is finally green and ready for a first round of review.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:433,deployability,log,logic,433,"I will make a push with the latest changes as soon as I solve the capacity-as-sentinel-for-ownership thing -- it's a bit tricky because the capacity is unsigned (so can't use -1 unless we change it to signed) and we can't use 0 because `clear()` happens to set the capacity and the size to 0 in the current implementation (and it's not easy to have `clear()` set the capacity to a more meaningful value without lowering a lot of the logic from `SmallVectorImpl` to `RVec`, as far as I can tell).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:299,energy efficiency,current,current,299,"I will make a push with the latest changes as soon as I solve the capacity-as-sentinel-for-ownership thing -- it's a bit tricky because the capacity is unsigned (so can't use -1 unless we change it to signed) and we can't use 0 because `clear()` happens to set the capacity and the size to 0 in the current implementation (and it's not easy to have `clear()` set the capacity to a more meaningful value without lowering a lot of the logic from `SmallVectorImpl` to `RVec`, as far as I can tell).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:433,safety,log,logic,433,"I will make a push with the latest changes as soon as I solve the capacity-as-sentinel-for-ownership thing -- it's a bit tricky because the capacity is unsigned (so can't use -1 unless we change it to signed) and we can't use 0 because `clear()` happens to set the capacity and the size to 0 in the current implementation (and it's not easy to have `clear()` set the capacity to a more meaningful value without lowering a lot of the logic from `SmallVectorImpl` to `RVec`, as far as I can tell).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:201,security,sign,signed,201,"I will make a push with the latest changes as soon as I solve the capacity-as-sentinel-for-ownership thing -- it's a bit tricky because the capacity is unsigned (so can't use -1 unless we change it to signed) and we can't use 0 because `clear()` happens to set the capacity and the size to 0 in the current implementation (and it's not easy to have `clear()` set the capacity to a more meaningful value without lowering a lot of the logic from `SmallVectorImpl` to `RVec`, as far as I can tell).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:433,security,log,logic,433,"I will make a push with the latest changes as soon as I solve the capacity-as-sentinel-for-ownership thing -- it's a bit tricky because the capacity is unsigned (so can't use -1 unless we change it to signed) and we can't use 0 because `clear()` happens to set the capacity and the size to 0 in the current implementation (and it's not easy to have `clear()` set the capacity to a more meaningful value without lowering a lot of the logic from `SmallVectorImpl` to `RVec`, as far as I can tell).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:433,testability,log,logic,433,"I will make a push with the latest changes as soon as I solve the capacity-as-sentinel-for-ownership thing -- it's a bit tricky because the capacity is unsigned (so can't use -1 unless we change it to signed) and we can't use 0 because `clear()` happens to set the capacity and the size to 0 in the current implementation (and it's not easy to have `clear()` set the capacity to a more meaningful value without lowering a lot of the logic from `SmallVectorImpl` to `RVec`, as far as I can tell).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:237,usability,clear,clear,237,"I will make a push with the latest changes as soon as I solve the capacity-as-sentinel-for-ownership thing -- it's a bit tricky because the capacity is unsigned (so can't use -1 unless we change it to signed) and we can't use 0 because `clear()` happens to set the capacity and the size to 0 in the current implementation (and it's not easy to have `clear()` set the capacity to a more meaningful value without lowering a lot of the logic from `SmallVectorImpl` to `RVec`, as far as I can tell).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:350,usability,clear,clear,350,"I will make a push with the latest changes as soon as I solve the capacity-as-sentinel-for-ownership thing -- it's a bit tricky because the capacity is unsigned (so can't use -1 unless we change it to signed) and we can't use 0 because `clear()` happens to set the capacity and the size to 0 in the current implementation (and it's not easy to have `clear()` set the capacity to a more meaningful value without lowering a lot of the logic from `SmallVectorImpl` to `RVec`, as far as I can tell).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:21,deployability,roll,roll,21,"Rebased on master to roll back some of the changes and instead follow Axel's suggestions:. - `fSize` and `fCapacity` are now signed integers. - `fCapacity == -1` signals we are in ""memory adoption"" mode. - `assert`s changed into `throw`s where possible. - added a `ARCHITECTURE.md` document that summarizes the design and purpose of the VecOps library. I am having some issues with adding the small buffer size as a template parameter of `RVec`: templated helper functions would need to change signature and I/O needs patching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:518,deployability,patch,patching,518,"Rebased on master to roll back some of the changes and instead follow Axel's suggestions:. - `fSize` and `fCapacity` are now signed integers. - `fCapacity == -1` signals we are in ""memory adoption"" mode. - `assert`s changed into `throw`s where possible. - added a `ARCHITECTURE.md` document that summarizes the design and purpose of the VecOps library. I am having some issues with adding the small buffer size as a template parameter of `RVec`: templated helper functions would need to change signature and I/O needs patching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:399,integrability,buffer,buffer,399,"Rebased on master to roll back some of the changes and instead follow Axel's suggestions:. - `fSize` and `fCapacity` are now signed integers. - `fCapacity == -1` signals we are in ""memory adoption"" mode. - `assert`s changed into `throw`s where possible. - added a `ARCHITECTURE.md` document that summarizes the design and purpose of the VecOps library. I am having some issues with adding the small buffer size as a template parameter of `RVec`: templated helper functions would need to change signature and I/O needs patching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:265,interoperability,ARCHITECTUR,ARCHITECTURE,265,"Rebased on master to roll back some of the changes and instead follow Axel's suggestions:. - `fSize` and `fCapacity` are now signed integers. - `fCapacity == -1` signals we are in ""memory adoption"" mode. - `assert`s changed into `throw`s where possible. - added a `ARCHITECTURE.md` document that summarizes the design and purpose of the VecOps library. I am having some issues with adding the small buffer size as a template parameter of `RVec`: templated helper functions would need to change signature and I/O needs patching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:425,modifiability,paramet,parameter,425,"Rebased on master to roll back some of the changes and instead follow Axel's suggestions:. - `fSize` and `fCapacity` are now signed integers. - `fCapacity == -1` signals we are in ""memory adoption"" mode. - `assert`s changed into `throw`s where possible. - added a `ARCHITECTURE.md` document that summarizes the design and purpose of the VecOps library. I am having some issues with adding the small buffer size as a template parameter of `RVec`: templated helper functions would need to change signature and I/O needs patching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:181,performance,memor,memory,181,"Rebased on master to roll back some of the changes and instead follow Axel's suggestions:. - `fSize` and `fCapacity` are now signed integers. - `fCapacity == -1` signals we are in ""memory adoption"" mode. - `assert`s changed into `throw`s where possible. - added a `ARCHITECTURE.md` document that summarizes the design and purpose of the VecOps library. I am having some issues with adding the small buffer size as a template parameter of `RVec`: templated helper functions would need to change signature and I/O needs patching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:508,performance,I/O,I/O,508,"Rebased on master to roll back some of the changes and instead follow Axel's suggestions:. - `fSize` and `fCapacity` are now signed integers. - `fCapacity == -1` signals we are in ""memory adoption"" mode. - `assert`s changed into `throw`s where possible. - added a `ARCHITECTURE.md` document that summarizes the design and purpose of the VecOps library. I am having some issues with adding the small buffer size as a template parameter of `RVec`: templated helper functions would need to change signature and I/O needs patching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:518,safety,patch,patching,518,"Rebased on master to roll back some of the changes and instead follow Axel's suggestions:. - `fSize` and `fCapacity` are now signed integers. - `fCapacity == -1` signals we are in ""memory adoption"" mode. - `assert`s changed into `throw`s where possible. - added a `ARCHITECTURE.md` document that summarizes the design and purpose of the VecOps library. I am having some issues with adding the small buffer size as a template parameter of `RVec`: templated helper functions would need to change signature and I/O needs patching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:125,security,sign,signed,125,"Rebased on master to roll back some of the changes and instead follow Axel's suggestions:. - `fSize` and `fCapacity` are now signed integers. - `fCapacity == -1` signals we are in ""memory adoption"" mode. - `assert`s changed into `throw`s where possible. - added a `ARCHITECTURE.md` document that summarizes the design and purpose of the VecOps library. I am having some issues with adding the small buffer size as a template parameter of `RVec`: templated helper functions would need to change signature and I/O needs patching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:162,security,sign,signals,162,"Rebased on master to roll back some of the changes and instead follow Axel's suggestions:. - `fSize` and `fCapacity` are now signed integers. - `fCapacity == -1` signals we are in ""memory adoption"" mode. - `assert`s changed into `throw`s where possible. - added a `ARCHITECTURE.md` document that summarizes the design and purpose of the VecOps library. I am having some issues with adding the small buffer size as a template parameter of `RVec`: templated helper functions would need to change signature and I/O needs patching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:494,security,sign,signature,494,"Rebased on master to roll back some of the changes and instead follow Axel's suggestions:. - `fSize` and `fCapacity` are now signed integers. - `fCapacity == -1` signals we are in ""memory adoption"" mode. - `assert`s changed into `throw`s where possible. - added a `ARCHITECTURE.md` document that summarizes the design and purpose of the VecOps library. I am having some issues with adding the small buffer size as a template parameter of `RVec`: templated helper functions would need to change signature and I/O needs patching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:518,security,patch,patching,518,"Rebased on master to roll back some of the changes and instead follow Axel's suggestions:. - `fSize` and `fCapacity` are now signed integers. - `fCapacity == -1` signals we are in ""memory adoption"" mode. - `assert`s changed into `throw`s where possible. - added a `ARCHITECTURE.md` document that summarizes the design and purpose of the VecOps library. I am having some issues with adding the small buffer size as a template parameter of `RVec`: templated helper functions would need to change signature and I/O needs patching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:207,testability,assert,assert,207,"Rebased on master to roll back some of the changes and instead follow Axel's suggestions:. - `fSize` and `fCapacity` are now signed integers. - `fCapacity == -1` signals we are in ""memory adoption"" mode. - `assert`s changed into `throw`s where possible. - added a `ARCHITECTURE.md` document that summarizes the design and purpose of the VecOps library. I am having some issues with adding the small buffer size as a template parameter of `RVec`: templated helper functions would need to change signature and I/O needs patching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:181,usability,memor,memory,181,"Rebased on master to roll back some of the changes and instead follow Axel's suggestions:. - `fSize` and `fCapacity` are now signed integers. - `fCapacity == -1` signals we are in ""memory adoption"" mode. - `assert`s changed into `throw`s where possible. - added a `ARCHITECTURE.md` document that summarizes the design and purpose of the VecOps library. I am having some issues with adding the small buffer size as a template parameter of `RVec`: templated helper functions would need to change signature and I/O needs patching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:282,usability,document,document,282,"Rebased on master to roll back some of the changes and instead follow Axel's suggestions:. - `fSize` and `fCapacity` are now signed integers. - `fCapacity == -1` signals we are in ""memory adoption"" mode. - `assert`s changed into `throw`s where possible. - added a `ARCHITECTURE.md` document that summarizes the design and purpose of the VecOps library. I am having some issues with adding the small buffer size as a template parameter of `RVec`: templated helper functions would need to change signature and I/O needs patching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:456,usability,help,helper,456,"Rebased on master to roll back some of the changes and instead follow Axel's suggestions:. - `fSize` and `fCapacity` are now signed integers. - `fCapacity == -1` signals we are in ""memory adoption"" mode. - `assert`s changed into `throw`s where possible. - added a `ARCHITECTURE.md` document that summarizes the design and purpose of the VecOps library. I am having some issues with adding the small buffer size as a template parameter of `RVec`: templated helper functions would need to change signature and I/O needs patching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:148,deployability,patch,patching,148,"> templated helper functions would need to change signature. yes, but I'd hope that this can be handled by passing `const baseclass &`? > I/O needs patching. Indeed. I/O shouldn't care but doesn't know about that :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:138,performance,I/O,I/O,138,"> templated helper functions would need to change signature. yes, but I'd hope that this can be handled by passing `const baseclass &`? > I/O needs patching. Indeed. I/O shouldn't care but doesn't know about that :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:166,performance,I/O,I/O,166,"> templated helper functions would need to change signature. yes, but I'd hope that this can be handled by passing `const baseclass &`? > I/O needs patching. Indeed. I/O shouldn't care but doesn't know about that :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:189,reliability,doe,doesn,189,"> templated helper functions would need to change signature. yes, but I'd hope that this can be handled by passing `const baseclass &`? > I/O needs patching. Indeed. I/O shouldn't care but doesn't know about that :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:148,safety,patch,patching,148,"> templated helper functions would need to change signature. yes, but I'd hope that this can be handled by passing `const baseclass &`? > I/O needs patching. Indeed. I/O shouldn't care but doesn't know about that :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:50,security,sign,signature,50,"> templated helper functions would need to change signature. yes, but I'd hope that this can be handled by passing `const baseclass &`? > I/O needs patching. Indeed. I/O shouldn't care but doesn't know about that :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:148,security,patch,patching,148,"> templated helper functions would need to change signature. yes, but I'd hope that this can be handled by passing `const baseclass &`? > I/O needs patching. Indeed. I/O shouldn't care but doesn't know about that :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:12,usability,help,helper,12,"> templated helper functions would need to change signature. yes, but I'd hope that this can be handled by passing `const baseclass &`? > I/O needs patching. Indeed. I/O shouldn't care but doesn't know about that :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:345,modifiability,paramet,parameters,345,"> yes, but I'd hope that this can be handled by passing `const baseclass &`? Yes, but we don't want to have to explain to users that they now have to program against `RVecImpl` in order to to use `RVec`. Also some things become fairly ugly, e.g. all existing forward declarations of RVec will break, and even if you fix them to use two template parameters template functions that only see the forward declaration will not compile anymore: https://godbolt.org/z/vGYqvGe63 . I need to dedicate some brain time to decide if we are ok with this or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:503,performance,time,time,503,"> yes, but I'd hope that this can be handled by passing `const baseclass &`? Yes, but we don't want to have to explain to users that they now have to program against `RVecImpl` in order to to use `RVec`. Also some things become fairly ugly, e.g. all existing forward declarations of RVec will break, and even if you fix them to use two template parameters template functions that only see the forward declaration will not compile anymore: https://godbolt.org/z/vGYqvGe63 . I need to dedicate some brain time to decide if we are ok with this or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:122,usability,user,users,122,"> yes, but I'd hope that this can be handled by passing `const baseclass &`? Yes, but we don't want to have to explain to users that they now have to program against `RVecImpl` in order to to use `RVec`. Also some things become fairly ugly, e.g. all existing forward declarations of RVec will break, and even if you fix them to use two template parameters template functions that only see the forward declaration will not compile anymore: https://godbolt.org/z/vGYqvGe63 . I need to dedicate some brain time to decide if we are ok with this or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:279,availability,operat,operators,279,"Rebased to fix conflicts, the last 3 commits are the only new ones. A type `RVecN` has been introduced which exposes the small buffer size as a template parameters, and `RVec` inherits publicly from it fixing the small buffer size to a reasonable value. For now all mathematical operators and helper functions still deal with `RVec`, simply switching everything to taking _and returning_ `RVecN` instead is a breaking change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:127,integrability,buffer,buffer,127,"Rebased to fix conflicts, the last 3 commits are the only new ones. A type `RVecN` has been introduced which exposes the small buffer size as a template parameters, and `RVec` inherits publicly from it fixing the small buffer size to a reasonable value. For now all mathematical operators and helper functions still deal with `RVec`, simply switching everything to taking _and returning_ `RVecN` instead is a breaking change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:185,integrability,pub,publicly,185,"Rebased to fix conflicts, the last 3 commits are the only new ones. A type `RVecN` has been introduced which exposes the small buffer size as a template parameters, and `RVec` inherits publicly from it fixing the small buffer size to a reasonable value. For now all mathematical operators and helper functions still deal with `RVec`, simply switching everything to taking _and returning_ `RVecN` instead is a breaking change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:219,integrability,buffer,buffer,219,"Rebased to fix conflicts, the last 3 commits are the only new ones. A type `RVecN` has been introduced which exposes the small buffer size as a template parameters, and `RVec` inherits publicly from it fixing the small buffer size to a reasonable value. For now all mathematical operators and helper functions still deal with `RVec`, simply switching everything to taking _and returning_ `RVecN` instead is a breaking change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:15,interoperability,conflict,conflicts,15,"Rebased to fix conflicts, the last 3 commits are the only new ones. A type `RVecN` has been introduced which exposes the small buffer size as a template parameters, and `RVec` inherits publicly from it fixing the small buffer size to a reasonable value. For now all mathematical operators and helper functions still deal with `RVec`, simply switching everything to taking _and returning_ `RVecN` instead is a breaking change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:153,modifiability,paramet,parameters,153,"Rebased to fix conflicts, the last 3 commits are the only new ones. A type `RVecN` has been introduced which exposes the small buffer size as a template parameters, and `RVec` inherits publicly from it fixing the small buffer size to a reasonable value. For now all mathematical operators and helper functions still deal with `RVec`, simply switching everything to taking _and returning_ `RVecN` instead is a breaking change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:176,modifiability,inherit,inherits,176,"Rebased to fix conflicts, the last 3 commits are the only new ones. A type `RVecN` has been introduced which exposes the small buffer size as a template parameters, and `RVec` inherits publicly from it fixing the small buffer size to a reasonable value. For now all mathematical operators and helper functions still deal with `RVec`, simply switching everything to taking _and returning_ `RVecN` instead is a breaking change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:109,security,expos,exposes,109,"Rebased to fix conflicts, the last 3 commits are the only new ones. A type `RVecN` has been introduced which exposes the small buffer size as a template parameters, and `RVec` inherits publicly from it fixing the small buffer size to a reasonable value. For now all mathematical operators and helper functions still deal with `RVec`, simply switching everything to taking _and returning_ `RVecN` instead is a breaking change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:334,testability,simpl,simply,334,"Rebased to fix conflicts, the last 3 commits are the only new ones. A type `RVecN` has been introduced which exposes the small buffer size as a template parameters, and `RVec` inherits publicly from it fixing the small buffer size to a reasonable value. For now all mathematical operators and helper functions still deal with `RVec`, simply switching everything to taking _and returning_ `RVecN` instead is a breaking change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:293,usability,help,helper,293,"Rebased to fix conflicts, the last 3 commits are the only new ones. A type `RVecN` has been introduced which exposes the small buffer size as a template parameters, and `RVec` inherits publicly from it fixing the small buffer size to a reasonable value. For now all mathematical operators and helper functions still deal with `RVec`, simply switching everything to taking _and returning_ `RVecN` instead is a breaking change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:334,usability,simpl,simply,334,"Rebased to fix conflicts, the last 3 commits are the only new ones. A type `RVecN` has been introduced which exposes the small buffer size as a template parameters, and `RVec` inherits publicly from it fixing the small buffer size to a reasonable value. For now all mathematical operators and helper functions still deal with `RVec`, simply switching everything to taking _and returning_ `RVecN` instead is a breaking change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:127,availability,failur,failures,127,"Benchmark numbers in the PR description have been updated to reflect the latest changes. The PR is not a WIP anymore, the test failures in `pyroot_dependency_versions` and `roottest_python_cpp_cpp` are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:50,deployability,updat,updated,50,"Benchmark numbers in the PR description have been updated to reflect the latest changes. The PR is not a WIP anymore, the test failures in `pyroot_dependency_versions` and `roottest_python_cpp_cpp` are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:127,deployability,fail,failures,127,"Benchmark numbers in the PR description have been updated to reflect the latest changes. The PR is not a WIP anymore, the test failures in `pyroot_dependency_versions` and `roottest_python_cpp_cpp` are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:127,performance,failur,failures,127,"Benchmark numbers in the PR description have been updated to reflect the latest changes. The PR is not a WIP anymore, the test failures in `pyroot_dependency_versions` and `roottest_python_cpp_cpp` are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:127,reliability,fail,failures,127,"Benchmark numbers in the PR description have been updated to reflect the latest changes. The PR is not a WIP anymore, the test failures in `pyroot_dependency_versions` and `roottest_python_cpp_cpp` are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:50,safety,updat,updated,50,"Benchmark numbers in the PR description have been updated to reflect the latest changes. The PR is not a WIP anymore, the test failures in `pyroot_dependency_versions` and `roottest_python_cpp_cpp` are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:122,safety,test,test,122,"Benchmark numbers in the PR description have been updated to reflect the latest changes. The PR is not a WIP anymore, the test failures in `pyroot_dependency_versions` and `roottest_python_cpp_cpp` are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:50,security,updat,updated,50,"Benchmark numbers in the PR description have been updated to reflect the latest changes. The PR is not a WIP anymore, the test failures in `pyroot_dependency_versions` and `roottest_python_cpp_cpp` are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:122,testability,test,test,122,"Benchmark numbers in the PR description have been updated to reflect the latest changes. The PR is not a WIP anymore, the test failures in `pyroot_dependency_versions` and `roottest_python_cpp_cpp` are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:23,interoperability,conflict,conflict,23,Rebased to fix a minor conflict,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:74,availability,failur,failure,74,The 32bit projectroot.math.vecops.test.gtest_math_vecops_test_vecops_rvec failure looks real?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:74,deployability,fail,failure,74,The 32bit projectroot.math.vecops.test.gtest_math_vecops_test_vecops_rvec failure looks real?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:74,performance,failur,failure,74,The 32bit projectroot.math.vecops.test.gtest_math_vecops_test_vecops_rvec failure looks real?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:74,reliability,fail,failure,74,The 32bit projectroot.math.vecops.test.gtest_math_vecops_test_vecops_rvec failure looks real?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:34,safety,test,test,34,The 32bit projectroot.math.vecops.test.gtest_math_vecops_test_vecops_rvec failure looks real?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:34,testability,test,test,34,The 32bit projectroot.math.vecops.test.gtest_math_vecops_test_vecops_rvec failure looks real?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:134,availability,error,errors,134,"Uhm but it looks like it failed to fetch after my latest force-push? So I'm not 100% sure what it's building. EDIT: ah no, the rebase errors come from a `git rebase --abort` that ""correctly fails"", as there is no failed rebase operation to abort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:227,availability,operat,operation,227,"Uhm but it looks like it failed to fetch after my latest force-push? So I'm not 100% sure what it's building. EDIT: ah no, the rebase errors come from a `git rebase --abort` that ""correctly fails"", as there is no failed rebase operation to abort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:25,deployability,fail,failed,25,"Uhm but it looks like it failed to fetch after my latest force-push? So I'm not 100% sure what it's building. EDIT: ah no, the rebase errors come from a `git rebase --abort` that ""correctly fails"", as there is no failed rebase operation to abort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:100,deployability,build,building,100,"Uhm but it looks like it failed to fetch after my latest force-push? So I'm not 100% sure what it's building. EDIT: ah no, the rebase errors come from a `git rebase --abort` that ""correctly fails"", as there is no failed rebase operation to abort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:190,deployability,fail,fails,190,"Uhm but it looks like it failed to fetch after my latest force-push? So I'm not 100% sure what it's building. EDIT: ah no, the rebase errors come from a `git rebase --abort` that ""correctly fails"", as there is no failed rebase operation to abort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:213,deployability,fail,failed,213,"Uhm but it looks like it failed to fetch after my latest force-push? So I'm not 100% sure what it's building. EDIT: ah no, the rebase errors come from a `git rebase --abort` that ""correctly fails"", as there is no failed rebase operation to abort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:134,performance,error,errors,134,"Uhm but it looks like it failed to fetch after my latest force-push? So I'm not 100% sure what it's building. EDIT: ah no, the rebase errors come from a `git rebase --abort` that ""correctly fails"", as there is no failed rebase operation to abort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:25,reliability,fail,failed,25,"Uhm but it looks like it failed to fetch after my latest force-push? So I'm not 100% sure what it's building. EDIT: ah no, the rebase errors come from a `git rebase --abort` that ""correctly fails"", as there is no failed rebase operation to abort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:190,reliability,fail,fails,190,"Uhm but it looks like it failed to fetch after my latest force-push? So I'm not 100% sure what it's building. EDIT: ah no, the rebase errors come from a `git rebase --abort` that ""correctly fails"", as there is no failed rebase operation to abort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:213,reliability,fail,failed,213,"Uhm but it looks like it failed to fetch after my latest force-push? So I'm not 100% sure what it's building. EDIT: ah no, the rebase errors come from a `git rebase --abort` that ""correctly fails"", as there is no failed rebase operation to abort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:134,safety,error,errors,134,"Uhm but it looks like it failed to fetch after my latest force-push? So I'm not 100% sure what it's building. EDIT: ah no, the rebase errors come from a `git rebase --abort` that ""correctly fails"", as there is no failed rebase operation to abort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:134,usability,error,errors,134,"Uhm but it looks like it failed to fetch after my latest force-push? So I'm not 100% sure what it's building. EDIT: ah no, the rebase errors come from a `git rebase --abort` that ""correctly fails"", as there is no failed rebase operation to abort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:42,deployability,build,builds,42,"The testing condition was wrong for 32bit builds, see last commit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:4,safety,test,testing,4,"The testing condition was wrong for 32bit builds, see last commit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7502:4,testability,test,testing,4,"The testing condition was wrong for 32bit builds, see last commit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502
https://github.com/root-project/root/pull/7504:12,usability,prefer,prefer,12,Thanks! I'd prefer to have #6955 merged instead. I'll take a look at the older one.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7504
https://github.com/root-project/root/issues/7507:73,reliability,doe,does,73,"No, I mean last `if` block. It create new string, concatenate names, but does not use this string. And made exactly same call again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7507
https://github.com/root-project/root/pull/7508:383,availability,error,errors,383,"> The travis-ci/pr result (clang-tidy) seems relevant (point to potential pre-existing problem). @Axel-Naumann @pcanal . 80-90% of messages from clang-tidy are false positives or not very important (like unused variables). And in case of `travis-ci/pr` it only reports about lines which are changed in PRs. Therefore it useless now. Probably, one should enable only really important errors from clang-tidy (like memory leak or wrong delete operator), but make them more prominent in PRs - send message in the thread like Jenkins does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7508
https://github.com/root-project/root/pull/7508:440,availability,operat,operator,440,"> The travis-ci/pr result (clang-tidy) seems relevant (point to potential pre-existing problem). @Axel-Naumann @pcanal . 80-90% of messages from clang-tidy are false positives or not very important (like unused variables). And in case of `travis-ci/pr` it only reports about lines which are changed in PRs. Therefore it useless now. Probably, one should enable only really important errors from clang-tidy (like memory leak or wrong delete operator), but make them more prominent in PRs - send message in the thread like Jenkins does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7508
https://github.com/root-project/root/pull/7508:131,integrability,messag,messages,131,"> The travis-ci/pr result (clang-tidy) seems relevant (point to potential pre-existing problem). @Axel-Naumann @pcanal . 80-90% of messages from clang-tidy are false positives or not very important (like unused variables). And in case of `travis-ci/pr` it only reports about lines which are changed in PRs. Therefore it useless now. Probably, one should enable only really important errors from clang-tidy (like memory leak or wrong delete operator), but make them more prominent in PRs - send message in the thread like Jenkins does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7508
https://github.com/root-project/root/pull/7508:494,integrability,messag,message,494,"> The travis-ci/pr result (clang-tidy) seems relevant (point to potential pre-existing problem). @Axel-Naumann @pcanal . 80-90% of messages from clang-tidy are false positives or not very important (like unused variables). And in case of `travis-ci/pr` it only reports about lines which are changed in PRs. Therefore it useless now. Probably, one should enable only really important errors from clang-tidy (like memory leak or wrong delete operator), but make them more prominent in PRs - send message in the thread like Jenkins does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7508
https://github.com/root-project/root/pull/7508:131,interoperability,messag,messages,131,"> The travis-ci/pr result (clang-tidy) seems relevant (point to potential pre-existing problem). @Axel-Naumann @pcanal . 80-90% of messages from clang-tidy are false positives or not very important (like unused variables). And in case of `travis-ci/pr` it only reports about lines which are changed in PRs. Therefore it useless now. Probably, one should enable only really important errors from clang-tidy (like memory leak or wrong delete operator), but make them more prominent in PRs - send message in the thread like Jenkins does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7508
https://github.com/root-project/root/pull/7508:494,interoperability,messag,message,494,"> The travis-ci/pr result (clang-tidy) seems relevant (point to potential pre-existing problem). @Axel-Naumann @pcanal . 80-90% of messages from clang-tidy are false positives or not very important (like unused variables). And in case of `travis-ci/pr` it only reports about lines which are changed in PRs. Therefore it useless now. Probably, one should enable only really important errors from clang-tidy (like memory leak or wrong delete operator), but make them more prominent in PRs - send message in the thread like Jenkins does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7508
https://github.com/root-project/root/pull/7508:211,modifiability,variab,variables,211,"> The travis-ci/pr result (clang-tidy) seems relevant (point to potential pre-existing problem). @Axel-Naumann @pcanal . 80-90% of messages from clang-tidy are false positives or not very important (like unused variables). And in case of `travis-ci/pr` it only reports about lines which are changed in PRs. Therefore it useless now. Probably, one should enable only really important errors from clang-tidy (like memory leak or wrong delete operator), but make them more prominent in PRs - send message in the thread like Jenkins does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7508
https://github.com/root-project/root/pull/7508:383,performance,error,errors,383,"> The travis-ci/pr result (clang-tidy) seems relevant (point to potential pre-existing problem). @Axel-Naumann @pcanal . 80-90% of messages from clang-tidy are false positives or not very important (like unused variables). And in case of `travis-ci/pr` it only reports about lines which are changed in PRs. Therefore it useless now. Probably, one should enable only really important errors from clang-tidy (like memory leak or wrong delete operator), but make them more prominent in PRs - send message in the thread like Jenkins does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7508
https://github.com/root-project/root/pull/7508:412,performance,memor,memory,412,"> The travis-ci/pr result (clang-tidy) seems relevant (point to potential pre-existing problem). @Axel-Naumann @pcanal . 80-90% of messages from clang-tidy are false positives or not very important (like unused variables). And in case of `travis-ci/pr` it only reports about lines which are changed in PRs. Therefore it useless now. Probably, one should enable only really important errors from clang-tidy (like memory leak or wrong delete operator), but make them more prominent in PRs - send message in the thread like Jenkins does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7508
https://github.com/root-project/root/pull/7508:529,reliability,doe,does,529,"> The travis-ci/pr result (clang-tidy) seems relevant (point to potential pre-existing problem). @Axel-Naumann @pcanal . 80-90% of messages from clang-tidy are false positives or not very important (like unused variables). And in case of `travis-ci/pr` it only reports about lines which are changed in PRs. Therefore it useless now. Probably, one should enable only really important errors from clang-tidy (like memory leak or wrong delete operator), but make them more prominent in PRs - send message in the thread like Jenkins does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7508
https://github.com/root-project/root/pull/7508:383,safety,error,errors,383,"> The travis-ci/pr result (clang-tidy) seems relevant (point to potential pre-existing problem). @Axel-Naumann @pcanal . 80-90% of messages from clang-tidy are false positives or not very important (like unused variables). And in case of `travis-ci/pr` it only reports about lines which are changed in PRs. Therefore it useless now. Probably, one should enable only really important errors from clang-tidy (like memory leak or wrong delete operator), but make them more prominent in PRs - send message in the thread like Jenkins does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7508
https://github.com/root-project/root/pull/7508:383,usability,error,errors,383,"> The travis-ci/pr result (clang-tidy) seems relevant (point to potential pre-existing problem). @Axel-Naumann @pcanal . 80-90% of messages from clang-tidy are false positives or not very important (like unused variables). And in case of `travis-ci/pr` it only reports about lines which are changed in PRs. Therefore it useless now. Probably, one should enable only really important errors from clang-tidy (like memory leak or wrong delete operator), but make them more prominent in PRs - send message in the thread like Jenkins does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7508
https://github.com/root-project/root/pull/7508:412,usability,memor,memory,412,"> The travis-ci/pr result (clang-tidy) seems relevant (point to potential pre-existing problem). @Axel-Naumann @pcanal . 80-90% of messages from clang-tidy are false positives or not very important (like unused variables). And in case of `travis-ci/pr` it only reports about lines which are changed in PRs. Therefore it useless now. Probably, one should enable only really important errors from clang-tidy (like memory leak or wrong delete operator), but make them more prominent in PRs - send message in the thread like Jenkins does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7508
https://github.com/root-project/root/pull/7517:58,integrability,coupl,couple,58,"No, that won't do. (I'd appreciate if you could try out a couple of C++ tutorials / exercises first - it's hard for us to bring you up to speed through PRs. Here, the return type is not matching the return expression.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7517
https://github.com/root-project/root/pull/7517:58,modifiability,coupl,couple,58,"No, that won't do. (I'd appreciate if you could try out a couple of C++ tutorials / exercises first - it's hard for us to bring you up to speed through PRs. Here, the return type is not matching the return expression.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7517
https://github.com/root-project/root/pull/7517:58,testability,coupl,couple,58,"No, that won't do. (I'd appreciate if you could try out a couple of C++ tutorials / exercises first - it's hard for us to bring you up to speed through PRs. Here, the return type is not matching the return expression.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7517
https://github.com/root-project/root/pull/7517:60,integrability,coupl,couple,60,"> No, that won't do. (I'd appreciate if you could try out a couple of C++ tutorials / exercises first - it's hard for us to bring you up to speed through PRs. Here, the return type is not matching the return expression.). Ah ok. Thanks for the advice",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7517
https://github.com/root-project/root/pull/7517:60,modifiability,coupl,couple,60,"> No, that won't do. (I'd appreciate if you could try out a couple of C++ tutorials / exercises first - it's hard for us to bring you up to speed through PRs. Here, the return type is not matching the return expression.). Ah ok. Thanks for the advice",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7517
https://github.com/root-project/root/pull/7517:60,testability,coupl,couple,60,"> No, that won't do. (I'd appreciate if you could try out a couple of C++ tutorials / exercises first - it's hard for us to bring you up to speed through PRs. Here, the return type is not matching the return expression.). Ah ok. Thanks for the advice",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7517
https://github.com/root-project/root/issues/7518:122,availability,operat,operation,122,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:254,availability,avail,available,254,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:421,availability,avail,available,421,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:445,availability,error,errors,445,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:453,availability,error,error,453,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:81,deployability,automat,automatically,81,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:413,deployability,version,version,413,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:267,energy efficiency,CPU,CPU,267,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:275,energy efficiency,GPU,GPU,275,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:409,energy efficiency,GPU,GPU,409,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:1002,energy efficiency,core,core,1002,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:413,integrability,version,version,413,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:459,integrability,messag,messages,459,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:884,integrability,inject,injected,884,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:459,interoperability,messag,messages,459,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:413,modifiability,version,version,413,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:267,performance,CPU,CPU,267,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:275,performance,GPU,GPU,275,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:409,performance,GPU,GPU,409,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:445,performance,error,errors,445,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:453,performance,error,error,453,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:254,reliability,availab,available,254,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:421,reliability,availab,available,421,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:254,safety,avail,available,254,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:421,safety,avail,available,421,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:445,safety,error,errors,445,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:453,safety,error,error,453,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:254,security,availab,available,254,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:421,security,availab,available,421,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:884,security,inject,injected,884,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:81,testability,automat,automatically,81,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:109,testability,simpl,simplify,109,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:109,usability,simpl,simplify,109,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:445,usability,error,errors,445,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7518:453,usability,error,error,453,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling. * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214). * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518
https://github.com/root-project/root/issues/7525:1616,availability,operat,operator,1616,"src/TDocDirective.cxx:647. 3: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:648. 4: Left side of '||' is false in /opt/root_src/html/src/TDocDirective.cxx:647. 5: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:649. 6: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:647. 7: Assuming 'wasBatch' is true in /opt/root_src/html/src/TDocDirective.cxx:657. 8: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:657. 9: Assuming field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:661. 10: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:661. 11: Field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:665. 12: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:665. 13: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:688. 14: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:688. 15: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 16: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 17: Assuming field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 18: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 19: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 20: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 21: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 22: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 23: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 24: Field 'fSepIsRegexp' is false in /opt/root_src/html/src/TDocDirective.cxx:696. 25: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:696. 26: Taking true branch in /opt/root_src/html/src/T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:2258,availability,operat,operator,2258,"cDirective.cxx:661. 11: Field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:665. 12: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:665. 13: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:688. 14: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:688. 15: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 16: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 17: Assuming field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 18: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 19: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 20: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 21: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 22: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 23: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 24: Field 'fSepIsRegexp' is false in /opt/root_src/html/src/TDocDirective.cxx:696. 25: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:696. 26: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:700. 27: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:719. 28: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:719. 29: Assuming the condition is true in /opt/root_src/html/src/TDocDirective.cxx:723. 30: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:723. 31: 'strCol' is non-null in /opt/root_src/html/src/TDocDirective.cxx:727. 32: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:727. 33: Assuming 'heightLine' is >= 'heightLatex' in /opt/root_src/html/src/TDocDirective.cxx:729. 34: Taking false branch in /opt/root_src/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:3740,availability,operat,operator,3740,"branch in /opt/root_src/html/src/TDocDirective.cxx:719. 29: Assuming the condition is true in /opt/root_src/html/src/TDocDirective.cxx:723. 30: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:723. 31: 'strCol' is non-null in /opt/root_src/html/src/TDocDirective.cxx:727. 32: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:727. 33: Assuming 'heightLine' is >= 'heightLatex' in /opt/root_src/html/src/TDocDirective.cxx:729. 34: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:729. 35: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:730. 36: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:732. 37: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:732. 38: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:723. 39: Loop condition is false. Execution continues on line 736 in /opt/root_src/html/src/TDocDirective.cxx:723. 40: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 41: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 42: Field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 43: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 44: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 45: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 46: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 47: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 48: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 49: 'split' initialized to a null pointer value in /opt/root_src/html/src/TDocDirective.cxx:695. 50: Assuming field 'fSepIsRegexp' is true in /opt/root_src/html/src/TDocDirective.cxx:696. 51: Taking false branch in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:4373,availability,operat,operator,4373,"ng the condition is false in /opt/root_src/html/src/TDocDirective.cxx:732. 37: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:732. 38: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:723. 39: Loop condition is false. Execution continues on line 736 in /opt/root_src/html/src/TDocDirective.cxx:723. 40: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 41: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 42: Field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 43: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 44: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 45: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 46: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 47: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 48: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 49: 'split' initialized to a null pointer value in /opt/root_src/html/src/TDocDirective.cxx:695. 50: Assuming field 'fSepIsRegexp' is true in /opt/root_src/html/src/TDocDirective.cxx:696. 51: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:696. 52: Calling 'TString::Length' in /opt/root_src/html/src/TDocDirective.cxx:700. 53: Assuming the condition is false in /opt/root_src/core/base/inc/TString.h:410. 54: '?' condition is false in /opt/root_src/core/base/inc/TString.h:410. 55: Returning value, which participates in a condition later in /opt/root_src/core/base/inc/TString.h:410. 56: Returning from 'TString::Length' in /opt/root_src/html/src/TDocDirective.cxx:700. 57: Assuming the condition is true in /opt/root_src/html/src/TDocDirective.cxx:700. 58: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:700. 59:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:3649,deployability,continu,continues,3649," the condition is false in /opt/root_src/html/src/TDocDirective.cxx:719. 28: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:719. 29: Assuming the condition is true in /opt/root_src/html/src/TDocDirective.cxx:723. 30: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:723. 31: 'strCol' is non-null in /opt/root_src/html/src/TDocDirective.cxx:727. 32: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:727. 33: Assuming 'heightLine' is >= 'heightLatex' in /opt/root_src/html/src/TDocDirective.cxx:729. 34: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:729. 35: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:730. 36: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:732. 37: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:732. 38: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:723. 39: Loop condition is false. Execution continues on line 736 in /opt/root_src/html/src/TDocDirective.cxx:723. 40: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 41: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 42: Field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 43: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 44: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 45: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 46: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 47: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 48: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 49: 'split' initialized to a null pointer value in /opt/root_src/html/src/TDocDirective.cxx:695. 50: Assuming field 'fSepIsR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:19,energy efficiency,core,core,19,"```. /opt/root_src/core/base/inc/TVersionCheck.h:31:1: warning: non-POD static (TVersionCheck) [clazy-non-pod-global-static]. /opt/root_src/html/src/TClassDocOutput.cxx:963:10: warning: Value stored to 'pos' is never read [clang-analyzer-deadcode.DeadStores]. 1: Value stored to 'pos' is never read in /opt/root_src/html/src/TClassDocOutput.cxx:963. /opt/root_src/html/src/TDocDirective.cxx:701:10: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]. 1: Assuming field 'fLatex' is non-null in /opt/root_src/html/src/TDocDirective.cxx:647. 2: Left side of '||' is false in /opt/root_src/html/src/TDocDirective.cxx:647. 3: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:648. 4: Left side of '||' is false in /opt/root_src/html/src/TDocDirective.cxx:647. 5: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:649. 6: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:647. 7: Assuming 'wasBatch' is true in /opt/root_src/html/src/TDocDirective.cxx:657. 8: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:657. 9: Assuming field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:661. 10: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:661. 11: Field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:665. 12: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:665. 13: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:688. 14: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:688. 15: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 16: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 17: Assuming field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 18: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 19: Returning pointer, which participates in a condition later in /opt/root_sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:458,energy efficiency,core,core,458,"```. /opt/root_src/core/base/inc/TVersionCheck.h:31:1: warning: non-POD static (TVersionCheck) [clazy-non-pod-global-static]. /opt/root_src/html/src/TClassDocOutput.cxx:963:10: warning: Value stored to 'pos' is never read [clang-analyzer-deadcode.DeadStores]. 1: Value stored to 'pos' is never read in /opt/root_src/html/src/TClassDocOutput.cxx:963. /opt/root_src/html/src/TDocDirective.cxx:701:10: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]. 1: Assuming field 'fLatex' is non-null in /opt/root_src/html/src/TDocDirective.cxx:647. 2: Left side of '||' is false in /opt/root_src/html/src/TDocDirective.cxx:647. 3: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:648. 4: Left side of '||' is false in /opt/root_src/html/src/TDocDirective.cxx:647. 5: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:649. 6: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:647. 7: Assuming 'wasBatch' is true in /opt/root_src/html/src/TDocDirective.cxx:657. 8: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:657. 9: Assuming field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:661. 10: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:661. 11: Field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:665. 12: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:665. 13: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:688. 14: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:688. 15: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 16: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 17: Assuming field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 18: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 19: Returning pointer, which participates in a condition later in /opt/root_sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:1720,energy efficiency,core,core,1720,"cxx:648. 4: Left side of '||' is false in /opt/root_src/html/src/TDocDirective.cxx:647. 5: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:649. 6: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:647. 7: Assuming 'wasBatch' is true in /opt/root_src/html/src/TDocDirective.cxx:657. 8: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:657. 9: Assuming field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:661. 10: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:661. 11: Field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:665. 12: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:665. 13: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:688. 14: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:688. 15: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 16: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 17: Assuming field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 18: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 19: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 20: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 21: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 22: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 23: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 24: Field 'fSepIsRegexp' is false in /opt/root_src/html/src/TDocDirective.cxx:696. 25: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:696. 26: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:700. 27: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:1813,energy efficiency,core,core,1813,"suming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:649. 6: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:647. 7: Assuming 'wasBatch' is true in /opt/root_src/html/src/TDocDirective.cxx:657. 8: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:657. 9: Assuming field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:661. 10: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:661. 11: Field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:665. 12: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:665. 13: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:688. 14: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:688. 15: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 16: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 17: Assuming field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 18: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 19: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 20: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 21: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 22: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 23: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 24: Field 'fSepIsRegexp' is false in /opt/root_src/html/src/TDocDirective.cxx:696. 25: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:696. 26: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:700. 27: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:719. 28: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:719. 29: Assuming th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:1889,energy efficiency,core,core,1889,"9. 6: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:647. 7: Assuming 'wasBatch' is true in /opt/root_src/html/src/TDocDirective.cxx:657. 8: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:657. 9: Assuming field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:661. 10: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:661. 11: Field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:665. 12: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:665. 13: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:688. 14: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:688. 15: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 16: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 17: Assuming field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 18: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 19: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 20: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 21: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 22: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 23: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 24: Field 'fSepIsRegexp' is false in /opt/root_src/html/src/TDocDirective.cxx:696. 25: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:696. 26: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:700. 27: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:719. 28: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:719. 29: Assuming the condition is true in /opt/root_src/html/src/TDocDirective.cxx:723. 30: Loo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:2002,energy efficiency,core,core,2002,"/root_src/html/src/TDocDirective.cxx:657. 8: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:657. 9: Assuming field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:661. 10: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:661. 11: Field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:665. 12: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:665. 13: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:688. 14: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:688. 15: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 16: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 17: Assuming field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 18: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 19: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 20: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 21: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 22: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 23: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 24: Field 'fSepIsRegexp' is false in /opt/root_src/html/src/TDocDirective.cxx:696. 25: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:696. 26: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:700. 27: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:719. 28: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:719. 29: Assuming the condition is true in /opt/root_src/html/src/TDocDirective.cxx:723. 30: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:723. 31: 'strCol' is non-null",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:2085,energy efficiency,core,core,2085,"tml/src/TDocDirective.cxx:657. 9: Assuming field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:661. 10: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:661. 11: Field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:665. 12: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:665. 13: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:688. 14: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:688. 15: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 16: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 17: Assuming field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 18: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 19: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 20: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 21: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 22: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 23: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 24: Field 'fSepIsRegexp' is false in /opt/root_src/html/src/TDocDirective.cxx:696. 25: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:696. 26: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:700. 27: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:719. 28: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:719. 29: Assuming the condition is true in /opt/root_src/html/src/TDocDirective.cxx:723. 30: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:723. 31: 'strCol' is non-null in /opt/root_src/html/src/TDocDirective.cxx:727. 32: Taking true branch in /opt/ro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:2198,energy efficiency,core,core,2198,"cxx:661. 10: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:661. 11: Field 'fBBCanvas' is non-null in /opt/root_src/html/src/TDocDirective.cxx:665. 12: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:665. 13: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:688. 14: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:688. 15: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 16: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 17: Assuming field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 18: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 19: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 20: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 21: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 22: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 23: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 24: Field 'fSepIsRegexp' is false in /opt/root_src/html/src/TDocDirective.cxx:696. 25: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:696. 26: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:700. 27: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:719. 28: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:719. 29: Assuming the condition is true in /opt/root_src/html/src/TDocDirective.cxx:723. 30: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:723. 31: 'strCol' is non-null in /opt/root_src/html/src/TDocDirective.cxx:727. 32: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:727. 33: Assuming 'heightLine' is >= 'heightLatex' in /opt/root_src/html/src/TD",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:3844,energy efficiency,core,core,3844,"t_src/html/src/TDocDirective.cxx:723. 30: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:723. 31: 'strCol' is non-null in /opt/root_src/html/src/TDocDirective.cxx:727. 32: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:727. 33: Assuming 'heightLine' is >= 'heightLatex' in /opt/root_src/html/src/TDocDirective.cxx:729. 34: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:729. 35: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:730. 36: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:732. 37: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:732. 38: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:723. 39: Loop condition is false. Execution continues on line 736 in /opt/root_src/html/src/TDocDirective.cxx:723. 40: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 41: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 42: Field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 43: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 44: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 45: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 46: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 47: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 48: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 49: 'split' initialized to a null pointer value in /opt/root_src/html/src/TDocDirective.cxx:695. 50: Assuming field 'fSepIsRegexp' is true in /opt/root_src/html/src/TDocDirective.cxx:696. 51: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:696. 52: Calling 'TString::Length' in /opt/root_src/html/src",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:3928,energy efficiency,core,core,3928," in /opt/root_src/html/src/TDocDirective.cxx:723. 31: 'strCol' is non-null in /opt/root_src/html/src/TDocDirective.cxx:727. 32: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:727. 33: Assuming 'heightLine' is >= 'heightLatex' in /opt/root_src/html/src/TDocDirective.cxx:729. 34: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:729. 35: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:730. 36: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:732. 37: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:732. 38: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:723. 39: Loop condition is false. Execution continues on line 736 in /opt/root_src/html/src/TDocDirective.cxx:723. 40: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 41: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 42: Field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 43: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 44: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 45: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 46: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 47: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 48: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 49: 'split' initialized to a null pointer value in /opt/root_src/html/src/TDocDirective.cxx:695. 50: Assuming field 'fSepIsRegexp' is true in /opt/root_src/html/src/TDocDirective.cxx:696. 51: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:696. 52: Calling 'TString::Length' in /opt/root_src/html/src/TDocDirective.cxx:700. 53: Assuming the condition is false in /opt/root_src/core/ba",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:4004,energy efficiency,core,core,4004,"n /opt/root_src/html/src/TDocDirective.cxx:727. 32: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:727. 33: Assuming 'heightLine' is >= 'heightLatex' in /opt/root_src/html/src/TDocDirective.cxx:729. 34: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:729. 35: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:730. 36: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:732. 37: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:732. 38: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:723. 39: Loop condition is false. Execution continues on line 736 in /opt/root_src/html/src/TDocDirective.cxx:723. 40: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 41: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 42: Field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 43: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 44: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 45: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 46: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 47: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 48: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 49: 'split' initialized to a null pointer value in /opt/root_src/html/src/TDocDirective.cxx:695. 50: Assuming field 'fSepIsRegexp' is true in /opt/root_src/html/src/TDocDirective.cxx:696. 51: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:696. 52: Calling 'TString::Length' in /opt/root_src/html/src/TDocDirective.cxx:700. 53: Assuming the condition is false in /opt/root_src/core/base/inc/TString.h:410. 54: '?' condition is false in /opt/root_src/core/base/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:4117,energy efficiency,core,core,4117,"x:727. 33: Assuming 'heightLine' is >= 'heightLatex' in /opt/root_src/html/src/TDocDirective.cxx:729. 34: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:729. 35: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:730. 36: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:732. 37: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:732. 38: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:723. 39: Loop condition is false. Execution continues on line 736 in /opt/root_src/html/src/TDocDirective.cxx:723. 40: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 41: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 42: Field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 43: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 44: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 45: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 46: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 47: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 48: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 49: 'split' initialized to a null pointer value in /opt/root_src/html/src/TDocDirective.cxx:695. 50: Assuming field 'fSepIsRegexp' is true in /opt/root_src/html/src/TDocDirective.cxx:696. 51: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:696. 52: Calling 'TString::Length' in /opt/root_src/html/src/TDocDirective.cxx:700. 53: Assuming the condition is false in /opt/root_src/core/base/inc/TString.h:410. 54: '?' condition is false in /opt/root_src/core/base/inc/TString.h:410. 55: Returning value, which participates in a condition later in /opt/root_src/core/base/inc/TS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:4200,energy efficiency,core,core,4200,"Directive.cxx:729. 34: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:729. 35: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:730. 36: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:732. 37: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:732. 38: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:723. 39: Loop condition is false. Execution continues on line 736 in /opt/root_src/html/src/TDocDirective.cxx:723. 40: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 41: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 42: Field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 43: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 44: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 45: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 46: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 47: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 48: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 49: 'split' initialized to a null pointer value in /opt/root_src/html/src/TDocDirective.cxx:695. 50: Assuming field 'fSepIsRegexp' is true in /opt/root_src/html/src/TDocDirective.cxx:696. 51: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:696. 52: Calling 'TString::Length' in /opt/root_src/html/src/TDocDirective.cxx:700. 53: Assuming the condition is false in /opt/root_src/core/base/inc/TString.h:410. 54: '?' condition is false in /opt/root_src/core/base/inc/TString.h:410. 55: Returning value, which participates in a condition later in /opt/root_src/core/base/inc/TString.h:410. 56: Returning from 'TString::Length' in /opt/root_src/html/src/TDocDir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:4313,energy efficiency,core,core,4313,"ch in /opt/root_src/html/src/TDocDirective.cxx:730. 36: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:732. 37: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:732. 38: Assuming the condition is false in /opt/root_src/html/src/TDocDirective.cxx:723. 39: Loop condition is false. Execution continues on line 736 in /opt/root_src/html/src/TDocDirective.cxx:723. 40: Calling 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 41: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 42: Field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249. 43: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 44: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 45: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 46: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 47: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 48: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 49: 'split' initialized to a null pointer value in /opt/root_src/html/src/TDocDirective.cxx:695. 50: Assuming field 'fSepIsRegexp' is true in /opt/root_src/html/src/TDocDirective.cxx:696. 51: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:696. 52: Calling 'TString::Length' in /opt/root_src/html/src/TDocDirective.cxx:700. 53: Assuming the condition is false in /opt/root_src/core/base/inc/TString.h:410. 54: '?' condition is false in /opt/root_src/core/base/inc/TString.h:410. 55: Returning value, which participates in a condition later in /opt/root_src/core/base/inc/TString.h:410. 56: Returning from 'TString::Length' in /opt/root_src/html/src/TDocDirective.cxx:700. 57: Assuming the condition is true in /opt/root_src/html/src/TDocDirective.cxx:700. 58: Taking tr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:4923,energy efficiency,core,core,4923,"rc/core/cont/inc/TCollection.h:249. 43: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249. 44: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 45: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 46: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 47: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 48: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 49: 'split' initialized to a null pointer value in /opt/root_src/html/src/TDocDirective.cxx:695. 50: Assuming field 'fSepIsRegexp' is true in /opt/root_src/html/src/TDocDirective.cxx:696. 51: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:696. 52: Calling 'TString::Length' in /opt/root_src/html/src/TDocDirective.cxx:700. 53: Assuming the condition is false in /opt/root_src/core/base/inc/TString.h:410. 54: '?' condition is false in /opt/root_src/core/base/inc/TString.h:410. 55: Returning value, which participates in a condition later in /opt/root_src/core/base/inc/TString.h:410. 56: Returning from 'TString::Length' in /opt/root_src/html/src/TDocDirective.cxx:700. 57: Assuming the condition is true in /opt/root_src/html/src/TDocDirective.cxx:700. 58: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:700. 59: Called C++ object pointer is null in /opt/root_src/html/src/TDocDirective.cxx:701. /opt/root_src/html/src/TDocParser.cxx:157:4: warning: Call to virtual method 'TDocParser::InitKeywords' during construction bypasses virtual dispatch [clang-analyzer-optin.cplusplus.VirtualCall]. 1: Call to virtual method 'TDocParser::InitKeywords' during construction bypasses virtual dispatch in /opt/root_src/html/src/TDocParser.cxx:157. /opt/root_src/html/src/TDocParser.cxx:197:4: warning: Call to virtual method 'TDocParser::InitKeywords' during construction",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:4996,energy efficiency,core,core,4996,"t_src/core/cont/inc/TCollection.h:249. 44: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249. 45: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 46: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 47: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 48: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 49: 'split' initialized to a null pointer value in /opt/root_src/html/src/TDocDirective.cxx:695. 50: Assuming field 'fSepIsRegexp' is true in /opt/root_src/html/src/TDocDirective.cxx:696. 51: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:696. 52: Calling 'TString::Length' in /opt/root_src/html/src/TDocDirective.cxx:700. 53: Assuming the condition is false in /opt/root_src/core/base/inc/TString.h:410. 54: '?' condition is false in /opt/root_src/core/base/inc/TString.h:410. 55: Returning value, which participates in a condition later in /opt/root_src/core/base/inc/TString.h:410. 56: Returning from 'TString::Length' in /opt/root_src/html/src/TDocDirective.cxx:700. 57: Assuming the condition is true in /opt/root_src/html/src/TDocDirective.cxx:700. 58: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:700. 59: Called C++ object pointer is null in /opt/root_src/html/src/TDocDirective.cxx:701. /opt/root_src/html/src/TDocParser.cxx:157:4: warning: Call to virtual method 'TDocParser::InitKeywords' during construction bypasses virtual dispatch [clang-analyzer-optin.cplusplus.VirtualCall]. 1: Call to virtual method 'TDocParser::InitKeywords' during construction bypasses virtual dispatch in /opt/root_src/html/src/TDocParser.cxx:157. /opt/root_src/html/src/TDocParser.cxx:197:4: warning: Call to virtual method 'TDocParser::InitKeywords' during construction bypasses virtual dispatch [clang-analyzer-optin.cplusplus.VirtualCall]. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:5103,energy efficiency,core,core,5103,"pt/root_src/core/cont/inc/TCollection.h:249. 45: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248. 46: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248. 47: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 48: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 49: 'split' initialized to a null pointer value in /opt/root_src/html/src/TDocDirective.cxx:695. 50: Assuming field 'fSepIsRegexp' is true in /opt/root_src/html/src/TDocDirective.cxx:696. 51: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:696. 52: Calling 'TString::Length' in /opt/root_src/html/src/TDocDirective.cxx:700. 53: Assuming the condition is false in /opt/root_src/core/base/inc/TString.h:410. 54: '?' condition is false in /opt/root_src/core/base/inc/TString.h:410. 55: Returning value, which participates in a condition later in /opt/root_src/core/base/inc/TString.h:410. 56: Returning from 'TString::Length' in /opt/root_src/html/src/TDocDirective.cxx:700. 57: Assuming the condition is true in /opt/root_src/html/src/TDocDirective.cxx:700. 58: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:700. 59: Called C++ object pointer is null in /opt/root_src/html/src/TDocDirective.cxx:701. /opt/root_src/html/src/TDocParser.cxx:157:4: warning: Call to virtual method 'TDocParser::InitKeywords' during construction bypasses virtual dispatch [clang-analyzer-optin.cplusplus.VirtualCall]. 1: Call to virtual method 'TDocParser::InitKeywords' during construction bypasses virtual dispatch in /opt/root_src/html/src/TDocParser.cxx:157. /opt/root_src/html/src/TDocParser.cxx:197:4: warning: Call to virtual method 'TDocParser::InitKeywords' during construction bypasses virtual dispatch [clang-analyzer-optin.cplusplus.VirtualCall]. 1: Call to virtual method 'TDocParser::InitKeywords' during construction bypasses virtual dispatch in /opt/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7525:6157,energy efficiency,core,core,6157,"e/cont/inc/TCollection.h:248. 47: Returning from 'TIter::operator()' in /opt/root_src/html/src/TDocDirective.cxx:693. 48: Loop condition is true. Entering loop body in /opt/root_src/html/src/TDocDirective.cxx:693. 49: 'split' initialized to a null pointer value in /opt/root_src/html/src/TDocDirective.cxx:695. 50: Assuming field 'fSepIsRegexp' is true in /opt/root_src/html/src/TDocDirective.cxx:696. 51: Taking false branch in /opt/root_src/html/src/TDocDirective.cxx:696. 52: Calling 'TString::Length' in /opt/root_src/html/src/TDocDirective.cxx:700. 53: Assuming the condition is false in /opt/root_src/core/base/inc/TString.h:410. 54: '?' condition is false in /opt/root_src/core/base/inc/TString.h:410. 55: Returning value, which participates in a condition later in /opt/root_src/core/base/inc/TString.h:410. 56: Returning from 'TString::Length' in /opt/root_src/html/src/TDocDirective.cxx:700. 57: Assuming the condition is true in /opt/root_src/html/src/TDocDirective.cxx:700. 58: Taking true branch in /opt/root_src/html/src/TDocDirective.cxx:700. 59: Called C++ object pointer is null in /opt/root_src/html/src/TDocDirective.cxx:701. /opt/root_src/html/src/TDocParser.cxx:157:4: warning: Call to virtual method 'TDocParser::InitKeywords' during construction bypasses virtual dispatch [clang-analyzer-optin.cplusplus.VirtualCall]. 1: Call to virtual method 'TDocParser::InitKeywords' during construction bypasses virtual dispatch in /opt/root_src/html/src/TDocParser.cxx:157. /opt/root_src/html/src/TDocParser.cxx:197:4: warning: Call to virtual method 'TDocParser::InitKeywords' during construction bypasses virtual dispatch [clang-analyzer-optin.cplusplus.VirtualCall]. 1: Call to virtual method 'TDocParser::InitKeywords' during construction bypasses virtual dispatch in /opt/root_src/html/src/TDocParser.cxx:197. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/html/src/TClassDocOutput.cxx. /opt/root_src/html/src/TDocDirective.cxx. /opt/root_src/html/src/TDocParser.cxx. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7525
https://github.com/root-project/root/issues/7526:58,security,sign,significant,58,"Beside #7592 PR it is impossible to fix TMVA code without significant changes in the code. I guess, it is maximum we can do",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7526
https://github.com/root-project/root/issues/7527:680,deployability,continu,continues,680,```. /opt/root_src/core/base/inc/TVersionCheck.h:31:1: warning: non-POD static (TVersionCheck) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:49:1: warning: non-POD static (basic_string) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:224:4: warning: Potential leak of memory pointed to by 'jargv' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Taking false branch in /opt/root_src/main/src/nbmain.cxx:195. 2: Taking false branch in /opt/root_src/main/src/nbmain.cxx:204. 3: Memory is allocated in /opt/root_src/main/src/nbmain.cxx:213. 4: Assuming 'n' is >= 'argc' in /opt/root_src/main/src/nbmain.cxx:216. 5: Loop condition is false. Execution continues on line 218 in /opt/root_src/main/src/nbmain.cxx:216. 6: Potential leak of memory pointed to by 'jargv' in /opt/root_src/main/src/nbmain.cxx:224. /opt/root_src/main/src/pmain.cxx:59:11: warning: Potential leak of memory pointed to by 'ev' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Assuming 'argc' is >= 6 in /opt/root_src/main/src/pmain.cxx:178. 2: Taking true branch in /opt/root_src/main/src/pmain.cxx:178. 3: Calling 'ReadPutEnvs' in /opt/root_src/main/src/pmain.cxx:180. 4: Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:19,energy efficiency,core,core,19,```. /opt/root_src/core/base/inc/TVersionCheck.h:31:1: warning: non-POD static (TVersionCheck) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:49:1: warning: non-POD static (basic_string) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:224:4: warning: Potential leak of memory pointed to by 'jargv' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Taking false branch in /opt/root_src/main/src/nbmain.cxx:195. 2: Taking false branch in /opt/root_src/main/src/nbmain.cxx:204. 3: Memory is allocated in /opt/root_src/main/src/nbmain.cxx:213. 4: Assuming 'n' is >= 'argc' in /opt/root_src/main/src/nbmain.cxx:216. 5: Loop condition is false. Execution continues on line 218 in /opt/root_src/main/src/nbmain.cxx:216. 6: Potential leak of memory pointed to by 'jargv' in /opt/root_src/main/src/nbmain.cxx:224. /opt/root_src/main/src/pmain.cxx:59:11: warning: Potential leak of memory pointed to by 'ev' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Assuming 'argc' is >= 6 in /opt/root_src/main/src/pmain.cxx:178. 2: Taking true branch in /opt/root_src/main/src/pmain.cxx:178. 3: Calling 'ReadPutEnvs' in /opt/root_src/main/src/pmain.cxx:180. 4: Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:519,energy efficiency,alloc,allocated,519,```. /opt/root_src/core/base/inc/TVersionCheck.h:31:1: warning: non-POD static (TVersionCheck) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:49:1: warning: non-POD static (basic_string) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:224:4: warning: Potential leak of memory pointed to by 'jargv' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Taking false branch in /opt/root_src/main/src/nbmain.cxx:195. 2: Taking false branch in /opt/root_src/main/src/nbmain.cxx:204. 3: Memory is allocated in /opt/root_src/main/src/nbmain.cxx:213. 4: Assuming 'n' is >= 'argc' in /opt/root_src/main/src/nbmain.cxx:216. 5: Loop condition is false. Execution continues on line 218 in /opt/root_src/main/src/nbmain.cxx:216. 6: Potential leak of memory pointed to by 'jargv' in /opt/root_src/main/src/nbmain.cxx:224. /opt/root_src/main/src/pmain.cxx:59:11: warning: Potential leak of memory pointed to by 'ev' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Assuming 'argc' is >= 6 in /opt/root_src/main/src/pmain.cxx:178. 2: Taking true branch in /opt/root_src/main/src/pmain.cxx:178. 3: Calling 'ReadPutEnvs' in /opt/root_src/main/src/pmain.cxx:180. 4: Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:2366,energy efficiency,alloc,allocated,2366,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:3069,energy efficiency,core,core,3069,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:2636,integrability,buffer,buffer,2636,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:2892,integrability,buffer,buffer,2892,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:304,performance,memor,memory,304,```. /opt/root_src/core/base/inc/TVersionCheck.h:31:1: warning: non-POD static (TVersionCheck) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:49:1: warning: non-POD static (basic_string) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:224:4: warning: Potential leak of memory pointed to by 'jargv' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Taking false branch in /opt/root_src/main/src/nbmain.cxx:195. 2: Taking false branch in /opt/root_src/main/src/nbmain.cxx:204. 3: Memory is allocated in /opt/root_src/main/src/nbmain.cxx:213. 4: Assuming 'n' is >= 'argc' in /opt/root_src/main/src/nbmain.cxx:216. 5: Loop condition is false. Execution continues on line 218 in /opt/root_src/main/src/nbmain.cxx:216. 6: Potential leak of memory pointed to by 'jargv' in /opt/root_src/main/src/nbmain.cxx:224. /opt/root_src/main/src/pmain.cxx:59:11: warning: Potential leak of memory pointed to by 'ev' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Assuming 'argc' is >= 6 in /opt/root_src/main/src/pmain.cxx:178. 2: Taking true branch in /opt/root_src/main/src/pmain.cxx:178. 3: Calling 'ReadPutEnvs' in /opt/root_src/main/src/pmain.cxx:180. 4: Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:509,performance,Memor,Memory,509,```. /opt/root_src/core/base/inc/TVersionCheck.h:31:1: warning: non-POD static (TVersionCheck) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:49:1: warning: non-POD static (basic_string) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:224:4: warning: Potential leak of memory pointed to by 'jargv' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Taking false branch in /opt/root_src/main/src/nbmain.cxx:195. 2: Taking false branch in /opt/root_src/main/src/nbmain.cxx:204. 3: Memory is allocated in /opt/root_src/main/src/nbmain.cxx:213. 4: Assuming 'n' is >= 'argc' in /opt/root_src/main/src/nbmain.cxx:216. 5: Loop condition is false. Execution continues on line 218 in /opt/root_src/main/src/nbmain.cxx:216. 6: Potential leak of memory pointed to by 'jargv' in /opt/root_src/main/src/nbmain.cxx:224. /opt/root_src/main/src/pmain.cxx:59:11: warning: Potential leak of memory pointed to by 'ev' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Assuming 'argc' is >= 6 in /opt/root_src/main/src/pmain.cxx:178. 2: Taking true branch in /opt/root_src/main/src/pmain.cxx:178. 3: Calling 'ReadPutEnvs' in /opt/root_src/main/src/pmain.cxx:180. 4: Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:765,performance,memor,memory,765,```. /opt/root_src/core/base/inc/TVersionCheck.h:31:1: warning: non-POD static (TVersionCheck) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:49:1: warning: non-POD static (basic_string) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:224:4: warning: Potential leak of memory pointed to by 'jargv' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Taking false branch in /opt/root_src/main/src/nbmain.cxx:195. 2: Taking false branch in /opt/root_src/main/src/nbmain.cxx:204. 3: Memory is allocated in /opt/root_src/main/src/nbmain.cxx:213. 4: Assuming 'n' is >= 'argc' in /opt/root_src/main/src/nbmain.cxx:216. 5: Loop condition is false. Execution continues on line 218 in /opt/root_src/main/src/nbmain.cxx:216. 6: Potential leak of memory pointed to by 'jargv' in /opt/root_src/main/src/nbmain.cxx:224. /opt/root_src/main/src/pmain.cxx:59:11: warning: Potential leak of memory pointed to by 'ev' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Assuming 'argc' is >= 6 in /opt/root_src/main/src/pmain.cxx:178. 2: Taking true branch in /opt/root_src/main/src/pmain.cxx:178. 3: Calling 'ReadPutEnvs' in /opt/root_src/main/src/pmain.cxx:180. 4: Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:903,performance,memor,memory,903,```. /opt/root_src/core/base/inc/TVersionCheck.h:31:1: warning: non-POD static (TVersionCheck) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:49:1: warning: non-POD static (basic_string) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:224:4: warning: Potential leak of memory pointed to by 'jargv' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Taking false branch in /opt/root_src/main/src/nbmain.cxx:195. 2: Taking false branch in /opt/root_src/main/src/nbmain.cxx:204. 3: Memory is allocated in /opt/root_src/main/src/nbmain.cxx:213. 4: Assuming 'n' is >= 'argc' in /opt/root_src/main/src/nbmain.cxx:216. 5: Loop condition is false. Execution continues on line 218 in /opt/root_src/main/src/nbmain.cxx:216. 6: Potential leak of memory pointed to by 'jargv' in /opt/root_src/main/src/nbmain.cxx:224. /opt/root_src/main/src/pmain.cxx:59:11: warning: Potential leak of memory pointed to by 'ev' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Assuming 'argc' is >= 6 in /opt/root_src/main/src/pmain.cxx:178. 2: Taking true branch in /opt/root_src/main/src/pmain.cxx:178. 3: Calling 'ReadPutEnvs' in /opt/root_src/main/src/pmain.cxx:180. 4: Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:2356,performance,Memor,Memory,2356,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:2438,performance,memor,memory,2438,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:2629,performance,memor,memory,2629,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:2885,performance,memor,memory,2885,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:2596,reliability,doe,does,2596,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:2852,reliability,doe,does,2852,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:2775,security,secur,security,2775,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:304,usability,memor,memory,304,```. /opt/root_src/core/base/inc/TVersionCheck.h:31:1: warning: non-POD static (TVersionCheck) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:49:1: warning: non-POD static (basic_string) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:224:4: warning: Potential leak of memory pointed to by 'jargv' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Taking false branch in /opt/root_src/main/src/nbmain.cxx:195. 2: Taking false branch in /opt/root_src/main/src/nbmain.cxx:204. 3: Memory is allocated in /opt/root_src/main/src/nbmain.cxx:213. 4: Assuming 'n' is >= 'argc' in /opt/root_src/main/src/nbmain.cxx:216. 5: Loop condition is false. Execution continues on line 218 in /opt/root_src/main/src/nbmain.cxx:216. 6: Potential leak of memory pointed to by 'jargv' in /opt/root_src/main/src/nbmain.cxx:224. /opt/root_src/main/src/pmain.cxx:59:11: warning: Potential leak of memory pointed to by 'ev' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Assuming 'argc' is >= 6 in /opt/root_src/main/src/pmain.cxx:178. 2: Taking true branch in /opt/root_src/main/src/pmain.cxx:178. 3: Calling 'ReadPutEnvs' in /opt/root_src/main/src/pmain.cxx:180. 4: Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:509,usability,Memor,Memory,509,```. /opt/root_src/core/base/inc/TVersionCheck.h:31:1: warning: non-POD static (TVersionCheck) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:49:1: warning: non-POD static (basic_string) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:224:4: warning: Potential leak of memory pointed to by 'jargv' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Taking false branch in /opt/root_src/main/src/nbmain.cxx:195. 2: Taking false branch in /opt/root_src/main/src/nbmain.cxx:204. 3: Memory is allocated in /opt/root_src/main/src/nbmain.cxx:213. 4: Assuming 'n' is >= 'argc' in /opt/root_src/main/src/nbmain.cxx:216. 5: Loop condition is false. Execution continues on line 218 in /opt/root_src/main/src/nbmain.cxx:216. 6: Potential leak of memory pointed to by 'jargv' in /opt/root_src/main/src/nbmain.cxx:224. /opt/root_src/main/src/pmain.cxx:59:11: warning: Potential leak of memory pointed to by 'ev' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Assuming 'argc' is >= 6 in /opt/root_src/main/src/pmain.cxx:178. 2: Taking true branch in /opt/root_src/main/src/pmain.cxx:178. 3: Calling 'ReadPutEnvs' in /opt/root_src/main/src/pmain.cxx:180. 4: Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:765,usability,memor,memory,765,```. /opt/root_src/core/base/inc/TVersionCheck.h:31:1: warning: non-POD static (TVersionCheck) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:49:1: warning: non-POD static (basic_string) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:224:4: warning: Potential leak of memory pointed to by 'jargv' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Taking false branch in /opt/root_src/main/src/nbmain.cxx:195. 2: Taking false branch in /opt/root_src/main/src/nbmain.cxx:204. 3: Memory is allocated in /opt/root_src/main/src/nbmain.cxx:213. 4: Assuming 'n' is >= 'argc' in /opt/root_src/main/src/nbmain.cxx:216. 5: Loop condition is false. Execution continues on line 218 in /opt/root_src/main/src/nbmain.cxx:216. 6: Potential leak of memory pointed to by 'jargv' in /opt/root_src/main/src/nbmain.cxx:224. /opt/root_src/main/src/pmain.cxx:59:11: warning: Potential leak of memory pointed to by 'ev' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Assuming 'argc' is >= 6 in /opt/root_src/main/src/pmain.cxx:178. 2: Taking true branch in /opt/root_src/main/src/pmain.cxx:178. 3: Calling 'ReadPutEnvs' in /opt/root_src/main/src/pmain.cxx:180. 4: Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:903,usability,memor,memory,903,```. /opt/root_src/core/base/inc/TVersionCheck.h:31:1: warning: non-POD static (TVersionCheck) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:49:1: warning: non-POD static (basic_string) [clazy-non-pod-global-static]. /opt/root_src/main/src/nbmain.cxx:224:4: warning: Potential leak of memory pointed to by 'jargv' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Taking false branch in /opt/root_src/main/src/nbmain.cxx:195. 2: Taking false branch in /opt/root_src/main/src/nbmain.cxx:204. 3: Memory is allocated in /opt/root_src/main/src/nbmain.cxx:213. 4: Assuming 'n' is >= 'argc' in /opt/root_src/main/src/nbmain.cxx:216. 5: Loop condition is false. Execution continues on line 218 in /opt/root_src/main/src/nbmain.cxx:216. 6: Potential leak of memory pointed to by 'jargv' in /opt/root_src/main/src/nbmain.cxx:224. /opt/root_src/main/src/pmain.cxx:59:11: warning: Potential leak of memory pointed to by 'ev' [clang-analyzer-cplusplus.NewDeleteLeaks]. 1: Assuming 'argc' is >= 6 in /opt/root_src/main/src/pmain.cxx:178. 2: Taking true branch in /opt/root_src/main/src/pmain.cxx:178. 3: Calling 'ReadPutEnvs' in /opt/root_src/main/src/pmain.cxx:180. 4: Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:2356,usability,Memor,Memory,2356,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:2438,usability,memor,memory,2438,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:2629,usability,memor,memory,2629,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:2707,usability,support,support,2707,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:2885,usability,memor,memory,2885,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/issues/7527:2963,usability,support,support,2963,Assuming 'envfile' is non-null in /opt/root_src/main/src/pmain.cxx:51. 5: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:51. 6: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:51. 7: Taking false branch in /opt/root_src/main/src/pmain.cxx:51. 8: Assuming 'fenv' is non-null in /opt/root_src/main/src/pmain.cxx:55. 9: Taking false branch in /opt/root_src/main/src/pmain.cxx:55. 10: Loop condition is true. Entering loop body in /opt/root_src/main/src/pmain.cxx:59. 11: Assuming 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:62. 12: Left side of '&&' is true in /opt/root_src/main/src/pmain.cxx:62. 13: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:62. 14: Taking false branch in /opt/root_src/main/src/pmain.cxx:62. 15: 'l' is > 0 in /opt/root_src/main/src/pmain.cxx:64. 16: Left side of '||' is false in /opt/root_src/main/src/pmain.cxx:64. 17: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:64. 18: Taking false branch in /opt/root_src/main/src/pmain.cxx:64. 19: Assuming the condition is false in /opt/root_src/main/src/pmain.cxx:66. 20: Taking false branch in /opt/root_src/main/src/pmain.cxx:66. 21: Memory is allocated in /opt/root_src/main/src/pmain.cxx:68. 22: Potential leak of memory pointed to by 'ev' in /opt/root_src/main/src/pmain.cxx:59. /opt/root_src/main/src/pmain.cxx:69:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]. 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/main/src/pmain.cxx:69. /opt/root_src/core/base/inc/TVersionCheck.h. /opt/root_src/main/src/nbmain.cxx. /opt/root_src/main/src/pmain.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7527
https://github.com/root-project/root/pull/7529:63,availability,operat,operator,63,"There is no reproducer - memory just leaked while wrong delete operator is called instead of `free`. I guess, `stressGraphics` will run at the end of Jenkins and we will see if problem appears or not. I just tried to use some tutorials plus invoke SavePrimitive, where memory was just leaked.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7529
https://github.com/root-project/root/pull/7529:25,performance,memor,memory,25,"There is no reproducer - memory just leaked while wrong delete operator is called instead of `free`. I guess, `stressGraphics` will run at the end of Jenkins and we will see if problem appears or not. I just tried to use some tutorials plus invoke SavePrimitive, where memory was just leaked.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7529
https://github.com/root-project/root/pull/7529:269,performance,memor,memory,269,"There is no reproducer - memory just leaked while wrong delete operator is called instead of `free`. I guess, `stressGraphics` will run at the end of Jenkins and we will see if problem appears or not. I just tried to use some tutorials plus invoke SavePrimitive, where memory was just leaked.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7529
https://github.com/root-project/root/pull/7529:25,usability,memor,memory,25,"There is no reproducer - memory just leaked while wrong delete operator is called instead of `free`. I guess, `stressGraphics` will run at the end of Jenkins and we will see if problem appears or not. I just tried to use some tutorials plus invoke SavePrimitive, where memory was just leaked.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7529
https://github.com/root-project/root/pull/7529:269,usability,memor,memory,269,"There is no reproducer - memory just leaked while wrong delete operator is called instead of `free`. I guess, `stressGraphics` will run at the end of Jenkins and we will see if problem appears or not. I just tried to use some tutorials plus invoke SavePrimitive, where memory was just leaked.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7529
https://github.com/root-project/root/issues/7536:23,performance,memor,memory,23,"Beside large number of memory leaks (which will be fixed), I try to fix many other issues reported by clang-tidy. But here https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooCurve.cxx#L388 I cannot decide. May be here should be `x2 = *iter2;`, while only then this value will be somehow used and not ignored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7536
https://github.com/root-project/root/issues/7536:23,usability,memor,memory,23,"Beside large number of memory leaks (which will be fixed), I try to fix many other issues reported by clang-tidy. But here https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooCurve.cxx#L388 I cannot decide. May be here should be `x2 = *iter2;`, while only then this value will be somehow used and not ignored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7536
https://github.com/root-project/root/issues/7536:30,testability,simpl,simply,30,Hi @linev! I would suggest to simply delete the line with `x1 = *iter2;` ([here a link to it](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooCurve.cxx#L388)). The value of `x2` is already set correctly [a few lines before](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooCurve.cxx#L373).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7536
https://github.com/root-project/root/issues/7536:30,usability,simpl,simply,30,Hi @linev! I would suggest to simply delete the line with `x1 = *iter2;` ([here a link to it](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooCurve.cxx#L388)). The value of `x2` is already set correctly [a few lines before](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooCurve.cxx#L373).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7536
https://github.com/root-project/root/issues/7536:56,security,modif,modify,56,"I keep this place untouched in the PRs, you are free to modify as you want. . And please check my (hopefully) last PR: https://github.com/root-project/root/pull/7642",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7536
https://github.com/root-project/root/issues/7536:17,safety,review,reviewing,17,Okay thanks! I'm reviewing it right now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7536
https://github.com/root-project/root/issues/7536:17,testability,review,reviewing,17,Okay thanks! I'm reviewing it right now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7536
https://github.com/root-project/root/pull/7539:103,deployability,version,version,103,"I've just investigated and indeed with xrootd5 it should work like this, though in the current inbuilt version it's basically impossible to make this work with existing cmake flags. So waiting for #7335 :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7539
https://github.com/root-project/root/pull/7539:87,energy efficiency,current,current,87,"I've just investigated and indeed with xrootd5 it should work like this, though in the current inbuilt version it's basically impossible to make this work with existing cmake flags. So waiting for #7335 :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7539
https://github.com/root-project/root/pull/7539:103,integrability,version,version,103,"I've just investigated and indeed with xrootd5 it should work like this, though in the current inbuilt version it's basically impossible to make this work with existing cmake flags. So waiting for #7335 :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7539
https://github.com/root-project/root/pull/7539:103,modifiability,version,version,103,"I've just investigated and indeed with xrootd5 it should work like this, though in the current inbuilt version it's basically impossible to make this work with existing cmake flags. So waiting for #7335 :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7539
https://github.com/root-project/root/issues/7541:437,availability,error,errors,437,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:510,availability,error,error,510,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:237,deployability,stack,stack,237,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:551,deployability,instal,installed,551,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:569,deployability,version,version,569,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:569,integrability,version,version,569,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:569,modifiability,version,version,569,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:437,performance,error,errors,437,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:510,performance,error,error,510,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:250,reliability,doe,does,250,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:288,safety,except,exception,288,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:437,safety,error,errors,437,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:510,safety,error,error,510,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:608,safety,except,exception,608,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:592,testability,trace,trace,592,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:437,usability,error,errors,437,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:510,usability,error,error,510,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:456,deployability,Stack,Stack,456,"Ugh, this one might become tricky, even LLVM upstream is unable to handle exceptions during JIT: I tested the most basic. ```c++. int main() {. try {. throw 1;. } catch (...) { }. }. ```. compiled with `./bin/clang++ -S -emit-llvm throw.cc` and interpreted using `./bin/lli throw.ll`, resulting in. ```. libc++abi.dylib: terminating with uncaught exception of type int. PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: ./bin/lli throw.ll. Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):. 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56. 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128. 2 lli 0x00000001010488c4 SignalHandler(int) + 304. 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56. 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292. 5 libsystem_c.dylib 0x00000001825b1864 abort + 104. 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0. 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0. 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160. 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20. 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0. 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0. 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064. 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768. 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:511,deployability,Stack,Stack,511,"Ugh, this one might become tricky, even LLVM upstream is unable to handle exceptions during JIT: I tested the most basic. ```c++. int main() {. try {. throw 1;. } catch (...) { }. }. ```. compiled with `./bin/clang++ -S -emit-llvm throw.cc` and interpreted using `./bin/lli throw.ll`, resulting in. ```. libc++abi.dylib: terminating with uncaught exception of type int. PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: ./bin/lli throw.ll. Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):. 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56. 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128. 2 lli 0x00000001010488c4 SignalHandler(int) + 304. 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56. 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292. 5 libsystem_c.dylib 0x00000001825b1864 abort + 104. 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0. 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0. 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160. 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20. 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0. 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0. 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064. 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768. 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:2356,deployability,build,build,2356,"YMBOLIZER_PATH` to point to it):. 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56. 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128. 2 lli 0x00000001010488c4 SignalHandler(int) + 304. 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56. 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292. 5 libsystem_c.dylib 0x00000001825b1864 abort + 104. 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0. 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0. 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160. 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20. 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0. 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0. 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064. 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768. 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, char const* const*) + 1464. 15 lli 0x000000010070e4d8 main + 8576. 16 libdyld.dylib 0x0000000182685f34 start + 4. zsh: abort ./bin/lli throw.ll. ```. It could be that Apple changed *something* about their exception handling ABI for `arm64` because it's not even possible to build my own `libunwind` to debug the unwinding as I did for ROOT-10703 - it complains about invalid entries. However `clang++` emits the right object files, at least when compiling to an executable directly. So maybe it's at runtime? I'll need to think about this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:1945,energy efficiency,alloc,allocator,1945,"YMBOLIZER_PATH` to point to it):. 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56. 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128. 2 lli 0x00000001010488c4 SignalHandler(int) + 304. 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56. 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292. 5 libsystem_c.dylib 0x00000001825b1864 abort + 104. 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0. 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0. 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160. 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20. 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0. 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0. 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064. 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768. 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, char const* const*) + 1464. 15 lli 0x000000010070e4d8 main + 8576. 16 libdyld.dylib 0x0000000182685f34 start + 4. zsh: abort ./bin/lli throw.ll. ```. It could be that Apple changed *something* about their exception handling ABI for `arm64` because it's not even possible to build my own `libunwind` to debug the unwinding as I did for ROOT-10703 - it complains about invalid entries. However `clang++` emits the right object files, at least when compiling to an executable directly. So maybe it's at runtime? I'll need to think about this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:1974,energy efficiency,alloc,allocator,1974,"YMBOLIZER_PATH` to point to it):. 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56. 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128. 2 lli 0x00000001010488c4 SignalHandler(int) + 304. 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56. 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292. 5 libsystem_c.dylib 0x00000001825b1864 abort + 104. 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0. 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0. 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160. 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20. 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0. 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0. 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064. 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768. 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, char const* const*) + 1464. 15 lli 0x000000010070e4d8 main + 8576. 16 libdyld.dylib 0x0000000182685f34 start + 4. zsh: abort ./bin/lli throw.ll. ```. It could be that Apple changed *something* about their exception handling ABI for `arm64` because it's not even possible to build my own `libunwind` to debug the unwinding as I did for ROOT-10703 - it complains about invalid entries. However `clang++` emits the right object files, at least when compiling to an executable directly. So maybe it's at runtime? I'll need to think about this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:2052,energy efficiency,alloc,allocator,2052,"YMBOLIZER_PATH` to point to it):. 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56. 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128. 2 lli 0x00000001010488c4 SignalHandler(int) + 304. 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56. 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292. 5 libsystem_c.dylib 0x00000001825b1864 abort + 104. 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0. 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0. 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160. 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20. 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0. 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0. 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064. 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768. 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, char const* const*) + 1464. 15 lli 0x000000010070e4d8 main + 8576. 16 libdyld.dylib 0x0000000182685f34 start + 4. zsh: abort ./bin/lli throw.ll. ```. It could be that Apple changed *something* about their exception handling ABI for `arm64` because it's not even possible to build my own `libunwind` to debug the unwinding as I did for ROOT-10703 - it complains about invalid entries. However `clang++` emits the right object files, at least when compiling to an executable directly. So maybe it's at runtime? I'll need to think about this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:377,integrability,sub,submit,377,"Ugh, this one might become tricky, even LLVM upstream is unable to handle exceptions during JIT: I tested the most basic. ```c++. int main() {. try {. throw 1;. } catch (...) { }. }. ```. compiled with `./bin/clang++ -S -emit-llvm throw.cc` and interpreted using `./bin/lli throw.ll`, resulting in. ```. libc++abi.dylib: terminating with uncaught exception of type int. PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: ./bin/lli throw.ll. Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):. 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56. 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128. 2 lli 0x00000001010488c4 SignalHandler(int) + 304. 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56. 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292. 5 libsystem_c.dylib 0x00000001825b1864 abort + 104. 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0. 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0. 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160. 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20. 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0. 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0. 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064. 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768. 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:74,safety,except,exceptions,74,"Ugh, this one might become tricky, even LLVM upstream is unable to handle exceptions during JIT: I tested the most basic. ```c++. int main() {. try {. throw 1;. } catch (...) { }. }. ```. compiled with `./bin/clang++ -S -emit-llvm throw.cc` and interpreted using `./bin/lli throw.ll`, resulting in. ```. libc++abi.dylib: terminating with uncaught exception of type int. PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: ./bin/lli throw.ll. Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):. 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56. 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128. 2 lli 0x00000001010488c4 SignalHandler(int) + 304. 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56. 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292. 5 libsystem_c.dylib 0x00000001825b1864 abort + 104. 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0. 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0. 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160. 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20. 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0. 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0. 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064. 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768. 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:99,safety,test,tested,99,"Ugh, this one might become tricky, even LLVM upstream is unable to handle exceptions during JIT: I tested the most basic. ```c++. int main() {. try {. throw 1;. } catch (...) { }. }. ```. compiled with `./bin/clang++ -S -emit-llvm throw.cc` and interpreted using `./bin/lli throw.ll`, resulting in. ```. libc++abi.dylib: terminating with uncaught exception of type int. PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: ./bin/lli throw.ll. Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):. 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56. 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128. 2 lli 0x00000001010488c4 SignalHandler(int) + 304. 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56. 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292. 5 libsystem_c.dylib 0x00000001825b1864 abort + 104. 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0. 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0. 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160. 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20. 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0. 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0. 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064. 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768. 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:347,safety,except,exception,347,"Ugh, this one might become tricky, even LLVM upstream is unable to handle exceptions during JIT: I tested the most basic. ```c++. int main() {. try {. throw 1;. } catch (...) { }. }. ```. compiled with `./bin/clang++ -S -emit-llvm throw.cc` and interpreted using `./bin/lli throw.ll`, resulting in. ```. libc++abi.dylib: terminating with uncaught exception of type int. PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: ./bin/lli throw.ll. Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):. 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56. 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128. 2 lli 0x00000001010488c4 SignalHandler(int) + 304. 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56. 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292. 5 libsystem_c.dylib 0x00000001825b1864 abort + 104. 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0. 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0. 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160. 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20. 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0. 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0. 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064. 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768. 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:2287,safety,except,exception,2287,"YMBOLIZER_PATH` to point to it):. 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56. 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128. 2 lli 0x00000001010488c4 SignalHandler(int) + 304. 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56. 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292. 5 libsystem_c.dylib 0x00000001825b1864 abort + 104. 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0. 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0. 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160. 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20. 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0. 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0. 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064. 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768. 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, char const* const*) + 1464. 15 lli 0x000000010070e4d8 main + 8576. 16 libdyld.dylib 0x0000000182685f34 start + 4. zsh: abort ./bin/lli throw.ll. ```. It could be that Apple changed *something* about their exception handling ABI for `arm64` because it's not even possible to build my own `libunwind` to debug the unwinding as I did for ROOT-10703 - it complains about invalid entries. However `clang++` emits the right object files, at least when compiling to an executable directly. So maybe it's at runtime? I'll need to think about this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:2433,safety,compl,complains,2433,"YMBOLIZER_PATH` to point to it):. 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56. 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128. 2 lli 0x00000001010488c4 SignalHandler(int) + 304. 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56. 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292. 5 libsystem_c.dylib 0x00000001825b1864 abort + 104. 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0. 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0. 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160. 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20. 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0. 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0. 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064. 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768. 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, char const* const*) + 1464. 15 lli 0x000000010070e4d8 main + 8576. 16 libdyld.dylib 0x0000000182685f34 start + 4. zsh: abort ./bin/lli throw.ll. ```. It could be that Apple changed *something* about their exception handling ABI for `arm64` because it's not even possible to build my own `libunwind` to debug the unwinding as I did for ROOT-10703 - it complains about invalid entries. However `clang++` emits the right object files, at least when compiling to an executable directly. So maybe it's at runtime? I'll need to think about this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:828,security,Sign,SignalHandler,828,"Ugh, this one might become tricky, even LLVM upstream is unable to handle exceptions during JIT: I tested the most basic. ```c++. int main() {. try {. throw 1;. } catch (...) { }. }. ```. compiled with `./bin/clang++ -S -emit-llvm throw.cc` and interpreted using `./bin/lli throw.ll`, resulting in. ```. libc++abi.dylib: terminating with uncaught exception of type int. PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: ./bin/lli throw.ll. Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):. 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56. 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128. 2 lli 0x00000001010488c4 SignalHandler(int) + 304. 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56. 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292. 5 libsystem_c.dylib 0x00000001825b1864 abort + 104. 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0. 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0. 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160. 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20. 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0. 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0. 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064. 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768. 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:2433,security,compl,complains,2433,"YMBOLIZER_PATH` to point to it):. 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56. 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128. 2 lli 0x00000001010488c4 SignalHandler(int) + 304. 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56. 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292. 5 libsystem_c.dylib 0x00000001825b1864 abort + 104. 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0. 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0. 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160. 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20. 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0. 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0. 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064. 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768. 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, char const* const*) + 1464. 15 lli 0x000000010070e4d8 main + 8576. 16 libdyld.dylib 0x0000000182685f34 start + 4. zsh: abort ./bin/lli throw.ll. ```. It could be that Apple changed *something* about their exception handling ABI for `arm64` because it's not even possible to build my own `libunwind` to debug the unwinding as I did for ROOT-10703 - it complains about invalid entries. However `clang++` emits the right object files, at least when compiling to an executable directly. So maybe it's at runtime? I'll need to think about this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:99,testability,test,tested,99,"Ugh, this one might become tricky, even LLVM upstream is unable to handle exceptions during JIT: I tested the most basic. ```c++. int main() {. try {. throw 1;. } catch (...) { }. }. ```. compiled with `./bin/clang++ -S -emit-llvm throw.cc` and interpreted using `./bin/lli throw.ll`, resulting in. ```. libc++abi.dylib: terminating with uncaught exception of type int. PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: ./bin/lli throw.ll. Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):. 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56. 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128. 2 lli 0x00000001010488c4 SignalHandler(int) + 304. 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56. 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292. 5 libsystem_c.dylib 0x00000001825b1864 abort + 104. 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0. 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0. 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160. 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20. 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0. 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0. 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064. 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768. 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:234,energy efficiency,alloc,allocated,234,> even LLVM upstream is unable to handle exceptions during JIT. I am not too surprised. it is the same code (+/- a few things ;)). > So maybe it's at runtime? I. That is what it was last time (in JIT code the instructions space being allocated in an unexpected order).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:187,performance,time,time,187,> even LLVM upstream is unable to handle exceptions during JIT. I am not too surprised. it is the same code (+/- a few things ;)). > So maybe it's at runtime? I. That is what it was last time (in JIT code the instructions space being allocated in an unexpected order).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:41,safety,except,exceptions,41,> even LLVM upstream is unable to handle exceptions during JIT. I am not too surprised. it is the same code (+/- a few things ;)). > So maybe it's at runtime? I. That is what it was last time (in JIT code the instructions space being allocated in an unexpected order).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:182,energy efficiency,current,current,182,"> > even LLVM upstream is unable to handle exceptions during JIT. > . > I am not too surprised. it is the same code (+/- a few things ;)). True, but I had hoped that it was fixed in current trunk and it was just a matter of finding and backporting a change or two to make it work. Anyway my investigations aren't going anywhere right now, so I've filed a bug at https://bugs.llvm.org/show_bug.cgi?id=49692",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:43,safety,except,exceptions,43,"> > even LLVM upstream is unable to handle exceptions during JIT. > . > I am not too surprised. it is the same code (+/- a few things ;)). True, but I had hoped that it was fixed in current trunk and it was just a matter of finding and backporting a change or two to make it work. Anyway my investigations aren't going anywhere right now, so I've filed a bug at https://bugs.llvm.org/show_bug.cgi?id=49692",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:181,integrability,coupl,couple,181,"Bad news for us, from Lang on https://bugs.llvm.org/show_bug.cgi?id=49692 :. > This one is on me -- I'll look into supporting compact-unwind, but won't have time to get to it for a couple of weeks. >. > How urgent is this for you, and are you using ORCv2? Ideally I'll just implement this in JITLink, but that won't help if you're on MCJIT or ORCv1. I guess disabling exceptions for M1 isn't an option either. But we could prevent the cling `throw` from happening on M1, until this is fixed. Would that make sense? Won't help for RDF's exceptions, though...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:181,modifiability,coupl,couple,181,"Bad news for us, from Lang on https://bugs.llvm.org/show_bug.cgi?id=49692 :. > This one is on me -- I'll look into supporting compact-unwind, but won't have time to get to it for a couple of weeks. >. > How urgent is this for you, and are you using ORCv2? Ideally I'll just implement this in JITLink, but that won't help if you're on MCJIT or ORCv1. I guess disabling exceptions for M1 isn't an option either. But we could prevent the cling `throw` from happening on M1, until this is fixed. Would that make sense? Won't help for RDF's exceptions, though...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:157,performance,time,time,157,"Bad news for us, from Lang on https://bugs.llvm.org/show_bug.cgi?id=49692 :. > This one is on me -- I'll look into supporting compact-unwind, but won't have time to get to it for a couple of weeks. >. > How urgent is this for you, and are you using ORCv2? Ideally I'll just implement this in JITLink, but that won't help if you're on MCJIT or ORCv1. I guess disabling exceptions for M1 isn't an option either. But we could prevent the cling `throw` from happening on M1, until this is fixed. Would that make sense? Won't help for RDF's exceptions, though...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:368,safety,except,exceptions,368,"Bad news for us, from Lang on https://bugs.llvm.org/show_bug.cgi?id=49692 :. > This one is on me -- I'll look into supporting compact-unwind, but won't have time to get to it for a couple of weeks. >. > How urgent is this for you, and are you using ORCv2? Ideally I'll just implement this in JITLink, but that won't help if you're on MCJIT or ORCv1. I guess disabling exceptions for M1 isn't an option either. But we could prevent the cling `throw` from happening on M1, until this is fixed. Would that make sense? Won't help for RDF's exceptions, though...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:423,safety,prevent,prevent,423,"Bad news for us, from Lang on https://bugs.llvm.org/show_bug.cgi?id=49692 :. > This one is on me -- I'll look into supporting compact-unwind, but won't have time to get to it for a couple of weeks. >. > How urgent is this for you, and are you using ORCv2? Ideally I'll just implement this in JITLink, but that won't help if you're on MCJIT or ORCv1. I guess disabling exceptions for M1 isn't an option either. But we could prevent the cling `throw` from happening on M1, until this is fixed. Would that make sense? Won't help for RDF's exceptions, though...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:536,safety,except,exceptions,536,"Bad news for us, from Lang on https://bugs.llvm.org/show_bug.cgi?id=49692 :. > This one is on me -- I'll look into supporting compact-unwind, but won't have time to get to it for a couple of weeks. >. > How urgent is this for you, and are you using ORCv2? Ideally I'll just implement this in JITLink, but that won't help if you're on MCJIT or ORCv1. I guess disabling exceptions for M1 isn't an option either. But we could prevent the cling `throw` from happening on M1, until this is fixed. Would that make sense? Won't help for RDF's exceptions, though...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:423,security,preven,prevent,423,"Bad news for us, from Lang on https://bugs.llvm.org/show_bug.cgi?id=49692 :. > This one is on me -- I'll look into supporting compact-unwind, but won't have time to get to it for a couple of weeks. >. > How urgent is this for you, and are you using ORCv2? Ideally I'll just implement this in JITLink, but that won't help if you're on MCJIT or ORCv1. I guess disabling exceptions for M1 isn't an option either. But we could prevent the cling `throw` from happening on M1, until this is fixed. Would that make sense? Won't help for RDF's exceptions, though...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:181,testability,coupl,couple,181,"Bad news for us, from Lang on https://bugs.llvm.org/show_bug.cgi?id=49692 :. > This one is on me -- I'll look into supporting compact-unwind, but won't have time to get to it for a couple of weeks. >. > How urgent is this for you, and are you using ORCv2? Ideally I'll just implement this in JITLink, but that won't help if you're on MCJIT or ORCv1. I guess disabling exceptions for M1 isn't an option either. But we could prevent the cling `throw` from happening on M1, until this is fixed. Would that make sense? Won't help for RDF's exceptions, though...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:115,usability,support,supporting,115,"Bad news for us, from Lang on https://bugs.llvm.org/show_bug.cgi?id=49692 :. > This one is on me -- I'll look into supporting compact-unwind, but won't have time to get to it for a couple of weeks. >. > How urgent is this for you, and are you using ORCv2? Ideally I'll just implement this in JITLink, but that won't help if you're on MCJIT or ORCv1. I guess disabling exceptions for M1 isn't an option either. But we could prevent the cling `throw` from happening on M1, until this is fixed. Would that make sense? Won't help for RDF's exceptions, though...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:316,usability,help,help,316,"Bad news for us, from Lang on https://bugs.llvm.org/show_bug.cgi?id=49692 :. > This one is on me -- I'll look into supporting compact-unwind, but won't have time to get to it for a couple of weeks. >. > How urgent is this for you, and are you using ORCv2? Ideally I'll just implement this in JITLink, but that won't help if you're on MCJIT or ORCv1. I guess disabling exceptions for M1 isn't an option either. But we could prevent the cling `throw` from happening on M1, until this is fixed. Would that make sense? Won't help for RDF's exceptions, though...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:521,usability,help,help,521,"Bad news for us, from Lang on https://bugs.llvm.org/show_bug.cgi?id=49692 :. > This one is on me -- I'll look into supporting compact-unwind, but won't have time to get to it for a couple of weeks. >. > How urgent is this for you, and are you using ORCv2? Ideally I'll just implement this in JITLink, but that won't help if you're on MCJIT or ORCv1. I guess disabling exceptions for M1 isn't an option either. But we could prevent the cling `throw` from happening on M1, until this is fixed. Would that make sense? Won't help for RDF's exceptions, though...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:355,deployability,build,build,355,"@msneubauer ran some tests on OSX 13 and it seems this issue is fixed. Thanks a lot, Mark! Here is what he ran:. ```. cat test_exceptions.C. void test_exceptions() {. try {. std::cout << ""got here\n"";. throw 1;. } catch (...) { }. }. wirelessprv-10-193-242-21:tmp msn$ root.exe -l -b -q -e '.x test_exceptions.C'. got here. ```. This is based on a source build of the root_v6.26.06.source.tar.gz tarball. cc: @hahnjo, @lhames",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:21,safety,test,tests,21,"@msneubauer ran some tests on OSX 13 and it seems this issue is fixed. Thanks a lot, Mark! Here is what he ran:. ```. cat test_exceptions.C. void test_exceptions() {. try {. std::cout << ""got here\n"";. throw 1;. } catch (...) { }. }. wirelessprv-10-193-242-21:tmp msn$ root.exe -l -b -q -e '.x test_exceptions.C'. got here. ```. This is based on a source build of the root_v6.26.06.source.tar.gz tarball. cc: @hahnjo, @lhames",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:21,testability,test,tests,21,"@msneubauer ran some tests on OSX 13 and it seems this issue is fixed. Thanks a lot, Mark! Here is what he ran:. ```. cat test_exceptions.C. void test_exceptions() {. try {. std::cout << ""got here\n"";. throw 1;. } catch (...) { }. }. wirelessprv-10-193-242-21:tmp msn$ root.exe -l -b -q -e '.x test_exceptions.C'. got here. ```. This is based on a source build of the root_v6.26.06.source.tar.gz tarball. cc: @hahnjo, @lhames",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:255,safety,test,test,255,"Hm, this is surprising because fixing `libunwind` was only part of the story, I thought there are at least two other missing points as outlined in https://github.com/llvm/llvm-project/issues/49036. Could somebody with a setup of macOS 13 on Apple Silicon test if the `catch` block is actually executed, by moving the printout there?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:255,testability,test,test,255,"Hm, this is surprising because fixing `libunwind` was only part of the story, I thought there are at least two other missing points as outlined in https://github.com/llvm/llvm-project/issues/49036. Could somebody with a setup of macOS 13 on Apple Silicon test if the `catch` block is actually executed, by moving the printout there?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:24,usability,close,close,24,"Awesome, @hahnjo can we close this as resolved now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:89,deployability,upgrad,upgrade,89,Possibly for now. Though I wouldn't be too surprised if it breaks again on a future LLVM upgrade (maybe even llvm13) due to the missing things in LLVM and what Lang wrote in the upstream issue...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:89,modifiability,upgrad,upgrade,89,Possibly for now. Though I wouldn't be too surprised if it breaks again on a future LLVM upgrade (maybe even llvm13) due to the missing things in LLVM and what Lang wrote in the upstream issue...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:133,interoperability,registr,registry,133,Before we close this I'd like to see the roottest / gtest tests re-enabled that were disabled because of this issue. I cannot find a registry of the changes we did because of this; do we need to grep for `-i arm` since M1 came out to find all occurrences? :-(,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:58,safety,test,tests,58,Before we close this I'd like to see the roottest / gtest tests re-enabled that were disabled because of this issue. I cannot find a registry of the changes we did because of this; do we need to grep for `-i arm` since M1 came out to find all occurrences? :-(,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:58,testability,test,tests,58,Before we close this I'd like to see the roottest / gtest tests re-enabled that were disabled because of this issue. I cannot find a registry of the changes we did because of this; do we need to grep for `-i arm` since M1 came out to find all occurrences? :-(,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:10,usability,close,close,10,Before we close this I'd like to see the roottest / gtest tests re-enabled that were disabled because of this issue. I cannot find a registry of the changes we did because of this; do we need to grep for `-i arm` since M1 came out to find all occurrences? :-(,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:21,availability,failur,failure,21,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:72,availability,servic,services,72,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:312,availability,failur,failure,312,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:21,deployability,fail,failure,21,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:72,deployability,servic,services,72,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:128,deployability,build,build,128,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:312,deployability,fail,failure,312,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:72,integrability,servic,services,72,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:72,modifiability,servic,services,72,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:21,performance,failur,failure,21,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:312,performance,failur,failure,312,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:21,reliability,fail,failure,21,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:312,reliability,fail,failure,312,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:140,safety,test,testReport,140,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:239,safety,test,test,239,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:140,testability,test,testReport,140,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:179,testability,regress,regression,179,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:239,testability,test,test,239,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:131,deployability,upgrad,upgrade,131,"@hahnjo, @vepadulano, what's the status here? This looks like one of these issues that might have been resolved by the recent LLVM upgrade",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:131,modifiability,upgrad,upgrade,131,"@hahnjo, @vepadulano, what's the status here? This looks like one of these issues that might have been resolved by the recent LLVM upgrade",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:33,usability,statu,status,33,"@hahnjo, @vepadulano, what's the status here? This looks like one of these issues that might have been resolved by the recent LLVM upgrade",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:21,deployability,version,version,21,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:55,deployability,patch,patches,55,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:195,deployability,fail,fails,195,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:324,deployability,build,build,324,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:330,deployability,configurat,configuration,330,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:21,integrability,version,version,21,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:330,integrability,configur,configuration,330,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:21,modifiability,version,version,21,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:330,modifiability,configur,configuration,330,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:195,reliability,fail,fails,195,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:55,safety,patch,patches,55,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:101,safety,test,test,101,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:55,security,patch,patches,55,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:330,security,configur,configuration,330,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:101,testability,test,test,101,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:211,usability,clear,clear,211,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/issues/7541:2,usability,confirm,confirm,2,I confirm it's still broken for llvm16 in root master.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541
https://github.com/root-project/root/pull/7542:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:1387,availability,error,error,1387,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:249,deployability,build,build,249,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:283,deployability,build,build,283,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:335,deployability,build,build,335,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:369,deployability,build,build,369,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:375,deployability,build,build,375,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:435,deployability,build,build,435,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:469,deployability,build,build,469,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:513,deployability,build,build,513,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:547,deployability,build,build,547,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:553,deployability,build,build,553,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:613,deployability,build,build,613,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:647,deployability,build,build,647,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:702,deployability,build,build,702,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:736,deployability,build,build,736,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:742,deployability,build,build,742,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:802,deployability,build,build,802,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:836,deployability,build,build,836,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:879,deployability,build,build,879,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:913,deployability,build,build,913,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:919,deployability,build,build,919,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:961,deployability,Build,Building,961,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:985,deployability,build,build,985,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:1019,deployability,build,build,1019,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:1107,deployability,build,build,1107,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:1141,deployability,build,build,1141,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:1181,deployability,build,build,1181,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:1215,deployability,build,build,1215,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:1221,deployability,build,build,1221,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:1439,deployability,build,build,1439,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:1473,deployability,build,build,1473,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:1479,deployability,build,build,1479,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:847,energy efficiency,core,core,847,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:192,integrability,batch,batch,192,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:192,performance,batch,batch,192,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:1387,performance,error,error,1387,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:1387,safety,error,error,1387,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:135,usability,command,command,135,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:970,usability,Custom,Custom,970,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:1296,usability,Visual,Visual,1296,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:1387,usability,error,error,1387,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:1546,usability,help,help,1546,"@stwunsch PR didn't work on windows:. ```. [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,. [2021-03-18T12:42:40.576Z] operable program or batch file. [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt. [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include. [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]. ```. Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:8,testability,understand,understand,8,I don't understand this PR. You introduce `--disable-scripts` in the `WIN32` part. What's the purpose of it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:163,deployability,contain,contains,163,> @bellenot do you have any suggestions here? @oshadura Fine with me. Windows is not affected by those changes and the `xz-${lzma_version}-win32.tar.gz` file only contains the headers and the library,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:117,deployability,version,version,117,"> Thanks, @bellenot, I thought one approval will be enough! I think it's because I requested changes in the previous version of the PR...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:117,integrability,version,version,117,"> Thanks, @bellenot, I thought one approval will be enough! I think it's because I requested changes in the previous version of the PR...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:117,modifiability,version,version,117,"> Thanks, @bellenot, I thought one approval will be enough! I think it's because I requested changes in the previous version of the PR...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7542:85,reliability,doe,doesn,85,Yeah plus I guess GH is smart and notices when you try to approve your own PR - that doesn't count ;-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7542
https://github.com/root-project/root/pull/7544:769,availability,servic,service,769,"<img src=""https://www.deepcode.ai/icons/green_check.svg"" width= ""50px"" align= ""left""/> Congratulations :tada:. DeepCode [analyzed](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) your code in 2.054 seconds and we found no issues. Enjoy a moment of no bugs :sunny:. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project). #### üëâ The DeepCode service and API will be deprecated in August, 2021. [Here](https://www.deepcode.ai/blog/migrate-to-snyk-code) is the information how to migrate. Thank you for using DeepCode üôè ‚ù§Ô∏è ! If you are using our plugins, you might be interested in their successors: [Snyk's JetBrains plugin](https://snyk.co/udpkq) and [Snyk's VS Code plugin](https://snyk.co/udpkr).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:769,deployability,servic,service,769,"<img src=""https://www.deepcode.ai/icons/green_check.svg"" width= ""50px"" align= ""left""/> Congratulations :tada:. DeepCode [analyzed](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) your code in 2.054 seconds and we found no issues. Enjoy a moment of no bugs :sunny:. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project). #### üëâ The DeepCode service and API will be deprecated in August, 2021. [Here](https://www.deepcode.ai/blog/migrate-to-snyk-code) is the information how to migrate. Thank you for using DeepCode üôè ‚ù§Ô∏è ! If you are using our plugins, you might be interested in their successors: [Snyk's JetBrains plugin](https://snyk.co/udpkq) and [Snyk's VS Code plugin](https://snyk.co/udpkr).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:781,deployability,API,API,781,"<img src=""https://www.deepcode.ai/icons/green_check.svg"" width= ""50px"" align= ""left""/> Congratulations :tada:. DeepCode [analyzed](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) your code in 2.054 seconds and we found no issues. Enjoy a moment of no bugs :sunny:. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project). #### üëâ The DeepCode service and API will be deprecated in August, 2021. [Here](https://www.deepcode.ai/blog/migrate-to-snyk-code) is the information how to migrate. Thank you for using DeepCode üôè ‚ù§Ô∏è ! If you are using our plugins, you might be interested in their successors: [Snyk's JetBrains plugin](https://snyk.co/udpkq) and [Snyk's VS Code plugin](https://snyk.co/udpkr).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:769,integrability,servic,service,769,"<img src=""https://www.deepcode.ai/icons/green_check.svg"" width= ""50px"" align= ""left""/> Congratulations :tada:. DeepCode [analyzed](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) your code in 2.054 seconds and we found no issues. Enjoy a moment of no bugs :sunny:. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project). #### üëâ The DeepCode service and API will be deprecated in August, 2021. [Here](https://www.deepcode.ai/blog/migrate-to-snyk-code) is the information how to migrate. Thank you for using DeepCode üôè ‚ù§Ô∏è ! If you are using our plugins, you might be interested in their successors: [Snyk's JetBrains plugin](https://snyk.co/udpkq) and [Snyk's VS Code plugin](https://snyk.co/udpkr).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:781,integrability,API,API,781,"<img src=""https://www.deepcode.ai/icons/green_check.svg"" width= ""50px"" align= ""left""/> Congratulations :tada:. DeepCode [analyzed](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) your code in 2.054 seconds and we found no issues. Enjoy a moment of no bugs :sunny:. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project). #### üëâ The DeepCode service and API will be deprecated in August, 2021. [Here](https://www.deepcode.ai/blog/migrate-to-snyk-code) is the information how to migrate. Thank you for using DeepCode üôè ‚ù§Ô∏è ! If you are using our plugins, you might be interested in their successors: [Snyk's JetBrains plugin](https://snyk.co/udpkq) and [Snyk's VS Code plugin](https://snyk.co/udpkr).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:781,interoperability,API,API,781,"<img src=""https://www.deepcode.ai/icons/green_check.svg"" width= ""50px"" align= ""left""/> Congratulations :tada:. DeepCode [analyzed](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) your code in 2.054 seconds and we found no issues. Enjoy a moment of no bugs :sunny:. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project). #### üëâ The DeepCode service and API will be deprecated in August, 2021. [Here](https://www.deepcode.ai/blog/migrate-to-snyk-code) is the information how to migrate. Thank you for using DeepCode üôè ‚ù§Ô∏è ! If you are using our plugins, you might be interested in their successors: [Snyk's JetBrains plugin](https://snyk.co/udpkq) and [Snyk's VS Code plugin](https://snyk.co/udpkr).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:971,interoperability,plug,plugins,971,"<img src=""https://www.deepcode.ai/icons/green_check.svg"" width= ""50px"" align= ""left""/> Congratulations :tada:. DeepCode [analyzed](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) your code in 2.054 seconds and we found no issues. Enjoy a moment of no bugs :sunny:. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project). #### üëâ The DeepCode service and API will be deprecated in August, 2021. [Here](https://www.deepcode.ai/blog/migrate-to-snyk-code) is the information how to migrate. Thank you for using DeepCode üôè ‚ù§Ô∏è ! If you are using our plugins, you might be interested in their successors: [Snyk's JetBrains plugin](https://snyk.co/udpkq) and [Snyk's VS Code plugin](https://snyk.co/udpkr).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:1043,interoperability,plug,plugin,1043,"<img src=""https://www.deepcode.ai/icons/green_check.svg"" width= ""50px"" align= ""left""/> Congratulations :tada:. DeepCode [analyzed](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) your code in 2.054 seconds and we found no issues. Enjoy a moment of no bugs :sunny:. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project). #### üëâ The DeepCode service and API will be deprecated in August, 2021. [Here](https://www.deepcode.ai/blog/migrate-to-snyk-code) is the information how to migrate. Thank you for using DeepCode üôè ‚ù§Ô∏è ! If you are using our plugins, you might be interested in their successors: [Snyk's JetBrains plugin](https://snyk.co/udpkq) and [Snyk's VS Code plugin](https://snyk.co/udpkr).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:1094,interoperability,plug,plugin,1094,"<img src=""https://www.deepcode.ai/icons/green_check.svg"" width= ""50px"" align= ""left""/> Congratulations :tada:. DeepCode [analyzed](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) your code in 2.054 seconds and we found no issues. Enjoy a moment of no bugs :sunny:. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project). #### üëâ The DeepCode service and API will be deprecated in August, 2021. [Here](https://www.deepcode.ai/blog/migrate-to-snyk-code) is the information how to migrate. Thank you for using DeepCode üôè ‚ù§Ô∏è ! If you are using our plugins, you might be interested in their successors: [Snyk's JetBrains plugin](https://snyk.co/udpkq) and [Snyk's VS Code plugin](https://snyk.co/udpkr).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:769,modifiability,servic,service,769,"<img src=""https://www.deepcode.ai/icons/green_check.svg"" width= ""50px"" align= ""left""/> Congratulations :tada:. DeepCode [analyzed](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) your code in 2.054 seconds and we found no issues. Enjoy a moment of no bugs :sunny:. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/4731acb7de0162cfcf7faa4a77c6d09d6ddab705/root-project/root/5e4f50834a0c05547823b76f40d09cd24baebb02/pr/_/%2F/code/?utm_source=gh_review&c=0&w=0&i=0&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project). #### üëâ The DeepCode service and API will be deprecated in August, 2021. [Here](https://www.deepcode.ai/blog/migrate-to-snyk-code) is the information how to migrate. Thank you for using DeepCode üôè ‚ù§Ô∏è ! If you are using our plugins, you might be interested in their successors: [Snyk's JetBrains plugin](https://snyk.co/udpkq) and [Snyk's VS Code plugin](https://snyk.co/udpkr).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:61,deployability,build,build,61,@sitongan : I think we should add also `tmva-sofie` as a new build options in the file . `cmake/modules/RootBuildOptions.cmake`. Its default value should be `Off`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:96,deployability,modul,modules,96,@sitongan : I think we should add also `tmva-sofie` as a new build options in the file . `cmake/modules/RootBuildOptions.cmake`. Its default value should be `Off`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:96,modifiability,modul,modules,96,@sitongan : I think we should add also `tmva-sofie` as a new build options in the file . `cmake/modules/RootBuildOptions.cmake`. Its default value should be `Off`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:96,safety,modul,modules,96,@sitongan : I think we should add also `tmva-sofie` as a new build options in the file . `cmake/modules/RootBuildOptions.cmake`. Its default value should be `Off`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:119,deployability,build,build,119,"Hi @sitongan ! Please fork also [roottest](https://github.com/root-project/roottest) to prevent timeout on the Windows build nodes, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:96,performance,time,timeout,96,"Hi @sitongan ! Please fork also [roottest](https://github.com/root-project/roottest) to prevent timeout on the Windows build nodes, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:88,safety,prevent,prevent,88,"Hi @sitongan ! Please fork also [roottest](https://github.com/root-project/roottest) to prevent timeout on the Windows build nodes, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:96,safety,timeout,timeout,96,"Hi @sitongan ! Please fork also [roottest](https://github.com/root-project/roottest) to prevent timeout on the Windows build nodes, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:88,security,preven,prevent,88,"Hi @sitongan ! Please fork also [roottest](https://github.com/root-project/roottest) to prevent timeout on the Windows build nodes, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/pull/7544:31,interoperability,format,format,31,Looks like we should run clang-format on this PR -- it seems there are a lot of unusual whitespaces.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7544
https://github.com/root-project/root/issues/7547:162,integrability,event,eventually,162,"Commit 1db2ea4fd6 introduced a bug in lazy jitted Snapshot calls: the constructor arguments of SnapshotHelper[MT] would go out of scope much before jitting time, eventually causing a nullptr dereference in RJittedAction.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7547
https://github.com/root-project/root/issues/7547:156,performance,time,time,156,"Commit 1db2ea4fd6 introduced a bug in lazy jitted Snapshot calls: the constructor arguments of SnapshotHelper[MT] would go out of scope much before jitting time, eventually causing a nullptr dereference in RJittedAction.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7547
https://github.com/root-project/root/pull/7550:37,availability,failur,failure,37,"Weird coincidence that the only test failure is in a test that uses TBufferMerger, but it should be completely unrelated to my changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7550
https://github.com/root-project/root/pull/7550:37,deployability,fail,failure,37,"Weird coincidence that the only test failure is in a test that uses TBufferMerger, but it should be completely unrelated to my changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7550
https://github.com/root-project/root/pull/7550:37,performance,failur,failure,37,"Weird coincidence that the only test failure is in a test that uses TBufferMerger, but it should be completely unrelated to my changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7550
https://github.com/root-project/root/pull/7550:37,reliability,fail,failure,37,"Weird coincidence that the only test failure is in a test that uses TBufferMerger, but it should be completely unrelated to my changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7550
https://github.com/root-project/root/pull/7550:32,safety,test,test,32,"Weird coincidence that the only test failure is in a test that uses TBufferMerger, but it should be completely unrelated to my changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7550
https://github.com/root-project/root/pull/7550:53,safety,test,test,53,"Weird coincidence that the only test failure is in a test that uses TBufferMerger, but it should be completely unrelated to my changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7550
https://github.com/root-project/root/pull/7550:100,safety,compl,completely,100,"Weird coincidence that the only test failure is in a test that uses TBufferMerger, but it should be completely unrelated to my changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7550
https://github.com/root-project/root/pull/7550:100,security,compl,completely,100,"Weird coincidence that the only test failure is in a test that uses TBufferMerger, but it should be completely unrelated to my changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7550
https://github.com/root-project/root/pull/7550:32,testability,test,test,32,"Weird coincidence that the only test failure is in a test that uses TBufferMerger, but it should be completely unrelated to my changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7550
https://github.com/root-project/root/pull/7550:53,testability,test,test,53,"Weird coincidence that the only test failure is in a test that uses TBufferMerger, but it should be completely unrelated to my changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7550
https://github.com/root-project/root/pull/7550:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7550
https://github.com/root-project/root/pull/7550:530,availability,consist,consistent,530,"> the ABI issue (and the need to do the alloc+dealloc outside the JIT) might have been fixed in llvm9, if we are lucky? This shared_ptr-on-heap trick we use is not to work around ABI issues but to resolve a lifetime issue: we need objects created by compiled code to stay alive at least until jitting time (which in RDF happens lazily), so we keep them around in heap-allocated shared_ptrs and when both compiled code and jitted code is done with them they are destructed. It would be more elegant to guarantee that lifetimes are consistent ""by design"" if possible, but I could not think of a way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7550
https://github.com/root-project/root/pull/7550:40,energy efficiency,alloc,alloc,40,"> the ABI issue (and the need to do the alloc+dealloc outside the JIT) might have been fixed in llvm9, if we are lucky? This shared_ptr-on-heap trick we use is not to work around ABI issues but to resolve a lifetime issue: we need objects created by compiled code to stay alive at least until jitting time (which in RDF happens lazily), so we keep them around in heap-allocated shared_ptrs and when both compiled code and jitted code is done with them they are destructed. It would be more elegant to guarantee that lifetimes are consistent ""by design"" if possible, but I could not think of a way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7550
https://github.com/root-project/root/pull/7550:368,energy efficiency,alloc,allocated,368,"> the ABI issue (and the need to do the alloc+dealloc outside the JIT) might have been fixed in llvm9, if we are lucky? This shared_ptr-on-heap trick we use is not to work around ABI issues but to resolve a lifetime issue: we need objects created by compiled code to stay alive at least until jitting time (which in RDF happens lazily), so we keep them around in heap-allocated shared_ptrs and when both compiled code and jitted code is done with them they are destructed. It would be more elegant to guarantee that lifetimes are consistent ""by design"" if possible, but I could not think of a way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7550
https://github.com/root-project/root/pull/7550:301,performance,time,time,301,"> the ABI issue (and the need to do the alloc+dealloc outside the JIT) might have been fixed in llvm9, if we are lucky? This shared_ptr-on-heap trick we use is not to work around ABI issues but to resolve a lifetime issue: we need objects created by compiled code to stay alive at least until jitting time (which in RDF happens lazily), so we keep them around in heap-allocated shared_ptrs and when both compiled code and jitted code is done with them they are destructed. It would be more elegant to guarantee that lifetimes are consistent ""by design"" if possible, but I could not think of a way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7550
https://github.com/root-project/root/pull/7550:530,usability,consist,consistent,530,"> the ABI issue (and the need to do the alloc+dealloc outside the JIT) might have been fixed in llvm9, if we are lucky? This shared_ptr-on-heap trick we use is not to work around ABI issues but to resolve a lifetime issue: we need objects created by compiled code to stay alive at least until jitting time (which in RDF happens lazily), so we keep them around in heap-allocated shared_ptrs and when both compiled code and jitted code is done with them they are destructed. It would be more elegant to guarantee that lifetimes are consistent ""by design"" if possible, but I could not think of a way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7550
https://github.com/root-project/root/pull/7552:19,interoperability,conflict,conflicts,19,Rebased to resolve conflicts.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7552
https://github.com/root-project/root/pull/7552:40,energy efficiency,green,green,40,"Rebased to fix conflicts, will merge if green",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7552
https://github.com/root-project/root/pull/7552:15,interoperability,conflict,conflicts,15,"Rebased to fix conflicts, will merge if green",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7552
https://github.com/root-project/root/pull/7553:19,interoperability,conflict,conflicts,19,Rebased to resolve conflicts.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7553
https://github.com/root-project/root/pull/7557:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7557
https://github.com/root-project/root/issues/7558:76,deployability,Patch,Patch,76,"https://github.com/root-project/root/commit/22c2423 should fix the problem. Patch applied to master, 6.24 and 6.22 branches. Unfortunately, 6.24rc1 is not working",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7558
https://github.com/root-project/root/issues/7558:76,safety,Patch,Patch,76,"https://github.com/root-project/root/commit/22c2423 should fix the problem. Patch applied to master, 6.24 and 6.22 branches. Unfortunately, 6.24rc1 is not working",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7558
https://github.com/root-project/root/issues/7558:76,security,Patch,Patch,76,"https://github.com/root-project/root/commit/22c2423 should fix the problem. Patch applied to master, 6.24 and 6.22 branches. Unfortunately, 6.24rc1 is not working",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7558
https://github.com/root-project/root/issues/7561:132,deployability,api,api,132,"I would go for something a bit more structured, like [pandas.DataFrame.info](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.info.html) (Dask uses it as well). The word ""schema"" is more frequent in relational databases, so ""info"" sounds more generic and less confusing in this case too. It would be nice to show the following info:. 1. TTree name. 2. names of the columns (already provided in PR). 3. types of the columns (already provided in PR). 4. Total number of entries. 5. For columns where entries are collections, show the number of elements per each entry if it's fixed, e.g. `Muon_pt ""Muon_pt[nMuon]/F""`. 6. Nice to have: # ""null"" elements of each column (in our usecases it's a bit difficult to manage this because there's no consensus on ""null""). 7. Nice to have: size in memory of the TTree and the columns",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:734,deployability,manag,manage,734,"I would go for something a bit more structured, like [pandas.DataFrame.info](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.info.html) (Dask uses it as well). The word ""schema"" is more frequent in relational databases, so ""info"" sounds more generic and less confusing in this case too. It would be nice to show the following info:. 1. TTree name. 2. names of the columns (already provided in PR). 3. types of the columns (already provided in PR). 4. Total number of entries. 5. For columns where entries are collections, show the number of elements per each entry if it's fixed, e.g. `Muon_pt ""Muon_pt[nMuon]/F""`. 6. Nice to have: # ""null"" elements of each column (in our usecases it's a bit difficult to manage this because there's no consensus on ""null""). 7. Nice to have: size in memory of the TTree and the columns",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:734,energy efficiency,manag,manage,734,"I would go for something a bit more structured, like [pandas.DataFrame.info](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.info.html) (Dask uses it as well). The word ""schema"" is more frequent in relational databases, so ""info"" sounds more generic and less confusing in this case too. It would be nice to show the following info:. 1. TTree name. 2. names of the columns (already provided in PR). 3. types of the columns (already provided in PR). 4. Total number of entries. 5. For columns where entries are collections, show the number of elements per each entry if it's fixed, e.g. `Muon_pt ""Muon_pt[nMuon]/F""`. 6. Nice to have: # ""null"" elements of each column (in our usecases it's a bit difficult to manage this because there's no consensus on ""null""). 7. Nice to have: size in memory of the TTree and the columns",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:132,integrability,api,api,132,"I would go for something a bit more structured, like [pandas.DataFrame.info](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.info.html) (Dask uses it as well). The word ""schema"" is more frequent in relational databases, so ""info"" sounds more generic and less confusing in this case too. It would be nice to show the following info:. 1. TTree name. 2. names of the columns (already provided in PR). 3. types of the columns (already provided in PR). 4. Total number of entries. 5. For columns where entries are collections, show the number of elements per each entry if it's fixed, e.g. `Muon_pt ""Muon_pt[nMuon]/F""`. 6. Nice to have: # ""null"" elements of each column (in our usecases it's a bit difficult to manage this because there's no consensus on ""null""). 7. Nice to have: size in memory of the TTree and the columns",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:198,integrability,schema,schema,198,"I would go for something a bit more structured, like [pandas.DataFrame.info](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.info.html) (Dask uses it as well). The word ""schema"" is more frequent in relational databases, so ""info"" sounds more generic and less confusing in this case too. It would be nice to show the following info:. 1. TTree name. 2. names of the columns (already provided in PR). 3. types of the columns (already provided in PR). 4. Total number of entries. 5. For columns where entries are collections, show the number of elements per each entry if it's fixed, e.g. `Muon_pt ""Muon_pt[nMuon]/F""`. 6. Nice to have: # ""null"" elements of each column (in our usecases it's a bit difficult to manage this because there's no consensus on ""null""). 7. Nice to have: size in memory of the TTree and the columns",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:132,interoperability,api,api,132,"I would go for something a bit more structured, like [pandas.DataFrame.info](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.info.html) (Dask uses it as well). The word ""schema"" is more frequent in relational databases, so ""info"" sounds more generic and less confusing in this case too. It would be nice to show the following info:. 1. TTree name. 2. names of the columns (already provided in PR). 3. types of the columns (already provided in PR). 4. Total number of entries. 5. For columns where entries are collections, show the number of elements per each entry if it's fixed, e.g. `Muon_pt ""Muon_pt[nMuon]/F""`. 6. Nice to have: # ""null"" elements of each column (in our usecases it's a bit difficult to manage this because there's no consensus on ""null""). 7. Nice to have: size in memory of the TTree and the columns",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:812,performance,memor,memory,812,"I would go for something a bit more structured, like [pandas.DataFrame.info](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.info.html) (Dask uses it as well). The word ""schema"" is more frequent in relational databases, so ""info"" sounds more generic and less confusing in this case too. It would be nice to show the following info:. 1. TTree name. 2. names of the columns (already provided in PR). 3. types of the columns (already provided in PR). 4. Total number of entries. 5. For columns where entries are collections, show the number of elements per each entry if it's fixed, e.g. `Muon_pt ""Muon_pt[nMuon]/F""`. 6. Nice to have: # ""null"" elements of each column (in our usecases it's a bit difficult to manage this because there's no consensus on ""null""). 7. Nice to have: size in memory of the TTree and the columns",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:734,safety,manag,manage,734,"I would go for something a bit more structured, like [pandas.DataFrame.info](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.info.html) (Dask uses it as well). The word ""schema"" is more frequent in relational databases, so ""info"" sounds more generic and less confusing in this case too. It would be nice to show the following info:. 1. TTree name. 2. names of the columns (already provided in PR). 3. types of the columns (already provided in PR). 4. Total number of entries. 5. For columns where entries are collections, show the number of elements per each entry if it's fixed, e.g. `Muon_pt ""Muon_pt[nMuon]/F""`. 6. Nice to have: # ""null"" elements of each column (in our usecases it's a bit difficult to manage this because there's no consensus on ""null""). 7. Nice to have: size in memory of the TTree and the columns",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:812,usability,memor,memory,812,"I would go for something a bit more structured, like [pandas.DataFrame.info](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.info.html) (Dask uses it as well). The word ""schema"" is more frequent in relational databases, so ""info"" sounds more generic and less confusing in this case too. It would be nice to show the following info:. 1. TTree name. 2. names of the columns (already provided in PR). 3. types of the columns (already provided in PR). 4. Total number of entries. 5. For columns where entries are collections, show the number of elements per each entry if it's fixed, e.g. `Muon_pt ""Muon_pt[nMuon]/F""`. 6. Nice to have: # ""null"" elements of each column (in our usecases it's a bit difficult to manage this because there's no consensus on ""null""). 7. Nice to have: size in memory of the TTree and the columns",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:86,modifiability,paramet,parameter,86,"Also I'm in doubt on how to treat friend trees in this context. Maybe adding an extra parameter `(show_friends=false)` to the function, not sure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:55,testability,context,context,55,"Also I'm in doubt on how to treat friend trees in this context. Maybe adding an extra parameter `(show_friends=false)` to the function, not sure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:87,availability,operat,operation,87,"Thanks for the suggestions! Very good points :). We have to take into account that the operation should be close to ""zero-cost"", like `GetColumnNames()` and friends. So the total number of entries, size in memory, ... is potentially costly (?). Regarding friends: I'd see them just as part of the dataset. Friend or not, the column is accessible. Or is there any special quirk of friends that we should consider?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:206,performance,memor,memory,206,"Thanks for the suggestions! Very good points :). We have to take into account that the operation should be close to ""zero-cost"", like `GetColumnNames()` and friends. So the total number of entries, size in memory, ... is potentially costly (?). Regarding friends: I'd see them just as part of the dataset. Friend or not, the column is accessible. Or is there any special quirk of friends that we should consider?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:335,security,access,accessible,335,"Thanks for the suggestions! Very good points :). We have to take into account that the operation should be close to ""zero-cost"", like `GetColumnNames()` and friends. So the total number of entries, size in memory, ... is potentially costly (?). Regarding friends: I'd see them just as part of the dataset. Friend or not, the column is accessible. Or is there any special quirk of friends that we should consider?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:107,usability,close,close,107,"Thanks for the suggestions! Very good points :). We have to take into account that the operation should be close to ""zero-cost"", like `GetColumnNames()` and friends. So the total number of entries, size in memory, ... is potentially costly (?). Regarding friends: I'd see them just as part of the dataset. Friend or not, the column is accessible. Or is there any special quirk of friends that we should consider?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:206,usability,memor,memory,206,"Thanks for the suggestions! Very good points :). We have to take into account that the operation should be close to ""zero-cost"", like `GetColumnNames()` and friends. So the total number of entries, size in memory, ... is potentially costly (?). Regarding friends: I'd see them just as part of the dataset. Friend or not, the column is accessible. Or is there any special quirk of friends that we should consider?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:90,deployability,manag,manage,90,"> Nice to have: # ""null"" elements of each column (in our usecases it's a bit difficult to manage this because there's no consensus on ""null""). @vepadulano Could you clarify what you mean with null elements of columns?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:90,energy efficiency,manag,manage,90,"> Nice to have: # ""null"" elements of each column (in our usecases it's a bit difficult to manage this because there's no consensus on ""null""). @vepadulano Could you clarify what you mean with null elements of columns?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:90,safety,manag,manage,90,"> Nice to have: # ""null"" elements of each column (in our usecases it's a bit difficult to manage this because there's no consensus on ""null""). @vepadulano Could you clarify what you mean with null elements of columns?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:242,interoperability,specif,specific,242,"> For columns where entries are collections, show the number of elements per each entry if it's fixed, e.g. Muon_pt ""Muon_pt[nMuon]/F"". This is a very good point, but I think not directly doable from the RDF point of view since this is TTree specific and not general for any datasource. @eguiraud What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:153,reliability,doe,does,153,> Total number of entries. How cheap is this? I guess it's rather cheap if this info can be taken from the header and not via iterating of the data. How does this generalize to other datasources? @eguiraud I bet you know all implementation details :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:246,energy efficiency,core,core,246,"Here the suggested example from pandas, with code example to play around:. ```python. import pandas. data = {'myInt': [1, 2, 3], 'myFloat': [1., 2., 3.], 'myStr': ['a', 'b', 'c']}. df = pandas.DataFrame(data). df.info(). ```. ```. <class 'pandas.core.frame.DataFrame'>. RangeIndex: 3 entries, 0 to 2. Data columns (total 3 columns):. # Column Non-Null Count Dtype . --- ------ -------------- ----- . 0 myInt 3 non-null int64 . 1 myFloat 3 non-null float64. 2 myStr 3 non-null object . dtypes: float64(1), int64(1), object(1). memory usage: 200.0+ bytes. ```. Memory usage is really nice, the rest I find not very informative. Or is it just me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:526,performance,memor,memory,526,"Here the suggested example from pandas, with code example to play around:. ```python. import pandas. data = {'myInt': [1, 2, 3], 'myFloat': [1., 2., 3.], 'myStr': ['a', 'b', 'c']}. df = pandas.DataFrame(data). df.info(). ```. ```. <class 'pandas.core.frame.DataFrame'>. RangeIndex: 3 entries, 0 to 2. Data columns (total 3 columns):. # Column Non-Null Count Dtype . --- ------ -------------- ----- . 0 myInt 3 non-null int64 . 1 myFloat 3 non-null float64. 2 myStr 3 non-null object . dtypes: float64(1), int64(1), object(1). memory usage: 200.0+ bytes. ```. Memory usage is really nice, the rest I find not very informative. Or is it just me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:559,performance,Memor,Memory,559,"Here the suggested example from pandas, with code example to play around:. ```python. import pandas. data = {'myInt': [1, 2, 3], 'myFloat': [1., 2., 3.], 'myStr': ['a', 'b', 'c']}. df = pandas.DataFrame(data). df.info(). ```. ```. <class 'pandas.core.frame.DataFrame'>. RangeIndex: 3 entries, 0 to 2. Data columns (total 3 columns):. # Column Non-Null Count Dtype . --- ------ -------------- ----- . 0 myInt 3 non-null int64 . 1 myFloat 3 non-null float64. 2 myStr 3 non-null object . dtypes: float64(1), int64(1), object(1). memory usage: 200.0+ bytes. ```. Memory usage is really nice, the rest I find not very informative. Or is it just me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:526,usability,memor,memory,526,"Here the suggested example from pandas, with code example to play around:. ```python. import pandas. data = {'myInt': [1, 2, 3], 'myFloat': [1., 2., 3.], 'myStr': ['a', 'b', 'c']}. df = pandas.DataFrame(data). df.info(). ```. ```. <class 'pandas.core.frame.DataFrame'>. RangeIndex: 3 entries, 0 to 2. Data columns (total 3 columns):. # Column Non-Null Count Dtype . --- ------ -------------- ----- . 0 myInt 3 non-null int64 . 1 myFloat 3 non-null float64. 2 myStr 3 non-null object . dtypes: float64(1), int64(1), object(1). memory usage: 200.0+ bytes. ```. Memory usage is really nice, the rest I find not very informative. Or is it just me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:559,usability,Memor,Memory,559,"Here the suggested example from pandas, with code example to play around:. ```python. import pandas. data = {'myInt': [1, 2, 3], 'myFloat': [1., 2., 3.], 'myStr': ['a', 'b', 'c']}. df = pandas.DataFrame(data). df.info(). ```. ```. <class 'pandas.core.frame.DataFrame'>. RangeIndex: 3 entries, 0 to 2. Data columns (total 3 columns):. # Column Non-Null Count Dtype . --- ------ -------------- ----- . 0 myInt 3 non-null int64 . 1 myFloat 3 non-null float64. 2 myStr 3 non-null object . dtypes: float64(1), int64(1), object(1). memory usage: 200.0+ bytes. ```. Memory usage is really nice, the rest I find not very informative. Or is it just me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:659,deployability,depend,dependant,659,"> Do we like the name of the function? Yes, I'm pretty sure all physicists understand ""schema"" as ""the structure of the dataset/TTree"" . > Do we like that it returns a string rather than printing to stdout? Yes, why not? It's more flexible than a printout. > Should we add a header to the table? Yes, definitely. > Should we add any other information (see TTree::Print)? Probably. About the rest:. * Friend branches: I agree with Stefan the should not be treated specially, they are just more columns. * Total number of entries: does not generalize to datasources, it might not be cheap in general. However there is no reason why we cannot print a datasource-dependant heading, with a more complete heading for TTree/TChain and less info for other datasources. * Size in memory of the TTree and the columns: that's not a thing, TTree knows at most the compressed size of branches. * null values are not a thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:87,integrability,schema,schema,87,"> Do we like the name of the function? Yes, I'm pretty sure all physicists understand ""schema"" as ""the structure of the dataset/TTree"" . > Do we like that it returns a string rather than printing to stdout? Yes, why not? It's more flexible than a printout. > Should we add a header to the table? Yes, definitely. > Should we add any other information (see TTree::Print)? Probably. About the rest:. * Friend branches: I agree with Stefan the should not be treated specially, they are just more columns. * Total number of entries: does not generalize to datasources, it might not be cheap in general. However there is no reason why we cannot print a datasource-dependant heading, with a more complete heading for TTree/TChain and less info for other datasources. * Size in memory of the TTree and the columns: that's not a thing, TTree knows at most the compressed size of branches. * null values are not a thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:659,integrability,depend,dependant,659,"> Do we like the name of the function? Yes, I'm pretty sure all physicists understand ""schema"" as ""the structure of the dataset/TTree"" . > Do we like that it returns a string rather than printing to stdout? Yes, why not? It's more flexible than a printout. > Should we add a header to the table? Yes, definitely. > Should we add any other information (see TTree::Print)? Probably. About the rest:. * Friend branches: I agree with Stefan the should not be treated specially, they are just more columns. * Total number of entries: does not generalize to datasources, it might not be cheap in general. However there is no reason why we cannot print a datasource-dependant heading, with a more complete heading for TTree/TChain and less info for other datasources. * Size in memory of the TTree and the columns: that's not a thing, TTree knows at most the compressed size of branches. * null values are not a thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:659,modifiability,depend,dependant,659,"> Do we like the name of the function? Yes, I'm pretty sure all physicists understand ""schema"" as ""the structure of the dataset/TTree"" . > Do we like that it returns a string rather than printing to stdout? Yes, why not? It's more flexible than a printout. > Should we add a header to the table? Yes, definitely. > Should we add any other information (see TTree::Print)? Probably. About the rest:. * Friend branches: I agree with Stefan the should not be treated specially, they are just more columns. * Total number of entries: does not generalize to datasources, it might not be cheap in general. However there is no reason why we cannot print a datasource-dependant heading, with a more complete heading for TTree/TChain and less info for other datasources. * Size in memory of the TTree and the columns: that's not a thing, TTree knows at most the compressed size of branches. * null values are not a thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:771,performance,memor,memory,771,"> Do we like the name of the function? Yes, I'm pretty sure all physicists understand ""schema"" as ""the structure of the dataset/TTree"" . > Do we like that it returns a string rather than printing to stdout? Yes, why not? It's more flexible than a printout. > Should we add a header to the table? Yes, definitely. > Should we add any other information (see TTree::Print)? Probably. About the rest:. * Friend branches: I agree with Stefan the should not be treated specially, they are just more columns. * Total number of entries: does not generalize to datasources, it might not be cheap in general. However there is no reason why we cannot print a datasource-dependant heading, with a more complete heading for TTree/TChain and less info for other datasources. * Size in memory of the TTree and the columns: that's not a thing, TTree knows at most the compressed size of branches. * null values are not a thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:529,reliability,doe,does,529,"> Do we like the name of the function? Yes, I'm pretty sure all physicists understand ""schema"" as ""the structure of the dataset/TTree"" . > Do we like that it returns a string rather than printing to stdout? Yes, why not? It's more flexible than a printout. > Should we add a header to the table? Yes, definitely. > Should we add any other information (see TTree::Print)? Probably. About the rest:. * Friend branches: I agree with Stefan the should not be treated specially, they are just more columns. * Total number of entries: does not generalize to datasources, it might not be cheap in general. However there is no reason why we cannot print a datasource-dependant heading, with a more complete heading for TTree/TChain and less info for other datasources. * Size in memory of the TTree and the columns: that's not a thing, TTree knows at most the compressed size of branches. * null values are not a thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:659,safety,depend,dependant,659,"> Do we like the name of the function? Yes, I'm pretty sure all physicists understand ""schema"" as ""the structure of the dataset/TTree"" . > Do we like that it returns a string rather than printing to stdout? Yes, why not? It's more flexible than a printout. > Should we add a header to the table? Yes, definitely. > Should we add any other information (see TTree::Print)? Probably. About the rest:. * Friend branches: I agree with Stefan the should not be treated specially, they are just more columns. * Total number of entries: does not generalize to datasources, it might not be cheap in general. However there is no reason why we cannot print a datasource-dependant heading, with a more complete heading for TTree/TChain and less info for other datasources. * Size in memory of the TTree and the columns: that's not a thing, TTree knows at most the compressed size of branches. * null values are not a thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:690,safety,compl,complete,690,"> Do we like the name of the function? Yes, I'm pretty sure all physicists understand ""schema"" as ""the structure of the dataset/TTree"" . > Do we like that it returns a string rather than printing to stdout? Yes, why not? It's more flexible than a printout. > Should we add a header to the table? Yes, definitely. > Should we add any other information (see TTree::Print)? Probably. About the rest:. * Friend branches: I agree with Stefan the should not be treated specially, they are just more columns. * Total number of entries: does not generalize to datasources, it might not be cheap in general. However there is no reason why we cannot print a datasource-dependant heading, with a more complete heading for TTree/TChain and less info for other datasources. * Size in memory of the TTree and the columns: that's not a thing, TTree knows at most the compressed size of branches. * null values are not a thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:690,security,compl,complete,690,"> Do we like the name of the function? Yes, I'm pretty sure all physicists understand ""schema"" as ""the structure of the dataset/TTree"" . > Do we like that it returns a string rather than printing to stdout? Yes, why not? It's more flexible than a printout. > Should we add a header to the table? Yes, definitely. > Should we add any other information (see TTree::Print)? Probably. About the rest:. * Friend branches: I agree with Stefan the should not be treated specially, they are just more columns. * Total number of entries: does not generalize to datasources, it might not be cheap in general. However there is no reason why we cannot print a datasource-dependant heading, with a more complete heading for TTree/TChain and less info for other datasources. * Size in memory of the TTree and the columns: that's not a thing, TTree knows at most the compressed size of branches. * null values are not a thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:75,testability,understand,understand,75,"> Do we like the name of the function? Yes, I'm pretty sure all physicists understand ""schema"" as ""the structure of the dataset/TTree"" . > Do we like that it returns a string rather than printing to stdout? Yes, why not? It's more flexible than a printout. > Should we add a header to the table? Yes, definitely. > Should we add any other information (see TTree::Print)? Probably. About the rest:. * Friend branches: I agree with Stefan the should not be treated specially, they are just more columns. * Total number of entries: does not generalize to datasources, it might not be cheap in general. However there is no reason why we cannot print a datasource-dependant heading, with a more complete heading for TTree/TChain and less info for other datasources. * Size in memory of the TTree and the columns: that's not a thing, TTree knows at most the compressed size of branches. * null values are not a thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:659,testability,depend,dependant,659,"> Do we like the name of the function? Yes, I'm pretty sure all physicists understand ""schema"" as ""the structure of the dataset/TTree"" . > Do we like that it returns a string rather than printing to stdout? Yes, why not? It's more flexible than a printout. > Should we add a header to the table? Yes, definitely. > Should we add any other information (see TTree::Print)? Probably. About the rest:. * Friend branches: I agree with Stefan the should not be treated specially, they are just more columns. * Total number of entries: does not generalize to datasources, it might not be cheap in general. However there is no reason why we cannot print a datasource-dependant heading, with a more complete heading for TTree/TChain and less info for other datasources. * Size in memory of the TTree and the columns: that's not a thing, TTree knows at most the compressed size of branches. * null values are not a thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:771,usability,memor,memory,771,"> Do we like the name of the function? Yes, I'm pretty sure all physicists understand ""schema"" as ""the structure of the dataset/TTree"" . > Do we like that it returns a string rather than printing to stdout? Yes, why not? It's more flexible than a printout. > Should we add a header to the table? Yes, definitely. > Should we add any other information (see TTree::Print)? Probably. About the rest:. * Friend branches: I agree with Stefan the should not be treated specially, they are just more columns. * Total number of entries: does not generalize to datasources, it might not be cheap in general. However there is no reason why we cannot print a datasource-dependant heading, with a more complete heading for TTree/TChain and less info for other datasources. * Size in memory of the TTree and the columns: that's not a thing, TTree knows at most the compressed size of branches. * null values are not a thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:144,integrability,sub,subject,144,What we learned from todays PPP:. - We probably want to call it better like `Describe` (done). - We have to document clearly that the output is subject to change and should not be parsed (done). - Add number of DF runs is useful (done). - We have to figure out what to show if there are hundreds of columns. - ~We should try to follow a markdown style formatting to make it look nice in jupyter and friends~ (IMHO: Too complex),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:352,interoperability,format,formatting,352,What we learned from todays PPP:. - We probably want to call it better like `Describe` (done). - We have to document clearly that the output is subject to change and should not be parsed (done). - Add number of DF runs is useful (done). - We have to figure out what to show if there are hundreds of columns. - ~We should try to follow a markdown style formatting to make it look nice in jupyter and friends~ (IMHO: Too complex),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:419,safety,compl,complex,419,What we learned from todays PPP:. - We probably want to call it better like `Describe` (done). - We have to document clearly that the output is subject to change and should not be parsed (done). - Add number of DF runs is useful (done). - We have to figure out what to show if there are hundreds of columns. - ~We should try to follow a markdown style formatting to make it look nice in jupyter and friends~ (IMHO: Too complex),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:419,security,compl,complex,419,What we learned from todays PPP:. - We probably want to call it better like `Describe` (done). - We have to document clearly that the output is subject to change and should not be parsed (done). - Add number of DF runs is useful (done). - We have to figure out what to show if there are hundreds of columns. - ~We should try to follow a markdown style formatting to make it look nice in jupyter and friends~ (IMHO: Too complex),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:8,usability,learn,learned,8,What we learned from todays PPP:. - We probably want to call it better like `Describe` (done). - We have to document clearly that the output is subject to change and should not be parsed (done). - Add number of DF runs is useful (done). - We have to figure out what to show if there are hundreds of columns. - ~We should try to follow a markdown style formatting to make it look nice in jupyter and friends~ (IMHO: Too complex),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:108,usability,document,document,108,What we learned from todays PPP:. - We probably want to call it better like `Describe` (done). - We have to document clearly that the output is subject to change and should not be parsed (done). - Add number of DF runs is useful (done). - We have to figure out what to show if there are hundreds of columns. - ~We should try to follow a markdown style formatting to make it look nice in jupyter and friends~ (IMHO: Too complex),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:117,usability,clear,clearly,117,What we learned from todays PPP:. - We probably want to call it better like `Describe` (done). - We have to document clearly that the output is subject to change and should not be parsed (done). - Add number of DF runs is useful (done). - We have to figure out what to show if there are hundreds of columns. - ~We should try to follow a markdown style formatting to make it look nice in jupyter and friends~ (IMHO: Too complex),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:60,safety,compl,complex,60,"The pretty printing of pandas dataframes is actually a very complex thing, see [here](https://pandas.pydata.org/pandas-docs/stable/user_guide/style.html). I doubt that this is feasible for us.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:60,security,compl,complex,60,"The pretty printing of pandas dataframes is actually a very complex thing, see [here](https://pandas.pydata.org/pandas-docs/stable/user_guide/style.html). I doubt that this is feasible for us.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:316,availability,state,state,316,"Here is my next proposal, it's actually the tutorial I've now added. Spot the physics! :). ```python. import ROOT. # Create a dataframe. path = 'root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root'. df = ROOT.RDataFrame('Events', path). # Describe the state of the dataframe. # Note that this operation is not running the event loop. print(df.Describe()). # Build a small analysis studying the invariant mass of dimuon systems. # See tutorial df102_NanoAODDimuonAnalysis for more information. df = df.Filter('nMuon == 2')\. .Filter('Muon_charge[0] != Muon_charge[1]')\. .Define('Dimuon_mass', 'InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)')\. .Filter('Dimuon_mass > 70')\. .Range(1000). # Trigger the event loop by asking for the mean of the dimuon mass. print('\nApproximate mass of the Z boson: {:.2f} GeV\n'.format(. df.Mean('Dimuon_mass').GetValue())). # Describe again the state of the dataframe. print(df.Describe()). ```. ```. Number of. run event loops: 0. columns in total: 6. columns from defines: 0. Column Type Origin. ------ ---- ------. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. Approximate mass of the Z boson: 91.44 GeV. Number of. run event loops: 1. columns in total: 7. columns from defines: 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:357,availability,operat,operation,357,"Here is my next proposal, it's actually the tutorial I've now added. Spot the physics! :). ```python. import ROOT. # Create a dataframe. path = 'root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root'. df = ROOT.RDataFrame('Events', path). # Describe the state of the dataframe. # Note that this operation is not running the event loop. print(df.Describe()). # Build a small analysis studying the invariant mass of dimuon systems. # See tutorial df102_NanoAODDimuonAnalysis for more information. df = df.Filter('nMuon == 2')\. .Filter('Muon_charge[0] != Muon_charge[1]')\. .Define('Dimuon_mass', 'InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)')\. .Filter('Dimuon_mass > 70')\. .Range(1000). # Trigger the event loop by asking for the mean of the dimuon mass. print('\nApproximate mass of the Z boson: {:.2f} GeV\n'.format(. df.Mean('Dimuon_mass').GetValue())). # Describe again the state of the dataframe. print(df.Describe()). ```. ```. Number of. run event loops: 0. columns in total: 6. columns from defines: 0. Column Type Origin. ------ ---- ------. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. Approximate mass of the Z boson: 91.44 GeV. Number of. run event loops: 1. columns in total: 7. columns from defines: 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:951,availability,state,state,951,"Here is my next proposal, it's actually the tutorial I've now added. Spot the physics! :). ```python. import ROOT. # Create a dataframe. path = 'root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root'. df = ROOT.RDataFrame('Events', path). # Describe the state of the dataframe. # Note that this operation is not running the event loop. print(df.Describe()). # Build a small analysis studying the invariant mass of dimuon systems. # See tutorial df102_NanoAODDimuonAnalysis for more information. df = df.Filter('nMuon == 2')\. .Filter('Muon_charge[0] != Muon_charge[1]')\. .Define('Dimuon_mass', 'InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)')\. .Filter('Dimuon_mass > 70')\. .Range(1000). # Trigger the event loop by asking for the mean of the dimuon mass. print('\nApproximate mass of the Z boson: {:.2f} GeV\n'.format(. df.Mean('Dimuon_mass').GetValue())). # Describe again the state of the dataframe. print(df.Describe()). ```. ```. Number of. run event loops: 0. columns in total: 6. columns from defines: 0. Column Type Origin. ------ ---- ------. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. Approximate mass of the Z boson: 91.44 GeV. Number of. run event loops: 1. columns in total: 7. columns from defines: 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:422,deployability,Build,Build,422,"Here is my next proposal, it's actually the tutorial I've now added. Spot the physics! :). ```python. import ROOT. # Create a dataframe. path = 'root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root'. df = ROOT.RDataFrame('Events', path). # Describe the state of the dataframe. # Note that this operation is not running the event loop. print(df.Describe()). # Build a small analysis studying the invariant mass of dimuon systems. # See tutorial df102_NanoAODDimuonAnalysis for more information. df = df.Filter('nMuon == 2')\. .Filter('Muon_charge[0] != Muon_charge[1]')\. .Define('Dimuon_mass', 'InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)')\. .Filter('Dimuon_mass > 70')\. .Range(1000). # Trigger the event loop by asking for the mean of the dimuon mass. print('\nApproximate mass of the Z boson: {:.2f} GeV\n'.format(. df.Mean('Dimuon_mass').GetValue())). # Describe again the state of the dataframe. print(df.Describe()). ```. ```. Number of. run event loops: 0. columns in total: 6. columns from defines: 0. Column Type Origin. ------ ---- ------. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. Approximate mass of the Z boson: 91.44 GeV. Number of. run event loops: 1. columns in total: 7. columns from defines: 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:285,integrability,Event,Events,285,"Here is my next proposal, it's actually the tutorial I've now added. Spot the physics! :). ```python. import ROOT. # Create a dataframe. path = 'root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root'. df = ROOT.RDataFrame('Events', path). # Describe the state of the dataframe. # Note that this operation is not running the event loop. print(df.Describe()). # Build a small analysis studying the invariant mass of dimuon systems. # See tutorial df102_NanoAODDimuonAnalysis for more information. df = df.Filter('nMuon == 2')\. .Filter('Muon_charge[0] != Muon_charge[1]')\. .Define('Dimuon_mass', 'InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)')\. .Filter('Dimuon_mass > 70')\. .Range(1000). # Trigger the event loop by asking for the mean of the dimuon mass. print('\nApproximate mass of the Z boson: {:.2f} GeV\n'.format(. df.Mean('Dimuon_mass').GetValue())). # Describe again the state of the dataframe. print(df.Describe()). ```. ```. Number of. run event loops: 0. columns in total: 6. columns from defines: 0. Column Type Origin. ------ ---- ------. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. Approximate mass of the Z boson: 91.44 GeV. Number of. run event loops: 1. columns in total: 7. columns from defines: 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:316,integrability,state,state,316,"Here is my next proposal, it's actually the tutorial I've now added. Spot the physics! :). ```python. import ROOT. # Create a dataframe. path = 'root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root'. df = ROOT.RDataFrame('Events', path). # Describe the state of the dataframe. # Note that this operation is not running the event loop. print(df.Describe()). # Build a small analysis studying the invariant mass of dimuon systems. # See tutorial df102_NanoAODDimuonAnalysis for more information. df = df.Filter('nMuon == 2')\. .Filter('Muon_charge[0] != Muon_charge[1]')\. .Define('Dimuon_mass', 'InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)')\. .Filter('Dimuon_mass > 70')\. .Range(1000). # Trigger the event loop by asking for the mean of the dimuon mass. print('\nApproximate mass of the Z boson: {:.2f} GeV\n'.format(. df.Mean('Dimuon_mass').GetValue())). # Describe again the state of the dataframe. print(df.Describe()). ```. ```. Number of. run event loops: 0. columns in total: 6. columns from defines: 0. Column Type Origin. ------ ---- ------. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. Approximate mass of the Z boson: 91.44 GeV. Number of. run event loops: 1. columns in total: 7. columns from defines: 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:386,integrability,event,event,386,"Here is my next proposal, it's actually the tutorial I've now added. Spot the physics! :). ```python. import ROOT. # Create a dataframe. path = 'root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root'. df = ROOT.RDataFrame('Events', path). # Describe the state of the dataframe. # Note that this operation is not running the event loop. print(df.Describe()). # Build a small analysis studying the invariant mass of dimuon systems. # See tutorial df102_NanoAODDimuonAnalysis for more information. df = df.Filter('nMuon == 2')\. .Filter('Muon_charge[0] != Muon_charge[1]')\. .Define('Dimuon_mass', 'InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)')\. .Filter('Dimuon_mass > 70')\. .Range(1000). # Trigger the event loop by asking for the mean of the dimuon mass. print('\nApproximate mass of the Z boson: {:.2f} GeV\n'.format(. df.Mean('Dimuon_mass').GetValue())). # Describe again the state of the dataframe. print(df.Describe()). ```. ```. Number of. run event loops: 0. columns in total: 6. columns from defines: 0. Column Type Origin. ------ ---- ------. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. Approximate mass of the Z boson: 91.44 GeV. Number of. run event loops: 1. columns in total: 7. columns from defines: 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:565,integrability,Filter,Filter,565,"Here is my next proposal, it's actually the tutorial I've now added. Spot the physics! :). ```python. import ROOT. # Create a dataframe. path = 'root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root'. df = ROOT.RDataFrame('Events', path). # Describe the state of the dataframe. # Note that this operation is not running the event loop. print(df.Describe()). # Build a small analysis studying the invariant mass of dimuon systems. # See tutorial df102_NanoAODDimuonAnalysis for more information. df = df.Filter('nMuon == 2')\. .Filter('Muon_charge[0] != Muon_charge[1]')\. .Define('Dimuon_mass', 'InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)')\. .Filter('Dimuon_mass > 70')\. .Range(1000). # Trigger the event loop by asking for the mean of the dimuon mass. print('\nApproximate mass of the Z boson: {:.2f} GeV\n'.format(. df.Mean('Dimuon_mass').GetValue())). # Describe again the state of the dataframe. print(df.Describe()). ```. ```. Number of. run event loops: 0. columns in total: 6. columns from defines: 0. Column Type Origin. ------ ---- ------. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. Approximate mass of the Z boson: 91.44 GeV. Number of. run event loops: 1. columns in total: 7. columns from defines: 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:589,integrability,Filter,Filter,589,"Here is my next proposal, it's actually the tutorial I've now added. Spot the physics! :). ```python. import ROOT. # Create a dataframe. path = 'root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root'. df = ROOT.RDataFrame('Events', path). # Describe the state of the dataframe. # Note that this operation is not running the event loop. print(df.Describe()). # Build a small analysis studying the invariant mass of dimuon systems. # See tutorial df102_NanoAODDimuonAnalysis for more information. df = df.Filter('nMuon == 2')\. .Filter('Muon_charge[0] != Muon_charge[1]')\. .Define('Dimuon_mass', 'InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)')\. .Filter('Dimuon_mass > 70')\. .Range(1000). # Trigger the event loop by asking for the mean of the dimuon mass. print('\nApproximate mass of the Z boson: {:.2f} GeV\n'.format(. df.Mean('Dimuon_mass').GetValue())). # Describe again the state of the dataframe. print(df.Describe()). ```. ```. Number of. run event loops: 0. columns in total: 6. columns from defines: 0. Column Type Origin. ------ ---- ------. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. Approximate mass of the Z boson: 91.44 GeV. Number of. run event loops: 1. columns in total: 7. columns from defines: 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:717,integrability,Filter,Filter,717,"Here is my next proposal, it's actually the tutorial I've now added. Spot the physics! :). ```python. import ROOT. # Create a dataframe. path = 'root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root'. df = ROOT.RDataFrame('Events', path). # Describe the state of the dataframe. # Note that this operation is not running the event loop. print(df.Describe()). # Build a small analysis studying the invariant mass of dimuon systems. # See tutorial df102_NanoAODDimuonAnalysis for more information. df = df.Filter('nMuon == 2')\. .Filter('Muon_charge[0] != Muon_charge[1]')\. .Define('Dimuon_mass', 'InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)')\. .Filter('Dimuon_mass > 70')\. .Range(1000). # Trigger the event loop by asking for the mean of the dimuon mass. print('\nApproximate mass of the Z boson: {:.2f} GeV\n'.format(. df.Mean('Dimuon_mass').GetValue())). # Describe again the state of the dataframe. print(df.Describe()). ```. ```. Number of. run event loops: 0. columns in total: 6. columns from defines: 0. Column Type Origin. ------ ---- ------. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. Approximate mass of the Z boson: 91.44 GeV. Number of. run event loops: 1. columns in total: 7. columns from defines: 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:774,integrability,event,event,774,"Here is my next proposal, it's actually the tutorial I've now added. Spot the physics! :). ```python. import ROOT. # Create a dataframe. path = 'root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root'. df = ROOT.RDataFrame('Events', path). # Describe the state of the dataframe. # Note that this operation is not running the event loop. print(df.Describe()). # Build a small analysis studying the invariant mass of dimuon systems. # See tutorial df102_NanoAODDimuonAnalysis for more information. df = df.Filter('nMuon == 2')\. .Filter('Muon_charge[0] != Muon_charge[1]')\. .Define('Dimuon_mass', 'InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)')\. .Filter('Dimuon_mass > 70')\. .Range(1000). # Trigger the event loop by asking for the mean of the dimuon mass. print('\nApproximate mass of the Z boson: {:.2f} GeV\n'.format(. df.Mean('Dimuon_mass').GetValue())). # Describe again the state of the dataframe. print(df.Describe()). ```. ```. Number of. run event loops: 0. columns in total: 6. columns from defines: 0. Column Type Origin. ------ ---- ------. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. Approximate mass of the Z boson: 91.44 GeV. Number of. run event loops: 1. columns in total: 7. columns from defines: 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:951,integrability,state,state,951,"Here is my next proposal, it's actually the tutorial I've now added. Spot the physics! :). ```python. import ROOT. # Create a dataframe. path = 'root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root'. df = ROOT.RDataFrame('Events', path). # Describe the state of the dataframe. # Note that this operation is not running the event loop. print(df.Describe()). # Build a small analysis studying the invariant mass of dimuon systems. # See tutorial df102_NanoAODDimuonAnalysis for more information. df = df.Filter('nMuon == 2')\. .Filter('Muon_charge[0] != Muon_charge[1]')\. .Define('Dimuon_mass', 'InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)')\. .Filter('Dimuon_mass > 70')\. .Range(1000). # Trigger the event loop by asking for the mean of the dimuon mass. print('\nApproximate mass of the Z boson: {:.2f} GeV\n'.format(. df.Mean('Dimuon_mass').GetValue())). # Describe again the state of the dataframe. print(df.Describe()). ```. ```. Number of. run event loops: 0. columns in total: 6. columns from defines: 0. Column Type Origin. ------ ---- ------. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. Approximate mass of the Z boson: 91.44 GeV. Number of. run event loops: 1. columns in total: 7. columns from defines: 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:1022,integrability,event,event,1022,"Here is my next proposal, it's actually the tutorial I've now added. Spot the physics! :). ```python. import ROOT. # Create a dataframe. path = 'root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root'. df = ROOT.RDataFrame('Events', path). # Describe the state of the dataframe. # Note that this operation is not running the event loop. print(df.Describe()). # Build a small analysis studying the invariant mass of dimuon systems. # See tutorial df102_NanoAODDimuonAnalysis for more information. df = df.Filter('nMuon == 2')\. .Filter('Muon_charge[0] != Muon_charge[1]')\. .Define('Dimuon_mass', 'InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)')\. .Filter('Dimuon_mass > 70')\. .Range(1000). # Trigger the event loop by asking for the mean of the dimuon mass. print('\nApproximate mass of the Z boson: {:.2f} GeV\n'.format(. df.Mean('Dimuon_mass').GetValue())). # Describe again the state of the dataframe. print(df.Describe()). ```. ```. Number of. run event loops: 0. columns in total: 6. columns from defines: 0. Column Type Origin. ------ ---- ------. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. Approximate mass of the Z boson: 91.44 GeV. Number of. run event loops: 1. columns in total: 7. columns from defines: 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:1454,integrability,event,event,1454,"Here is my next proposal, it's actually the tutorial I've now added. Spot the physics! :). ```python. import ROOT. # Create a dataframe. path = 'root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root'. df = ROOT.RDataFrame('Events', path). # Describe the state of the dataframe. # Note that this operation is not running the event loop. print(df.Describe()). # Build a small analysis studying the invariant mass of dimuon systems. # See tutorial df102_NanoAODDimuonAnalysis for more information. df = df.Filter('nMuon == 2')\. .Filter('Muon_charge[0] != Muon_charge[1]')\. .Define('Dimuon_mass', 'InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)')\. .Filter('Dimuon_mass > 70')\. .Range(1000). # Trigger the event loop by asking for the mean of the dimuon mass. print('\nApproximate mass of the Z boson: {:.2f} GeV\n'.format(. df.Mean('Dimuon_mass').GetValue())). # Describe again the state of the dataframe. print(df.Describe()). ```. ```. Number of. run event loops: 0. columns in total: 6. columns from defines: 0. Column Type Origin. ------ ---- ------. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. Approximate mass of the Z boson: 91.44 GeV. Number of. run event loops: 1. columns in total: 7. columns from defines: 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:884,interoperability,format,format,884,"Here is my next proposal, it's actually the tutorial I've now added. Spot the physics! :). ```python. import ROOT. # Create a dataframe. path = 'root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root'. df = ROOT.RDataFrame('Events', path). # Describe the state of the dataframe. # Note that this operation is not running the event loop. print(df.Describe()). # Build a small analysis studying the invariant mass of dimuon systems. # See tutorial df102_NanoAODDimuonAnalysis for more information. df = df.Filter('nMuon == 2')\. .Filter('Muon_charge[0] != Muon_charge[1]')\. .Define('Dimuon_mass', 'InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)')\. .Filter('Dimuon_mass > 70')\. .Range(1000). # Trigger the event loop by asking for the mean of the dimuon mass. print('\nApproximate mass of the Z boson: {:.2f} GeV\n'.format(. df.Mean('Dimuon_mass').GetValue())). # Describe again the state of the dataframe. print(df.Describe()). ```. ```. Number of. run event loops: 0. columns in total: 6. columns from defines: 0. Column Type Origin. ------ ---- ------. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. Approximate mass of the Z boson: 91.44 GeV. Number of. run event loops: 1. columns in total: 7. columns from defines: 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t DataSource. Muon_pt ROOT::VecOps::RVec<Float_t> DataSource. Muon_eta ROOT::VecOps::RVec<Float_t> DataSource. Muon_phi ROOT::VecOps::RVec<Float_t> DataSource. Muon_mass ROOT::VecOps::RVec<Float_t> DataSource. Muon_charge ROOT::VecOps::RVec<Int_t> DataSource. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:165,energy efficiency,current,currently,165,"Really like the extra information present! I would still start with a first line stating the name of the tree where applicable for better clarity, e.g. what happens currently when the df is printed. ```. RDataFrame built on top of the XXX dataset. Number of. ... ```. As for the formatting of the table, I agree it's too farfetched to make it the same as pandas, still would be nice to adhere to a common syntax like markdown? ```. | Column | Type | Origin |. |-------------|--------------------|------------|. | Dimuon_mass | float | Define |. | nMuon | UInt_t | DataSource |. | Muon_pt | ROOT::VecOps::RVec | DataSource |. | Muon_eta | ROOT::VecOps::RVec | DataSource |. | Muon_phi | ROOT::VecOps::RVec | DataSource |. | Muon_mass | ROOT::VecOps::RVec | DataSource |. | Muon_charge | ROOT::VecOps::RVec | DataSource |. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:279,interoperability,format,formatting,279,"Really like the extra information present! I would still start with a first line stating the name of the tree where applicable for better clarity, e.g. what happens currently when the df is printed. ```. RDataFrame built on top of the XXX dataset. Number of. ... ```. As for the formatting of the table, I agree it's too farfetched to make it the same as pandas, still would be nice to adhere to a common syntax like markdown? ```. | Column | Type | Origin |. |-------------|--------------------|------------|. | Dimuon_mass | float | Define |. | nMuon | UInt_t | DataSource |. | Muon_pt | ROOT::VecOps::RVec | DataSource |. | Muon_eta | ROOT::VecOps::RVec | DataSource |. | Muon_phi | ROOT::VecOps::RVec | DataSource |. | Muon_mass | ROOT::VecOps::RVec | DataSource |. | Muon_charge | ROOT::VecOps::RVec | DataSource |. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:138,usability,clarit,clarity,138,"Really like the extra information present! I would still start with a first line stating the name of the tree where applicable for better clarity, e.g. what happens currently when the df is printed. ```. RDataFrame built on top of the XXX dataset. Number of. ... ```. As for the formatting of the table, I agree it's too farfetched to make it the same as pandas, still would be nice to adhere to a common syntax like markdown? ```. | Column | Type | Origin |. |-------------|--------------------|------------|. | Dimuon_mass | float | Define |. | nMuon | UInt_t | DataSource |. | Muon_pt | ROOT::VecOps::RVec | DataSource |. | Muon_eta | ROOT::VecOps::RVec | DataSource |. | Muon_phi | ROOT::VecOps::RVec | DataSource |. | Muon_mass | ROOT::VecOps::RVec | DataSource |. | Muon_charge | ROOT::VecOps::RVec | DataSource |. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:363,testability,simpl,simple,363,"Right, good point, the name of the tree (or let's call it dataset) is useful! Personally I find the markdown syntax too heavy. But if we find a majority for it, I'm happy to implement it ;). Edit: There's the problem for the dataset name that it's not given for all data sources and we would have to make a difference between TTree datasource and for example the simple one with the `RDataFrame(N)` constructor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:78,usability,Person,Personally,78,"Right, good point, the name of the tree (or let's call it dataset) is useful! Personally I find the markdown syntax too heavy. But if we find a majority for it, I'm happy to implement it ;). Edit: There's the problem for the dataset name that it's not given for all data sources and we would have to make a difference between TTree datasource and for example the simple one with the `RDataFrame(N)` constructor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:363,usability,simpl,simple,363,"Right, good point, the name of the tree (or let's call it dataset) is useful! Personally I find the markdown syntax too heavy. But if we find a majority for it, I'm happy to implement it ;). Edit: There's the problem for the dataset name that it's not given for all data sources and we would have to make a difference between TTree datasource and for example the simple one with the `RDataFrame(N)` constructor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:146,availability,slo,slots,146,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:282,deployability,API,API,282,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:416,deployability,updat,update,416,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:469,deployability,API,API-wise,469,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:275,integrability,pub,public,275,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:282,integrability,API,API,282,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:469,integrability,API,API-wise,469,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:282,interoperability,API,API,282,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:469,interoperability,API,API-wise,469,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:513,performance,content,content,513,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:146,reliability,slo,slots,146,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:382,safety,except,except,382,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:416,safety,updat,update,416,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:416,security,updat,update,416,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:201,testability,simpl,simple,201,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:201,usability,simpl,simple,201,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:493,usability,document,documented,493,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:576,usability,interact,interactive,576,"Discussion with @eguiraud and @vepadulano:. - Rename DataSource to Dataset. - Add type and name of dataset. - Add type of datasource. - Number of slots. - Make ""Numbers of ..."" and other information a simple table. - Add it to the cheat sheet. To do so we need an additional public API:. - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:183,testability,simpl,simple,183,"We also want a dedicated `GetDataSourceInfo`, because we have either `fDataSet->GetLabel()`, if there's a `fDataSource`, or a `TTree/TChain` type if there is a `df.GetTree` or it's a simple dataframe aka `RDataFrame(N)` if none if this is true. Coming in a separate PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:183,usability,simpl,simple,183,"We also want a dedicated `GetDataSourceInfo`, because we have either `fDataSet->GetLabel()`, if there's a `fDataSource`, or a `TTree/TChain` type if there is a `df.GetTree` or it's a simple dataframe aka `RDataFrame(N)` if none if this is true. Coming in a separate PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:173,availability,slo,slots,173,The output of the tutorial shown above is now the following:. ```. Property Value. -------- -----. Columns in total 6. Columns from defines 0. Event loops run 0. Processing slots 1. Column Type Origin. ------ ---- ------. nMuon UInt_t Dataset. Muon_pt ROOT::VecOps::RVec<Float_t> Dataset. Muon_eta ROOT::VecOps::RVec<Float_t> Dataset. Muon_phi ROOT::VecOps::RVec<Float_t> Dataset. Muon_mass ROOT::VecOps::RVec<Float_t> Dataset. Muon_charge ROOT::VecOps::RVec<Int_t> Dataset. Approximate mass of the Z boson: 91.44 GeV. Property Value. -------- -----. Columns in total 7. Columns from defines 1. Event loops run 1. Processing slots 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t Dataset. Muon_pt ROOT::VecOps::RVec<Float_t> Dataset. Muon_eta ROOT::VecOps::RVec<Float_t> Dataset. Muon_phi ROOT::VecOps::RVec<Float_t> Dataset. Muon_mass ROOT::VecOps::RVec<Float_t> Dataset. Muon_charge ROOT::VecOps::RVec<Int_t> Dataset. ```. @eguiraud The linked PR is ready for review!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:625,availability,slo,slots,625,The output of the tutorial shown above is now the following:. ```. Property Value. -------- -----. Columns in total 6. Columns from defines 0. Event loops run 0. Processing slots 1. Column Type Origin. ------ ---- ------. nMuon UInt_t Dataset. Muon_pt ROOT::VecOps::RVec<Float_t> Dataset. Muon_eta ROOT::VecOps::RVec<Float_t> Dataset. Muon_phi ROOT::VecOps::RVec<Float_t> Dataset. Muon_mass ROOT::VecOps::RVec<Float_t> Dataset. Muon_charge ROOT::VecOps::RVec<Int_t> Dataset. Approximate mass of the Z boson: 91.44 GeV. Property Value. -------- -----. Columns in total 7. Columns from defines 1. Event loops run 1. Processing slots 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t Dataset. Muon_pt ROOT::VecOps::RVec<Float_t> Dataset. Muon_eta ROOT::VecOps::RVec<Float_t> Dataset. Muon_phi ROOT::VecOps::RVec<Float_t> Dataset. Muon_mass ROOT::VecOps::RVec<Float_t> Dataset. Muon_charge ROOT::VecOps::RVec<Int_t> Dataset. ```. @eguiraud The linked PR is ready for review!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:143,integrability,Event,Event,143,The output of the tutorial shown above is now the following:. ```. Property Value. -------- -----. Columns in total 6. Columns from defines 0. Event loops run 0. Processing slots 1. Column Type Origin. ------ ---- ------. nMuon UInt_t Dataset. Muon_pt ROOT::VecOps::RVec<Float_t> Dataset. Muon_eta ROOT::VecOps::RVec<Float_t> Dataset. Muon_phi ROOT::VecOps::RVec<Float_t> Dataset. Muon_mass ROOT::VecOps::RVec<Float_t> Dataset. Muon_charge ROOT::VecOps::RVec<Int_t> Dataset. Approximate mass of the Z boson: 91.44 GeV. Property Value. -------- -----. Columns in total 7. Columns from defines 1. Event loops run 1. Processing slots 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t Dataset. Muon_pt ROOT::VecOps::RVec<Float_t> Dataset. Muon_eta ROOT::VecOps::RVec<Float_t> Dataset. Muon_phi ROOT::VecOps::RVec<Float_t> Dataset. Muon_mass ROOT::VecOps::RVec<Float_t> Dataset. Muon_charge ROOT::VecOps::RVec<Int_t> Dataset. ```. @eguiraud The linked PR is ready for review!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:595,integrability,Event,Event,595,The output of the tutorial shown above is now the following:. ```. Property Value. -------- -----. Columns in total 6. Columns from defines 0. Event loops run 0. Processing slots 1. Column Type Origin. ------ ---- ------. nMuon UInt_t Dataset. Muon_pt ROOT::VecOps::RVec<Float_t> Dataset. Muon_eta ROOT::VecOps::RVec<Float_t> Dataset. Muon_phi ROOT::VecOps::RVec<Float_t> Dataset. Muon_mass ROOT::VecOps::RVec<Float_t> Dataset. Muon_charge ROOT::VecOps::RVec<Int_t> Dataset. Approximate mass of the Z boson: 91.44 GeV. Property Value. -------- -----. Columns in total 7. Columns from defines 1. Event loops run 1. Processing slots 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t Dataset. Muon_pt ROOT::VecOps::RVec<Float_t> Dataset. Muon_eta ROOT::VecOps::RVec<Float_t> Dataset. Muon_phi ROOT::VecOps::RVec<Float_t> Dataset. Muon_mass ROOT::VecOps::RVec<Float_t> Dataset. Muon_charge ROOT::VecOps::RVec<Int_t> Dataset. ```. @eguiraud The linked PR is ready for review!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:173,reliability,slo,slots,173,The output of the tutorial shown above is now the following:. ```. Property Value. -------- -----. Columns in total 6. Columns from defines 0. Event loops run 0. Processing slots 1. Column Type Origin. ------ ---- ------. nMuon UInt_t Dataset. Muon_pt ROOT::VecOps::RVec<Float_t> Dataset. Muon_eta ROOT::VecOps::RVec<Float_t> Dataset. Muon_phi ROOT::VecOps::RVec<Float_t> Dataset. Muon_mass ROOT::VecOps::RVec<Float_t> Dataset. Muon_charge ROOT::VecOps::RVec<Int_t> Dataset. Approximate mass of the Z boson: 91.44 GeV. Property Value. -------- -----. Columns in total 7. Columns from defines 1. Event loops run 1. Processing slots 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t Dataset. Muon_pt ROOT::VecOps::RVec<Float_t> Dataset. Muon_eta ROOT::VecOps::RVec<Float_t> Dataset. Muon_phi ROOT::VecOps::RVec<Float_t> Dataset. Muon_mass ROOT::VecOps::RVec<Float_t> Dataset. Muon_charge ROOT::VecOps::RVec<Int_t> Dataset. ```. @eguiraud The linked PR is ready for review!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:625,reliability,slo,slots,625,The output of the tutorial shown above is now the following:. ```. Property Value. -------- -----. Columns in total 6. Columns from defines 0. Event loops run 0. Processing slots 1. Column Type Origin. ------ ---- ------. nMuon UInt_t Dataset. Muon_pt ROOT::VecOps::RVec<Float_t> Dataset. Muon_eta ROOT::VecOps::RVec<Float_t> Dataset. Muon_phi ROOT::VecOps::RVec<Float_t> Dataset. Muon_mass ROOT::VecOps::RVec<Float_t> Dataset. Muon_charge ROOT::VecOps::RVec<Int_t> Dataset. Approximate mass of the Z boson: 91.44 GeV. Property Value. -------- -----. Columns in total 7. Columns from defines 1. Event loops run 1. Processing slots 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t Dataset. Muon_pt ROOT::VecOps::RVec<Float_t> Dataset. Muon_eta ROOT::VecOps::RVec<Float_t> Dataset. Muon_phi ROOT::VecOps::RVec<Float_t> Dataset. Muon_mass ROOT::VecOps::RVec<Float_t> Dataset. Muon_charge ROOT::VecOps::RVec<Int_t> Dataset. ```. @eguiraud The linked PR is ready for review!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:995,safety,review,review,995,The output of the tutorial shown above is now the following:. ```. Property Value. -------- -----. Columns in total 6. Columns from defines 0. Event loops run 0. Processing slots 1. Column Type Origin. ------ ---- ------. nMuon UInt_t Dataset. Muon_pt ROOT::VecOps::RVec<Float_t> Dataset. Muon_eta ROOT::VecOps::RVec<Float_t> Dataset. Muon_phi ROOT::VecOps::RVec<Float_t> Dataset. Muon_mass ROOT::VecOps::RVec<Float_t> Dataset. Muon_charge ROOT::VecOps::RVec<Int_t> Dataset. Approximate mass of the Z boson: 91.44 GeV. Property Value. -------- -----. Columns in total 7. Columns from defines 1. Event loops run 1. Processing slots 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t Dataset. Muon_pt ROOT::VecOps::RVec<Float_t> Dataset. Muon_eta ROOT::VecOps::RVec<Float_t> Dataset. Muon_phi ROOT::VecOps::RVec<Float_t> Dataset. Muon_mass ROOT::VecOps::RVec<Float_t> Dataset. Muon_charge ROOT::VecOps::RVec<Int_t> Dataset. ```. @eguiraud The linked PR is ready for review!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:995,testability,review,review,995,The output of the tutorial shown above is now the following:. ```. Property Value. -------- -----. Columns in total 6. Columns from defines 0. Event loops run 0. Processing slots 1. Column Type Origin. ------ ---- ------. nMuon UInt_t Dataset. Muon_pt ROOT::VecOps::RVec<Float_t> Dataset. Muon_eta ROOT::VecOps::RVec<Float_t> Dataset. Muon_phi ROOT::VecOps::RVec<Float_t> Dataset. Muon_mass ROOT::VecOps::RVec<Float_t> Dataset. Muon_charge ROOT::VecOps::RVec<Int_t> Dataset. Approximate mass of the Z boson: 91.44 GeV. Property Value. -------- -----. Columns in total 7. Columns from defines 1. Event loops run 1. Processing slots 1. Column Type Origin. ------ ---- ------. Dimuon_mass float Define. nMuon UInt_t Dataset. Muon_pt ROOT::VecOps::RVec<Float_t> Dataset. Muon_eta ROOT::VecOps::RVec<Float_t> Dataset. Muon_phi ROOT::VecOps::RVec<Float_t> Dataset. Muon_mass ROOT::VecOps::RVec<Float_t> Dataset. Muon_charge ROOT::VecOps::RVec<Int_t> Dataset. ```. @eguiraud The linked PR is ready for review!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:40,deployability,API,API,40,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:654,deployability,log,logical,654,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:968,deployability,contain,contained,968,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:1972,deployability,API,API,1972,"e /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little relevance with the other RDataFrame constructors that use TTree as the data format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:1581,energy efficiency,draw,drawbacks,1581,"e /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little relevance with the other RDataFrame constructors that use TTree as the data format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:1711,energy efficiency,current,currently,1711,"e /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little relevance with the other RDataFrame constructors that use TTree as the data format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:33,integrability,pub,public,33,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:40,integrability,API,API,40,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:1972,integrability,API,API,1972,"e /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little relevance with the other RDataFrame constructors that use TTree as the data format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:40,interoperability,API,API,40,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:616,interoperability,format,format,616,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:763,interoperability,format,format,763,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:770,interoperability,specif,specification,770,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:1001,interoperability,format,format,1001," do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little relevan",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:1257,interoperability,format,format,1257,"e /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little relevance with the other RDataFrame constructors that use TTree as the data format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:1972,interoperability,API,API,1972,"e /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little relevance with the other RDataFrame constructors that use TTree as the data format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:2073,interoperability,format,format,2073,"e /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little relevance with the other RDataFrame constructors that use TTree as the data format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:668,performance,memor,memory,668,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:838,reliability,doe,does,838,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:884,reliability,doe,does,884,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:654,safety,log,logical,654,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:631,security,ident,identifier,631,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:654,security,log,logical,654,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:282,testability,simpl,simple,282,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:654,testability,log,logical,654,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:1513,testability,understand,understand,1513,"e /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little relevance with the other RDataFrame constructors that use TTree as the data format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:1781,testability,understand,understand,1781,"e /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little relevance with the other RDataFrame constructors that use TTree as the data format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:1878,testability,understand,understand,1878,"e /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little relevance with the other RDataFrame constructors that use TTree as the data format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:282,usability,simpl,simple,282,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:520,usability,user,users,520,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:668,usability,memor,memory,668,"> To do so we need an additional public API:. GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little rel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:1477,usability,person,personal,1477,"e /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little relevance with the other RDataFrame constructors that use TTree as the data format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/issues/7561:1773,usability,clear,clearly,1773,"e /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:. * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does. * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases. * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:. * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion. * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little relevance with the other RDataFrame constructors that use TTree as the data format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561
https://github.com/root-project/root/pull/7562:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:22,deployability,integr,integrated,22,@eguiraud rebased and integrated the requested changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:22,integrability,integr,integrated,22,@eguiraud rebased and integrated the requested changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:22,interoperability,integr,integrated,22,@eguiraud rebased and integrated the requested changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:22,modifiability,integr,integrated,22,@eguiraud rebased and integrated the requested changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:22,reliability,integr,integrated,22,@eguiraud rebased and integrated the requested changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:22,security,integr,integrated,22,@eguiraud rebased and integrated the requested changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:22,testability,integr,integrated,22,@eguiraud rebased and integrated the requested changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:62,deployability,releas,release,62,"Sorry _last thing_, I promise: can you add a line in the 6.26 release notes about this please? So we don't depend on me remembering :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:107,deployability,depend,depend,107,"Sorry _last thing_, I promise: can you add a line in the 6.26 release notes about this please? So we don't depend on me remembering :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:107,integrability,depend,depend,107,"Sorry _last thing_, I promise: can you add a line in the 6.26 release notes about this please? So we don't depend on me remembering :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:107,modifiability,depend,depend,107,"Sorry _last thing_, I promise: can you add a line in the 6.26 release notes about this please? So we don't depend on me remembering :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:107,safety,depend,depend,107,"Sorry _last thing_, I promise: can you add a line in the 6.26 release notes about this please? So we don't depend on me remembering :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:120,safety,reme,remembering,120,"Sorry _last thing_, I promise: can you add a line in the 6.26 release notes about this please? So we don't depend on me remembering :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:107,testability,depend,depend,107,"Sorry _last thing_, I promise: can you add a line in the 6.26 release notes about this please? So we don't depend on me remembering :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:64,deployability,releas,release,64,"> Sorry _last thing_, I promise: can you add a line in the 6.26 release notes about this please? So we don't depend on me remembering üòÑ. @eguiraud Also done! :D You may want to rephrase the release notes at some point, but I leave this for the future you ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:109,deployability,depend,depend,109,"> Sorry _last thing_, I promise: can you add a line in the 6.26 release notes about this please? So we don't depend on me remembering üòÑ. @eguiraud Also done! :D You may want to rephrase the release notes at some point, but I leave this for the future you ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:190,deployability,releas,release,190,"> Sorry _last thing_, I promise: can you add a line in the 6.26 release notes about this please? So we don't depend on me remembering üòÑ. @eguiraud Also done! :D You may want to rephrase the release notes at some point, but I leave this for the future you ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:109,integrability,depend,depend,109,"> Sorry _last thing_, I promise: can you add a line in the 6.26 release notes about this please? So we don't depend on me remembering üòÑ. @eguiraud Also done! :D You may want to rephrase the release notes at some point, but I leave this for the future you ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:109,modifiability,depend,depend,109,"> Sorry _last thing_, I promise: can you add a line in the 6.26 release notes about this please? So we don't depend on me remembering üòÑ. @eguiraud Also done! :D You may want to rephrase the release notes at some point, but I leave this for the future you ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:109,safety,depend,depend,109,"> Sorry _last thing_, I promise: can you add a line in the 6.26 release notes about this please? So we don't depend on me remembering üòÑ. @eguiraud Also done! :D You may want to rephrase the release notes at some point, but I leave this for the future you ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:122,safety,reme,remembering,122,"> Sorry _last thing_, I promise: can you add a line in the 6.26 release notes about this please? So we don't depend on me remembering üòÑ. @eguiraud Also done! :D You may want to rephrase the release notes at some point, but I leave this for the future you ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7562:109,testability,depend,depend,109,"> Sorry _last thing_, I promise: can you add a line in the 6.26 release notes about this please? So we don't depend on me remembering üòÑ. @eguiraud Also done! :D You may want to rephrase the release notes at some point, but I leave this for the future you ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7562
https://github.com/root-project/root/pull/7563:135,reliability,doe,does,135,"@vgvassilev also ok to backport https://github.com/llvm/llvm-project/commit/fe6e6d93d9bb4c31283965bb12560b756910303d to 6.22? That one does the same for PPC64 (edit: it's already included in LLVM 9, so we don't need it in `master` / 6.24)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7563
https://github.com/root-project/root/issues/7565:149,availability,sli,slightly,149,"The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). So for better or worse you need to use:. ```. char i;. TFile f (file_name.c_str ());. TTree *t = (TTree*)f.Get (""tree"");. t->SetBranchAddress (""i"", &i);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:356,deployability,depend,depending,356,"The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). So for better or worse you need to use:. ```. char i;. TFile f (file_name.c_str ());. TTree *t = (TTree*)f.Get (""tree"");. t->SetBranchAddress (""i"", &i);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:62,integrability,schema,schema,62,"The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). So for better or worse you need to use:. ```. char i;. TFile f (file_name.c_str ());. TTree *t = (TTree*)f.Get (""tree"");. t->SetBranchAddress (""i"", &i);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:234,integrability,schema,schema,234,"The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). So for better or worse you need to use:. ```. char i;. TFile f (file_name.c_str ());. TTree *t = (TTree*)f.Get (""tree"");. t->SetBranchAddress (""i"", &i);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:356,integrability,depend,depending,356,"The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). So for better or worse you need to use:. ```. char i;. TFile f (file_name.c_str ());. TTree *t = (TTree*)f.Get (""tree"");. t->SetBranchAddress (""i"", &i);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:373,interoperability,platform,platform,373,"The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). So for better or worse you need to use:. ```. char i;. TFile f (file_name.c_str ());. TTree *t = (TTree*)f.Get (""tree"");. t->SetBranchAddress (""i"", &i);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:356,modifiability,depend,depending,356,"The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). So for better or worse you need to use:. ```. char i;. TFile f (file_name.c_str ());. TTree *t = (TTree*)f.Get (""tree"");. t->SetBranchAddress (""i"", &i);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:149,reliability,sli,slightly,149,"The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). So for better or worse you need to use:. ```. char i;. TFile f (file_name.c_str ());. TTree *t = (TTree*)f.Get (""tree"");. t->SetBranchAddress (""i"", &i);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:356,safety,depend,depending,356,"The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). So for better or worse you need to use:. ```. char i;. TFile f (file_name.c_str ());. TTree *t = (TTree*)f.Get (""tree"");. t->SetBranchAddress (""i"", &i);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:324,security,sign,signed,324,"The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). So for better or worse you need to use:. ```. char i;. TFile f (file_name.c_str ());. TTree *t = (TTree*)f.Get (""tree"");. t->SetBranchAddress (""i"", &i);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:416,security,sign,signness,416,"The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). So for better or worse you need to use:. ```. char i;. TFile f (file_name.c_str ());. TTree *t = (TTree*)f.Get (""tree"");. t->SetBranchAddress (""i"", &i);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:491,security,sign,signed,491,"The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). So for better or worse you need to use:. ```. char i;. TFile f (file_name.c_str ());. TTree *t = (TTree*)f.Get (""tree"");. t->SetBranchAddress (""i"", &i);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:356,testability,depend,depending,356,"The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). So for better or worse you need to use:. ```. char i;. TFile f (file_name.c_str ());. TTree *t = (TTree*)f.Get (""tree"");. t->SetBranchAddress (""i"", &i);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:54,usability,support,support,54,"The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). So for better or worse you need to use:. ```. char i;. TFile f (file_name.c_str ());. TTree *t = (TTree*)f.Get (""tree"");. t->SetBranchAddress (""i"", &i);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:62,availability,reliab,reliable,62,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:359,availability,sli,slightly,359,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:572,deployability,depend,depending,572,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:272,integrability,schema,schema,272,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:450,integrability,schema,schema,450,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:572,integrability,depend,depending,572,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:196,interoperability,platform,platforms,196,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:589,interoperability,platform,platform,589,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:572,modifiability,depend,depending,572,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:62,reliability,reliab,reliable,62,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:359,reliability,sli,slightly,359,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:572,safety,depend,depending,572,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:540,security,sign,signed,540,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:632,security,sign,signness,632,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:709,security,sign,signed,709,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:572,testability,depend,depending,572,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:264,usability,support,support,264,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. > . > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement. > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). > . > So for better or worse you need to use:. > . > ```. > char i;. > TFile f (file_name.c_str ());. > TTree *t = (TTree*)f.Get (""tree"");. > t->SetBranchAddress (""i"", &i);. > ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:64,availability,reliab,reliable,64,> I thought (in theory) using fixed width integer would be more reliable . Yes and and it correct for most type of code. However the implementation the standard choose (intX_t for a given X is a typedef to different C++ types on different platform) means that when using meta-programming or typeids the user intent is gone (ROOT only sees the target of the typedef not its spelling) and conflict with design choice made before those typedef where even though of :). In order to handle this we would to add support for schema evolution for the leaflist case. Note that this problem should not appear if you are using objects to create the branches; this code path support automatic schema evolution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:671,deployability,automat,automatic,671,> I thought (in theory) using fixed width integer would be more reliable . Yes and and it correct for most type of code. However the implementation the standard choose (intX_t for a given X is a typedef to different C++ types on different platform) means that when using meta-programming or typeids the user intent is gone (ROOT only sees the target of the typedef not its spelling) and conflict with design choice made before those typedef where even though of :). In order to handle this we would to add support for schema evolution for the leaflist case. Note that this problem should not appear if you are using objects to create the branches; this code path support automatic schema evolution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:518,integrability,schema,schema,518,> I thought (in theory) using fixed width integer would be more reliable . Yes and and it correct for most type of code. However the implementation the standard choose (intX_t for a given X is a typedef to different C++ types on different platform) means that when using meta-programming or typeids the user intent is gone (ROOT only sees the target of the typedef not its spelling) and conflict with design choice made before those typedef where even though of :). In order to handle this we would to add support for schema evolution for the leaflist case. Note that this problem should not appear if you are using objects to create the branches; this code path support automatic schema evolution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:681,integrability,schema,schema,681,> I thought (in theory) using fixed width integer would be more reliable . Yes and and it correct for most type of code. However the implementation the standard choose (intX_t for a given X is a typedef to different C++ types on different platform) means that when using meta-programming or typeids the user intent is gone (ROOT only sees the target of the typedef not its spelling) and conflict with design choice made before those typedef where even though of :). In order to handle this we would to add support for schema evolution for the leaflist case. Note that this problem should not appear if you are using objects to create the branches; this code path support automatic schema evolution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:152,interoperability,standard,standard,152,> I thought (in theory) using fixed width integer would be more reliable . Yes and and it correct for most type of code. However the implementation the standard choose (intX_t for a given X is a typedef to different C++ types on different platform) means that when using meta-programming or typeids the user intent is gone (ROOT only sees the target of the typedef not its spelling) and conflict with design choice made before those typedef where even though of :). In order to handle this we would to add support for schema evolution for the leaflist case. Note that this problem should not appear if you are using objects to create the branches; this code path support automatic schema evolution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:239,interoperability,platform,platform,239,> I thought (in theory) using fixed width integer would be more reliable . Yes and and it correct for most type of code. However the implementation the standard choose (intX_t for a given X is a typedef to different C++ types on different platform) means that when using meta-programming or typeids the user intent is gone (ROOT only sees the target of the typedef not its spelling) and conflict with design choice made before those typedef where even though of :). In order to handle this we would to add support for schema evolution for the leaflist case. Note that this problem should not appear if you are using objects to create the branches; this code path support automatic schema evolution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:387,interoperability,conflict,conflict,387,> I thought (in theory) using fixed width integer would be more reliable . Yes and and it correct for most type of code. However the implementation the standard choose (intX_t for a given X is a typedef to different C++ types on different platform) means that when using meta-programming or typeids the user intent is gone (ROOT only sees the target of the typedef not its spelling) and conflict with design choice made before those typedef where even though of :). In order to handle this we would to add support for schema evolution for the leaflist case. Note that this problem should not appear if you are using objects to create the branches; this code path support automatic schema evolution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:64,reliability,reliab,reliable,64,> I thought (in theory) using fixed width integer would be more reliable . Yes and and it correct for most type of code. However the implementation the standard choose (intX_t for a given X is a typedef to different C++ types on different platform) means that when using meta-programming or typeids the user intent is gone (ROOT only sees the target of the typedef not its spelling) and conflict with design choice made before those typedef where even though of :). In order to handle this we would to add support for schema evolution for the leaflist case. Note that this problem should not appear if you are using objects to create the branches; this code path support automatic schema evolution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:671,testability,automat,automatic,671,> I thought (in theory) using fixed width integer would be more reliable . Yes and and it correct for most type of code. However the implementation the standard choose (intX_t for a given X is a typedef to different C++ types on different platform) means that when using meta-programming or typeids the user intent is gone (ROOT only sees the target of the typedef not its spelling) and conflict with design choice made before those typedef where even though of :). In order to handle this we would to add support for schema evolution for the leaflist case. Note that this problem should not appear if you are using objects to create the branches; this code path support automatic schema evolution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:303,usability,user,user,303,> I thought (in theory) using fixed width integer would be more reliable . Yes and and it correct for most type of code. However the implementation the standard choose (intX_t for a given X is a typedef to different C++ types on different platform) means that when using meta-programming or typeids the user intent is gone (ROOT only sees the target of the typedef not its spelling) and conflict with design choice made before those typedef where even though of :). In order to handle this we would to add support for schema evolution for the leaflist case. Note that this problem should not appear if you are using objects to create the branches; this code path support automatic schema evolution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:506,usability,support,support,506,> I thought (in theory) using fixed width integer would be more reliable . Yes and and it correct for most type of code. However the implementation the standard choose (intX_t for a given X is a typedef to different C++ types on different platform) means that when using meta-programming or typeids the user intent is gone (ROOT only sees the target of the typedef not its spelling) and conflict with design choice made before those typedef where even though of :). In order to handle this we would to add support for schema evolution for the leaflist case. Note that this problem should not appear if you are using objects to create the branches; this code path support automatic schema evolution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:663,usability,support,support,663,> I thought (in theory) using fixed width integer would be more reliable . Yes and and it correct for most type of code. However the implementation the standard choose (intX_t for a given X is a typedef to different C++ types on different platform) means that when using meta-programming or typeids the user intent is gone (ROOT only sees the target of the typedef not its spelling) and conflict with design choice made before those typedef where even though of :). In order to handle this we would to add support for schema evolution for the leaflist case. Note that this problem should not appear if you are using objects to create the branches; this code path support automatic schema evolution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:172,availability,error,error,172,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:185,availability,Error,Error,185,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:355,deployability,version,version,355,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:369,deployability,Version,Version,369,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:355,integrability,version,version,355,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:369,integrability,Version,Version,369,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:73,modifiability,pac,package,73,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:126,modifiability,variab,variable,126,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:355,modifiability,version,version,355,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:369,modifiability,Version,Version,369,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:172,performance,error,error,172,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:185,performance,Error,Error,185,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:264,reliability,doe,does,264,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:172,safety,error,error,172,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:185,safety,Error,Error,185,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:113,security,sign,signed,113,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:14,usability,behavi,behavior,14,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:172,usability,error,error,172,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:185,usability,Error,Error,185,"I got similar behavior with a Root file created using the Python uproot3 package. When passing the address of a `signed char` variable to `SetBranchAddres`. I get the same error:. ```. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: ttbar. ```. ```$ root --version. ROOT Version: 6.20/06. Built for linuxx8664gcc on Jun 10 2020, 06:10:57. From tags/v6-20-06@v6-20-06. ```. Edit: I reported a segfault but it was unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:14,availability,error,error,14,"To avoid this error, change the type of the variable passed to SetBranchAddress from `signed char` to `char`. If that is not possible, cast the parameter to `void*` : `SetBranchAddress( ..... , (void*)&mysignedchar);`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:44,modifiability,variab,variable,44,"To avoid this error, change the type of the variable passed to SetBranchAddress from `signed char` to `char`. If that is not possible, cast the parameter to `void*` : `SetBranchAddress( ..... , (void*)&mysignedchar);`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:144,modifiability,paramet,parameter,144,"To avoid this error, change the type of the variable passed to SetBranchAddress from `signed char` to `char`. If that is not possible, cast the parameter to `void*` : `SetBranchAddress( ..... , (void*)&mysignedchar);`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:14,performance,error,error,14,"To avoid this error, change the type of the variable passed to SetBranchAddress from `signed char` to `char`. If that is not possible, cast the parameter to `void*` : `SetBranchAddress( ..... , (void*)&mysignedchar);`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:3,safety,avoid,avoid,3,"To avoid this error, change the type of the variable passed to SetBranchAddress from `signed char` to `char`. If that is not possible, cast the parameter to `void*` : `SetBranchAddress( ..... , (void*)&mysignedchar);`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:14,safety,error,error,14,"To avoid this error, change the type of the variable passed to SetBranchAddress from `signed char` to `char`. If that is not possible, cast the parameter to `void*` : `SetBranchAddress( ..... , (void*)&mysignedchar);`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:86,security,sign,signed,86,"To avoid this error, change the type of the variable passed to SetBranchAddress from `signed char` to `char`. If that is not possible, cast the parameter to `void*` : `SetBranchAddress( ..... , (void*)&mysignedchar);`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/issues/7565:14,usability,error,error,14,"To avoid this error, change the type of the variable passed to SetBranchAddress from `signed char` to `char`. If that is not possible, cast the parameter to `void*` : `SetBranchAddress( ..... , (void*)&mysignedchar);`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7565
https://github.com/root-project/root/pull/7566:4,availability,error,errors,4,The errors are related to this PR (i.e. library not found),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7566
https://github.com/root-project/root/pull/7566:4,performance,error,errors,4,The errors are related to this PR (i.e. library not found),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7566
https://github.com/root-project/root/pull/7566:4,safety,error,errors,4,The errors are related to this PR (i.e. library not found),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7566
https://github.com/root-project/root/pull/7566:4,usability,error,errors,4,The errors are related to this PR (i.e. library not found),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7566
https://github.com/root-project/root/pull/7566:103,availability,failur,failures,103,"Yeah well, certainly :-) I was afraid that my recently merged change to `R__LOAD_LIBRARY` caused these failures, but the failures are indeed local to this PR. Phew!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7566
https://github.com/root-project/root/pull/7566:121,availability,failur,failures,121,"Yeah well, certainly :-) I was afraid that my recently merged change to `R__LOAD_LIBRARY` caused these failures, but the failures are indeed local to this PR. Phew!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7566
https://github.com/root-project/root/pull/7566:103,deployability,fail,failures,103,"Yeah well, certainly :-) I was afraid that my recently merged change to `R__LOAD_LIBRARY` caused these failures, but the failures are indeed local to this PR. Phew!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7566
https://github.com/root-project/root/pull/7566:121,deployability,fail,failures,121,"Yeah well, certainly :-) I was afraid that my recently merged change to `R__LOAD_LIBRARY` caused these failures, but the failures are indeed local to this PR. Phew!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7566
https://github.com/root-project/root/pull/7566:103,performance,failur,failures,103,"Yeah well, certainly :-) I was afraid that my recently merged change to `R__LOAD_LIBRARY` caused these failures, but the failures are indeed local to this PR. Phew!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7566
https://github.com/root-project/root/pull/7566:121,performance,failur,failures,121,"Yeah well, certainly :-) I was afraid that my recently merged change to `R__LOAD_LIBRARY` caused these failures, but the failures are indeed local to this PR. Phew!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7566
https://github.com/root-project/root/pull/7566:103,reliability,fail,failures,103,"Yeah well, certainly :-) I was afraid that my recently merged change to `R__LOAD_LIBRARY` caused these failures, but the failures are indeed local to this PR. Phew!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7566
https://github.com/root-project/root/pull/7566:121,reliability,fail,failures,121,"Yeah well, certainly :-) I was afraid that my recently merged change to `R__LOAD_LIBRARY` caused these failures, but the failures are indeed local to this PR. Phew!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7566
https://github.com/root-project/root/pull/7568:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7568
https://github.com/root-project/root/pull/7568:4,availability,failur,failures,4,The failures are unrelated. ROOT does not use the boost modulemap.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7568
https://github.com/root-project/root/pull/7568:4,deployability,fail,failures,4,The failures are unrelated. ROOT does not use the boost modulemap.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7568
https://github.com/root-project/root/pull/7568:56,deployability,modul,modulemap,56,The failures are unrelated. ROOT does not use the boost modulemap.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7568
https://github.com/root-project/root/pull/7568:56,modifiability,modul,modulemap,56,The failures are unrelated. ROOT does not use the boost modulemap.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7568
https://github.com/root-project/root/pull/7568:4,performance,failur,failures,4,The failures are unrelated. ROOT does not use the boost modulemap.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7568
https://github.com/root-project/root/pull/7568:4,reliability,fail,failures,4,The failures are unrelated. ROOT does not use the boost modulemap.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7568
https://github.com/root-project/root/pull/7568:33,reliability,doe,does,33,The failures are unrelated. ROOT does not use the boost modulemap.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7568
https://github.com/root-project/root/pull/7568:56,safety,modul,modulemap,56,The failures are unrelated. ROOT does not use the boost modulemap.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7568
https://github.com/root-project/root/pull/7569:156,deployability,depend,dependencies,156,Is it good practice to rely on shared-object-level transitive linking in any case? I think users should either use proper cmake targets that bring in their dependencies (namely `ROOT::ROOTDataFrame` in this case) or list all dependencies explicitly...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7569
https://github.com/root-project/root/pull/7569:225,deployability,depend,dependencies,225,Is it good practice to rely on shared-object-level transitive linking in any case? I think users should either use proper cmake targets that bring in their dependencies (namely `ROOT::ROOTDataFrame` in this case) or list all dependencies explicitly...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7569
https://github.com/root-project/root/pull/7569:156,integrability,depend,dependencies,156,Is it good practice to rely on shared-object-level transitive linking in any case? I think users should either use proper cmake targets that bring in their dependencies (namely `ROOT::ROOTDataFrame` in this case) or list all dependencies explicitly...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7569
https://github.com/root-project/root/pull/7569:225,integrability,depend,dependencies,225,Is it good practice to rely on shared-object-level transitive linking in any case? I think users should either use proper cmake targets that bring in their dependencies (namely `ROOT::ROOTDataFrame` in this case) or list all dependencies explicitly...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7569
https://github.com/root-project/root/pull/7569:31,interoperability,share,shared-object-level,31,Is it good practice to rely on shared-object-level transitive linking in any case? I think users should either use proper cmake targets that bring in their dependencies (namely `ROOT::ROOTDataFrame` in this case) or list all dependencies explicitly...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7569
https://github.com/root-project/root/pull/7569:156,modifiability,depend,dependencies,156,Is it good practice to rely on shared-object-level transitive linking in any case? I think users should either use proper cmake targets that bring in their dependencies (namely `ROOT::ROOTDataFrame` in this case) or list all dependencies explicitly...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7569
https://github.com/root-project/root/pull/7569:225,modifiability,depend,dependencies,225,Is it good practice to rely on shared-object-level transitive linking in any case? I think users should either use proper cmake targets that bring in their dependencies (namely `ROOT::ROOTDataFrame` in this case) or list all dependencies explicitly...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7569
https://github.com/root-project/root/pull/7569:11,reliability,pra,practice,11,Is it good practice to rely on shared-object-level transitive linking in any case? I think users should either use proper cmake targets that bring in their dependencies (namely `ROOT::ROOTDataFrame` in this case) or list all dependencies explicitly...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7569
https://github.com/root-project/root/pull/7569:156,safety,depend,dependencies,156,Is it good practice to rely on shared-object-level transitive linking in any case? I think users should either use proper cmake targets that bring in their dependencies (namely `ROOT::ROOTDataFrame` in this case) or list all dependencies explicitly...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7569
https://github.com/root-project/root/pull/7569:225,safety,depend,dependencies,225,Is it good practice to rely on shared-object-level transitive linking in any case? I think users should either use proper cmake targets that bring in their dependencies (namely `ROOT::ROOTDataFrame` in this case) or list all dependencies explicitly...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7569
https://github.com/root-project/root/pull/7569:156,testability,depend,dependencies,156,Is it good practice to rely on shared-object-level transitive linking in any case? I think users should either use proper cmake targets that bring in their dependencies (namely `ROOT::ROOTDataFrame` in this case) or list all dependencies explicitly...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7569
https://github.com/root-project/root/pull/7569:225,testability,depend,dependencies,225,Is it good practice to rely on shared-object-level transitive linking in any case? I think users should either use proper cmake targets that bring in their dependencies (namely `ROOT::ROOTDataFrame` in this case) or list all dependencies explicitly...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7569
https://github.com/root-project/root/pull/7569:91,usability,user,users,91,Is it good practice to rely on shared-object-level transitive linking in any case? I think users should either use proper cmake targets that bring in their dependencies (namely `ROOT::ROOTDataFrame` in this case) or list all dependencies explicitly...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7569
https://github.com/root-project/root/pull/7575:89,deployability,build,build,89,"> LGTM. possibly add a comment explaining who/what needs w32pragma.h to be copied in the build directory (besides being installed as it already is). Well, I mostly work with ROOT from the build directory, and I sometimes need w32pragma.h when building several applications, so it's the main reason... And thanks for the review!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7575
https://github.com/root-project/root/pull/7575:120,deployability,instal,installed,120,"> LGTM. possibly add a comment explaining who/what needs w32pragma.h to be copied in the build directory (besides being installed as it already is). Well, I mostly work with ROOT from the build directory, and I sometimes need w32pragma.h when building several applications, so it's the main reason... And thanks for the review!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7575
https://github.com/root-project/root/pull/7575:188,deployability,build,build,188,"> LGTM. possibly add a comment explaining who/what needs w32pragma.h to be copied in the build directory (besides being installed as it already is). Well, I mostly work with ROOT from the build directory, and I sometimes need w32pragma.h when building several applications, so it's the main reason... And thanks for the review!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7575
https://github.com/root-project/root/pull/7575:243,deployability,build,building,243,"> LGTM. possibly add a comment explaining who/what needs w32pragma.h to be copied in the build directory (besides being installed as it already is). Well, I mostly work with ROOT from the build directory, and I sometimes need w32pragma.h when building several applications, so it's the main reason... And thanks for the review!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7575
https://github.com/root-project/root/pull/7575:320,safety,review,review,320,"> LGTM. possibly add a comment explaining who/what needs w32pragma.h to be copied in the build directory (besides being installed as it already is). Well, I mostly work with ROOT from the build directory, and I sometimes need w32pragma.h when building several applications, so it's the main reason... And thanks for the review!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7575
https://github.com/root-project/root/pull/7575:320,testability,review,review,320,"> LGTM. possibly add a comment explaining who/what needs w32pragma.h to be copied in the build directory (besides being installed as it already is). Well, I mostly work with ROOT from the build directory, and I sometimes need w32pragma.h when building several applications, so it's the main reason... And thanks for the review!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7575
https://github.com/root-project/root/pull/7583:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7583
https://github.com/root-project/root/issues/7584:7,availability,error,error,7,Is the error message coming from the worker? I.e. the RDataFrame object built by the map function does not pick up the friend?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:13,integrability,messag,message,13,Is the error message coming from the worker? I.e. the RDataFrame object built by the map function does not pick up the friend?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:13,interoperability,messag,message,13,Is the error message coming from the worker? I.e. the RDataFrame object built by the map function does not pick up the friend?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:7,performance,error,error,7,Is the error message coming from the worker? I.e. the RDataFrame object built by the map function does not pick up the friend?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:98,reliability,doe,does,98,Is the error message coming from the worker? I.e. the RDataFrame object built by the map function does not pick up the friend?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:7,safety,error,error,7,Is the error message coming from the worker? I.e. the RDataFrame object built by the map function does not pick up the friend?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:7,usability,error,error,7,Is the error message coming from the worker? I.e. the RDataFrame object built by the map function does not pick up the friend?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:152,safety,detect,detecting,152,"The title mentions Spark, but I think it's more likely that the issue is independent of the backend, right? Can you point me to the code reponsible for detecting friendships and re-creating them in the workers? Maybe I can help",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:152,security,detect,detecting,152,"The title mentions Spark, but I think it's more likely that the issue is independent of the backend, right? Can you point me to the code reponsible for detecting friendships and re-creating them in the workers? Maybe I can help",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:223,usability,help,help,223,"The title mentions Spark, but I think it's more likely that the issue is independent of the backend, right? Can you point me to the code reponsible for detecting friendships and re-creating them in the workers? Maybe I can help",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:219,interoperability,bind,bindings,219,Actually you're right it's independent of Spark. The part where the tchain is reconstructed together with its friends on the workers is https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L166-L185 . Whereas the information about friend trees is retrieved from the user provided TTree or TChain through this function https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Node.py#L766,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:493,interoperability,bind,bindings,493,Actually you're right it's independent of Spark. The part where the tchain is reconstructed together with its friends on the workers is https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L166-L185 . Whereas the information about friend trees is retrieved from the user provided TTree or TChain through this function https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Node.py#L766,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:219,modifiability,bind,bindings,219,Actually you're right it's independent of Spark. The part where the tchain is reconstructed together with its friends on the workers is https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L166-L185 . Whereas the information about friend trees is retrieved from the user provided TTree or TChain through this function https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Node.py#L766,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:493,modifiability,bind,bindings,493,Actually you're right it's independent of Spark. The part where the tchain is reconstructed together with its friends on the workers is https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L166-L185 . Whereas the information about friend trees is retrieved from the user provided TTree or TChain through this function https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Node.py#L766,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:358,usability,user,user,358,Actually you're right it's independent of Spark. The part where the tchain is reconstructed together with its friends on the workers is https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L166-L185 . Whereas the information about friend trees is retrieved from the user provided TTree or TChain through this function https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Node.py#L766,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:173,deployability,automat,automatically,173,"`tree.GetListOfFriends()` should actually be `tree.GetTree().GetListOfFriends()` (see fa87d3c4b8328c), but that's probably not the cause of this issue (unless the friend is automatically loaded from file rather than added via `AddFriend`). I don't see anything obviously wrong, adding a bunch of printouts in those two places should clarify what's going on (or breaking in with a debugger if it's possible through spark).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:187,energy efficiency,load,loaded,187,"`tree.GetListOfFriends()` should actually be `tree.GetTree().GetListOfFriends()` (see fa87d3c4b8328c), but that's probably not the cause of this issue (unless the friend is automatically loaded from file rather than added via `AddFriend`). I don't see anything obviously wrong, adding a bunch of printouts in those two places should clarify what's going on (or breaking in with a debugger if it's possible through spark).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:187,performance,load,loaded,187,"`tree.GetListOfFriends()` should actually be `tree.GetTree().GetListOfFriends()` (see fa87d3c4b8328c), but that's probably not the cause of this issue (unless the friend is automatically loaded from file rather than added via `AddFriend`). I don't see anything obviously wrong, adding a bunch of printouts in those two places should clarify what's going on (or breaking in with a debugger if it's possible through spark).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:173,testability,automat,automatically,173,"`tree.GetListOfFriends()` should actually be `tree.GetTree().GetListOfFriends()` (see fa87d3c4b8328c), but that's probably not the cause of this issue (unless the friend is automatically loaded from file rather than added via `AddFriend`). I don't see anything obviously wrong, adding a bunch of printouts in those two places should clarify what's going on (or breaking in with a debugger if it's possible through spark).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:31,deployability,patch,patch,31,Now for this specific case the patch would be to use `TFriendElement::GetName` rather than `TFriendElement::GetTreeName`. But how many times do people create `TChain` without a name and then call `TChain::AddFriend` with an alias as in this case? Probably I need to add a couple more checks in the function that builds the friend info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:312,deployability,build,builds,312,Now for this specific case the patch would be to use `TFriendElement::GetName` rather than `TFriendElement::GetTreeName`. But how many times do people create `TChain` without a name and then call `TChain::AddFriend` with an alias as in this case? Probably I need to add a couple more checks in the function that builds the friend info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:272,integrability,coupl,couple,272,Now for this specific case the patch would be to use `TFriendElement::GetName` rather than `TFriendElement::GetTreeName`. But how many times do people create `TChain` without a name and then call `TChain::AddFriend` with an alias as in this case? Probably I need to add a couple more checks in the function that builds the friend info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:13,interoperability,specif,specific,13,Now for this specific case the patch would be to use `TFriendElement::GetName` rather than `TFriendElement::GetTreeName`. But how many times do people create `TChain` without a name and then call `TChain::AddFriend` with an alias as in this case? Probably I need to add a couple more checks in the function that builds the friend info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:272,modifiability,coupl,couple,272,Now for this specific case the patch would be to use `TFriendElement::GetName` rather than `TFriendElement::GetTreeName`. But how many times do people create `TChain` without a name and then call `TChain::AddFriend` with an alias as in this case? Probably I need to add a couple more checks in the function that builds the friend info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:135,performance,time,times,135,Now for this specific case the patch would be to use `TFriendElement::GetName` rather than `TFriendElement::GetTreeName`. But how many times do people create `TChain` without a name and then call `TChain::AddFriend` with an alias as in this case? Probably I need to add a couple more checks in the function that builds the friend info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:31,safety,patch,patch,31,Now for this specific case the patch would be to use `TFriendElement::GetName` rather than `TFriendElement::GetTreeName`. But how many times do people create `TChain` without a name and then call `TChain::AddFriend` with an alias as in this case? Probably I need to add a couple more checks in the function that builds the friend info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:31,security,patch,patch,31,Now for this specific case the patch would be to use `TFriendElement::GetName` rather than `TFriendElement::GetTreeName`. But how many times do people create `TChain` without a name and then call `TChain::AddFriend` with an alias as in this case? Probably I need to add a couple more checks in the function that builds the friend info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:272,testability,coupl,couple,272,Now for this specific case the patch would be to use `TFriendElement::GetName` rather than `TFriendElement::GetTreeName`. But how many times do people create `TChain` without a name and then call `TChain::AddFriend` with an alias as in this case? Probably I need to add a couple more checks in the function that builds the friend info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:41,testability,simpl,simple,41,"Mmmh _get_friend_info might be a bit too simple, looks how it's done here: https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/tree/treeplayer/src/TTreeProcessorMT.cxx#L374",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:41,usability,simpl,simple,41,"Mmmh _get_friend_info might be a bit too simple, looks how it's done here: https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/tree/treeplayer/src/TTreeProcessorMT.cxx#L374",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:11,performance,time,times,11,> how many times do people create TChain without a name and then call TChain::AddFriend with an alias as in this case? . both cases are common enough that we have to handle them,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:1391,availability,replic,replicate,1391,"While working on this, I found another bug in the mapper code:. https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L156-L158. Here `treename` through https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Node.py#L703 , that only returns a single string that it's supposed to be the treename. But the reproducer in the linked gist uses the default constructor for TChain and then adds the filename/treename string in the following `Add`. ```. chain = ROOT.TChain(). chainFriend = ROOT.TChain(). chain.Add(""friendtrees_spark.root/randomNumbers""). chainFriend.Add(""friendtrees_spark.root/randomNumbersBis""). ```. So with the current code in distrdf `treename` is `None`. The more correct way to retrieve the treename would look probably like https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/tree/treeplayer/src/TTreeProcessorMT.cxx#L249 . So that's another point in favor of having a common set of functions for retrieving information from the trees useful for range creation for multiple threads/nodes . Furthermore, I'm thinking that a more proper logic for distrdf would be parse the arguments to `DistRDF.RDataFrame` to recognize which `ROOT.RDataFrame` constructor the user is trying to replicate. This way, in the mapper function it would be easier and more precise to make the single rdf objects for each task",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:1249,deployability,log,logic,1249,"While working on this, I found another bug in the mapper code:. https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L156-L158. Here `treename` through https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Node.py#L703 , that only returns a single string that it's supposed to be the treename. But the reproducer in the linked gist uses the default constructor for TChain and then adds the filename/treename string in the following `Add`. ```. chain = ROOT.TChain(). chainFriend = ROOT.TChain(). chain.Add(""friendtrees_spark.root/randomNumbers""). chainFriend.Add(""friendtrees_spark.root/randomNumbersBis""). ```. So with the current code in distrdf `treename` is `None`. The more correct way to retrieve the treename would look probably like https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/tree/treeplayer/src/TTreeProcessorMT.cxx#L249 . So that's another point in favor of having a common set of functions for retrieving information from the trees useful for range creation for multiple threads/nodes . Furthermore, I'm thinking that a more proper logic for distrdf would be parse the arguments to `DistRDF.RDataFrame` to recognize which `ROOT.RDataFrame` constructor the user is trying to replicate. This way, in the mapper function it would be easier and more precise to make the single rdf objects for each task",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:790,energy efficiency,current,current,790,"While working on this, I found another bug in the mapper code:. https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L156-L158. Here `treename` through https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Node.py#L703 , that only returns a single string that it's supposed to be the treename. But the reproducer in the linked gist uses the default constructor for TChain and then adds the filename/treename string in the following `Add`. ```. chain = ROOT.TChain(). chainFriend = ROOT.TChain(). chain.Add(""friendtrees_spark.root/randomNumbers""). chainFriend.Add(""friendtrees_spark.root/randomNumbersBis""). ```. So with the current code in distrdf `treename` is `None`. The more correct way to retrieve the treename would look probably like https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/tree/treeplayer/src/TTreeProcessorMT.cxx#L249 . So that's another point in favor of having a common set of functions for retrieving information from the trees useful for range creation for multiple threads/nodes . Furthermore, I'm thinking that a more proper logic for distrdf would be parse the arguments to `DistRDF.RDataFrame` to recognize which `ROOT.RDataFrame` constructor the user is trying to replicate. This way, in the mapper function it would be easier and more precise to make the single rdf objects for each task",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:147,interoperability,bind,bindings,147,"While working on this, I found another bug in the mapper code:. https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L156-L158. Here `treename` through https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Node.py#L703 , that only returns a single string that it's supposed to be the treename. But the reproducer in the linked gist uses the default constructor for TChain and then adds the filename/treename string in the following `Add`. ```. chain = ROOT.TChain(). chainFriend = ROOT.TChain(). chain.Add(""friendtrees_spark.root/randomNumbers""). chainFriend.Add(""friendtrees_spark.root/randomNumbersBis""). ```. So with the current code in distrdf `treename` is `None`. The more correct way to retrieve the treename would look probably like https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/tree/treeplayer/src/TTreeProcessorMT.cxx#L249 . So that's another point in favor of having a common set of functions for retrieving information from the trees useful for range creation for multiple threads/nodes . Furthermore, I'm thinking that a more proper logic for distrdf would be parse the arguments to `DistRDF.RDataFrame` to recognize which `ROOT.RDataFrame` constructor the user is trying to replicate. This way, in the mapper function it would be easier and more precise to make the single rdf objects for each task",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:327,interoperability,bind,bindings,327,"While working on this, I found another bug in the mapper code:. https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L156-L158. Here `treename` through https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Node.py#L703 , that only returns a single string that it's supposed to be the treename. But the reproducer in the linked gist uses the default constructor for TChain and then adds the filename/treename string in the following `Add`. ```. chain = ROOT.TChain(). chainFriend = ROOT.TChain(). chain.Add(""friendtrees_spark.root/randomNumbers""). chainFriend.Add(""friendtrees_spark.root/randomNumbersBis""). ```. So with the current code in distrdf `treename` is `None`. The more correct way to retrieve the treename would look probably like https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/tree/treeplayer/src/TTreeProcessorMT.cxx#L249 . So that's another point in favor of having a common set of functions for retrieving information from the trees useful for range creation for multiple threads/nodes . Furthermore, I'm thinking that a more proper logic for distrdf would be parse the arguments to `DistRDF.RDataFrame` to recognize which `ROOT.RDataFrame` constructor the user is trying to replicate. This way, in the mapper function it would be easier and more precise to make the single rdf objects for each task",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:147,modifiability,bind,bindings,147,"While working on this, I found another bug in the mapper code:. https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L156-L158. Here `treename` through https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Node.py#L703 , that only returns a single string that it's supposed to be the treename. But the reproducer in the linked gist uses the default constructor for TChain and then adds the filename/treename string in the following `Add`. ```. chain = ROOT.TChain(). chainFriend = ROOT.TChain(). chain.Add(""friendtrees_spark.root/randomNumbers""). chainFriend.Add(""friendtrees_spark.root/randomNumbersBis""). ```. So with the current code in distrdf `treename` is `None`. The more correct way to retrieve the treename would look probably like https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/tree/treeplayer/src/TTreeProcessorMT.cxx#L249 . So that's another point in favor of having a common set of functions for retrieving information from the trees useful for range creation for multiple threads/nodes . Furthermore, I'm thinking that a more proper logic for distrdf would be parse the arguments to `DistRDF.RDataFrame` to recognize which `ROOT.RDataFrame` constructor the user is trying to replicate. This way, in the mapper function it would be easier and more precise to make the single rdf objects for each task",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:327,modifiability,bind,bindings,327,"While working on this, I found another bug in the mapper code:. https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L156-L158. Here `treename` through https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Node.py#L703 , that only returns a single string that it's supposed to be the treename. But the reproducer in the linked gist uses the default constructor for TChain and then adds the filename/treename string in the following `Add`. ```. chain = ROOT.TChain(). chainFriend = ROOT.TChain(). chain.Add(""friendtrees_spark.root/randomNumbers""). chainFriend.Add(""friendtrees_spark.root/randomNumbersBis""). ```. So with the current code in distrdf `treename` is `None`. The more correct way to retrieve the treename would look probably like https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/tree/treeplayer/src/TTreeProcessorMT.cxx#L249 . So that's another point in favor of having a common set of functions for retrieving information from the trees useful for range creation for multiple threads/nodes . Furthermore, I'm thinking that a more proper logic for distrdf would be parse the arguments to `DistRDF.RDataFrame` to recognize which `ROOT.RDataFrame` constructor the user is trying to replicate. This way, in the mapper function it would be easier and more precise to make the single rdf objects for each task",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:1249,safety,log,logic,1249,"While working on this, I found another bug in the mapper code:. https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L156-L158. Here `treename` through https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Node.py#L703 , that only returns a single string that it's supposed to be the treename. But the reproducer in the linked gist uses the default constructor for TChain and then adds the filename/treename string in the following `Add`. ```. chain = ROOT.TChain(). chainFriend = ROOT.TChain(). chain.Add(""friendtrees_spark.root/randomNumbers""). chainFriend.Add(""friendtrees_spark.root/randomNumbersBis""). ```. So with the current code in distrdf `treename` is `None`. The more correct way to retrieve the treename would look probably like https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/tree/treeplayer/src/TTreeProcessorMT.cxx#L249 . So that's another point in favor of having a common set of functions for retrieving information from the trees useful for range creation for multiple threads/nodes . Furthermore, I'm thinking that a more proper logic for distrdf would be parse the arguments to `DistRDF.RDataFrame` to recognize which `ROOT.RDataFrame` constructor the user is trying to replicate. This way, in the mapper function it would be easier and more precise to make the single rdf objects for each task",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:1249,security,log,logic,1249,"While working on this, I found another bug in the mapper code:. https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L156-L158. Here `treename` through https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Node.py#L703 , that only returns a single string that it's supposed to be the treename. But the reproducer in the linked gist uses the default constructor for TChain and then adds the filename/treename string in the following `Add`. ```. chain = ROOT.TChain(). chainFriend = ROOT.TChain(). chain.Add(""friendtrees_spark.root/randomNumbers""). chainFriend.Add(""friendtrees_spark.root/randomNumbersBis""). ```. So with the current code in distrdf `treename` is `None`. The more correct way to retrieve the treename would look probably like https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/tree/treeplayer/src/TTreeProcessorMT.cxx#L249 . So that's another point in favor of having a common set of functions for retrieving information from the trees useful for range creation for multiple threads/nodes . Furthermore, I'm thinking that a more proper logic for distrdf would be parse the arguments to `DistRDF.RDataFrame` to recognize which `ROOT.RDataFrame` constructor the user is trying to replicate. This way, in the mapper function it would be easier and more precise to make the single rdf objects for each task",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:1249,testability,log,logic,1249,"While working on this, I found another bug in the mapper code:. https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L156-L158. Here `treename` through https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Node.py#L703 , that only returns a single string that it's supposed to be the treename. But the reproducer in the linked gist uses the default constructor for TChain and then adds the filename/treename string in the following `Add`. ```. chain = ROOT.TChain(). chainFriend = ROOT.TChain(). chain.Add(""friendtrees_spark.root/randomNumbers""). chainFriend.Add(""friendtrees_spark.root/randomNumbersBis""). ```. So with the current code in distrdf `treename` is `None`. The more correct way to retrieve the treename would look probably like https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/tree/treeplayer/src/TTreeProcessorMT.cxx#L249 . So that's another point in favor of having a common set of functions for retrieving information from the trees useful for range creation for multiple threads/nodes . Furthermore, I'm thinking that a more proper logic for distrdf would be parse the arguments to `DistRDF.RDataFrame` to recognize which `ROOT.RDataFrame` constructor the user is trying to replicate. This way, in the mapper function it would be easier and more precise to make the single rdf objects for each task",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/issues/7584:1373,usability,user,user,1373,"While working on this, I found another bug in the mapper code:. https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L156-L158. Here `treename` through https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/bindings/experimental/distrdf/python/DistRDF/Node.py#L703 , that only returns a single string that it's supposed to be the treename. But the reproducer in the linked gist uses the default constructor for TChain and then adds the filename/treename string in the following `Add`. ```. chain = ROOT.TChain(). chainFriend = ROOT.TChain(). chain.Add(""friendtrees_spark.root/randomNumbers""). chainFriend.Add(""friendtrees_spark.root/randomNumbersBis""). ```. So with the current code in distrdf `treename` is `None`. The more correct way to retrieve the treename would look probably like https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/tree/treeplayer/src/TTreeProcessorMT.cxx#L249 . So that's another point in favor of having a common set of functions for retrieving information from the trees useful for range creation for multiple threads/nodes . Furthermore, I'm thinking that a more proper logic for distrdf would be parse the arguments to `DistRDF.RDataFrame` to recognize which `ROOT.RDataFrame` constructor the user is trying to replicate. This way, in the mapper function it would be easier and more precise to make the single rdf objects for each task",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584
https://github.com/root-project/root/pull/7586:10,availability,failur,failures,10,The mac11 failures are likely spurious. The machine is unstable; I'm doing hardware debugging...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7586
https://github.com/root-project/root/pull/7586:10,deployability,fail,failures,10,The mac11 failures are likely spurious. The machine is unstable; I'm doing hardware debugging...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7586
https://github.com/root-project/root/pull/7586:10,performance,failur,failures,10,The mac11 failures are likely spurious. The machine is unstable; I'm doing hardware debugging...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7586
https://github.com/root-project/root/pull/7586:10,reliability,fail,failures,10,The mac11 failures are likely spurious. The machine is unstable; I'm doing hardware debugging...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7586
https://github.com/root-project/root/pull/7603:117,energy efficiency,Power,PowerPC,117,"I will properly backport the fix to all active stable branches today, but for 6.22 I want to include another fix for PowerPC, see https://github.com/root-project/root/pull/7563#issuecomment-801923214",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7603
https://github.com/root-project/root/issues/7604:306,deployability,releas,releases,306,"See attached files with just 10k, 20k, 30k and 40k lines of code. It seems that the increase in compile time is not linear:. ```. LOC Runtime Memory. 10k 30s 1.7G. 20k 70s 3.3G. 30k 180s 4.9G. 40k 300s 6.5G. ```. Measured with following setup on CentOS 7:. ```bash. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ /usr/bin/time clang++ -c compile_?0k.cxx $(root-config --cflags --libs). ```. Here the files:. [compile_x0k.tar.gz](https://github.com/root-project/root/files/6170297/compile_x0k.tar.gz). And here the `-ftime-trace` output from clang:. [time-trace.tar.gz](https://github.com/root-project/root/files/6170419/time-trace.tar.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:213,energy efficiency,Measur,Measured,213,"See attached files with just 10k, 20k, 30k and 40k lines of code. It seems that the increase in compile time is not linear:. ```. LOC Runtime Memory. 10k 30s 1.7G. 20k 70s 3.3G. 30k 180s 4.9G. 40k 300s 6.5G. ```. Measured with following setup on CentOS 7:. ```bash. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ /usr/bin/time clang++ -c compile_?0k.cxx $(root-config --cflags --libs). ```. Here the files:. [compile_x0k.tar.gz](https://github.com/root-project/root/files/6170297/compile_x0k.tar.gz). And here the `-ftime-trace` output from clang:. [time-trace.tar.gz](https://github.com/root-project/root/files/6170419/time-trace.tar.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:104,performance,time,time,104,"See attached files with just 10k, 20k, 30k and 40k lines of code. It seems that the increase in compile time is not linear:. ```. LOC Runtime Memory. 10k 30s 1.7G. 20k 70s 3.3G. 30k 180s 4.9G. 40k 300s 6.5G. ```. Measured with following setup on CentOS 7:. ```bash. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ /usr/bin/time clang++ -c compile_?0k.cxx $(root-config --cflags --libs). ```. Here the files:. [compile_x0k.tar.gz](https://github.com/root-project/root/files/6170297/compile_x0k.tar.gz). And here the `-ftime-trace` output from clang:. [time-trace.tar.gz](https://github.com/root-project/root/files/6170419/time-trace.tar.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:142,performance,Memor,Memory,142,"See attached files with just 10k, 20k, 30k and 40k lines of code. It seems that the increase in compile time is not linear:. ```. LOC Runtime Memory. 10k 30s 1.7G. 20k 70s 3.3G. 30k 180s 4.9G. 40k 300s 6.5G. ```. Measured with following setup on CentOS 7:. ```bash. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ /usr/bin/time clang++ -c compile_?0k.cxx $(root-config --cflags --libs). ```. Here the files:. [compile_x0k.tar.gz](https://github.com/root-project/root/files/6170297/compile_x0k.tar.gz). And here the `-ftime-trace` output from clang:. [time-trace.tar.gz](https://github.com/root-project/root/files/6170419/time-trace.tar.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:373,performance,time,time,373,"See attached files with just 10k, 20k, 30k and 40k lines of code. It seems that the increase in compile time is not linear:. ```. LOC Runtime Memory. 10k 30s 1.7G. 20k 70s 3.3G. 30k 180s 4.9G. 40k 300s 6.5G. ```. Measured with following setup on CentOS 7:. ```bash. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ /usr/bin/time clang++ -c compile_?0k.cxx $(root-config --cflags --libs). ```. Here the files:. [compile_x0k.tar.gz](https://github.com/root-project/root/files/6170297/compile_x0k.tar.gz). And here the `-ftime-trace` output from clang:. [time-trace.tar.gz](https://github.com/root-project/root/files/6170419/time-trace.tar.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:601,performance,time,time-trace,601,"See attached files with just 10k, 20k, 30k and 40k lines of code. It seems that the increase in compile time is not linear:. ```. LOC Runtime Memory. 10k 30s 1.7G. 20k 70s 3.3G. 30k 180s 4.9G. 40k 300s 6.5G. ```. Measured with following setup on CentOS 7:. ```bash. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ /usr/bin/time clang++ -c compile_?0k.cxx $(root-config --cflags --libs). ```. Here the files:. [compile_x0k.tar.gz](https://github.com/root-project/root/files/6170297/compile_x0k.tar.gz). And here the `-ftime-trace` output from clang:. [time-trace.tar.gz](https://github.com/root-project/root/files/6170419/time-trace.tar.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:671,performance,time,time-trace,671,"See attached files with just 10k, 20k, 30k and 40k lines of code. It seems that the increase in compile time is not linear:. ```. LOC Runtime Memory. 10k 30s 1.7G. 20k 70s 3.3G. 30k 180s 4.9G. 40k 300s 6.5G. ```. Measured with following setup on CentOS 7:. ```bash. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ /usr/bin/time clang++ -c compile_?0k.cxx $(root-config --cflags --libs). ```. Here the files:. [compile_x0k.tar.gz](https://github.com/root-project/root/files/6170297/compile_x0k.tar.gz). And here the `-ftime-trace` output from clang:. [time-trace.tar.gz](https://github.com/root-project/root/files/6170419/time-trace.tar.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:573,testability,trace,trace,573,"See attached files with just 10k, 20k, 30k and 40k lines of code. It seems that the increase in compile time is not linear:. ```. LOC Runtime Memory. 10k 30s 1.7G. 20k 70s 3.3G. 30k 180s 4.9G. 40k 300s 6.5G. ```. Measured with following setup on CentOS 7:. ```bash. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ /usr/bin/time clang++ -c compile_?0k.cxx $(root-config --cflags --libs). ```. Here the files:. [compile_x0k.tar.gz](https://github.com/root-project/root/files/6170297/compile_x0k.tar.gz). And here the `-ftime-trace` output from clang:. [time-trace.tar.gz](https://github.com/root-project/root/files/6170419/time-trace.tar.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:606,testability,trace,trace,606,"See attached files with just 10k, 20k, 30k and 40k lines of code. It seems that the increase in compile time is not linear:. ```. LOC Runtime Memory. 10k 30s 1.7G. 20k 70s 3.3G. 30k 180s 4.9G. 40k 300s 6.5G. ```. Measured with following setup on CentOS 7:. ```bash. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ /usr/bin/time clang++ -c compile_?0k.cxx $(root-config --cflags --libs). ```. Here the files:. [compile_x0k.tar.gz](https://github.com/root-project/root/files/6170297/compile_x0k.tar.gz). And here the `-ftime-trace` output from clang:. [time-trace.tar.gz](https://github.com/root-project/root/files/6170419/time-trace.tar.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:676,testability,trace,trace,676,"See attached files with just 10k, 20k, 30k and 40k lines of code. It seems that the increase in compile time is not linear:. ```. LOC Runtime Memory. 10k 30s 1.7G. 20k 70s 3.3G. 30k 180s 4.9G. 40k 300s 6.5G. ```. Measured with following setup on CentOS 7:. ```bash. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ /usr/bin/time clang++ -c compile_?0k.cxx $(root-config --cflags --libs). ```. Here the files:. [compile_x0k.tar.gz](https://github.com/root-project/root/files/6170297/compile_x0k.tar.gz). And here the `-ftime-trace` output from clang:. [time-trace.tar.gz](https://github.com/root-project/root/files/6170419/time-trace.tar.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:142,usability,Memor,Memory,142,"See attached files with just 10k, 20k, 30k and 40k lines of code. It seems that the increase in compile time is not linear:. ```. LOC Runtime Memory. 10k 30s 1.7G. 20k 70s 3.3G. 30k 180s 4.9G. 40k 300s 6.5G. ```. Measured with following setup on CentOS 7:. ```bash. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ /usr/bin/time clang++ -c compile_?0k.cxx $(root-config --cflags --libs). ```. Here the files:. [compile_x0k.tar.gz](https://github.com/root-project/root/files/6170297/compile_x0k.tar.gz). And here the `-ftime-trace` output from clang:. [time-trace.tar.gz](https://github.com/root-project/root/files/6170419/time-trace.tar.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:57,deployability,version,versions,57,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1052,deployability,scale,scales,1052,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1188,deployability,version,version,1188,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:184,energy efficiency,CPU,CPU,184,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:418,energy efficiency,CPU,CPU,418,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:696,energy efficiency,CPU,CPU,696,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:916,energy efficiency,CPU,CPU,916,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1052,energy efficiency,scale,scales,1052,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:57,integrability,version,versions,57,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1188,integrability,version,version,1188,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:57,modifiability,version,versions,57,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1052,modifiability,scal,scales,1052,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1188,modifiability,version,version,1188,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:88,performance,time,time,88,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:184,performance,CPU,CPU,184,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:307,performance,time,time,307,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:418,performance,CPU,CPU,418,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:585,performance,time,time,585,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:696,performance,CPU,CPU,696,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:819,performance,time,time,819,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:916,performance,CPU,CPU,916,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1052,performance,scale,scales,1052,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1203,performance,time,time-trace,1203,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1273,performance,time,time-trace,1273,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1160,testability,trace,trace,1160,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1208,testability,trace,trace,1208,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1278,testability,trace,trace,1278,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:8,usability,hint,hint,8,Another hint is given by using clang10 and different STL versions:. ```bash. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags). 28.55user 0.80system 0:29.55elapsed 99%CPU (0avgtext+0avgdata 1724760maxresident)k. 150480inputs+37568outputs (677major+376065minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_10k.cxx $(root-config --cflags) -stdlib=libc++. 19.33user 0.49system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 1211416maxresident)k. 148240inputs+24336outputs (661major+234808minor)pagefaults 0swaps. ```. And once again with 40k LOC:. ```bash. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags) -stdlib=libc++. 99.04user 1.90system 1:41.32elapsed 99%CPU (0avgtext+0avgdata 4303216maxresident)k. 148240inputs+93640outputs (661major+661663minor)pagefaults 0swaps. $ /usr/bin/time clang++ -c compile_40k.cxx $(root-config --cflags). 258.58user 2.35system 4:21.79elapsed 99%CPU (0avgtext+0avgdata 6391476maxresident)k. 150480inputs+148000outputs (677major+781217minor)pagefaults 0swaps. ```. **Take away:** It scales much better with libc++! So we won't end up with 1.5h given the 130k LOC jit. You can find a `-ftime-trace` for 40k LOC and both version here: [time-trace.tar.gz](https://github.com/root-project/root/files/6170914/time-trace.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1414,deployability,version,version,1414,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2324,deployability,scale,scale,2324,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:81,energy efficiency,optim,optimization,81,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:249,energy efficiency,CPU,CPU,249,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:468,energy efficiency,CPU,CPU,468,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:689,energy efficiency,CPU,CPU,689,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1018,energy efficiency,CPU,CPU,1018,"guiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1244,energy efficiency,CPU,CPU,1244,"96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This ques",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1638,energy efficiency,CPU,CPU,1638,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1872,energy efficiency,CPU,CPU,1872,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2107,energy efficiency,CPU,CPU,2107,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2275,energy efficiency,optim,optimizations,2275,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2324,energy efficiency,scale,scale,2324,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1414,integrability,version,version,1414,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1414,modifiability,version,version,1414,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2324,modifiability,scal,scale,2324,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:81,performance,optimiz,optimization,81,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:151,performance,time,time,151,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:249,performance,CPU,CPU,249,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:369,performance,time,time,369,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:468,performance,CPU,CPU,468,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:589,performance,time,time,589,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:689,performance,CPU,CPU,689,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:867,performance,time,time,867,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:918,performance,time,time,918,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1018,performance,CPU,CPU,1018,"guiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1141,performance,time,time,1141,"usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1244,performance,CPU,CPU,1244,"96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This ques",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1525,performance,time,time,1525,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1638,performance,CPU,CPU,1638,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1758,performance,time,time,1758,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1872,performance,CPU,CPU,1872,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1992,performance,time,time,1992,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2107,performance,CPU,CPU,2107,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2275,performance,optimiz,optimizations,2275,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2324,performance,scale,scale,2324,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2359,performance,time,times,2359,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:109,safety,test,test,109,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:109,testability,test,test,109,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2256,testability,plan,plans,2256,"pile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 339.62user 0.36system 5:40.54elapsed 99%CPU (0avgtext+0avgdata 709928maxresident)k. 147904inputs+2520outputs (677major+172770minor)pagefaults 0swaps. ```. **Take away:** This questions our plans to enable O1 optimizations within RDF. It may break any large-scale usage of RDF because the jit times are going through the roof.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:56,usability,behavi,behaviour,56,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags). 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k. 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags). 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k. 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags). 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k. 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap. ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags). 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k. 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags). 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k. 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps. ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash. $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k. 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++. 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k. 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:3349,availability,repair,repair,3349,0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( 0%) 0.08 ( 2%) 1.37 ( 0%) 323252 kB ( 17%). post expand cleanups : 0.49 ( 0%) 0.01 ( 0%) 0.50 ( 0%) 45997 kB ( 2%). varconst : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 31 kB ( 0%). jump : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). loop init : 4.00 ( 1%) 0.02 ( 1%) 4.00 ( 1%) 20377 kB ( 1%). loop fini : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 0 kB ( 0%). mode switching : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). integrated RA : 172.04 ( 54%) 0.76 ( 20%) 173.04 ( 53%) 158446 kB ( 8%). LRA non-specific : 3.26 ( 1%) 0.10 ( 3%) 3.35 ( 1%) 8175 kB ( 0%). LRA virtuals elimination : 1.16 ( 0%) 0.01 ( 0%) 1.17 ( 0%) 19987 kB ( 1%). LRA reload inheritance : 0.03 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 26 kB ( 0%). LRA create live ranges : 108.01 ( 34%) 0.14 ( 4%) 108.24 ( 33%) 3724 kB ( 0%). LRA hard reg assignment : 0.18 ( 0%) 0.00 ( 0%) 0.19 ( 0%) 0 kB ( 0%). reload : 0.03 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). thread pro- & epilogue : 1.19 ( 0%) 0.00 ( 0%) 1.26 ( 0%) 3682 kB ( 0%). machine dep reorg : 0.03 ( 0%) 0.00 ( 0%) 0.05 ( 0%) 0 kB ( 0%). shorten branches : 0.75 ( 0%) 0.01 ( 0%) 0.77 ( 0%) 0 kB ( 0%). reg stack : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). final : 1.78 ( 1%) 0.05 ( 1%) 1.79 ( 1%) 73058 kB ( 4%). early local passes : 0.00 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). rest of compilation : 2.25 ( 1%) 0.04 ( 1%) 2.33 ( 1%) 64482 kB ( 3%). repair loop structures : 0.01 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). TOTAL : 320.48 3.74 324.68 1902063 kB. 322.67user 3.97system 5:27.17elapsed 99%CPU (0avgtext+0avgdata 3751416maxresident)k. 56328inputs+131416outputs (192major+1027012minor)pagefaults 0swaps. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:104,deployability,log,log,104,"Edit: `clang++ -ftime-report` gives a much nicer report, which you can find here:. [clang10-time-report.log](https://github.com/root-project/root/files/6171728/clang10-time-report.log). Last investigation for now, using `g++ -ftime-report`:. ```bash. $ /usr/bin/time g++ -ftime-report -O0 -c compile_10k.cxx $(root-config --cflags). preprocessing : 0.20 ( 0%) 0.30 ( 8%) 0.57 ( 0%) 9696 kB ( 1%). parser (global) : 0.17 ( 0%) 0.35 ( 9%) 0.56 ( 0%) 84152 kB ( 4%). parser struct body : 0.23 ( 0%) 0.06 ( 2%) 0.18 ( 0%) 30489 kB ( 2%). parser function body : 2.16 ( 1%) 0.41 ( 11%) 2.59 ( 1%) 241801 kB ( 13%). parser inl. func. body : 0.04 ( 0%) 0.03 ( 1%) 0.06 ( 0%) 4215 kB ( 0%). parser inl. meth. body : 0.22 ( 0%) 0.06 ( 2%) 0.29 ( 0%) 24817 kB ( 1%). template instantiation : 1.30 ( 0%) 0.41 ( 11%) 1.76 ( 1%) 216538 kB ( 11%). constant expression evaluation : 0.04 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 323 kB ( 0%). early inlining heuristics : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). inline parameters : 0.49 ( 0%) 0.00 ( 0%) 0.49 ( 0%) 18471 kB ( 1%). tree gimplify : 0.73 ( 0%) 0.03 ( 1%) 0.77 ( 0%) 97609 kB ( 5%). tree eh : 0.77 ( 0%) 0.05 ( 1%) 0.83 ( 0%) 146994 kB ( 8%). tree CFG construction : 0.35 ( 0%) 0.00 ( 0%) 0.35 ( 0%) 78117 kB ( 4%). tree CFG cleanup : 0.80 ( 0%) 0.01 ( 0%) 0.81 ( 0%) 0 kB ( 0%). tree PHI insertion : 0.46 ( 0%) 0.01 ( 0%) 0.49 ( 0%) 30685 kB ( 2%). tree SSA rewrite : 0.51 ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:180,deployability,log,log,180,"Edit: `clang++ -ftime-report` gives a much nicer report, which you can find here:. [clang10-time-report.log](https://github.com/root-project/root/files/6171728/clang10-time-report.log). Last investigation for now, using `g++ -ftime-report`:. ```bash. $ /usr/bin/time g++ -ftime-report -O0 -c compile_10k.cxx $(root-config --cflags). preprocessing : 0.20 ( 0%) 0.30 ( 8%) 0.57 ( 0%) 9696 kB ( 1%). parser (global) : 0.17 ( 0%) 0.35 ( 9%) 0.56 ( 0%) 84152 kB ( 4%). parser struct body : 0.23 ( 0%) 0.06 ( 2%) 0.18 ( 0%) 30489 kB ( 2%). parser function body : 2.16 ( 1%) 0.41 ( 11%) 2.59 ( 1%) 241801 kB ( 13%). parser inl. func. body : 0.04 ( 0%) 0.03 ( 1%) 0.06 ( 0%) 4215 kB ( 0%). parser inl. meth. body : 0.22 ( 0%) 0.06 ( 2%) 0.29 ( 0%) 24817 kB ( 1%). template instantiation : 1.30 ( 0%) 0.41 ( 11%) 1.76 ( 1%) 216538 kB ( 11%). constant expression evaluation : 0.04 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 323 kB ( 0%). early inlining heuristics : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). inline parameters : 0.49 ( 0%) 0.00 ( 0%) 0.49 ( 0%) 18471 kB ( 1%). tree gimplify : 0.73 ( 0%) 0.03 ( 1%) 0.77 ( 0%) 97609 kB ( 5%). tree eh : 0.77 ( 0%) 0.05 ( 1%) 0.83 ( 0%) 146994 kB ( 8%). tree CFG construction : 0.35 ( 0%) 0.00 ( 0%) 0.35 ( 0%) 78117 kB ( 4%). tree CFG cleanup : 0.80 ( 0%) 0.01 ( 0%) 0.81 ( 0%) 0 kB ( 0%). tree PHI insertion : 0.46 ( 0%) 0.01 ( 0%) 0.49 ( 0%) 30685 kB ( 2%). tree SSA rewrite : 0.51 ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2405,deployability,integr,integrated,2405, ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( 0%) 0.08 ( 2%) 1.37 ( 0%) 323252 kB ( 17%). post expand cleanups : 0.49 ( 0%) 0.01 ( 0%) 0.50 ( 0%) 45997 kB ( 2%). varconst : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 31 kB ( 0%). jump : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). loop init : 4.00 ( 1%) 0.02 ( 1%) 4.00 ( 1%) 20377 kB ( 1%). loop fini : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 0 kB ( 0%). mode switching : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). integrated RA : 172.04 ( 54%) 0.76 ( 20%) 173.04 ( 53%) 158446 kB ( 8%). LRA non-specific : 3.26 ( 1%) 0.10 ( 3%) 3.35 ( 1%) 8175 kB ( 0%). LRA virtuals elimination : 1.16 ( 0%) 0.01 ( 0%) 1.17 ( 0%) 19987 kB ( 1%). LRA reload inheritance : 0.03 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 26 kB ( 0%). LRA create live ranges : 108.01 ( 34%) 0.14 ( 4%) 108.24 ( 33%) 3724 kB ( 0%). LRA hard reg assignment : 0.18 ( 0%) 0.00 ( 0%) 0.19 ( 0%) 0 kB ( 0%). reload : 0.03 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). thread pro- & epilogue : 1.19 ( 0%) 0.00 ( 0%) 1.26 ( 0%) 3682 kB ( 0%). machine dep reorg : 0.03 ( 0%) 0.00 ( 0%) 0.05 ( 0%) 0 kB ( 0%). shorten branches : 0.75 ( 0%) 0.01 ( 0%) 0.77 ( 0%) 0 kB ( 0%). reg stack : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). final : 1.78 ( 1%) 0.05 ( 1%) 1.79 ( 1%) 73058 kB ( 4%). early local passes : 0.00 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). rest of compilation : 2.25 ( 1%) 0.04 ( 1%) 2.33 ( 1%) 64482 kB ( 3%). repair loop structures : 0.01 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 k,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:3102,deployability,stack,stack,3102,0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( 0%) 0.08 ( 2%) 1.37 ( 0%) 323252 kB ( 17%). post expand cleanups : 0.49 ( 0%) 0.01 ( 0%) 0.50 ( 0%) 45997 kB ( 2%). varconst : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 31 kB ( 0%). jump : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). loop init : 4.00 ( 1%) 0.02 ( 1%) 4.00 ( 1%) 20377 kB ( 1%). loop fini : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 0 kB ( 0%). mode switching : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). integrated RA : 172.04 ( 54%) 0.76 ( 20%) 173.04 ( 53%) 158446 kB ( 8%). LRA non-specific : 3.26 ( 1%) 0.10 ( 3%) 3.35 ( 1%) 8175 kB ( 0%). LRA virtuals elimination : 1.16 ( 0%) 0.01 ( 0%) 1.17 ( 0%) 19987 kB ( 1%). LRA reload inheritance : 0.03 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 26 kB ( 0%). LRA create live ranges : 108.01 ( 34%) 0.14 ( 4%) 108.24 ( 33%) 3724 kB ( 0%). LRA hard reg assignment : 0.18 ( 0%) 0.00 ( 0%) 0.19 ( 0%) 0 kB ( 0%). reload : 0.03 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). thread pro- & epilogue : 1.19 ( 0%) 0.00 ( 0%) 1.26 ( 0%) 3682 kB ( 0%). machine dep reorg : 0.03 ( 0%) 0.00 ( 0%) 0.05 ( 0%) 0 kB ( 0%). shorten branches : 0.75 ( 0%) 0.01 ( 0%) 0.77 ( 0%) 0 kB ( 0%). reg stack : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). final : 1.78 ( 1%) 0.05 ( 1%) 1.79 ( 1%) 73058 kB ( 4%). early local passes : 0.00 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). rest of compilation : 2.25 ( 1%) 0.04 ( 1%) 2.33 ( 1%) 64482 kB ( 3%). repair loop structures : 0.01 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). TOTAL : 320.48 3.74 324.68 1902063 kB. 322.67user 3.97system 5:27.17elapsed 99%CPU (0avgtext+0avgdata 3751416maxresident)k. 56328inputs+131416outputs (192major+1027012minor)pagefaults 0swaps. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:3498,energy efficiency,CPU,CPU,3498,0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( 0%) 0.08 ( 2%) 1.37 ( 0%) 323252 kB ( 17%). post expand cleanups : 0.49 ( 0%) 0.01 ( 0%) 0.50 ( 0%) 45997 kB ( 2%). varconst : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 31 kB ( 0%). jump : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). loop init : 4.00 ( 1%) 0.02 ( 1%) 4.00 ( 1%) 20377 kB ( 1%). loop fini : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 0 kB ( 0%). mode switching : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). integrated RA : 172.04 ( 54%) 0.76 ( 20%) 173.04 ( 53%) 158446 kB ( 8%). LRA non-specific : 3.26 ( 1%) 0.10 ( 3%) 3.35 ( 1%) 8175 kB ( 0%). LRA virtuals elimination : 1.16 ( 0%) 0.01 ( 0%) 1.17 ( 0%) 19987 kB ( 1%). LRA reload inheritance : 0.03 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 26 kB ( 0%). LRA create live ranges : 108.01 ( 34%) 0.14 ( 4%) 108.24 ( 33%) 3724 kB ( 0%). LRA hard reg assignment : 0.18 ( 0%) 0.00 ( 0%) 0.19 ( 0%) 0 kB ( 0%). reload : 0.03 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). thread pro- & epilogue : 1.19 ( 0%) 0.00 ( 0%) 1.26 ( 0%) 3682 kB ( 0%). machine dep reorg : 0.03 ( 0%) 0.00 ( 0%) 0.05 ( 0%) 0 kB ( 0%). shorten branches : 0.75 ( 0%) 0.01 ( 0%) 0.77 ( 0%) 0 kB ( 0%). reg stack : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). final : 1.78 ( 1%) 0.05 ( 1%) 1.79 ( 1%) 73058 kB ( 4%). early local passes : 0.00 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). rest of compilation : 2.25 ( 1%) 0.04 ( 1%) 2.33 ( 1%) 64482 kB ( 3%). repair loop structures : 0.01 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). TOTAL : 320.48 3.74 324.68 1902063 kB. 322.67user 3.97system 5:27.17elapsed 99%CPU (0avgtext+0avgdata 3751416maxresident)k. 56328inputs+131416outputs (192major+1027012minor)pagefaults 0swaps. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2405,integrability,integr,integrated,2405, ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( 0%) 0.08 ( 2%) 1.37 ( 0%) 323252 kB ( 17%). post expand cleanups : 0.49 ( 0%) 0.01 ( 0%) 0.50 ( 0%) 45997 kB ( 2%). varconst : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 31 kB ( 0%). jump : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). loop init : 4.00 ( 1%) 0.02 ( 1%) 4.00 ( 1%) 20377 kB ( 1%). loop fini : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 0 kB ( 0%). mode switching : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). integrated RA : 172.04 ( 54%) 0.76 ( 20%) 173.04 ( 53%) 158446 kB ( 8%). LRA non-specific : 3.26 ( 1%) 0.10 ( 3%) 3.35 ( 1%) 8175 kB ( 0%). LRA virtuals elimination : 1.16 ( 0%) 0.01 ( 0%) 1.17 ( 0%) 19987 kB ( 1%). LRA reload inheritance : 0.03 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 26 kB ( 0%). LRA create live ranges : 108.01 ( 34%) 0.14 ( 4%) 108.24 ( 33%) 3724 kB ( 0%). LRA hard reg assignment : 0.18 ( 0%) 0.00 ( 0%) 0.19 ( 0%) 0 kB ( 0%). reload : 0.03 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). thread pro- & epilogue : 1.19 ( 0%) 0.00 ( 0%) 1.26 ( 0%) 3682 kB ( 0%). machine dep reorg : 0.03 ( 0%) 0.00 ( 0%) 0.05 ( 0%) 0 kB ( 0%). shorten branches : 0.75 ( 0%) 0.01 ( 0%) 0.77 ( 0%) 0 kB ( 0%). reg stack : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). final : 1.78 ( 1%) 0.05 ( 1%) 1.79 ( 1%) 73058 kB ( 4%). early local passes : 0.00 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). rest of compilation : 2.25 ( 1%) 0.04 ( 1%) 2.33 ( 1%) 64482 kB ( 3%). repair loop structures : 0.01 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 k,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2405,interoperability,integr,integrated,2405, ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( 0%) 0.08 ( 2%) 1.37 ( 0%) 323252 kB ( 17%). post expand cleanups : 0.49 ( 0%) 0.01 ( 0%) 0.50 ( 0%) 45997 kB ( 2%). varconst : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 31 kB ( 0%). jump : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). loop init : 4.00 ( 1%) 0.02 ( 1%) 4.00 ( 1%) 20377 kB ( 1%). loop fini : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 0 kB ( 0%). mode switching : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). integrated RA : 172.04 ( 54%) 0.76 ( 20%) 173.04 ( 53%) 158446 kB ( 8%). LRA non-specific : 3.26 ( 1%) 0.10 ( 3%) 3.35 ( 1%) 8175 kB ( 0%). LRA virtuals elimination : 1.16 ( 0%) 0.01 ( 0%) 1.17 ( 0%) 19987 kB ( 1%). LRA reload inheritance : 0.03 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 26 kB ( 0%). LRA create live ranges : 108.01 ( 34%) 0.14 ( 4%) 108.24 ( 33%) 3724 kB ( 0%). LRA hard reg assignment : 0.18 ( 0%) 0.00 ( 0%) 0.19 ( 0%) 0 kB ( 0%). reload : 0.03 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). thread pro- & epilogue : 1.19 ( 0%) 0.00 ( 0%) 1.26 ( 0%) 3682 kB ( 0%). machine dep reorg : 0.03 ( 0%) 0.00 ( 0%) 0.05 ( 0%) 0 kB ( 0%). shorten branches : 0.75 ( 0%) 0.01 ( 0%) 0.77 ( 0%) 0 kB ( 0%). reg stack : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). final : 1.78 ( 1%) 0.05 ( 1%) 1.79 ( 1%) 73058 kB ( 4%). early local passes : 0.00 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). rest of compilation : 2.25 ( 1%) 0.04 ( 1%) 2.33 ( 1%) 64482 kB ( 3%). repair loop structures : 0.01 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 k,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2486,interoperability,specif,specific,2486,4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( 0%) 0.08 ( 2%) 1.37 ( 0%) 323252 kB ( 17%). post expand cleanups : 0.49 ( 0%) 0.01 ( 0%) 0.50 ( 0%) 45997 kB ( 2%). varconst : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 31 kB ( 0%). jump : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). loop init : 4.00 ( 1%) 0.02 ( 1%) 4.00 ( 1%) 20377 kB ( 1%). loop fini : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 0 kB ( 0%). mode switching : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). integrated RA : 172.04 ( 54%) 0.76 ( 20%) 173.04 ( 53%) 158446 kB ( 8%). LRA non-specific : 3.26 ( 1%) 0.10 ( 3%) 3.35 ( 1%) 8175 kB ( 0%). LRA virtuals elimination : 1.16 ( 0%) 0.01 ( 0%) 1.17 ( 0%) 19987 kB ( 1%). LRA reload inheritance : 0.03 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 26 kB ( 0%). LRA create live ranges : 108.01 ( 34%) 0.14 ( 4%) 108.24 ( 33%) 3724 kB ( 0%). LRA hard reg assignment : 0.18 ( 0%) 0.00 ( 0%) 0.19 ( 0%) 0 kB ( 0%). reload : 0.03 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). thread pro- & epilogue : 1.19 ( 0%) 0.00 ( 0%) 1.26 ( 0%) 3682 kB ( 0%). machine dep reorg : 0.03 ( 0%) 0.00 ( 0%) 0.05 ( 0%) 0 kB ( 0%). shorten branches : 0.75 ( 0%) 0.01 ( 0%) 0.77 ( 0%) 0 kB ( 0%). reg stack : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). final : 1.78 ( 1%) 0.05 ( 1%) 1.79 ( 1%) 73058 kB ( 4%). early local passes : 0.00 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). rest of compilation : 2.25 ( 1%) 0.04 ( 1%) 2.33 ( 1%) 64482 kB ( 3%). repair loop structures : 0.01 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). TOTAL : 320.48 3.74 324.68 1902063 kB. 322.67user 3.97system 5:27.17ela,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:993,modifiability,paramet,parameters,993,"Edit: `clang++ -ftime-report` gives a much nicer report, which you can find here:. [clang10-time-report.log](https://github.com/root-project/root/files/6171728/clang10-time-report.log). Last investigation for now, using `g++ -ftime-report`:. ```bash. $ /usr/bin/time g++ -ftime-report -O0 -c compile_10k.cxx $(root-config --cflags). preprocessing : 0.20 ( 0%) 0.30 ( 8%) 0.57 ( 0%) 9696 kB ( 1%). parser (global) : 0.17 ( 0%) 0.35 ( 9%) 0.56 ( 0%) 84152 kB ( 4%). parser struct body : 0.23 ( 0%) 0.06 ( 2%) 0.18 ( 0%) 30489 kB ( 2%). parser function body : 2.16 ( 1%) 0.41 ( 11%) 2.59 ( 1%) 241801 kB ( 13%). parser inl. func. body : 0.04 ( 0%) 0.03 ( 1%) 0.06 ( 0%) 4215 kB ( 0%). parser inl. meth. body : 0.22 ( 0%) 0.06 ( 2%) 0.29 ( 0%) 24817 kB ( 1%). template instantiation : 1.30 ( 0%) 0.41 ( 11%) 1.76 ( 1%) 216538 kB ( 11%). constant expression evaluation : 0.04 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 323 kB ( 0%). early inlining heuristics : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). inline parameters : 0.49 ( 0%) 0.00 ( 0%) 0.49 ( 0%) 18471 kB ( 1%). tree gimplify : 0.73 ( 0%) 0.03 ( 1%) 0.77 ( 0%) 97609 kB ( 5%). tree eh : 0.77 ( 0%) 0.05 ( 1%) 0.83 ( 0%) 146994 kB ( 8%). tree CFG construction : 0.35 ( 0%) 0.00 ( 0%) 0.35 ( 0%) 78117 kB ( 4%). tree CFG cleanup : 0.80 ( 0%) 0.01 ( 0%) 0.81 ( 0%) 0 kB ( 0%). tree PHI insertion : 0.46 ( 0%) 0.01 ( 0%) 0.49 ( 0%) 30685 kB ( 2%). tree SSA rewrite : 0.51 ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2405,modifiability,integr,integrated,2405, ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( 0%) 0.08 ( 2%) 1.37 ( 0%) 323252 kB ( 17%). post expand cleanups : 0.49 ( 0%) 0.01 ( 0%) 0.50 ( 0%) 45997 kB ( 2%). varconst : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 31 kB ( 0%). jump : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). loop init : 4.00 ( 1%) 0.02 ( 1%) 4.00 ( 1%) 20377 kB ( 1%). loop fini : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 0 kB ( 0%). mode switching : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). integrated RA : 172.04 ( 54%) 0.76 ( 20%) 173.04 ( 53%) 158446 kB ( 8%). LRA non-specific : 3.26 ( 1%) 0.10 ( 3%) 3.35 ( 1%) 8175 kB ( 0%). LRA virtuals elimination : 1.16 ( 0%) 0.01 ( 0%) 1.17 ( 0%) 19987 kB ( 1%). LRA reload inheritance : 0.03 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 26 kB ( 0%). LRA create live ranges : 108.01 ( 34%) 0.14 ( 4%) 108.24 ( 33%) 3724 kB ( 0%). LRA hard reg assignment : 0.18 ( 0%) 0.00 ( 0%) 0.19 ( 0%) 0 kB ( 0%). reload : 0.03 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). thread pro- & epilogue : 1.19 ( 0%) 0.00 ( 0%) 1.26 ( 0%) 3682 kB ( 0%). machine dep reorg : 0.03 ( 0%) 0.00 ( 0%) 0.05 ( 0%) 0 kB ( 0%). shorten branches : 0.75 ( 0%) 0.01 ( 0%) 0.77 ( 0%) 0 kB ( 0%). reg stack : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). final : 1.78 ( 1%) 0.05 ( 1%) 1.79 ( 1%) 73058 kB ( 4%). early local passes : 0.00 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). rest of compilation : 2.25 ( 1%) 0.04 ( 1%) 2.33 ( 1%) 64482 kB ( 3%). repair loop structures : 0.01 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 k,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2632,modifiability,inherit,inheritance,2632,0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( 0%) 0.08 ( 2%) 1.37 ( 0%) 323252 kB ( 17%). post expand cleanups : 0.49 ( 0%) 0.01 ( 0%) 0.50 ( 0%) 45997 kB ( 2%). varconst : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 31 kB ( 0%). jump : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). loop init : 4.00 ( 1%) 0.02 ( 1%) 4.00 ( 1%) 20377 kB ( 1%). loop fini : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 0 kB ( 0%). mode switching : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). integrated RA : 172.04 ( 54%) 0.76 ( 20%) 173.04 ( 53%) 158446 kB ( 8%). LRA non-specific : 3.26 ( 1%) 0.10 ( 3%) 3.35 ( 1%) 8175 kB ( 0%). LRA virtuals elimination : 1.16 ( 0%) 0.01 ( 0%) 1.17 ( 0%) 19987 kB ( 1%). LRA reload inheritance : 0.03 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 26 kB ( 0%). LRA create live ranges : 108.01 ( 34%) 0.14 ( 4%) 108.24 ( 33%) 3724 kB ( 0%). LRA hard reg assignment : 0.18 ( 0%) 0.00 ( 0%) 0.19 ( 0%) 0 kB ( 0%). reload : 0.03 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). thread pro- & epilogue : 1.19 ( 0%) 0.00 ( 0%) 1.26 ( 0%) 3682 kB ( 0%). machine dep reorg : 0.03 ( 0%) 0.00 ( 0%) 0.05 ( 0%) 0 kB ( 0%). shorten branches : 0.75 ( 0%) 0.01 ( 0%) 0.77 ( 0%) 0 kB ( 0%). reg stack : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). final : 1.78 ( 1%) 0.05 ( 1%) 1.79 ( 1%) 73058 kB ( 4%). early local passes : 0.00 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). rest of compilation : 2.25 ( 1%) 0.04 ( 1%) 2.33 ( 1%) 64482 kB ( 3%). repair loop structures : 0.01 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). TOTAL : 320.48 3.74 324.68 1902063 kB. 322.67user 3.97system 5:27.17elapsed 99%CPU (0avgtext+0avgdata 3751416maxresident)k. 56328inputs+131416outputs (192major+1027012minor)pagefaults 0swaps. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:92,performance,time,time-report,92,"Edit: `clang++ -ftime-report` gives a much nicer report, which you can find here:. [clang10-time-report.log](https://github.com/root-project/root/files/6171728/clang10-time-report.log). Last investigation for now, using `g++ -ftime-report`:. ```bash. $ /usr/bin/time g++ -ftime-report -O0 -c compile_10k.cxx $(root-config --cflags). preprocessing : 0.20 ( 0%) 0.30 ( 8%) 0.57 ( 0%) 9696 kB ( 1%). parser (global) : 0.17 ( 0%) 0.35 ( 9%) 0.56 ( 0%) 84152 kB ( 4%). parser struct body : 0.23 ( 0%) 0.06 ( 2%) 0.18 ( 0%) 30489 kB ( 2%). parser function body : 2.16 ( 1%) 0.41 ( 11%) 2.59 ( 1%) 241801 kB ( 13%). parser inl. func. body : 0.04 ( 0%) 0.03 ( 1%) 0.06 ( 0%) 4215 kB ( 0%). parser inl. meth. body : 0.22 ( 0%) 0.06 ( 2%) 0.29 ( 0%) 24817 kB ( 1%). template instantiation : 1.30 ( 0%) 0.41 ( 11%) 1.76 ( 1%) 216538 kB ( 11%). constant expression evaluation : 0.04 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 323 kB ( 0%). early inlining heuristics : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). inline parameters : 0.49 ( 0%) 0.00 ( 0%) 0.49 ( 0%) 18471 kB ( 1%). tree gimplify : 0.73 ( 0%) 0.03 ( 1%) 0.77 ( 0%) 97609 kB ( 5%). tree eh : 0.77 ( 0%) 0.05 ( 1%) 0.83 ( 0%) 146994 kB ( 8%). tree CFG construction : 0.35 ( 0%) 0.00 ( 0%) 0.35 ( 0%) 78117 kB ( 4%). tree CFG cleanup : 0.80 ( 0%) 0.01 ( 0%) 0.81 ( 0%) 0 kB ( 0%). tree PHI insertion : 0.46 ( 0%) 0.01 ( 0%) 0.49 ( 0%) 30685 kB ( 2%). tree SSA rewrite : 0.51 ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:168,performance,time,time-report,168,"Edit: `clang++ -ftime-report` gives a much nicer report, which you can find here:. [clang10-time-report.log](https://github.com/root-project/root/files/6171728/clang10-time-report.log). Last investigation for now, using `g++ -ftime-report`:. ```bash. $ /usr/bin/time g++ -ftime-report -O0 -c compile_10k.cxx $(root-config --cflags). preprocessing : 0.20 ( 0%) 0.30 ( 8%) 0.57 ( 0%) 9696 kB ( 1%). parser (global) : 0.17 ( 0%) 0.35 ( 9%) 0.56 ( 0%) 84152 kB ( 4%). parser struct body : 0.23 ( 0%) 0.06 ( 2%) 0.18 ( 0%) 30489 kB ( 2%). parser function body : 2.16 ( 1%) 0.41 ( 11%) 2.59 ( 1%) 241801 kB ( 13%). parser inl. func. body : 0.04 ( 0%) 0.03 ( 1%) 0.06 ( 0%) 4215 kB ( 0%). parser inl. meth. body : 0.22 ( 0%) 0.06 ( 2%) 0.29 ( 0%) 24817 kB ( 1%). template instantiation : 1.30 ( 0%) 0.41 ( 11%) 1.76 ( 1%) 216538 kB ( 11%). constant expression evaluation : 0.04 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 323 kB ( 0%). early inlining heuristics : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). inline parameters : 0.49 ( 0%) 0.00 ( 0%) 0.49 ( 0%) 18471 kB ( 1%). tree gimplify : 0.73 ( 0%) 0.03 ( 1%) 0.77 ( 0%) 97609 kB ( 5%). tree eh : 0.77 ( 0%) 0.05 ( 1%) 0.83 ( 0%) 146994 kB ( 8%). tree CFG construction : 0.35 ( 0%) 0.00 ( 0%) 0.35 ( 0%) 78117 kB ( 4%). tree CFG cleanup : 0.80 ( 0%) 0.01 ( 0%) 0.81 ( 0%) 0 kB ( 0%). tree PHI insertion : 0.46 ( 0%) 0.01 ( 0%) 0.49 ( 0%) 30685 kB ( 2%). tree SSA rewrite : 0.51 ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:262,performance,time,time,262,"Edit: `clang++ -ftime-report` gives a much nicer report, which you can find here:. [clang10-time-report.log](https://github.com/root-project/root/files/6171728/clang10-time-report.log). Last investigation for now, using `g++ -ftime-report`:. ```bash. $ /usr/bin/time g++ -ftime-report -O0 -c compile_10k.cxx $(root-config --cflags). preprocessing : 0.20 ( 0%) 0.30 ( 8%) 0.57 ( 0%) 9696 kB ( 1%). parser (global) : 0.17 ( 0%) 0.35 ( 9%) 0.56 ( 0%) 84152 kB ( 4%). parser struct body : 0.23 ( 0%) 0.06 ( 2%) 0.18 ( 0%) 30489 kB ( 2%). parser function body : 2.16 ( 1%) 0.41 ( 11%) 2.59 ( 1%) 241801 kB ( 13%). parser inl. func. body : 0.04 ( 0%) 0.03 ( 1%) 0.06 ( 0%) 4215 kB ( 0%). parser inl. meth. body : 0.22 ( 0%) 0.06 ( 2%) 0.29 ( 0%) 24817 kB ( 1%). template instantiation : 1.30 ( 0%) 0.41 ( 11%) 1.76 ( 1%) 216538 kB ( 11%). constant expression evaluation : 0.04 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 323 kB ( 0%). early inlining heuristics : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). inline parameters : 0.49 ( 0%) 0.00 ( 0%) 0.49 ( 0%) 18471 kB ( 1%). tree gimplify : 0.73 ( 0%) 0.03 ( 1%) 0.77 ( 0%) 97609 kB ( 5%). tree eh : 0.77 ( 0%) 0.05 ( 1%) 0.83 ( 0%) 146994 kB ( 8%). tree CFG construction : 0.35 ( 0%) 0.00 ( 0%) 0.35 ( 0%) 78117 kB ( 4%). tree CFG cleanup : 0.80 ( 0%) 0.01 ( 0%) 0.81 ( 0%) 0 kB ( 0%). tree PHI insertion : 0.46 ( 0%) 0.01 ( 0%) 0.49 ( 0%) 30685 kB ( 2%). tree SSA rewrite : 0.51 ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:3498,performance,CPU,CPU,3498,0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( 0%) 0.08 ( 2%) 1.37 ( 0%) 323252 kB ( 17%). post expand cleanups : 0.49 ( 0%) 0.01 ( 0%) 0.50 ( 0%) 45997 kB ( 2%). varconst : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 31 kB ( 0%). jump : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). loop init : 4.00 ( 1%) 0.02 ( 1%) 4.00 ( 1%) 20377 kB ( 1%). loop fini : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 0 kB ( 0%). mode switching : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). integrated RA : 172.04 ( 54%) 0.76 ( 20%) 173.04 ( 53%) 158446 kB ( 8%). LRA non-specific : 3.26 ( 1%) 0.10 ( 3%) 3.35 ( 1%) 8175 kB ( 0%). LRA virtuals elimination : 1.16 ( 0%) 0.01 ( 0%) 1.17 ( 0%) 19987 kB ( 1%). LRA reload inheritance : 0.03 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 26 kB ( 0%). LRA create live ranges : 108.01 ( 34%) 0.14 ( 4%) 108.24 ( 33%) 3724 kB ( 0%). LRA hard reg assignment : 0.18 ( 0%) 0.00 ( 0%) 0.19 ( 0%) 0 kB ( 0%). reload : 0.03 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). thread pro- & epilogue : 1.19 ( 0%) 0.00 ( 0%) 1.26 ( 0%) 3682 kB ( 0%). machine dep reorg : 0.03 ( 0%) 0.00 ( 0%) 0.05 ( 0%) 0 kB ( 0%). shorten branches : 0.75 ( 0%) 0.01 ( 0%) 0.77 ( 0%) 0 kB ( 0%). reg stack : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). final : 1.78 ( 1%) 0.05 ( 1%) 1.79 ( 1%) 73058 kB ( 4%). early local passes : 0.00 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). rest of compilation : 2.25 ( 1%) 0.04 ( 1%) 2.33 ( 1%) 64482 kB ( 3%). repair loop structures : 0.01 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). TOTAL : 320.48 3.74 324.68 1902063 kB. 322.67user 3.97system 5:27.17elapsed 99%CPU (0avgtext+0avgdata 3751416maxresident)k. 56328inputs+131416outputs (192major+1027012minor)pagefaults 0swaps. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2405,reliability,integr,integrated,2405, ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( 0%) 0.08 ( 2%) 1.37 ( 0%) 323252 kB ( 17%). post expand cleanups : 0.49 ( 0%) 0.01 ( 0%) 0.50 ( 0%) 45997 kB ( 2%). varconst : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 31 kB ( 0%). jump : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). loop init : 4.00 ( 1%) 0.02 ( 1%) 4.00 ( 1%) 20377 kB ( 1%). loop fini : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 0 kB ( 0%). mode switching : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). integrated RA : 172.04 ( 54%) 0.76 ( 20%) 173.04 ( 53%) 158446 kB ( 8%). LRA non-specific : 3.26 ( 1%) 0.10 ( 3%) 3.35 ( 1%) 8175 kB ( 0%). LRA virtuals elimination : 1.16 ( 0%) 0.01 ( 0%) 1.17 ( 0%) 19987 kB ( 1%). LRA reload inheritance : 0.03 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 26 kB ( 0%). LRA create live ranges : 108.01 ( 34%) 0.14 ( 4%) 108.24 ( 33%) 3724 kB ( 0%). LRA hard reg assignment : 0.18 ( 0%) 0.00 ( 0%) 0.19 ( 0%) 0 kB ( 0%). reload : 0.03 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). thread pro- & epilogue : 1.19 ( 0%) 0.00 ( 0%) 1.26 ( 0%) 3682 kB ( 0%). machine dep reorg : 0.03 ( 0%) 0.00 ( 0%) 0.05 ( 0%) 0 kB ( 0%). shorten branches : 0.75 ( 0%) 0.01 ( 0%) 0.77 ( 0%) 0 kB ( 0%). reg stack : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). final : 1.78 ( 1%) 0.05 ( 1%) 1.79 ( 1%) 73058 kB ( 4%). early local passes : 0.00 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). rest of compilation : 2.25 ( 1%) 0.04 ( 1%) 2.33 ( 1%) 64482 kB ( 3%). repair loop structures : 0.01 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 k,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:3349,reliability,repair,repair,3349,0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( 0%) 0.08 ( 2%) 1.37 ( 0%) 323252 kB ( 17%). post expand cleanups : 0.49 ( 0%) 0.01 ( 0%) 0.50 ( 0%) 45997 kB ( 2%). varconst : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 31 kB ( 0%). jump : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). loop init : 4.00 ( 1%) 0.02 ( 1%) 4.00 ( 1%) 20377 kB ( 1%). loop fini : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 0 kB ( 0%). mode switching : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). integrated RA : 172.04 ( 54%) 0.76 ( 20%) 173.04 ( 53%) 158446 kB ( 8%). LRA non-specific : 3.26 ( 1%) 0.10 ( 3%) 3.35 ( 1%) 8175 kB ( 0%). LRA virtuals elimination : 1.16 ( 0%) 0.01 ( 0%) 1.17 ( 0%) 19987 kB ( 1%). LRA reload inheritance : 0.03 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 26 kB ( 0%). LRA create live ranges : 108.01 ( 34%) 0.14 ( 4%) 108.24 ( 33%) 3724 kB ( 0%). LRA hard reg assignment : 0.18 ( 0%) 0.00 ( 0%) 0.19 ( 0%) 0 kB ( 0%). reload : 0.03 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). thread pro- & epilogue : 1.19 ( 0%) 0.00 ( 0%) 1.26 ( 0%) 3682 kB ( 0%). machine dep reorg : 0.03 ( 0%) 0.00 ( 0%) 0.05 ( 0%) 0 kB ( 0%). shorten branches : 0.75 ( 0%) 0.01 ( 0%) 0.77 ( 0%) 0 kB ( 0%). reg stack : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). final : 1.78 ( 1%) 0.05 ( 1%) 1.79 ( 1%) 73058 kB ( 4%). early local passes : 0.00 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). rest of compilation : 2.25 ( 1%) 0.04 ( 1%) 2.33 ( 1%) 64482 kB ( 3%). repair loop structures : 0.01 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). TOTAL : 320.48 3.74 324.68 1902063 kB. 322.67user 3.97system 5:27.17elapsed 99%CPU (0avgtext+0avgdata 3751416maxresident)k. 56328inputs+131416outputs (192major+1027012minor)pagefaults 0swaps. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:104,safety,log,log,104,"Edit: `clang++ -ftime-report` gives a much nicer report, which you can find here:. [clang10-time-report.log](https://github.com/root-project/root/files/6171728/clang10-time-report.log). Last investigation for now, using `g++ -ftime-report`:. ```bash. $ /usr/bin/time g++ -ftime-report -O0 -c compile_10k.cxx $(root-config --cflags). preprocessing : 0.20 ( 0%) 0.30 ( 8%) 0.57 ( 0%) 9696 kB ( 1%). parser (global) : 0.17 ( 0%) 0.35 ( 9%) 0.56 ( 0%) 84152 kB ( 4%). parser struct body : 0.23 ( 0%) 0.06 ( 2%) 0.18 ( 0%) 30489 kB ( 2%). parser function body : 2.16 ( 1%) 0.41 ( 11%) 2.59 ( 1%) 241801 kB ( 13%). parser inl. func. body : 0.04 ( 0%) 0.03 ( 1%) 0.06 ( 0%) 4215 kB ( 0%). parser inl. meth. body : 0.22 ( 0%) 0.06 ( 2%) 0.29 ( 0%) 24817 kB ( 1%). template instantiation : 1.30 ( 0%) 0.41 ( 11%) 1.76 ( 1%) 216538 kB ( 11%). constant expression evaluation : 0.04 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 323 kB ( 0%). early inlining heuristics : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). inline parameters : 0.49 ( 0%) 0.00 ( 0%) 0.49 ( 0%) 18471 kB ( 1%). tree gimplify : 0.73 ( 0%) 0.03 ( 1%) 0.77 ( 0%) 97609 kB ( 5%). tree eh : 0.77 ( 0%) 0.05 ( 1%) 0.83 ( 0%) 146994 kB ( 8%). tree CFG construction : 0.35 ( 0%) 0.00 ( 0%) 0.35 ( 0%) 78117 kB ( 4%). tree CFG cleanup : 0.80 ( 0%) 0.01 ( 0%) 0.81 ( 0%) 0 kB ( 0%). tree PHI insertion : 0.46 ( 0%) 0.01 ( 0%) 0.49 ( 0%) 30685 kB ( 2%). tree SSA rewrite : 0.51 ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:180,safety,log,log,180,"Edit: `clang++ -ftime-report` gives a much nicer report, which you can find here:. [clang10-time-report.log](https://github.com/root-project/root/files/6171728/clang10-time-report.log). Last investigation for now, using `g++ -ftime-report`:. ```bash. $ /usr/bin/time g++ -ftime-report -O0 -c compile_10k.cxx $(root-config --cflags). preprocessing : 0.20 ( 0%) 0.30 ( 8%) 0.57 ( 0%) 9696 kB ( 1%). parser (global) : 0.17 ( 0%) 0.35 ( 9%) 0.56 ( 0%) 84152 kB ( 4%). parser struct body : 0.23 ( 0%) 0.06 ( 2%) 0.18 ( 0%) 30489 kB ( 2%). parser function body : 2.16 ( 1%) 0.41 ( 11%) 2.59 ( 1%) 241801 kB ( 13%). parser inl. func. body : 0.04 ( 0%) 0.03 ( 1%) 0.06 ( 0%) 4215 kB ( 0%). parser inl. meth. body : 0.22 ( 0%) 0.06 ( 2%) 0.29 ( 0%) 24817 kB ( 1%). template instantiation : 1.30 ( 0%) 0.41 ( 11%) 1.76 ( 1%) 216538 kB ( 11%). constant expression evaluation : 0.04 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 323 kB ( 0%). early inlining heuristics : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). inline parameters : 0.49 ( 0%) 0.00 ( 0%) 0.49 ( 0%) 18471 kB ( 1%). tree gimplify : 0.73 ( 0%) 0.03 ( 1%) 0.77 ( 0%) 97609 kB ( 5%). tree eh : 0.77 ( 0%) 0.05 ( 1%) 0.83 ( 0%) 146994 kB ( 8%). tree CFG construction : 0.35 ( 0%) 0.00 ( 0%) 0.35 ( 0%) 78117 kB ( 4%). tree CFG cleanup : 0.80 ( 0%) 0.01 ( 0%) 0.81 ( 0%) 0 kB ( 0%). tree PHI insertion : 0.46 ( 0%) 0.01 ( 0%) 0.49 ( 0%) 30685 kB ( 2%). tree SSA rewrite : 0.51 ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:104,security,log,log,104,"Edit: `clang++ -ftime-report` gives a much nicer report, which you can find here:. [clang10-time-report.log](https://github.com/root-project/root/files/6171728/clang10-time-report.log). Last investigation for now, using `g++ -ftime-report`:. ```bash. $ /usr/bin/time g++ -ftime-report -O0 -c compile_10k.cxx $(root-config --cflags). preprocessing : 0.20 ( 0%) 0.30 ( 8%) 0.57 ( 0%) 9696 kB ( 1%). parser (global) : 0.17 ( 0%) 0.35 ( 9%) 0.56 ( 0%) 84152 kB ( 4%). parser struct body : 0.23 ( 0%) 0.06 ( 2%) 0.18 ( 0%) 30489 kB ( 2%). parser function body : 2.16 ( 1%) 0.41 ( 11%) 2.59 ( 1%) 241801 kB ( 13%). parser inl. func. body : 0.04 ( 0%) 0.03 ( 1%) 0.06 ( 0%) 4215 kB ( 0%). parser inl. meth. body : 0.22 ( 0%) 0.06 ( 2%) 0.29 ( 0%) 24817 kB ( 1%). template instantiation : 1.30 ( 0%) 0.41 ( 11%) 1.76 ( 1%) 216538 kB ( 11%). constant expression evaluation : 0.04 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 323 kB ( 0%). early inlining heuristics : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). inline parameters : 0.49 ( 0%) 0.00 ( 0%) 0.49 ( 0%) 18471 kB ( 1%). tree gimplify : 0.73 ( 0%) 0.03 ( 1%) 0.77 ( 0%) 97609 kB ( 5%). tree eh : 0.77 ( 0%) 0.05 ( 1%) 0.83 ( 0%) 146994 kB ( 8%). tree CFG construction : 0.35 ( 0%) 0.00 ( 0%) 0.35 ( 0%) 78117 kB ( 4%). tree CFG cleanup : 0.80 ( 0%) 0.01 ( 0%) 0.81 ( 0%) 0 kB ( 0%). tree PHI insertion : 0.46 ( 0%) 0.01 ( 0%) 0.49 ( 0%) 30685 kB ( 2%). tree SSA rewrite : 0.51 ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:180,security,log,log,180,"Edit: `clang++ -ftime-report` gives a much nicer report, which you can find here:. [clang10-time-report.log](https://github.com/root-project/root/files/6171728/clang10-time-report.log). Last investigation for now, using `g++ -ftime-report`:. ```bash. $ /usr/bin/time g++ -ftime-report -O0 -c compile_10k.cxx $(root-config --cflags). preprocessing : 0.20 ( 0%) 0.30 ( 8%) 0.57 ( 0%) 9696 kB ( 1%). parser (global) : 0.17 ( 0%) 0.35 ( 9%) 0.56 ( 0%) 84152 kB ( 4%). parser struct body : 0.23 ( 0%) 0.06 ( 2%) 0.18 ( 0%) 30489 kB ( 2%). parser function body : 2.16 ( 1%) 0.41 ( 11%) 2.59 ( 1%) 241801 kB ( 13%). parser inl. func. body : 0.04 ( 0%) 0.03 ( 1%) 0.06 ( 0%) 4215 kB ( 0%). parser inl. meth. body : 0.22 ( 0%) 0.06 ( 2%) 0.29 ( 0%) 24817 kB ( 1%). template instantiation : 1.30 ( 0%) 0.41 ( 11%) 1.76 ( 1%) 216538 kB ( 11%). constant expression evaluation : 0.04 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 323 kB ( 0%). early inlining heuristics : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). inline parameters : 0.49 ( 0%) 0.00 ( 0%) 0.49 ( 0%) 18471 kB ( 1%). tree gimplify : 0.73 ( 0%) 0.03 ( 1%) 0.77 ( 0%) 97609 kB ( 5%). tree eh : 0.77 ( 0%) 0.05 ( 1%) 0.83 ( 0%) 146994 kB ( 8%). tree CFG construction : 0.35 ( 0%) 0.00 ( 0%) 0.35 ( 0%) 78117 kB ( 4%). tree CFG cleanup : 0.80 ( 0%) 0.01 ( 0%) 0.81 ( 0%) 0 kB ( 0%). tree PHI insertion : 0.46 ( 0%) 0.01 ( 0%) 0.49 ( 0%) 30685 kB ( 2%). tree SSA rewrite : 0.51 ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2405,security,integr,integrated,2405, ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( 0%) 0.08 ( 2%) 1.37 ( 0%) 323252 kB ( 17%). post expand cleanups : 0.49 ( 0%) 0.01 ( 0%) 0.50 ( 0%) 45997 kB ( 2%). varconst : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 31 kB ( 0%). jump : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). loop init : 4.00 ( 1%) 0.02 ( 1%) 4.00 ( 1%) 20377 kB ( 1%). loop fini : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 0 kB ( 0%). mode switching : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). integrated RA : 172.04 ( 54%) 0.76 ( 20%) 173.04 ( 53%) 158446 kB ( 8%). LRA non-specific : 3.26 ( 1%) 0.10 ( 3%) 3.35 ( 1%) 8175 kB ( 0%). LRA virtuals elimination : 1.16 ( 0%) 0.01 ( 0%) 1.17 ( 0%) 19987 kB ( 1%). LRA reload inheritance : 0.03 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 26 kB ( 0%). LRA create live ranges : 108.01 ( 34%) 0.14 ( 4%) 108.24 ( 33%) 3724 kB ( 0%). LRA hard reg assignment : 0.18 ( 0%) 0.00 ( 0%) 0.19 ( 0%) 0 kB ( 0%). reload : 0.03 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). thread pro- & epilogue : 1.19 ( 0%) 0.00 ( 0%) 1.26 ( 0%) 3682 kB ( 0%). machine dep reorg : 0.03 ( 0%) 0.00 ( 0%) 0.05 ( 0%) 0 kB ( 0%). shorten branches : 0.75 ( 0%) 0.01 ( 0%) 0.77 ( 0%) 0 kB ( 0%). reg stack : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). final : 1.78 ( 1%) 0.05 ( 1%) 1.79 ( 1%) 73058 kB ( 4%). early local passes : 0.00 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). rest of compilation : 2.25 ( 1%) 0.04 ( 1%) 2.33 ( 1%) 64482 kB ( 3%). repair loop structures : 0.01 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 k,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:104,testability,log,log,104,"Edit: `clang++ -ftime-report` gives a much nicer report, which you can find here:. [clang10-time-report.log](https://github.com/root-project/root/files/6171728/clang10-time-report.log). Last investigation for now, using `g++ -ftime-report`:. ```bash. $ /usr/bin/time g++ -ftime-report -O0 -c compile_10k.cxx $(root-config --cflags). preprocessing : 0.20 ( 0%) 0.30 ( 8%) 0.57 ( 0%) 9696 kB ( 1%). parser (global) : 0.17 ( 0%) 0.35 ( 9%) 0.56 ( 0%) 84152 kB ( 4%). parser struct body : 0.23 ( 0%) 0.06 ( 2%) 0.18 ( 0%) 30489 kB ( 2%). parser function body : 2.16 ( 1%) 0.41 ( 11%) 2.59 ( 1%) 241801 kB ( 13%). parser inl. func. body : 0.04 ( 0%) 0.03 ( 1%) 0.06 ( 0%) 4215 kB ( 0%). parser inl. meth. body : 0.22 ( 0%) 0.06 ( 2%) 0.29 ( 0%) 24817 kB ( 1%). template instantiation : 1.30 ( 0%) 0.41 ( 11%) 1.76 ( 1%) 216538 kB ( 11%). constant expression evaluation : 0.04 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 323 kB ( 0%). early inlining heuristics : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). inline parameters : 0.49 ( 0%) 0.00 ( 0%) 0.49 ( 0%) 18471 kB ( 1%). tree gimplify : 0.73 ( 0%) 0.03 ( 1%) 0.77 ( 0%) 97609 kB ( 5%). tree eh : 0.77 ( 0%) 0.05 ( 1%) 0.83 ( 0%) 146994 kB ( 8%). tree CFG construction : 0.35 ( 0%) 0.00 ( 0%) 0.35 ( 0%) 78117 kB ( 4%). tree CFG cleanup : 0.80 ( 0%) 0.01 ( 0%) 0.81 ( 0%) 0 kB ( 0%). tree PHI insertion : 0.46 ( 0%) 0.01 ( 0%) 0.49 ( 0%) 30685 kB ( 2%). tree SSA rewrite : 0.51 ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:180,testability,log,log,180,"Edit: `clang++ -ftime-report` gives a much nicer report, which you can find here:. [clang10-time-report.log](https://github.com/root-project/root/files/6171728/clang10-time-report.log). Last investigation for now, using `g++ -ftime-report`:. ```bash. $ /usr/bin/time g++ -ftime-report -O0 -c compile_10k.cxx $(root-config --cflags). preprocessing : 0.20 ( 0%) 0.30 ( 8%) 0.57 ( 0%) 9696 kB ( 1%). parser (global) : 0.17 ( 0%) 0.35 ( 9%) 0.56 ( 0%) 84152 kB ( 4%). parser struct body : 0.23 ( 0%) 0.06 ( 2%) 0.18 ( 0%) 30489 kB ( 2%). parser function body : 2.16 ( 1%) 0.41 ( 11%) 2.59 ( 1%) 241801 kB ( 13%). parser inl. func. body : 0.04 ( 0%) 0.03 ( 1%) 0.06 ( 0%) 4215 kB ( 0%). parser inl. meth. body : 0.22 ( 0%) 0.06 ( 2%) 0.29 ( 0%) 24817 kB ( 1%). template instantiation : 1.30 ( 0%) 0.41 ( 11%) 1.76 ( 1%) 216538 kB ( 11%). constant expression evaluation : 0.04 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 323 kB ( 0%). early inlining heuristics : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). inline parameters : 0.49 ( 0%) 0.00 ( 0%) 0.49 ( 0%) 18471 kB ( 1%). tree gimplify : 0.73 ( 0%) 0.03 ( 1%) 0.77 ( 0%) 97609 kB ( 5%). tree eh : 0.77 ( 0%) 0.05 ( 1%) 0.83 ( 0%) 146994 kB ( 8%). tree CFG construction : 0.35 ( 0%) 0.00 ( 0%) 0.35 ( 0%) 78117 kB ( 4%). tree CFG cleanup : 0.80 ( 0%) 0.01 ( 0%) 0.81 ( 0%) 0 kB ( 0%). tree PHI insertion : 0.46 ( 0%) 0.01 ( 0%) 0.49 ( 0%) 30685 kB ( 2%). tree SSA rewrite : 0.51 ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:2405,testability,integr,integrated,2405, ( 0%) 0.02 ( 1%) 0.52 ( 0%) 52404 kB ( 3%). tree SSA other : 0.13 ( 0%) 0.14 ( 4%) 0.34 ( 0%) 314 kB ( 0%). tree SSA incremental : 1.06 ( 0%) 0.00 ( 0%) 1.07 ( 0%) 1 kB ( 0%). tree operand scan : 0.21 ( 0%) 0.15 ( 4%) 0.31 ( 0%) 26106 kB ( 1%). tree switch lowering : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). dominance frontiers : 0.05 ( 0%) 0.00 ( 0%) 0.04 ( 0%) 0 kB ( 0%). dominance computation : 0.80 ( 0%) 0.01 ( 0%) 0.83 ( 0%) 0 kB ( 0%). out of ssa : 0.39 ( 0%) 0.01 ( 0%) 0.36 ( 0%) 3829 kB ( 0%). expand vars : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 14241 kB ( 1%). expand : 1.28 ( 0%) 0.08 ( 2%) 1.37 ( 0%) 323252 kB ( 17%). post expand cleanups : 0.49 ( 0%) 0.01 ( 0%) 0.50 ( 0%) 45997 kB ( 2%). varconst : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 31 kB ( 0%). jump : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). loop init : 4.00 ( 1%) 0.02 ( 1%) 4.00 ( 1%) 20377 kB ( 1%). loop fini : 0.05 ( 0%) 0.00 ( 0%) 0.06 ( 0%) 0 kB ( 0%). mode switching : 0.01 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). integrated RA : 172.04 ( 54%) 0.76 ( 20%) 173.04 ( 53%) 158446 kB ( 8%). LRA non-specific : 3.26 ( 1%) 0.10 ( 3%) 3.35 ( 1%) 8175 kB ( 0%). LRA virtuals elimination : 1.16 ( 0%) 0.01 ( 0%) 1.17 ( 0%) 19987 kB ( 1%). LRA reload inheritance : 0.03 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 26 kB ( 0%). LRA create live ranges : 108.01 ( 34%) 0.14 ( 4%) 108.24 ( 33%) 3724 kB ( 0%). LRA hard reg assignment : 0.18 ( 0%) 0.00 ( 0%) 0.19 ( 0%) 0 kB ( 0%). reload : 0.03 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 kB ( 0%). thread pro- & epilogue : 1.19 ( 0%) 0.00 ( 0%) 1.26 ( 0%) 3682 kB ( 0%). machine dep reorg : 0.03 ( 0%) 0.00 ( 0%) 0.05 ( 0%) 0 kB ( 0%). shorten branches : 0.75 ( 0%) 0.01 ( 0%) 0.77 ( 0%) 0 kB ( 0%). reg stack : 0.01 ( 0%) 0.00 ( 0%) 0.00 ( 0%) 0 kB ( 0%). final : 1.78 ( 1%) 0.05 ( 1%) 1.79 ( 1%) 73058 kB ( 4%). early local passes : 0.00 ( 0%) 0.00 ( 0%) 0.01 ( 0%) 0 kB ( 0%). rest of compilation : 2.25 ( 1%) 0.04 ( 1%) 2.33 ( 1%) 64482 kB ( 3%). repair loop structures : 0.01 ( 0%) 0.00 ( 0%) 0.02 ( 0%) 0 k,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:370,performance,time,time,370,Results of running `perf record --call-graph dwarf -F 99 $ROOTSYS/interpreter/llvm/src/bin/clang++ -c compile_20k.cxx (root-config --cflags)` with and without the extra `-stdlib=libc++` option: [flamegraphs.tar.gz](https://github.com/root-project/root/files/6172953/flamegraphs.tar.gz). In particular the diff flamegraph shows that the gain when using libc++ is in less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:8,safety,compl,complete,8,Just to complete the round-trip and to have even more motivation for the GCC folks: do we have any timings of libstdc++ vs libc++ *with GCC*? (Apologies if I overlooked them!),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:8,security,compl,complete,8,Just to complete the round-trip and to have even more motivation for the GCC folks: do we have any timings of libstdc++ vs libc++ *with GCC*? (Apologies if I overlooked them!),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:414,availability,error,error,414,"@Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. ```bash. $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). <tons of compile warnings>. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report, ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:434,availability,fault,fault,434,"@Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. ```bash. $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). <tons of compile warnings>. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report, ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:127,deployability,releas,releases,127,"@Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. ```bash. $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). <tons of compile warnings>. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report, ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:434,energy efficiency,fault,fault,434,"@Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. ```bash. $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). <tons of compile warnings>. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report, ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:482,integrability,sub,submit,482,"@Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. ```bash. $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). <tons of compile warnings>. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report, ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:414,performance,error,error,414,"@Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. ```bash. $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). <tons of compile warnings>. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report, ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:434,performance,fault,fault,434,"@Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. ```bash. $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). <tons of compile warnings>. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report, ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:434,reliability,fault,fault,434,"@Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. ```bash. $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). <tons of compile warnings>. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report, ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:414,safety,error,error,414,"@Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. ```bash. $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). <tons of compile warnings>. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report, ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:434,safety,fault,fault,434,"@Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. ```bash. $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). <tons of compile warnings>. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report, ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:440,security,sign,signal,440,"@Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. ```bash. $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). <tons of compile warnings>. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report, ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:414,usability,error,error,414,"@Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. ```bash. $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). <tons of compile warnings>. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report, ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:195,availability,consist,consistent,195,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:539,deployability,version,version,539,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:643,energy efficiency,optim,optimizations,643,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:814,energy efficiency,profil,profiling,814,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:539,integrability,version,version,539,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:539,modifiability,version,version,539,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:185,performance,time,times,185,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:233,performance,time,times,233,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:250,performance,time,times,250,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:442,performance,time,times,442,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:558,performance,time,times,558,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:643,performance,optimiz,optimizations,643,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:802,performance,perform,performance,802,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:814,performance,profil,profiling,814,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:866,performance,time,times,866,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:887,performance,time,time,887,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:694,safety,compl,completely,694,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:694,security,compl,completely,694,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:195,usability,consist,consistent,195,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:802,usability,perform,performance,802,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM. - cling jitting times are consistent with `clang++ -O0` compile times. - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph). - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version. - compile times of clang++ are much lower if libc++ is used instead of libstdc++. - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code. - with libc++, `-O1` might be ok, but `-O2` is not. - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:433,availability,error,error,433,"> @Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. > . > ```shell. > $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlib. > s -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). > <tons of compile warnings>. > g++: internal compiler error: Segmentation fault signal terminated program cc1plus. > Please submit a full bug report, ... > ```. I also tried and completely failed already at figuring out all the compiler flags to make this work. I would mark this as ""not feasible"" üòÖ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:453,availability,fault,fault,453,"> @Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. > . > ```shell. > $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlib. > s -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). > <tons of compile warnings>. > g++: internal compiler error: Segmentation fault signal terminated program cc1plus. > Please submit a full bug report, ... > ```. I also tried and completely failed already at figuring out all the compiler flags to make this work. I would mark this as ""not feasible"" üòÖ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:129,deployability,releas,releases,129,"> @Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. > . > ```shell. > $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlib. > s -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). > <tons of compile warnings>. > g++: internal compiler error: Segmentation fault signal terminated program cc1plus. > Please submit a full bug report, ... > ```. I also tried and completely failed already at figuring out all the compiler flags to make this work. I would mark this as ""not feasible"" üòÖ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:568,deployability,fail,failed,568,"> @Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. > . > ```shell. > $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlib. > s -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). > <tons of compile warnings>. > g++: internal compiler error: Segmentation fault signal terminated program cc1plus. > Please submit a full bug report, ... > ```. I also tried and completely failed already at figuring out all the compiler flags to make this work. I would mark this as ""not feasible"" üòÖ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:453,energy efficiency,fault,fault,453,"> @Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. > . > ```shell. > $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlib. > s -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). > <tons of compile warnings>. > g++: internal compiler error: Segmentation fault signal terminated program cc1plus. > Please submit a full bug report, ... > ```. I also tried and completely failed already at figuring out all the compiler flags to make this work. I would mark this as ""not feasible"" üòÖ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:503,integrability,sub,submit,503,"> @Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. > . > ```shell. > $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlib. > s -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). > <tons of compile warnings>. > g++: internal compiler error: Segmentation fault signal terminated program cc1plus. > Please submit a full bug report, ... > ```. I also tried and completely failed already at figuring out all the compiler flags to make this work. I would mark this as ""not feasible"" üòÖ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:433,performance,error,error,433,"> @Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. > . > ```shell. > $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlib. > s -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). > <tons of compile warnings>. > g++: internal compiler error: Segmentation fault signal terminated program cc1plus. > Please submit a full bug report, ... > ```. I also tried and completely failed already at figuring out all the compiler flags to make this work. I would mark this as ""not feasible"" üòÖ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:453,performance,fault,fault,453,"> @Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. > . > ```shell. > $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlib. > s -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). > <tons of compile warnings>. > g++: internal compiler error: Segmentation fault signal terminated program cc1plus. > Please submit a full bug report, ... > ```. I also tried and completely failed already at figuring out all the compiler flags to make this work. I would mark this as ""not feasible"" üòÖ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:453,reliability,fault,fault,453,"> @Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. > . > ```shell. > $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlib. > s -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). > <tons of compile warnings>. > g++: internal compiler error: Segmentation fault signal terminated program cc1plus. > Please submit a full bug report, ... > ```. I also tried and completely failed already at figuring out all the compiler flags to make this work. I would mark this as ""not feasible"" üòÖ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:568,reliability,fail,failed,568,"> @Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. > . > ```shell. > $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlib. > s -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). > <tons of compile warnings>. > g++: internal compiler error: Segmentation fault signal terminated program cc1plus. > Please submit a full bug report, ... > ```. I also tried and completely failed already at figuring out all the compiler flags to make this work. I would mark this as ""not feasible"" üòÖ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:433,safety,error,error,433,"> @Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. > . > ```shell. > $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlib. > s -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). > <tons of compile warnings>. > g++: internal compiler error: Segmentation fault signal terminated program cc1plus. > Please submit a full bug report, ... > ```. I also tried and completely failed already at figuring out all the compiler flags to make this work. I would mark this as ""not feasible"" üòÖ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:453,safety,fault,fault,453,"> @Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. > . > ```shell. > $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlib. > s -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). > <tons of compile warnings>. > g++: internal compiler error: Segmentation fault signal terminated program cc1plus. > Please submit a full bug report, ... > ```. I also tried and completely failed already at figuring out all the compiler flags to make this work. I would mark this as ""not feasible"" üòÖ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:557,safety,compl,completely,557,"> @Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. > . > ```shell. > $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlib. > s -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). > <tons of compile warnings>. > g++: internal compiler error: Segmentation fault signal terminated program cc1plus. > Please submit a full bug report, ... > ```. I also tried and completely failed already at figuring out all the compiler flags to make this work. I would mark this as ""not feasible"" üòÖ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:459,security,sign,signal,459,"> @Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. > . > ```shell. > $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlib. > s -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). > <tons of compile warnings>. > g++: internal compiler error: Segmentation fault signal terminated program cc1plus. > Please submit a full bug report, ... > ```. I also tried and completely failed already at figuring out all the compiler flags to make this work. I would mark this as ""not feasible"" üòÖ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:557,security,compl,completely,557,"> @Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. > . > ```shell. > $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlib. > s -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). > <tons of compile warnings>. > g++: internal compiler error: Segmentation fault signal terminated program cc1plus. > Please submit a full bug report, ... > ```. I also tried and completely failed already at figuring out all the compiler flags to make this work. I would mark this as ""not feasible"" üòÖ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:433,usability,error,error,433,"> @Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. > . > ```shell. > $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlib. > s -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags). > <tons of compile warnings>. > g++: internal compiler error: Segmentation fault signal terminated program cc1plus. > Please submit a full bug report, ... > ```. I also tried and completely failed already at figuring out all the compiler flags to make this work. I would mark this as ""not feasible"" üòÖ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:11,deployability,build,build,11,```. $ . ~/build/root/master/opt17/bin/thisroot.fish . $ g++ -fsyntax-only -nostdinc++ -isystem /usr/lib/llvm-11/include/c++/v1 -I$ROOTSYS/include compile_10k.cxx. ```. I should be able to provide these numbers...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1745,availability,error,error,1745,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1765,availability,fault,fault,1765,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:96,deployability,fail,failing,96,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:178,deployability,version,version,178,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:346,deployability,releas,releases,346,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:435,deployability,releas,releases,435,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1097,deployability,releas,releases,1097,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1614,deployability,releas,releases,1614,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:723,energy efficiency,CPU,CPU,723,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:896,energy efficiency,CPU,CPU,896,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1244,energy efficiency,CPU,CPU,1244,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1505,energy efficiency,CPU,CPU,1505,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1765,energy efficiency,fault,fault,1765,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1970,energy efficiency,CPU,CPU,1970,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:178,integrability,version,version,178,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1813,integrability,sub,submit,1813,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:178,modifiability,version,version,178,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:621,performance,time,time,621,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:723,performance,CPU,CPU,723,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:779,performance,time,time,779,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:896,performance,CPU,CPU,896,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1040,performance,time,time,1040,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1244,performance,CPU,CPU,1244,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1402,performance,time,time,1402,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1505,performance,CPU,CPU,1505,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1561,performance,time,time,1561,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1745,performance,error,error,1745,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1765,performance,fault,fault,1765,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1970,performance,CPU,CPU,1970,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:96,reliability,fail,failing,96,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1765,reliability,fault,fault,1765,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1745,safety,error,error,1745,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1765,safety,fault,fault,1765,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1771,security,sign,signal,1771,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:591,usability,clear,clear,591,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:995,usability,command,commands,995,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1745,usability,error,error,1745,"reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version! ```bash. $ # Environment. $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh. $ which g++. /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++. $ which clang++. /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long). $ # Using 10k LOC, results are not as clear with 1k LOC. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k. $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++. 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only). $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation. $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0. 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k. $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17. g++: internal compiler error: Segmentation fault signal terminated program cc1plus. Please submit a full bug report,. with preprocessed source if appropriate. See <https://gcc.gnu.org/bugs/> for instructions. 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:851,deployability,patch,patch,851,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1096,deployability,patch,patch,1096,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:570,energy efficiency,alloc,allocating,570,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1102,energy efficiency,reduc,reduces,1102,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:679,integrability,Filter,Filter,679,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:759,integrability,Filter,Filter,759,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:132,modifiability,variab,variable,132,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:229,modifiability,scenario,scenario,229,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:405,modifiability,variab,variables,405,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:321,performance,time,times,321,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:958,performance,time,times,958,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1122,performance,time,times,1122,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:83,reliability,doe,doesn,83,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:250,safety,except,exception-handling,250,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:426,safety,except,exception,426,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:564,safety,avoid,avoid,564,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:851,safety,patch,patch,851,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1096,safety,patch,patch,1096,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:851,security,patch,patch,851,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1096,security,patch,patch,1096,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:693,usability,Help,Helper,693,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:773,usability,Help,Helper,773,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase. * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:601,availability,slo,slow,601,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1026,deployability,version,versions,1026,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:94,energy efficiency,current,current,94,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:296,energy efficiency,CPU,CPU,296,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:354,energy efficiency,reduc,reduces,354,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:534,energy efficiency,CPU,CPU,534,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:740,energy efficiency,CPU,CPU,740,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:926,energy efficiency,CPU,CPU,926,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1026,integrability,version,versions,1026,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:1026,modifiability,version,versions,1026,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:192,performance,time,time,192,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:296,performance,CPU,CPU,296,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:374,performance,time,time,374,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:434,performance,time,time,434,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:534,performance,CPU,CPU,534,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:637,performance,time,time,637,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:740,performance,CPU,CPU,740,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:823,performance,time,time,823,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:926,performance,CPU,CPU,926,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:601,reliability,slo,slow,601,"Here some first numbers benchmarking @eguiraud fix in #7651:. ```bash. $ # Here the baseline, current master and a DF graph with about 20k nodes (note the ref in compile_ref.cxx!). $ /usr/bin/time clang++ -c compile_ref.cxx $(root-config --cflags) -O0. 2640.24user 13.10system 44:20.90elapsed 99%CPU (0avgtext+0avgdata 11602708maxresident)k. $ # The fix reduces the compile time massively! Note the opt in compile_opt.cxx! $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O0. 17.66user 0.73system 0:18.59elapsed 98%CPU (0avgtext+0avgdata 1366888maxresident)k. $ # O1 is still super slow, even with the fix. $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O1. 2465.57user 4.72system 41:14.77elapsed 99%CPU (0avgtext+0avgdata 2146924maxresident)k. $ # O2 is faster than O1?? $ /usr/bin/time clang++ -c compile_opt.cxx $(root-config --cflags) -O2. 1603.83user 2.53system 26:48.90elapsed 99%CPU (0avgtext+0avgdata 2123628maxresident)k. ```. Here are the files and the diff bettween the ROOT versions:. [compile.tar.gz](https://github.com/root-project/root/files/6190560/compile.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:0,energy efficiency,Current,Current,0,"Current status: O0 jitting times are fixed for master and 6.24. O1 jitting times are still high, to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:27,performance,time,times,27,"Current status: O0 jitting times are fixed for master and 6.24. O1 jitting times are still high, to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:75,performance,time,times,75,"Current status: O0 jitting times are fixed for master and 6.24. O1 jitting times are still high, to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:8,usability,statu,status,8,"Current status: O0 jitting times are fixed for master and 6.24. O1 jitting times are still high, to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:417,availability,slo,slower,417,Work on reducing jitting times of large RDF computation graphs when cling is using O1 is being done at:. - https://github.com/root-project/root/pull/9328. - https://github.com/root-project/root/pull/9329. - https://github.com/root-project/root/pull/9342. Once these are all in we can re-check what the situation is in terms of O0 vs O1 but also clang++ vs cling (we have seen that in some cases cling is suspiciously slower to compile than clang++ -- to be reproduced with same underlying LLVM version and with the fixes above merged).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:494,deployability,version,version,494,Work on reducing jitting times of large RDF computation graphs when cling is using O1 is being done at:. - https://github.com/root-project/root/pull/9328. - https://github.com/root-project/root/pull/9329. - https://github.com/root-project/root/pull/9342. Once these are all in we can re-check what the situation is in terms of O0 vs O1 but also clang++ vs cling (we have seen that in some cases cling is suspiciously slower to compile than clang++ -- to be reproduced with same underlying LLVM version and with the fixes above merged).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:8,energy efficiency,reduc,reducing,8,Work on reducing jitting times of large RDF computation graphs when cling is using O1 is being done at:. - https://github.com/root-project/root/pull/9328. - https://github.com/root-project/root/pull/9329. - https://github.com/root-project/root/pull/9342. Once these are all in we can re-check what the situation is in terms of O0 vs O1 but also clang++ vs cling (we have seen that in some cases cling is suspiciously slower to compile than clang++ -- to be reproduced with same underlying LLVM version and with the fixes above merged).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:494,integrability,version,version,494,Work on reducing jitting times of large RDF computation graphs when cling is using O1 is being done at:. - https://github.com/root-project/root/pull/9328. - https://github.com/root-project/root/pull/9329. - https://github.com/root-project/root/pull/9342. Once these are all in we can re-check what the situation is in terms of O0 vs O1 but also clang++ vs cling (we have seen that in some cases cling is suspiciously slower to compile than clang++ -- to be reproduced with same underlying LLVM version and with the fixes above merged).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:494,modifiability,version,version,494,Work on reducing jitting times of large RDF computation graphs when cling is using O1 is being done at:. - https://github.com/root-project/root/pull/9328. - https://github.com/root-project/root/pull/9329. - https://github.com/root-project/root/pull/9342. Once these are all in we can re-check what the situation is in terms of O0 vs O1 but also clang++ vs cling (we have seen that in some cases cling is suspiciously slower to compile than clang++ -- to be reproduced with same underlying LLVM version and with the fixes above merged).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:25,performance,time,times,25,Work on reducing jitting times of large RDF computation graphs when cling is using O1 is being done at:. - https://github.com/root-project/root/pull/9328. - https://github.com/root-project/root/pull/9329. - https://github.com/root-project/root/pull/9342. Once these are all in we can re-check what the situation is in terms of O0 vs O1 but also clang++ vs cling (we have seen that in some cases cling is suspiciously slower to compile than clang++ -- to be reproduced with same underlying LLVM version and with the fixes above merged).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:417,reliability,slo,slower,417,Work on reducing jitting times of large RDF computation graphs when cling is using O1 is being done at:. - https://github.com/root-project/root/pull/9328. - https://github.com/root-project/root/pull/9329. - https://github.com/root-project/root/pull/9342. Once these are all in we can re-check what the situation is in terms of O0 vs O1 but also clang++ vs cling (we have seen that in some cases cling is suspiciously slower to compile than clang++ -- to be reproduced with same underlying LLVM version and with the fixes above merged).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:11,performance,time,times,11,"O1 jitting times are back to reasonable levels thanks to the PRs mentioned above (both included in v6.26.00), see https://rootbnch-grafana-test.cern.ch/d/G2qrd2SWk/rdataframe?orgId=1&viewPanel=42&from=1616924807235&to=1649407773511 . To improve RDF jitting times we would still like to see https://github.com/root-project/cling/issues/443 fixed. Closing this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:257,performance,time,times,257,"O1 jitting times are back to reasonable levels thanks to the PRs mentioned above (both included in v6.26.00), see https://rootbnch-grafana-test.cern.ch/d/G2qrd2SWk/rdataframe?orgId=1&viewPanel=42&from=1616924807235&to=1649407773511 . To improve RDF jitting times we would still like to see https://github.com/root-project/cling/issues/443 fixed. Closing this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:139,safety,test,test,139,"O1 jitting times are back to reasonable levels thanks to the PRs mentioned above (both included in v6.26.00), see https://rootbnch-grafana-test.cern.ch/d/G2qrd2SWk/rdataframe?orgId=1&viewPanel=42&from=1616924807235&to=1649407773511 . To improve RDF jitting times we would still like to see https://github.com/root-project/cling/issues/443 fixed. Closing this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/issues/7604:139,testability,test,test,139,"O1 jitting times are back to reasonable levels thanks to the PRs mentioned above (both included in v6.26.00), see https://rootbnch-grafana-test.cern.ch/d/G2qrd2SWk/rdataframe?orgId=1&viewPanel=42&from=1616924807235&to=1649407773511 . To improve RDF jitting times we would still like to see https://github.com/root-project/cling/issues/443 fixed. Closing this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604
https://github.com/root-project/root/pull/7607:246,availability,slo,sloow,246,"> AFAICT we do not require reviews for branch backports -- next time feel free to merge after a successful PR build. Thanks, I wasn't entirely sure because I added the second commit for PowerPC (that is included in LLVM 9). And Jenkins was veery sloow today...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7607
https://github.com/root-project/root/pull/7607:110,deployability,build,build,110,"> AFAICT we do not require reviews for branch backports -- next time feel free to merge after a successful PR build. Thanks, I wasn't entirely sure because I added the second commit for PowerPC (that is included in LLVM 9). And Jenkins was veery sloow today...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7607
https://github.com/root-project/root/pull/7607:186,energy efficiency,Power,PowerPC,186,"> AFAICT we do not require reviews for branch backports -- next time feel free to merge after a successful PR build. Thanks, I wasn't entirely sure because I added the second commit for PowerPC (that is included in LLVM 9). And Jenkins was veery sloow today...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7607
https://github.com/root-project/root/pull/7607:64,performance,time,time,64,"> AFAICT we do not require reviews for branch backports -- next time feel free to merge after a successful PR build. Thanks, I wasn't entirely sure because I added the second commit for PowerPC (that is included in LLVM 9). And Jenkins was veery sloow today...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7607
https://github.com/root-project/root/pull/7607:246,reliability,slo,sloow,246,"> AFAICT we do not require reviews for branch backports -- next time feel free to merge after a successful PR build. Thanks, I wasn't entirely sure because I added the second commit for PowerPC (that is included in LLVM 9). And Jenkins was veery sloow today...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7607
https://github.com/root-project/root/pull/7607:27,safety,review,reviews,27,"> AFAICT we do not require reviews for branch backports -- next time feel free to merge after a successful PR build. Thanks, I wasn't entirely sure because I added the second commit for PowerPC (that is included in LLVM 9). And Jenkins was veery sloow today...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7607
https://github.com/root-project/root/pull/7607:27,testability,review,reviews,27,"> AFAICT we do not require reviews for branch backports -- next time feel free to merge after a successful PR build. Thanks, I wasn't entirely sure because I added the second commit for PowerPC (that is included in LLVM 9). And Jenkins was veery sloow today...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7607
https://github.com/root-project/root/pull/7610:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7610
https://github.com/root-project/root/pull/7613:24,usability,Person,Personally,24,"Hey Sergey,. good work! Personally, I would go for `unique_ptr`, though. This way, even future code changes (`throw, return, if`) will not re-introduce those leaks. @guitargeek ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:554,availability,error,error,554,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. . Yes, I fully agree. Question - how far we want to change public APIs here. Actually, leak in RooCacheManager can happen only by accident - . normally it always checked if object exists before creating new entry which could be lost. But in many other places we could not easily change API. Or there are a plans to do it in incompatible way? I guess, it is not bad idea to check clang-tidy warnings and try to understand them. Here is typical example of error:. https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:166,deployability,API,APIs,166,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. . Yes, I fully agree. Question - how far we want to change public APIs here. Actually, leak in RooCacheManager can happen only by accident - . normally it always checked if object exists before creating new entry which could be lost. But in many other places we could not easily change API. Or there are a plans to do it in incompatible way? I guess, it is not bad idea to check clang-tidy warnings and try to understand them. Here is typical example of error:. https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:386,deployability,API,API,386,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. . Yes, I fully agree. Question - how far we want to change public APIs here. Actually, leak in RooCacheManager can happen only by accident - . normally it always checked if object exists before creating new entry which could be lost. But in many other places we could not easily change API. Or there are a plans to do it in incompatible way? I guess, it is not bad idea to check clang-tidy warnings and try to understand them. Here is typical example of error:. https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:159,integrability,pub,public,159,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. . Yes, I fully agree. Question - how far we want to change public APIs here. Actually, leak in RooCacheManager can happen only by accident - . normally it always checked if object exists before creating new entry which could be lost. But in many other places we could not easily change API. Or there are a plans to do it in incompatible way? I guess, it is not bad idea to check clang-tidy warnings and try to understand them. Here is typical example of error:. https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:166,integrability,API,APIs,166,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. . Yes, I fully agree. Question - how far we want to change public APIs here. Actually, leak in RooCacheManager can happen only by accident - . normally it always checked if object exists before creating new entry which could be lost. But in many other places we could not easily change API. Or there are a plans to do it in incompatible way? I guess, it is not bad idea to check clang-tidy warnings and try to understand them. Here is typical example of error:. https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:386,integrability,API,API,386,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. . Yes, I fully agree. Question - how far we want to change public APIs here. Actually, leak in RooCacheManager can happen only by accident - . normally it always checked if object exists before creating new entry which could be lost. But in many other places we could not easily change API. Or there are a plans to do it in incompatible way? I guess, it is not bad idea to check clang-tidy warnings and try to understand them. Here is typical example of error:. https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:166,interoperability,API,APIs,166,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. . Yes, I fully agree. Question - how far we want to change public APIs here. Actually, leak in RooCacheManager can happen only by accident - . normally it always checked if object exists before creating new entry which could be lost. But in many other places we could not easily change API. Or there are a plans to do it in incompatible way? I guess, it is not bad idea to check clang-tidy warnings and try to understand them. Here is typical example of error:. https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:386,interoperability,API,API,386,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. . Yes, I fully agree. Question - how far we want to change public APIs here. Actually, leak in RooCacheManager can happen only by accident - . normally it always checked if object exists before creating new entry which could be lost. But in many other places we could not easily change API. Or there are a plans to do it in incompatible way? I guess, it is not bad idea to check clang-tidy warnings and try to understand them. Here is typical example of error:. https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:424,interoperability,incompatib,incompatible,424,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. . Yes, I fully agree. Question - how far we want to change public APIs here. Actually, leak in RooCacheManager can happen only by accident - . normally it always checked if object exists before creating new entry which could be lost. But in many other places we could not easily change API. Or there are a plans to do it in incompatible way? I guess, it is not bad idea to check clang-tidy warnings and try to understand them. Here is typical example of error:. https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:554,performance,error,error,554,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. . Yes, I fully agree. Question - how far we want to change public APIs here. Actually, leak in RooCacheManager can happen only by accident - . normally it always checked if object exists before creating new entry which could be lost. But in many other places we could not easily change API. Or there are a plans to do it in incompatible way? I guess, it is not bad idea to check clang-tidy warnings and try to understand them. Here is typical example of error:. https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:230,safety,accid,accident,230,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. . Yes, I fully agree. Question - how far we want to change public APIs here. Actually, leak in RooCacheManager can happen only by accident - . normally it always checked if object exists before creating new entry which could be lost. But in many other places we could not easily change API. Or there are a plans to do it in incompatible way? I guess, it is not bad idea to check clang-tidy warnings and try to understand them. Here is typical example of error:. https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:554,safety,error,error,554,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. . Yes, I fully agree. Question - how far we want to change public APIs here. Actually, leak in RooCacheManager can happen only by accident - . normally it always checked if object exists before creating new entry which could be lost. But in many other places we could not easily change API. Or there are a plans to do it in incompatible way? I guess, it is not bad idea to check clang-tidy warnings and try to understand them. Here is typical example of error:. https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:406,testability,plan,plans,406,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. . Yes, I fully agree. Question - how far we want to change public APIs here. Actually, leak in RooCacheManager can happen only by accident - . normally it always checked if object exists before creating new entry which could be lost. But in many other places we could not easily change API. Or there are a plans to do it in incompatible way? I guess, it is not bad idea to check clang-tidy warnings and try to understand them. Here is typical example of error:. https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:510,testability,understand,understand,510,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. . Yes, I fully agree. Question - how far we want to change public APIs here. Actually, leak in RooCacheManager can happen only by accident - . normally it always checked if object exists before creating new entry which could be lost. But in many other places we could not easily change API. Or there are a plans to do it in incompatible way? I guess, it is not bad idea to check clang-tidy warnings and try to understand them. Here is typical example of error:. https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:2,usability,Person,Personally,2,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. . Yes, I fully agree. Question - how far we want to change public APIs here. Actually, leak in RooCacheManager can happen only by accident - . normally it always checked if object exists before creating new entry which could be lost. But in many other places we could not easily change API. Or there are a plans to do it in incompatible way? I guess, it is not bad idea to check clang-tidy warnings and try to understand them. Here is typical example of error:. https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:554,usability,error,error,554,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. . Yes, I fully agree. Question - how far we want to change public APIs here. Actually, leak in RooCacheManager can happen only by accident - . normally it always checked if object exists before creating new entry which could be lost. But in many other places we could not easily change API. Or there are a plans to do it in incompatible way? I guess, it is not bad idea to check clang-tidy warnings and try to understand them. Here is typical example of error:. https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:109,safety,review,review,109,Hi! I have already developed a `unique_ptr` solution but then @linev was faster than me with the PR :). I'll review this PR here and when it's merged I will follow up with the unique pointers.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:109,testability,review,review,109,Hi! I have already developed a `unique_ptr` solution but then @linev was faster than me with the PR :). I'll review this PR here and when it's merged I will follow up with the unique pointers.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:27,safety,compl,completeness,27,I add two more commits for completeness - in many places TIterator object is not deleted properly. I fix this in histfactory and add these fixes to PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:27,security,compl,completeness,27,I add two more commits for completeness - in many places TIterator object is not deleted properly. I fix this in histfactory and add these fixes to PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:173,security,sign,signatures,173,"This leaks are nothing compared with iterators leaks all over RooFit sources. I found dozens of them in all places, including tutorials :-1: . And I not yet finish with all signatures which are creating iterators.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7613:140,deployability,contain,container,140,Yes the iterators are really annoying in RooFit. @hageboeck actually implemented `begin()` and `end()` functions for the most common RooFit container classes like RooArgSet. So often it is also possible to use a range-based loop.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7613
https://github.com/root-project/root/pull/7615:1318,availability,operat,operation,1318,"on_source: **1** minor issue. :point_down:. ## Top issues. <table>. <thead>. <tr>. <th align=""left"">Description</th>. <th align=""left"">Example fixes</th>. </tr>. </thead>. <tbody>. <tr>. <td width=""77%"">Potential nullptr dereference. 0 may return a nullptr if malloc failed to allocate memory. Consider adding a check for nullness. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/fl2_decompress.c#L558"">fl2_decompress.c:558</a></li> <li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/fl2_decompress.c#L559"">fl2_decompress.c:559</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2Fbuiltins%2Fflzma2%2Ffl2_decompress.c/cpp%2Fdc%2FDerefOfMaybeNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Numerical operation plus used with boolean operand not. Consider making the conversion from bool to integer explicit. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/radix_mf.c#L226"">radix_mf.c:226</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2Fbuiltins%2Fflzma2%2Fradix_mf.c/cpp%2Fdc%2FIntegralExprWithBoolOperand/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. </tbody>. </table>. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2F/code/?utm_source=gh_review&c=0&w=1&i=1&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7615
https://github.com/root-project/root/pull/7615:547,deployability,fail,failed,547,"## DeepCode's analysis on [#187ec0](https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2F/code/?utm_source=gh_review&c=0&w=1&i=1&) found:. - :warning: **1** warning, :information_source: **1** minor issue. :point_down:. ## Top issues. <table>. <thead>. <tr>. <th align=""left"">Description</th>. <th align=""left"">Example fixes</th>. </tr>. </thead>. <tbody>. <tr>. <td width=""77%"">Potential nullptr dereference. 0 may return a nullptr if malloc failed to allocate memory. Consider adding a check for nullness. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/fl2_decompress.c#L558"">fl2_decompress.c:558</a></li> <li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/fl2_decompress.c#L559"">fl2_decompress.c:559</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2Fbuiltins%2Fflzma2%2Ffl2_decompress.c/cpp%2Fdc%2FDerefOfMaybeNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Numerical operation plus used with boolean operand not. Consider making the conversion from bool to integer explicit. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/radix_mf.c#L226"">radix_mf.c:226</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2Fbuiltins%2Fflzma2%2Fradix_mf.c/cpp%2Fdc%2FIntegralExprWithBoolOperand/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. </tbody>. </table>. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7615
https://github.com/root-project/root/pull/7615:557,energy efficiency,alloc,allocate,557,"## DeepCode's analysis on [#187ec0](https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2F/code/?utm_source=gh_review&c=0&w=1&i=1&) found:. - :warning: **1** warning, :information_source: **1** minor issue. :point_down:. ## Top issues. <table>. <thead>. <tr>. <th align=""left"">Description</th>. <th align=""left"">Example fixes</th>. </tr>. </thead>. <tbody>. <tr>. <td width=""77%"">Potential nullptr dereference. 0 may return a nullptr if malloc failed to allocate memory. Consider adding a check for nullness. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/fl2_decompress.c#L558"">fl2_decompress.c:558</a></li> <li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/fl2_decompress.c#L559"">fl2_decompress.c:559</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2Fbuiltins%2Fflzma2%2Ffl2_decompress.c/cpp%2Fdc%2FDerefOfMaybeNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Numerical operation plus used with boolean operand not. Consider making the conversion from bool to integer explicit. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/radix_mf.c#L226"">radix_mf.c:226</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2Fbuiltins%2Fflzma2%2Fradix_mf.c/cpp%2Fdc%2FIntegralExprWithBoolOperand/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. </tbody>. </table>. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7615
https://github.com/root-project/root/pull/7615:1384,interoperability,convers,conversion,1384,"on_source: **1** minor issue. :point_down:. ## Top issues. <table>. <thead>. <tr>. <th align=""left"">Description</th>. <th align=""left"">Example fixes</th>. </tr>. </thead>. <tbody>. <tr>. <td width=""77%"">Potential nullptr dereference. 0 may return a nullptr if malloc failed to allocate memory. Consider adding a check for nullness. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/fl2_decompress.c#L558"">fl2_decompress.c:558</a></li> <li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/fl2_decompress.c#L559"">fl2_decompress.c:559</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2Fbuiltins%2Fflzma2%2Ffl2_decompress.c/cpp%2Fdc%2FDerefOfMaybeNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Numerical operation plus used with boolean operand not. Consider making the conversion from bool to integer explicit. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/radix_mf.c#L226"">radix_mf.c:226</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2Fbuiltins%2Fflzma2%2Fradix_mf.c/cpp%2Fdc%2FIntegralExprWithBoolOperand/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. </tbody>. </table>. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2F/code/?utm_source=gh_review&c=0&w=1&i=1&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7615
https://github.com/root-project/root/pull/7615:566,performance,memor,memory,566,"## DeepCode's analysis on [#187ec0](https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2F/code/?utm_source=gh_review&c=0&w=1&i=1&) found:. - :warning: **1** warning, :information_source: **1** minor issue. :point_down:. ## Top issues. <table>. <thead>. <tr>. <th align=""left"">Description</th>. <th align=""left"">Example fixes</th>. </tr>. </thead>. <tbody>. <tr>. <td width=""77%"">Potential nullptr dereference. 0 may return a nullptr if malloc failed to allocate memory. Consider adding a check for nullness. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/fl2_decompress.c#L558"">fl2_decompress.c:558</a></li> <li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/fl2_decompress.c#L559"">fl2_decompress.c:559</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2Fbuiltins%2Fflzma2%2Ffl2_decompress.c/cpp%2Fdc%2FDerefOfMaybeNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Numerical operation plus used with boolean operand not. Consider making the conversion from bool to integer explicit. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/radix_mf.c#L226"">radix_mf.c:226</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2Fbuiltins%2Fflzma2%2Fradix_mf.c/cpp%2Fdc%2FIntegralExprWithBoolOperand/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. </tbody>. </table>. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7615
https://github.com/root-project/root/pull/7615:547,reliability,fail,failed,547,"## DeepCode's analysis on [#187ec0](https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2F/code/?utm_source=gh_review&c=0&w=1&i=1&) found:. - :warning: **1** warning, :information_source: **1** minor issue. :point_down:. ## Top issues. <table>. <thead>. <tr>. <th align=""left"">Description</th>. <th align=""left"">Example fixes</th>. </tr>. </thead>. <tbody>. <tr>. <td width=""77%"">Potential nullptr dereference. 0 may return a nullptr if malloc failed to allocate memory. Consider adding a check for nullness. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/fl2_decompress.c#L558"">fl2_decompress.c:558</a></li> <li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/fl2_decompress.c#L559"">fl2_decompress.c:559</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2Fbuiltins%2Fflzma2%2Ffl2_decompress.c/cpp%2Fdc%2FDerefOfMaybeNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Numerical operation plus used with boolean operand not. Consider making the conversion from bool to integer explicit. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/radix_mf.c#L226"">radix_mf.c:226</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2Fbuiltins%2Fflzma2%2Fradix_mf.c/cpp%2Fdc%2FIntegralExprWithBoolOperand/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. </tbody>. </table>. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7615
https://github.com/root-project/root/pull/7615:566,usability,memor,memory,566,"## DeepCode's analysis on [#187ec0](https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2F/code/?utm_source=gh_review&c=0&w=1&i=1&) found:. - :warning: **1** warning, :information_source: **1** minor issue. :point_down:. ## Top issues. <table>. <thead>. <tr>. <th align=""left"">Description</th>. <th align=""left"">Example fixes</th>. </tr>. </thead>. <tbody>. <tr>. <td width=""77%"">Potential nullptr dereference. 0 may return a nullptr if malloc failed to allocate memory. Consider adding a check for nullness. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/fl2_decompress.c#L558"">fl2_decompress.c:558</a></li> <li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/fl2_decompress.c#L559"">fl2_decompress.c:559</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2Fbuiltins%2Fflzma2%2Ffl2_decompress.c/cpp%2Fdc%2FDerefOfMaybeNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Numerical operation plus used with boolean operand not. Consider making the conversion from bool to integer explicit. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/builtins/flzma2/radix_mf.c#L226"">radix_mf.c:226</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/f25bf94f63f20e4ae3e7cded25059ee6bc1e8af2/root-project/root/187ec0cda4f7e21b4461d2cf43ac0def3e428b25/pr/_/%2Fbuiltins%2Fflzma2%2Fradix_mf.c/cpp%2Fdc%2FIntegralExprWithBoolOperand/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. </tbody>. </table>. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7615
https://github.com/root-project/root/pull/7615:99,integrability,event,event,99,Closing PR since development had been decide not to merge (see presentation https://indico.cern.ch/event/1029474/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7615
https://github.com/root-project/root/pull/7616:62,interoperability,standard,standard,62,I used a feature that was not in C++11; I thought the minimum standard is C++14... But that's something I can change with not so much effort.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:54,usability,minim,minimum,54,I used a feature that was not in C++11; I thought the minimum standard is C++14... But that's something I can change with not so much effort.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:287,availability,redund,redundant,287,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:287,deployability,redundan,redundant,287,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:346,deployability,version,versions,346,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:872,deployability,version,version,872,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:1005,deployability,version,versions,1005,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:1168,deployability,version,version,1168,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:346,integrability,version,versions,346,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:465,integrability,schema,schema,465,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:872,integrability,version,version,872,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:1005,integrability,version,versions,1005,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:1168,integrability,version,version,1168,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:1291,integrability,batch,batch,1291,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:346,modifiability,version,versions,346,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:872,modifiability,version,version,872,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:1005,modifiability,version,versions,1005,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:1168,modifiability,version,version,1168,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:125,performance,time,time,125,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:1291,performance,batch,batch,1291,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:287,reliability,redundan,redundant,287,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:802,reliability,pra,pragma,802,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:287,safety,redund,redundant,287,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/pull/7616:1279,safety,reme,remember,1279,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:. > . > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable? It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more. The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic. I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like. ```. #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \. code=""{ _newBool = onfile._oldBool; }"". ```. You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable üëç. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7616
https://github.com/root-project/root/issues/7617:37,availability,error,errors,37,@Axel-Naumann . Maybe one should fix errors in `Alien` code - is it still maintained?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7617
https://github.com/root-project/root/issues/7617:74,modifiability,maintain,maintained,74,@Axel-Naumann . Maybe one should fix errors in `Alien` code - is it still maintained?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7617
https://github.com/root-project/root/issues/7617:37,performance,error,errors,37,@Axel-Naumann . Maybe one should fix errors in `Alien` code - is it still maintained?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7617
https://github.com/root-project/root/issues/7617:37,safety,error,errors,37,@Axel-Naumann . Maybe one should fix errors in `Alien` code - is it still maintained?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7617
https://github.com/root-project/root/issues/7617:74,safety,maintain,maintained,74,@Axel-Naumann . Maybe one should fix errors in `Alien` code - is it still maintained?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7617
https://github.com/root-project/root/issues/7617:37,usability,error,errors,37,@Axel-Naumann . Maybe one should fix errors in `Alien` code - is it still maintained?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7617
https://github.com/root-project/root/pull/7621:563,availability,operat,operator,563,"## DeepCode's analysis on [#3b6536](https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2F/code/?utm_source=gh_review&c=0&w=4&i=16&) found:. - :warning: **4** warnings, :information_source: **16** minor issues. :point_down:. - :heavy_check_mark: **1** issue was fixed. ## Top issues. <table>. <thead>. <tr>. <th align=""left"">Description</th>. <th align=""left"">Example fixes</th>. </tr>. </thead>. <tbody>. <tr>. <td width=""77%"">Casting address from address-of operator to signed integer. The address might not fit into a signed integer. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/pythonizations/src/RPyROOTApplication.cxx#L223"">RPyROOTApplication.cxx:223</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fpythonizations%2Fsrc%2FRPyROOTApplication.cxx/cpp%2Fdc%2FCastAddressToTooSmallType/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Potential nullptr dereference. Null flows from nullptr literal. Consider adding a check. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1839"">clingwrapper.cxx:1839</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1869"">clingwrapper.cxx:1869</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1870"">clingwrapper.cxx:1870</a></li></ul></td>. <td width=""23%""><a href=""https:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7621
https://github.com/root-project/root/pull/7621:753,interoperability,bind,bindings,753,"## DeepCode's analysis on [#3b6536](https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2F/code/?utm_source=gh_review&c=0&w=4&i=16&) found:. - :warning: **4** warnings, :information_source: **16** minor issues. :point_down:. - :heavy_check_mark: **1** issue was fixed. ## Top issues. <table>. <thead>. <tr>. <th align=""left"">Description</th>. <th align=""left"">Example fixes</th>. </tr>. </thead>. <tbody>. <tr>. <td width=""77%"">Casting address from address-of operator to signed integer. The address might not fit into a signed integer. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/pythonizations/src/RPyROOTApplication.cxx#L223"">RPyROOTApplication.cxx:223</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fpythonizations%2Fsrc%2FRPyROOTApplication.cxx/cpp%2Fdc%2FCastAddressToTooSmallType/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Potential nullptr dereference. Null flows from nullptr literal. Consider adding a check. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1839"">clingwrapper.cxx:1839</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1869"">clingwrapper.cxx:1869</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1870"">clingwrapper.cxx:1870</a></li></ul></td>. <td width=""23%""><a href=""https:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7621
https://github.com/root-project/root/pull/7621:1442,interoperability,bind,bindings,1442,"<th align=""left"">Example fixes</th>. </tr>. </thead>. <tbody>. <tr>. <td width=""77%"">Casting address from address-of operator to signed integer. The address might not fit into a signed integer. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/pythonizations/src/RPyROOTApplication.cxx#L223"">RPyROOTApplication.cxx:223</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fpythonizations%2Fsrc%2FRPyROOTApplication.cxx/cpp%2Fdc%2FCastAddressToTooSmallType/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Potential nullptr dereference. Null flows from nullptr literal. Consider adding a check. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1839"">clingwrapper.cxx:1839</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1869"">clingwrapper.cxx:1869</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1870"">clingwrapper.cxx:1870</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fcppyy%2Fcppyy-backend%2Fclingwrapper%2Fsrc%2Fclingwrapper.cxx/cpp%2Fdc%2FDerefOfNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Missing close for open, add close or use a with block. Occurrences: <ul><li><a href=""https://github",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7621
https://github.com/root-project/root/pull/7621:1646,interoperability,bind,bindings,1646,"s: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/pythonizations/src/RPyROOTApplication.cxx#L223"">RPyROOTApplication.cxx:223</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fpythonizations%2Fsrc%2FRPyROOTApplication.cxx/cpp%2Fdc%2FCastAddressToTooSmallType/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Potential nullptr dereference. Null flows from nullptr literal. Consider adding a check. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1839"">clingwrapper.cxx:1839</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1869"">clingwrapper.cxx:1869</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1870"">clingwrapper.cxx:1870</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fcppyy%2Fcppyy-backend%2Fclingwrapper%2Fsrc%2Fclingwrapper.cxx/cpp%2Fdc%2FDerefOfNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Missing close for open, add close or use a with block. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy/setup.py#L63"">setup.py:63</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7621
https://github.com/root-project/root/pull/7621:1850,interoperability,bind,bindings,1850,"ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fpythonizations%2Fsrc%2FRPyROOTApplication.cxx/cpp%2Fdc%2FCastAddressToTooSmallType/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Potential nullptr dereference. Null flows from nullptr literal. Consider adding a check. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1839"">clingwrapper.cxx:1839</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1869"">clingwrapper.cxx:1869</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1870"">clingwrapper.cxx:1870</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fcppyy%2Fcppyy-backend%2Fclingwrapper%2Fsrc%2Fclingwrapper.cxx/cpp%2Fdc%2FDerefOfNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Missing close for open, add close or use a with block. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy/setup.py#L63"">setup.py:63</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fcppyy%2Fcppyy%2Fsetup.py/python%2Fdc%2FMissingClose/code/?utm_s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7621
https://github.com/root-project/root/pull/7621:2515,interoperability,bind,bindings,2515,"ence. Null flows from nullptr literal. Consider adding a check. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1839"">clingwrapper.cxx:1839</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1869"">clingwrapper.cxx:1869</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1870"">clingwrapper.cxx:1870</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fcppyy%2Fcppyy-backend%2Fclingwrapper%2Fsrc%2Fclingwrapper.cxx/cpp%2Fdc%2FDerefOfNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Missing close for open, add close or use a with block. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy/setup.py#L63"">setup.py:63</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fcppyy%2Fcppyy%2Fsetup.py/python%2Fdc%2FMissingClose/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. </tbody>. </table>. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2F/code/?utm_source=gh_review&c=0&w=4&i=16&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7621
https://github.com/root-project/root/pull/7621:753,modifiability,bind,bindings,753,"## DeepCode's analysis on [#3b6536](https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2F/code/?utm_source=gh_review&c=0&w=4&i=16&) found:. - :warning: **4** warnings, :information_source: **16** minor issues. :point_down:. - :heavy_check_mark: **1** issue was fixed. ## Top issues. <table>. <thead>. <tr>. <th align=""left"">Description</th>. <th align=""left"">Example fixes</th>. </tr>. </thead>. <tbody>. <tr>. <td width=""77%"">Casting address from address-of operator to signed integer. The address might not fit into a signed integer. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/pythonizations/src/RPyROOTApplication.cxx#L223"">RPyROOTApplication.cxx:223</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fpythonizations%2Fsrc%2FRPyROOTApplication.cxx/cpp%2Fdc%2FCastAddressToTooSmallType/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Potential nullptr dereference. Null flows from nullptr literal. Consider adding a check. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1839"">clingwrapper.cxx:1839</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1869"">clingwrapper.cxx:1869</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1870"">clingwrapper.cxx:1870</a></li></ul></td>. <td width=""23%""><a href=""https:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7621
https://github.com/root-project/root/pull/7621:1442,modifiability,bind,bindings,1442,"<th align=""left"">Example fixes</th>. </tr>. </thead>. <tbody>. <tr>. <td width=""77%"">Casting address from address-of operator to signed integer. The address might not fit into a signed integer. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/pythonizations/src/RPyROOTApplication.cxx#L223"">RPyROOTApplication.cxx:223</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fpythonizations%2Fsrc%2FRPyROOTApplication.cxx/cpp%2Fdc%2FCastAddressToTooSmallType/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Potential nullptr dereference. Null flows from nullptr literal. Consider adding a check. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1839"">clingwrapper.cxx:1839</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1869"">clingwrapper.cxx:1869</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1870"">clingwrapper.cxx:1870</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fcppyy%2Fcppyy-backend%2Fclingwrapper%2Fsrc%2Fclingwrapper.cxx/cpp%2Fdc%2FDerefOfNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Missing close for open, add close or use a with block. Occurrences: <ul><li><a href=""https://github",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7621
https://github.com/root-project/root/pull/7621:1646,modifiability,bind,bindings,1646,"s: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/pythonizations/src/RPyROOTApplication.cxx#L223"">RPyROOTApplication.cxx:223</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fpythonizations%2Fsrc%2FRPyROOTApplication.cxx/cpp%2Fdc%2FCastAddressToTooSmallType/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Potential nullptr dereference. Null flows from nullptr literal. Consider adding a check. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1839"">clingwrapper.cxx:1839</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1869"">clingwrapper.cxx:1869</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1870"">clingwrapper.cxx:1870</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fcppyy%2Fcppyy-backend%2Fclingwrapper%2Fsrc%2Fclingwrapper.cxx/cpp%2Fdc%2FDerefOfNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Missing close for open, add close or use a with block. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy/setup.py#L63"">setup.py:63</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7621
https://github.com/root-project/root/pull/7621:1850,modifiability,bind,bindings,1850,"ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fpythonizations%2Fsrc%2FRPyROOTApplication.cxx/cpp%2Fdc%2FCastAddressToTooSmallType/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Potential nullptr dereference. Null flows from nullptr literal. Consider adding a check. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1839"">clingwrapper.cxx:1839</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1869"">clingwrapper.cxx:1869</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1870"">clingwrapper.cxx:1870</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fcppyy%2Fcppyy-backend%2Fclingwrapper%2Fsrc%2Fclingwrapper.cxx/cpp%2Fdc%2FDerefOfNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Missing close for open, add close or use a with block. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy/setup.py#L63"">setup.py:63</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fcppyy%2Fcppyy%2Fsetup.py/python%2Fdc%2FMissingClose/code/?utm_s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7621
https://github.com/root-project/root/pull/7621:2515,modifiability,bind,bindings,2515,"ence. Null flows from nullptr literal. Consider adding a check. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1839"">clingwrapper.cxx:1839</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1869"">clingwrapper.cxx:1869</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1870"">clingwrapper.cxx:1870</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fcppyy%2Fcppyy-backend%2Fclingwrapper%2Fsrc%2Fclingwrapper.cxx/cpp%2Fdc%2FDerefOfNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Missing close for open, add close or use a with block. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy/setup.py#L63"">setup.py:63</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fcppyy%2Fcppyy%2Fsetup.py/python%2Fdc%2FMissingClose/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. </tbody>. </table>. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2F/code/?utm_source=gh_review&c=0&w=4&i=16&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7621
https://github.com/root-project/root/pull/7621:575,security,sign,signed,575,"## DeepCode's analysis on [#3b6536](https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2F/code/?utm_source=gh_review&c=0&w=4&i=16&) found:. - :warning: **4** warnings, :information_source: **16** minor issues. :point_down:. - :heavy_check_mark: **1** issue was fixed. ## Top issues. <table>. <thead>. <tr>. <th align=""left"">Description</th>. <th align=""left"">Example fixes</th>. </tr>. </thead>. <tbody>. <tr>. <td width=""77%"">Casting address from address-of operator to signed integer. The address might not fit into a signed integer. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/pythonizations/src/RPyROOTApplication.cxx#L223"">RPyROOTApplication.cxx:223</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fpythonizations%2Fsrc%2FRPyROOTApplication.cxx/cpp%2Fdc%2FCastAddressToTooSmallType/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Potential nullptr dereference. Null flows from nullptr literal. Consider adding a check. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1839"">clingwrapper.cxx:1839</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1869"">clingwrapper.cxx:1869</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1870"">clingwrapper.cxx:1870</a></li></ul></td>. <td width=""23%""><a href=""https:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7621
https://github.com/root-project/root/pull/7621:624,security,sign,signed,624,"## DeepCode's analysis on [#3b6536](https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2F/code/?utm_source=gh_review&c=0&w=4&i=16&) found:. - :warning: **4** warnings, :information_source: **16** minor issues. :point_down:. - :heavy_check_mark: **1** issue was fixed. ## Top issues. <table>. <thead>. <tr>. <th align=""left"">Description</th>. <th align=""left"">Example fixes</th>. </tr>. </thead>. <tbody>. <tr>. <td width=""77%"">Casting address from address-of operator to signed integer. The address might not fit into a signed integer. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/pythonizations/src/RPyROOTApplication.cxx#L223"">RPyROOTApplication.cxx:223</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fpythonizations%2Fsrc%2FRPyROOTApplication.cxx/cpp%2Fdc%2FCastAddressToTooSmallType/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Potential nullptr dereference. Null flows from nullptr literal. Consider adding a check. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1839"">clingwrapper.cxx:1839</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1869"">clingwrapper.cxx:1869</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1870"">clingwrapper.cxx:1870</a></li></ul></td>. <td width=""23%""><a href=""https:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7621
https://github.com/root-project/root/pull/7621:2355,usability,close,close,2355,"ence. Null flows from nullptr literal. Consider adding a check. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1839"">clingwrapper.cxx:1839</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1869"">clingwrapper.cxx:1869</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1870"">clingwrapper.cxx:1870</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fcppyy%2Fcppyy-backend%2Fclingwrapper%2Fsrc%2Fclingwrapper.cxx/cpp%2Fdc%2FDerefOfNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Missing close for open, add close or use a with block. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy/setup.py#L63"">setup.py:63</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fcppyy%2Fcppyy%2Fsetup.py/python%2Fdc%2FMissingClose/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. </tbody>. </table>. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2F/code/?utm_source=gh_review&c=0&w=4&i=16&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7621
https://github.com/root-project/root/pull/7621:2375,usability,close,close,2375,"ence. Null flows from nullptr literal. Consider adding a check. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1839"">clingwrapper.cxx:1839</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1869"">clingwrapper.cxx:1869</a></li> <li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1870"">clingwrapper.cxx:1870</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fcppyy%2Fcppyy-backend%2Fclingwrapper%2Fsrc%2Fclingwrapper.cxx/cpp%2Fdc%2FDerefOfNull/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. <tr>. <td width=""77%"">Missing close for open, add close or use a with block. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/bindings/pyroot/cppyy/cppyy/setup.py#L63"">setup.py:63</a></li></ul></td>. <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2Fbindings%2Fpyroot%2Fcppyy%2Fcppyy%2Fsetup.py/python%2Fdc%2FMissingClose/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>. </tr>. </tbody>. </table>. #### üëâ View analysis in [**DeepCode‚Äôs Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/6df34885d466b2f8a529e6d502a95b65422c73d7/root-project/root/3b6536069547cd27203c12cb8cdc4cd54cce6c2a/pr/_/%2F/code/?utm_source=gh_review&c=0&w=4&i=16&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7621
https://github.com/root-project/root/issues/7626:266,energy efficiency,Current,Currently,266,"Hi Pavel,. Apologies for that - it's pretty bad that your didn't receive any reaction from us, I should have as a minimum responded with the following:. Sorry, that's indeed annoying and sadly far from trivial to fix. I will see what to do here (and what CINT did). Currently, redirection really means redirection; I agree that's not as useful as copying at least the terminal input.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7626:377,safety,input,input,377,"Hi Pavel,. Apologies for that - it's pretty bad that your didn't receive any reaction from us, I should have as a minimum responded with the following:. Sorry, that's indeed annoying and sadly far from trivial to fix. I will see what to do here (and what CINT did). Currently, redirection really means redirection; I agree that's not as useful as copying at least the terminal input.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7626:114,usability,minim,minimum,114,"Hi Pavel,. Apologies for that - it's pretty bad that your didn't receive any reaction from us, I should have as a minimum responded with the following:. Sorry, that's indeed annoying and sadly far from trivial to fix. I will see what to do here (and what CINT did). Currently, redirection really means redirection; I agree that's not as useful as copying at least the terminal input.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7626:377,usability,input,input,377,"Hi Pavel,. Apologies for that - it's pretty bad that your didn't receive any reaction from us, I should have as a minimum responded with the following:. Sorry, that's indeed annoying and sadly far from trivial to fix. I will see what to do here (and what CINT did). Currently, redirection really means redirection; I agree that's not as useful as copying at least the terminal input.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7626:234,availability,state,statements,234,"thank you , Axel. I understand that properly redirecting output of the interpreter may not be trivial. . A quick suggestion: the syntax . a() ; .> a.log. which assumes that the ""dot"" commands are allowed on the same line with the C++ statements may be easier . to implement correctly than the current one. .> a.log. a(). .>. -- regards, Pavel Murat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7626:149,deployability,log,log,149,"thank you , Axel. I understand that properly redirecting output of the interpreter may not be trivial. . A quick suggestion: the syntax . a() ; .> a.log. which assumes that the ""dot"" commands are allowed on the same line with the C++ statements may be easier . to implement correctly than the current one. .> a.log. a(). .>. -- regards, Pavel Murat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7626:311,deployability,log,log,311,"thank you , Axel. I understand that properly redirecting output of the interpreter may not be trivial. . A quick suggestion: the syntax . a() ; .> a.log. which assumes that the ""dot"" commands are allowed on the same line with the C++ statements may be easier . to implement correctly than the current one. .> a.log. a(). .>. -- regards, Pavel Murat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7626:293,energy efficiency,current,current,293,"thank you , Axel. I understand that properly redirecting output of the interpreter may not be trivial. . A quick suggestion: the syntax . a() ; .> a.log. which assumes that the ""dot"" commands are allowed on the same line with the C++ statements may be easier . to implement correctly than the current one. .> a.log. a(). .>. -- regards, Pavel Murat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7626:234,integrability,state,statements,234,"thank you , Axel. I understand that properly redirecting output of the interpreter may not be trivial. . A quick suggestion: the syntax . a() ; .> a.log. which assumes that the ""dot"" commands are allowed on the same line with the C++ statements may be easier . to implement correctly than the current one. .> a.log. a(). .>. -- regards, Pavel Murat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7626:149,safety,log,log,149,"thank you , Axel. I understand that properly redirecting output of the interpreter may not be trivial. . A quick suggestion: the syntax . a() ; .> a.log. which assumes that the ""dot"" commands are allowed on the same line with the C++ statements may be easier . to implement correctly than the current one. .> a.log. a(). .>. -- regards, Pavel Murat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7626:311,safety,log,log,311,"thank you , Axel. I understand that properly redirecting output of the interpreter may not be trivial. . A quick suggestion: the syntax . a() ; .> a.log. which assumes that the ""dot"" commands are allowed on the same line with the C++ statements may be easier . to implement correctly than the current one. .> a.log. a(). .>. -- regards, Pavel Murat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7626:149,security,log,log,149,"thank you , Axel. I understand that properly redirecting output of the interpreter may not be trivial. . A quick suggestion: the syntax . a() ; .> a.log. which assumes that the ""dot"" commands are allowed on the same line with the C++ statements may be easier . to implement correctly than the current one. .> a.log. a(). .>. -- regards, Pavel Murat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7626:311,security,log,log,311,"thank you , Axel. I understand that properly redirecting output of the interpreter may not be trivial. . A quick suggestion: the syntax . a() ; .> a.log. which assumes that the ""dot"" commands are allowed on the same line with the C++ statements may be easier . to implement correctly than the current one. .> a.log. a(). .>. -- regards, Pavel Murat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7626:20,testability,understand,understand,20,"thank you , Axel. I understand that properly redirecting output of the interpreter may not be trivial. . A quick suggestion: the syntax . a() ; .> a.log. which assumes that the ""dot"" commands are allowed on the same line with the C++ statements may be easier . to implement correctly than the current one. .> a.log. a(). .>. -- regards, Pavel Murat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7626:149,testability,log,log,149,"thank you , Axel. I understand that properly redirecting output of the interpreter may not be trivial. . A quick suggestion: the syntax . a() ; .> a.log. which assumes that the ""dot"" commands are allowed on the same line with the C++ statements may be easier . to implement correctly than the current one. .> a.log. a(). .>. -- regards, Pavel Murat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7626:311,testability,log,log,311,"thank you , Axel. I understand that properly redirecting output of the interpreter may not be trivial. . A quick suggestion: the syntax . a() ; .> a.log. which assumes that the ""dot"" commands are allowed on the same line with the C++ statements may be easier . to implement correctly than the current one. .> a.log. a(). .>. -- regards, Pavel Murat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7626:183,usability,command,commands,183,"thank you , Axel. I understand that properly redirecting output of the interpreter may not be trivial. . A quick suggestion: the syntax . a() ; .> a.log. which assumes that the ""dot"" commands are allowed on the same line with the C++ statements may be easier . to implement correctly than the current one. .> a.log. a(). .>. -- regards, Pavel Murat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7626
https://github.com/root-project/root/issues/7627:27,security,modif,modify,27,@lmoneta is there a way to modify the wrong links on: http://tmva.sourceforge.net/ ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7627
https://github.com/root-project/root/issues/7627:21,security,access,access,21,maybe @helgevoss has access to https://sourceforge.net/projects/tmva/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7627
https://github.com/root-project/root/issues/7627:91,usability,document,documentation,91,I think we should remove any links to http://tmva.sourceforge.net/ from the ROOT reference documentation,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7627
https://github.com/root-project/root/issues/7627:186,deployability,updat,update,186,"Yes, that's for sure, but what about the part of us changing the ROOT links on sourceforge? Do you have access to that? *edit:* after discussing privately with @lmoneta, we concluded to update the links in ROOT but not change the links on `sourceforge.net`. We can't change the website ourselves, and it's not really worth the effort to identify someone who can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7627
https://github.com/root-project/root/issues/7627:186,safety,updat,update,186,"Yes, that's for sure, but what about the part of us changing the ROOT links on sourceforge? Do you have access to that? *edit:* after discussing privately with @lmoneta, we concluded to update the links in ROOT but not change the links on `sourceforge.net`. We can't change the website ourselves, and it's not really worth the effort to identify someone who can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7627
https://github.com/root-project/root/issues/7627:104,security,access,access,104,"Yes, that's for sure, but what about the part of us changing the ROOT links on sourceforge? Do you have access to that? *edit:* after discussing privately with @lmoneta, we concluded to update the links in ROOT but not change the links on `sourceforge.net`. We can't change the website ourselves, and it's not really worth the effort to identify someone who can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7627
https://github.com/root-project/root/issues/7627:186,security,updat,update,186,"Yes, that's for sure, but what about the part of us changing the ROOT links on sourceforge? Do you have access to that? *edit:* after discussing privately with @lmoneta, we concluded to update the links in ROOT but not change the links on `sourceforge.net`. We can't change the website ourselves, and it's not really worth the effort to identify someone who can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7627
https://github.com/root-project/root/issues/7627:337,security,ident,identify,337,"Yes, that's for sure, but what about the part of us changing the ROOT links on sourceforge? Do you have access to that? *edit:* after discussing privately with @lmoneta, we concluded to update the links in ROOT but not change the links on `sourceforge.net`. We can't change the website ourselves, and it's not really worth the effort to identify someone who can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7627
https://github.com/root-project/root/pull/7628:4,availability,failur,failure,4,"The failure is some timeout issue, unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7628
https://github.com/root-project/root/pull/7628:4,deployability,fail,failure,4,"The failure is some timeout issue, unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7628
https://github.com/root-project/root/pull/7628:4,performance,failur,failure,4,"The failure is some timeout issue, unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7628
https://github.com/root-project/root/pull/7628:20,performance,time,timeout,20,"The failure is some timeout issue, unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7628
https://github.com/root-project/root/pull/7628:4,reliability,fail,failure,4,"The failure is some timeout issue, unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7628
https://github.com/root-project/root/pull/7628:20,safety,timeout,timeout,20,"The failure is some timeout issue, unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7628
https://github.com/root-project/root/pull/7630:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:61,safety,review,review,61,"@bendavid the warnings are real -- I will try to do a proper review tomorrow, busy days sorry",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:61,testability,review,review,61,"@bendavid the warnings are real -- I will try to do a proper review tomorrow, busy days sorry",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:109,deployability,version,version,109,"Thanks! At first glance it looks fine anyway, and especially Python users will be very glad to have a jitted version of Book",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:109,integrability,version,version,109,"Thanks! At first glance it looks fine anyway, and especially Python users will be very glad to have a jitted version of Book",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:109,modifiability,version,version,109,"Thanks! At first glance it looks fine anyway, and especially Python users will be very glad to have a jitted version of Book",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:68,usability,user,users,68,"Thanks! At first glance it looks fine anyway, and especially Python users will be very glad to have a jitted version of Book",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:35,safety,test,test,35,Looks nice. Could we also add some test/tutorials?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:35,testability,test,test,35,Looks nice. Could we also add some test/tutorials?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:487,availability,error,error,487,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1333,availability,error,error,1333,"mplate argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(Tes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2136,availability,error,error,2136,"terface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopM",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3038,availability,error,error,3038,"::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""ji",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:830,deployability,instal,install,830,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1111,deployability,instal,install,1111,"s has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1632,deployability,instal,install,1632,"r,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1913,deployability,instal,install,1913,"lumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper].",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2535,deployability,instal,install,2535,"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper].",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2816,deployability,instal,install,2816,"k(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(H",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3393,deployability,instal,install,3393,"g>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3674,deployability,instal,install,3674,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3943,deployability,modul,module,3943,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4157,deployability,fail,failed,4157,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4166,deployability,Fail,Failed,4166,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4244,deployability,Fail,Failed,4244,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:406,interoperability,share,shared,406,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3943,modifiability,modul,module,3943,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:487,performance,error,error,487,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1333,performance,error,error,1333,"mplate argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(Tes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2136,performance,error,error,2136,"terface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopM",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3038,performance,error,error,3038,"::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""ji",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4157,reliability,fail,failed,4157,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4166,reliability,Fail,Failed,4166,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4244,reliability,Fail,Failed,4244,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:487,safety,error,error,487,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:656,safety,Test,TestHelper,656,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:669,safety,Test,TestHelper,669,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:684,safety,Test,TestHelper,684,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:924,safety,Test,TestHelper,924,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:964,safety,Test,TestHelper,964,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1200,safety,Test,TestHelper,1200,"urther further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1333,safety,error,error,1333,"mplate argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(Tes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1459,safety,Test,TestHelper,1459,". input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1472,safety,Test,TestHelper,1472,"45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1487,safety,Test,TestHelper,1487,": call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1726,safety,Test,TestHelper,1726,"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1766,safety,Test,TestHelper,1766,"~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2002,safety,Test,TestHelper,2002,"sult_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2136,safety,error,error,2136,"terface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopM",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2305,safety,Test,TestHelper,2305,". input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2318,safety,Test,TestHelper,2318,"45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2333,safety,Test,TestHelper,2333,": call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2629,safety,Test,TestHelper,2629,"stall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {})",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2669,safety,Test,TestHelper,2669,"40:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2905,safety,Test,TestHelper,2905,"pt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3038,safety,error,error,3038,"::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""ji",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3164,safety,Test,TestHelper,3164,"ook' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Fai",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3177,safety,Test,TestHelper,3177,"uous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instan",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3192,safety,Test,TestHelper,3192," (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(Tes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3487,safety,Test,TestHelper,3487,"~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3527,safety,Test,TestHelper,3527,"pt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3763,safety,Test,TestHelper,3763,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3943,safety,modul,module,3943,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3952,safety,test,testfunc,3952,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4000,safety,test,testfunc,4000,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4091,safety,Test,TestHelper,4091,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4194,safety,Test,TestHelper,4194,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4272,safety,Test,TestHelper,4272,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4418,safety,Test,TestHelper,4418,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:656,testability,Test,TestHelper,656,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:669,testability,Test,TestHelper,669,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:684,testability,Test,TestHelper,684,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:924,testability,Test,TestHelper,924,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:964,testability,Test,TestHelper,964,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1200,testability,Test,TestHelper,1200,"urther further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1459,testability,Test,TestHelper,1459,". input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1472,testability,Test,TestHelper,1472,"45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1487,testability,Test,TestHelper,1487,": call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1726,testability,Test,TestHelper,1726,"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1766,testability,Test,TestHelper,1766,"~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2002,testability,Test,TestHelper,2002,"sult_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2305,testability,Test,TestHelper,2305,". input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2318,testability,Test,TestHelper,2318,"45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2333,testability,Test,TestHelper,2333,": call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2629,testability,Test,TestHelper,2629,"stall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {})",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2669,testability,Test,TestHelper,2669,"40:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2905,testability,Test,TestHelper,2905,"pt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3164,testability,Test,TestHelper,3164,"ook' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Fai",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3177,testability,Test,TestHelper,3177,"uous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instan",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3192,testability,Test,TestHelper,3192," (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(Tes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3487,testability,Test,TestHelper,3487,"~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3527,testability,Test,TestHelper,3527,"pt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3763,testability,Test,TestHelper,3763,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3875,testability,Trace,Traceback,3875,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3952,testability,test,testfunc,3952,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4000,testability,test,testfunc,4000,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4091,testability,Test,TestHelper,4091,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4194,testability,Test,TestHelper,4194,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4272,testability,Test,TestHelper,4272,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4418,testability,Test,TestHelper,4418,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:487,usability,error,error,487,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:955,usability,Help,Helper,955,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:997,usability,Help,Helper,997,"Hmm, actually it seems that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1020,usability,Help,Helper,1020,"that I cannot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultP",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1029,usability,help,helper,1029,"nnot call Book directly from python with the overloads set up this way. I think this has to do with reference type ambiguities when passing objects from python. Let me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typena",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1191,usability,Help,Helper,1191,"et me try further further restricting the template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1233,usability,Help,Helper,1233,"template instances with SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1256,usability,Help,Helper,1256," SFINAE (I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1265,usability,help,helper,1265,"I guess the same issue is present with Fill since it has the same template argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1333,usability,error,error,1333,"mplate argument pattern). ```. Info in <TUnixSystem::ACLiC>: creating shared library /data/home/bendavid/rdftest7/jittest_cpp.so. input_line_45:7:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(Tes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1757,usability,Help,Helper,1757,"~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1799,usability,Help,Helper,1799,"ome/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1822,usability,Help,Helper,1822,"lopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1831,usability,help,helper,1831,"all/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/RO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1993,usability,Help,Helper,1993," Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2035,usability,Help,Helper,2035,"onst ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2058,usability,Help,Helper,2058,"umns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2067,usability,help,helper,2067,"). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2136,usability,error,error,2136,"terface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:11:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopM",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2660,usability,Help,Helper,2660,"face.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/root",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2702,usability,Help,Helper,2702," [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2725,usability,Help,Helper,2725,"stHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2734,usability,help,helper,2734," OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2896,usability,Help,Helper,2896,"ootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2938,usability,Help,Helper,2938,"terface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2961,usability,Help,Helper,2961,"te: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(boo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:2970,usability,help,helper,2970,"date function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3038,usability,error,error,3038,"::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:17:122: error: call to member function 'Book' is ambiguous. new (ret) (ROOT::RDF::RResultPtr<double>) (((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]));. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""ji",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3518,usability,Help,Helper,3518,"ootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3560,usability,Help,Helper,3560,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3583,usability,Help,Helper,3583,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3592,usability,help,helper,3592,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3754,usability,Help,Helper,3754,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3796,usability,Help,Helper,3796,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3819,usability,Help,Helper,3819,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:3828,usability,help,helper,3828,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:4431,usability,help,helper,4431,"nstall/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. input_line_45:21:79: error: call to member function 'Book' is ambiguous. ((ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>*)obj)->Book<TestHelper>((TestHelper&&)*(TestHelper*)args[0], (const vector<string>&)*(const vector<string>*)args[1]);. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2240:42: note: candidate function [with FirstColumn = TestHelper, OtherColumns = <>, Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. /data/home/bendavid/rootdevfillopt/install/include/ROOT/RDF/RInterface.hxx:2264:42: note: candidate function [with Helper = TestHelper]. RResultPtr<typename Helper::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}). ^. Traceback (most recent call last):. File ""jittest.py"", line 53, in <module>. testfunc(book4). File ""jittest.py"", line 14, in testfunc. res = f(df, ""dentry""). File ""jittest.py"", line 39, in book4. res = rdf.Book(ROOT.TestHelper(nslots), [col]). TypeError: Template method resolution failed:. Failed to instantiate ""Book(TestHelper&,std::initializer_list<std::string>)"". Failed to instantiate ""Book(TestHelper*,std::initializer_list<std::string>)"". ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Book(TestHelper&& helper, const vector<string>& columns = {}) =>. ValueError: nullptr result where temporary expected. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:234,interoperability,specif,specified,234,"Fixed the unused variable warnings, and simplified the template overloads so that Book can be called directly from python. (At least in the jitted case. I'm not sure how to call a template function like this from cppyy with partially specified template parameters, and it's not possible to explicitly specify the Helper type because it comes after the parameter pack.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:301,interoperability,specif,specify,301,"Fixed the unused variable warnings, and simplified the template overloads so that Book can be called directly from python. (At least in the jitted case. I'm not sure how to call a template function like this from cppyy with partially specified template parameters, and it's not possible to explicitly specify the Helper type because it comes after the parameter pack.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:17,modifiability,variab,variable,17,"Fixed the unused variable warnings, and simplified the template overloads so that Book can be called directly from python. (At least in the jitted case. I'm not sure how to call a template function like this from cppyy with partially specified template parameters, and it's not possible to explicitly specify the Helper type because it comes after the parameter pack.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:253,modifiability,paramet,parameters,253,"Fixed the unused variable warnings, and simplified the template overloads so that Book can be called directly from python. (At least in the jitted case. I'm not sure how to call a template function like this from cppyy with partially specified template parameters, and it's not possible to explicitly specify the Helper type because it comes after the parameter pack.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:352,modifiability,paramet,parameter,352,"Fixed the unused variable warnings, and simplified the template overloads so that Book can be called directly from python. (At least in the jitted case. I'm not sure how to call a template function like this from cppyy with partially specified template parameters, and it's not possible to explicitly specify the Helper type because it comes after the parameter pack.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:362,modifiability,pac,pack,362,"Fixed the unused variable warnings, and simplified the template overloads so that Book can be called directly from python. (At least in the jitted case. I'm not sure how to call a template function like this from cppyy with partially specified template parameters, and it's not possible to explicitly specify the Helper type because it comes after the parameter pack.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:40,testability,simpl,simplified,40,"Fixed the unused variable warnings, and simplified the template overloads so that Book can be called directly from python. (At least in the jitted case. I'm not sure how to call a template function like this from cppyy with partially specified template parameters, and it's not possible to explicitly specify the Helper type because it comes after the parameter pack.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:40,usability,simpl,simplified,40,"Fixed the unused variable warnings, and simplified the template overloads so that Book can be called directly from python. (At least in the jitted case. I'm not sure how to call a template function like this from cppyy with partially specified template parameters, and it's not possible to explicitly specify the Helper type because it comes after the parameter pack.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:313,usability,Help,Helper,313,"Fixed the unused variable warnings, and simplified the template overloads so that Book can be called directly from python. (At least in the jitted case. I'm not sure how to call a template function like this from cppyy with partially specified template parameters, and it's not possible to explicitly specify the Helper type because it comes after the parameter pack.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:96,energy efficiency,current,currently,96,"Ah, about calling `Fill` from Python: see https://sft.its.cern.ch/jira/browse/ROOT-10396 , it's currently not possible -- please share any insight into that issue you might have gotten from this work on `Book` :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:129,interoperability,share,share,129,"Ah, about calling `Fill` from Python: see https://sft.its.cern.ch/jira/browse/ROOT-10396 , it's currently not possible -- please share any insight into that issue you might have gotten from this work on `Book` :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:65,deployability,version,version,65,One restriction I realized when adding a test is that the jitted version of Book will only work if the helper class is registered with the Root type system (because of the ```TClass::GetClass``` call at https://github.com/root-project/root/blob/d03407e19eaea7b02021d9d65ec6bc864bdcab6b/tree/dataframe/src/RDFInterfaceUtils.cxx#L680 ). Open to suggestions how to remove this restriction (demangling the name with ```abi::_cxa_demangle``` maybe?) Otherwise I can add a comment about this to the documentation for now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:65,integrability,version,version,65,One restriction I realized when adding a test is that the jitted version of Book will only work if the helper class is registered with the Root type system (because of the ```TClass::GetClass``` call at https://github.com/root-project/root/blob/d03407e19eaea7b02021d9d65ec6bc864bdcab6b/tree/dataframe/src/RDFInterfaceUtils.cxx#L680 ). Open to suggestions how to remove this restriction (demangling the name with ```abi::_cxa_demangle``` maybe?) Otherwise I can add a comment about this to the documentation for now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:65,modifiability,version,version,65,One restriction I realized when adding a test is that the jitted version of Book will only work if the helper class is registered with the Root type system (because of the ```TClass::GetClass``` call at https://github.com/root-project/root/blob/d03407e19eaea7b02021d9d65ec6bc864bdcab6b/tree/dataframe/src/RDFInterfaceUtils.cxx#L680 ). Open to suggestions how to remove this restriction (demangling the name with ```abi::_cxa_demangle``` maybe?) Otherwise I can add a comment about this to the documentation for now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:41,safety,test,test,41,One restriction I realized when adding a test is that the jitted version of Book will only work if the helper class is registered with the Root type system (because of the ```TClass::GetClass``` call at https://github.com/root-project/root/blob/d03407e19eaea7b02021d9d65ec6bc864bdcab6b/tree/dataframe/src/RDFInterfaceUtils.cxx#L680 ). Open to suggestions how to remove this restriction (demangling the name with ```abi::_cxa_demangle``` maybe?) Otherwise I can add a comment about this to the documentation for now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:41,testability,test,test,41,One restriction I realized when adding a test is that the jitted version of Book will only work if the helper class is registered with the Root type system (because of the ```TClass::GetClass``` call at https://github.com/root-project/root/blob/d03407e19eaea7b02021d9d65ec6bc864bdcab6b/tree/dataframe/src/RDFInterfaceUtils.cxx#L680 ). Open to suggestions how to remove this restriction (demangling the name with ```abi::_cxa_demangle``` maybe?) Otherwise I can add a comment about this to the documentation for now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:103,usability,help,helper,103,One restriction I realized when adding a test is that the jitted version of Book will only work if the helper class is registered with the Root type system (because of the ```TClass::GetClass``` call at https://github.com/root-project/root/blob/d03407e19eaea7b02021d9d65ec6bc864bdcab6b/tree/dataframe/src/RDFInterfaceUtils.cxx#L680 ). Open to suggestions how to remove this restriction (demangling the name with ```abi::_cxa_demangle``` maybe?) Otherwise I can add a comment about this to the documentation for now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:493,usability,document,documentation,493,One restriction I realized when adding a test is that the jitted version of Book will only work if the helper class is registered with the Root type system (because of the ```TClass::GetClass``` call at https://github.com/root-project/root/blob/d03407e19eaea7b02021d9d65ec6bc864bdcab6b/tree/dataframe/src/RDFInterfaceUtils.cxx#L680 ). Open to suggestions how to remove this restriction (demangling the name with ```abi::_cxa_demangle``` maybe?) Otherwise I can add a comment about this to the documentation for now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:115,safety,test,test,115,I added the corresponding change to template overloads for Fill directly to this PR (and also added the additional test as requested),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:115,testability,test,test,115,I added the corresponding change to template overloads for Fill directly to this PR (and also added the additional test as requested),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:154,usability,document,documentation,154,"> Open to suggestions how to remove this restriction (demangling the name with abi::_cxa_demangle maybe?) Otherwise I can add a comment about this to the documentation for now. I don't think we can lift that restriction, cling needs to jit code that makes use of the class, so it needs to know about the class. Indeed please add a note about this to the `Book` docstring (EDIT: and `Fill`'s too I guess).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:0,deployability,Updat,Updated,0,Updated/fixed the docstrings and added ROOT-10396 to the commit message as discussed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:64,integrability,messag,message,64,Updated/fixed the docstrings and added ROOT-10396 to the commit message as discussed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:64,interoperability,messag,message,64,Updated/fixed the docstrings and added ROOT-10396 to the commit message as discussed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:0,safety,Updat,Updated,0,Updated/fixed the docstrings and added ROOT-10396 to the commit message as discussed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:0,security,Updat,Updated,0,Updated/fixed the docstrings and added ROOT-10396 to the commit message as discussed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:36,availability,failur,failures,36,"Thanks Josh! Unfortunately the test failures above seem to be caused by the changes in this PR but I have no idea why or how to fix them (yet). Anyway it's on us. These changes are ok, it's on my to do list to debug the pyroot failures, given my current bandwidth it will probably have to be after Easter :/ sorry",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:227,availability,failur,failures,227,"Thanks Josh! Unfortunately the test failures above seem to be caused by the changes in this PR but I have no idea why or how to fix them (yet). Anyway it's on us. These changes are ok, it's on my to do list to debug the pyroot failures, given my current bandwidth it will probably have to be after Easter :/ sorry",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:36,deployability,fail,failures,36,"Thanks Josh! Unfortunately the test failures above seem to be caused by the changes in this PR but I have no idea why or how to fix them (yet). Anyway it's on us. These changes are ok, it's on my to do list to debug the pyroot failures, given my current bandwidth it will probably have to be after Easter :/ sorry",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:227,deployability,fail,failures,227,"Thanks Josh! Unfortunately the test failures above seem to be caused by the changes in this PR but I have no idea why or how to fix them (yet). Anyway it's on us. These changes are ok, it's on my to do list to debug the pyroot failures, given my current bandwidth it will probably have to be after Easter :/ sorry",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:246,energy efficiency,current,current,246,"Thanks Josh! Unfortunately the test failures above seem to be caused by the changes in this PR but I have no idea why or how to fix them (yet). Anyway it's on us. These changes are ok, it's on my to do list to debug the pyroot failures, given my current bandwidth it will probably have to be after Easter :/ sorry",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:36,performance,failur,failures,36,"Thanks Josh! Unfortunately the test failures above seem to be caused by the changes in this PR but I have no idea why or how to fix them (yet). Anyway it's on us. These changes are ok, it's on my to do list to debug the pyroot failures, given my current bandwidth it will probably have to be after Easter :/ sorry",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:227,performance,failur,failures,227,"Thanks Josh! Unfortunately the test failures above seem to be caused by the changes in this PR but I have no idea why or how to fix them (yet). Anyway it's on us. These changes are ok, it's on my to do list to debug the pyroot failures, given my current bandwidth it will probably have to be after Easter :/ sorry",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:36,reliability,fail,failures,36,"Thanks Josh! Unfortunately the test failures above seem to be caused by the changes in this PR but I have no idea why or how to fix them (yet). Anyway it's on us. These changes are ok, it's on my to do list to debug the pyroot failures, given my current bandwidth it will probably have to be after Easter :/ sorry",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:227,reliability,fail,failures,227,"Thanks Josh! Unfortunately the test failures above seem to be caused by the changes in this PR but I have no idea why or how to fix them (yet). Anyway it's on us. These changes are ok, it's on my to do list to debug the pyroot failures, given my current bandwidth it will probably have to be after Easter :/ sorry",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:31,safety,test,test,31,"Thanks Josh! Unfortunately the test failures above seem to be caused by the changes in this PR but I have no idea why or how to fix them (yet). Anyway it's on us. These changes are ok, it's on my to do list to debug the pyroot failures, given my current bandwidth it will probably have to be after Easter :/ sorry",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:31,testability,test,test,31,"Thanks Josh! Unfortunately the test failures above seem to be caused by the changes in this PR but I have no idea why or how to fix them (yet). Anyway it's on us. These changes are ok, it's on my to do list to debug the pyroot failures, given my current bandwidth it will probably have to be after Easter :/ sorry",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:72,availability,failur,failures,72,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:72,deployability,fail,failures,72,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:290,deployability,stack,stacktrace,290,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:32,energy efficiency,reduc,reduce,32,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:718,energy efficiency,core,core,718,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:864,energy efficiency,core,core,864,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1007,energy efficiency,core,core,1007,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1148,energy efficiency,core,core,1148,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1314,energy efficiency,core,core,1314,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1393,energy efficiency,Load,Load,1393,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1445,energy efficiency,core,core,1445,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1558,energy efficiency,load,load,1558,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1594,energy efficiency,core,core,1594,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:72,performance,failur,failures,72,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1393,performance,Load,Load,1393,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1558,performance,load,load,1558,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:72,reliability,fail,failures,72,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:67,safety,test,test,67,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:67,testability,test,test,67,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:18,usability,help,help,18,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:1688,usability,progress,progress,1688,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp. #include ""TClassRef.h"". int main() {. TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");. cr->GetListOfMethods(true);. return 0;. }. ```. which breaks with the following stacktrace:. ```. #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6. #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6. #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6. #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6. #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182. #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140. #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159. #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438. #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017. #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391. #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803. #11 0x00005555555551dd in main () at repro.cpp:5. ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:65,availability,failur,failures,65,"@bendavid just fyi, #7898 by @Axel-Naumann should fix these test failures, it's a bug in cling. We should be able to merge this PR then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:65,deployability,fail,failures,65,"@bendavid just fyi, #7898 by @Axel-Naumann should fix these test failures, it's a bug in cling. We should be able to merge this PR then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:65,performance,failur,failures,65,"@bendavid just fyi, #7898 by @Axel-Naumann should fix these test failures, it's a bug in cling. We should be able to merge this PR then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:65,reliability,fail,failures,65,"@bendavid just fyi, #7898 by @Axel-Naumann should fix these test failures, it's a bug in cling. We should be able to merge this PR then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:60,safety,test,test,60,"@bendavid just fyi, #7898 by @Axel-Naumann should fix these test failures, it's a bug in cling. We should be able to merge this PR then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:60,testability,test,test,60,"@bendavid just fyi, #7898 by @Axel-Naumann should fix these test failures, it's a bug in cling. We should be able to merge this PR then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:12,availability,failur,failure,12,"The Windows failure is unrelated, merging. Thanks again @bendavid !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:12,deployability,fail,failure,12,"The Windows failure is unrelated, merging. Thanks again @bendavid !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:12,performance,failur,failure,12,"The Windows failure is unrelated, merging. Thanks again @bendavid !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:12,reliability,fail,failure,12,"The Windows failure is unrelated, merging. Thanks again @bendavid !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:69,usability,help,helper,69,"@bendavid I realized just now that this breaks the case of an action helper that takes no arguments, or it forces jitting in that case. I'll try to think of a way to have our cake and eat it too, but if you have any suggestions... :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:0,deployability,Updat,Update,0,Update: this is what I could come up with to resolve the ambiguity: https://github.com/root-project/root/commit/08ca2bbd6dd195daa1d6f635f6a5e8fed5ef4fd4 -- will propose a PR after adding a test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:0,safety,Updat,Update,0,Update: this is what I could come up with to resolve the ambiguity: https://github.com/root-project/root/commit/08ca2bbd6dd195daa1d6f635f6a5e8fed5ef4fd4 -- will propose a PR after adding a test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:189,safety,test,test,189,Update: this is what I could come up with to resolve the ambiguity: https://github.com/root-project/root/commit/08ca2bbd6dd195daa1d6f635f6a5e8fed5ef4fd4 -- will propose a PR after adding a test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:0,security,Updat,Update,0,Update: this is what I could come up with to resolve the ambiguity: https://github.com/root-project/root/commit/08ca2bbd6dd195daa1d6f635f6a5e8fed5ef4fd4 -- will propose a PR after adding a test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7630:189,testability,test,test,189,Update: this is what I could come up with to resolve the ambiguity: https://github.com/root-project/root/commit/08ca2bbd6dd195daa1d6f635f6a5e8fed5ef4fd4 -- will propose a PR after adding a test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630
https://github.com/root-project/root/pull/7631:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7631
https://github.com/root-project/root/issues/7632:199,reliability,doe,does,199,"I tried with `~~~{.py}` on my local machine and it rendered the python blocks with highlighted syntax. It's still is quite poorly done compared to the cpp blocks, but I think that's just how doxygen does it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7632
https://github.com/root-project/root/pull/7635:59,availability,failur,failures,59,"> looks like it is something wrong with nodes? I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. I had hoped that the few would do, but looks like I need to debug this on a node instead of spamming Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:59,deployability,fail,failures,59,"> looks like it is something wrong with nodes? I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. I had hoped that the few would do, but looks like I need to debug this on a node instead of spamming Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:104,deployability,patch,patch,104,"> looks like it is something wrong with nodes? I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. I had hoped that the few would do, but looks like I need to debug this on a node instead of spamming Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:59,performance,failur,failures,59,"> looks like it is something wrong with nodes? I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. I had hoped that the few would do, but looks like I need to debug this on a node instead of spamming Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:59,reliability,fail,failures,59,"> looks like it is something wrong with nodes? I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. I had hoped that the few would do, but looks like I need to debug this on a node instead of spamming Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:104,safety,patch,patch,104,"> looks like it is something wrong with nodes? I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. I had hoped that the few would do, but looks like I need to debug this on a node instead of spamming Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:104,security,patch,patch,104,"> looks like it is something wrong with nodes? I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. I had hoped that the few would do, but looks like I need to debug this on a node instead of spamming Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:14,availability,failur,failures,14,"> I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. It's a combination of missing support and the broken macphsft20. But we don't *need* to make v6.20 work on macOS11. But I guess we currently have a version independent set of PR platforms... That'll auto-fix with root.git having the CI pipeline ""inside"", in the future... For now we will likely have to ignore macOS11 for v6.20 :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:14,deployability,fail,failures,14,"> I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. It's a combination of missing support and the broken macphsft20. But we don't *need* to make v6.20 work on macOS11. But I guess we currently have a version independent set of PR platforms... That'll auto-fix with root.git having the CI pipeline ""inside"", in the future... For now we will likely have to ignore macOS11 for v6.20 :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:59,deployability,patch,patch,59,"> I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. It's a combination of missing support and the broken macphsft20. But we don't *need* to make v6.20 work on macOS11. But I guess we currently have a version independent set of PR platforms... That'll auto-fix with root.git having the CI pipeline ""inside"", in the future... For now we will likely have to ignore macOS11 for v6.20 :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:247,deployability,version,version,247,"> I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. It's a combination of missing support and the broken macphsft20. But we don't *need* to make v6.20 work on macOS11. But I guess we currently have a version independent set of PR platforms... That'll auto-fix with root.git having the CI pipeline ""inside"", in the future... For now we will likely have to ignore macOS11 for v6.20 :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:335,deployability,pipelin,pipeline,335,"> I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. It's a combination of missing support and the broken macphsft20. But we don't *need* to make v6.20 work on macOS11. But I guess we currently have a version independent set of PR platforms... That'll auto-fix with root.git having the CI pipeline ""inside"", in the future... For now we will likely have to ignore macOS11 for v6.20 :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:230,energy efficiency,current,currently,230,"> I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. It's a combination of missing support and the broken macphsft20. But we don't *need* to make v6.20 work on macOS11. But I guess we currently have a version independent set of PR platforms... That'll auto-fix with root.git having the CI pipeline ""inside"", in the future... For now we will likely have to ignore macOS11 for v6.20 :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:247,integrability,version,version,247,"> I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. It's a combination of missing support and the broken macphsft20. But we don't *need* to make v6.20 work on macOS11. But I guess we currently have a version independent set of PR platforms... That'll auto-fix with root.git having the CI pipeline ""inside"", in the future... For now we will likely have to ignore macOS11 for v6.20 :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:335,integrability,pipelin,pipeline,335,"> I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. It's a combination of missing support and the broken macphsft20. But we don't *need* to make v6.20 work on macOS11. But I guess we currently have a version independent set of PR platforms... That'll auto-fix with root.git having the CI pipeline ""inside"", in the future... For now we will likely have to ignore macOS11 for v6.20 :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:277,interoperability,platform,platforms,277,"> I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. It's a combination of missing support and the broken macphsft20. But we don't *need* to make v6.20 work on macOS11. But I guess we currently have a version independent set of PR platforms... That'll auto-fix with root.git having the CI pipeline ""inside"", in the future... For now we will likely have to ignore macOS11 for v6.20 :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:247,modifiability,version,version,247,"> I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. It's a combination of missing support and the broken macphsft20. But we don't *need* to make v6.20 work on macOS11. But I guess we currently have a version independent set of PR platforms... That'll auto-fix with root.git having the CI pipeline ""inside"", in the future... For now we will likely have to ignore macOS11 for v6.20 :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:14,performance,failur,failures,14,"> I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. It's a combination of missing support and the broken macphsft20. But we don't *need* to make v6.20 work on macOS11. But I guess we currently have a version independent set of PR platforms... That'll auto-fix with root.git having the CI pipeline ""inside"", in the future... For now we will likely have to ignore macOS11 for v6.20 :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:14,reliability,fail,failures,14,"> I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. It's a combination of missing support and the broken macphsft20. But we don't *need* to make v6.20 work on macOS11. But I guess we currently have a version independent set of PR platforms... That'll auto-fix with root.git having the CI pipeline ""inside"", in the future... For now we will likely have to ignore macOS11 for v6.20 :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:59,safety,patch,patch,59,"> I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. It's a combination of missing support and the broken macphsft20. But we don't *need* to make v6.20 work on macOS11. But I guess we currently have a version independent set of PR platforms... That'll auto-fix with root.git having the CI pipeline ""inside"", in the future... For now we will likely have to ignore macOS11 for v6.20 :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:59,security,patch,patch,59,"> I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. It's a combination of missing support and the broken macphsft20. But we don't *need* to make v6.20 work on macOS11. But I guess we currently have a version independent set of PR platforms... That'll auto-fix with root.git having the CI pipeline ""inside"", in the future... For now we will likely have to ignore macOS11 for v6.20 :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:129,usability,support,support,129,"> I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. It's a combination of missing support and the broken macphsft20. But we don't *need* to make v6.20 work on macOS11. But I guess we currently have a version independent set of PR platforms... That'll auto-fix with root.git having the CI pipeline ""inside"", in the future... For now we will likely have to ignore macOS11 for v6.20 :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:41,availability,failur,failure,41,OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:41,deployability,fail,failure,41,OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:70,deployability,instal,installed,70,OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:130,deployability,Version,Versions,130,OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:130,integrability,Version,Versions,130,OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:130,modifiability,Version,Versions,130,OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:162,modifiability,pac,packages,162,OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:41,performance,failur,failure,41,OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:41,reliability,fail,failure,41,OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:20,testability,understand,understand,20,OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:43,availability,failur,failure,43,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:43,deployability,fail,failure,43,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:72,deployability,instal,installed,72,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:132,deployability,Version,Versions,132,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:509,deployability,instal,install,509,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:132,integrability,Version,Versions,132,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:132,modifiability,Version,Versions,132,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:164,modifiability,pac,packages,164,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:43,performance,failur,failure,43,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:431,performance,time,time,431,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:43,reliability,fail,failure,43,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:255,reliability,Doe,Does,255,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:388,safety,test,test,388,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:22,testability,understand,understand,22,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:388,testability,test,test,388,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:111,availability,error,error,111,"> I took macphsft20 offline; macphsft23 should jump in. @Axel-Naumann hmm, `macphsft23` is even worse: `xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun` What do I have to do to get `macphsft20` back? :sweat_smile: I think I found enough commits to get (most of) the tests pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:111,performance,error,error,111,"> I took macphsft20 offline; macphsft23 should jump in. @Axel-Naumann hmm, `macphsft23` is even worse: `xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun` What do I have to do to get `macphsft20` back? :sweat_smile: I think I found enough commits to get (most of) the tests pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:111,safety,error,error,111,"> I took macphsft20 offline; macphsft23 should jump in. @Axel-Naumann hmm, `macphsft23` is even worse: `xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun` What do I have to do to get `macphsft20` back? :sweat_smile: I think I found enough commits to get (most of) the tests pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:369,safety,test,tests,369,"> I took macphsft20 offline; macphsft23 should jump in. @Axel-Naumann hmm, `macphsft23` is even worse: `xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun` What do I have to do to get `macphsft20` back? :sweat_smile: I think I found enough commits to get (most of) the tests pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:369,testability,test,tests,369,"> I took macphsft20 offline; macphsft23 should jump in. @Axel-Naumann hmm, `macphsft23` is even worse: `xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun` What do I have to do to get `macphsft20` back? :sweat_smile: I think I found enough commits to get (most of) the tests pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:111,usability,error,error,111,"> I took macphsft20 offline; macphsft23 should jump in. @Axel-Naumann hmm, `macphsft23` is even worse: `xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun` What do I have to do to get `macphsft20` back? :sweat_smile: I think I found enough commits to get (most of) the tests pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:168,usability,Command,CommandLineTools,168,"> I took macphsft20 offline; macphsft23 should jump in. @Axel-Naumann hmm, `macphsft23` is even worse: `xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun` What do I have to do to get `macphsft20` back? :sweat_smile: I think I found enough commits to get (most of) the tests pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:224,usability,Command,CommandLineTools,224,"> I took macphsft20 offline; macphsft23 should jump in. @Axel-Naumann hmm, `macphsft23` is even worse: `xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun` What do I have to do to get `macphsft20` back? :sweat_smile: I think I found enough commits to get (most of) the tests pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:11,deployability,build,build,11,@phsft-bot build just on mac11.0/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:106,availability,down,download,106,"@couet this might mean that you need to run clang one through the remote display, to sign the license and download what's missing. Just running `clang --help` in a terminal should be enough. Can you do it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:85,security,sign,sign,85,"@couet this might mean that you need to run clang one through the remote display, to sign the license and download what's missing. Just running `clang --help` in a terminal should be enough. Can you do it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:153,usability,help,help,153,"@couet this might mean that you need to run clang one through the remote display, to sign the license and download what's missing. Just running `clang --help` in a terminal should be enough. Can you do it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7635:11,deployability,build,build,11,@phsft-bot build just on mac11.0/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7635
https://github.com/root-project/root/pull/7642:15,usability,close,closes,15,"Last PR, which closes for me https://github.com/root-project/root/issues/7536",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7642
https://github.com/root-project/root/pull/7643:57,availability,error,error,57,Closing this PR for now because I have not idea what the error in the tests is and this PR is not high in priority anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7643
https://github.com/root-project/root/pull/7643:57,performance,error,error,57,Closing this PR for now because I have not idea what the error in the tests is and this PR is not high in priority anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7643
https://github.com/root-project/root/pull/7643:57,safety,error,error,57,Closing this PR for now because I have not idea what the error in the tests is and this PR is not high in priority anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7643
https://github.com/root-project/root/pull/7643:70,safety,test,tests,70,Closing this PR for now because I have not idea what the error in the tests is and this PR is not high in priority anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7643
https://github.com/root-project/root/pull/7643:70,testability,test,tests,70,Closing this PR for now because I have not idea what the error in the tests is and this PR is not high in priority anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7643
https://github.com/root-project/root/pull/7643:57,usability,error,error,57,Closing this PR for now because I have not idea what the error in the tests is and this PR is not high in priority anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7643
https://github.com/root-project/root/issues/7644:341,deployability,version,versions,341,"The better solution would be to improve `ROOTConfig.cmake` such that a given standard can be required when calling `find_package`, like `find_package(ROOT REQUIRED cxx17)`. That way, the extra steps of checking the variable are not needed, and ROOT won't be considered found if it uses C++11, for example (in which case if you have multiple versions installed, CMake might actually search until it finds the right one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:350,deployability,instal,installed,350,"The better solution would be to improve `ROOTConfig.cmake` such that a given standard can be required when calling `find_package`, like `find_package(ROOT REQUIRED cxx17)`. That way, the extra steps of checking the variable are not needed, and ROOT won't be considered found if it uses C++11, for example (in which case if you have multiple versions installed, CMake might actually search until it finds the right one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:341,integrability,version,versions,341,"The better solution would be to improve `ROOTConfig.cmake` such that a given standard can be required when calling `find_package`, like `find_package(ROOT REQUIRED cxx17)`. That way, the extra steps of checking the variable are not needed, and ROOT won't be considered found if it uses C++11, for example (in which case if you have multiple versions installed, CMake might actually search until it finds the right one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:77,interoperability,standard,standard,77,"The better solution would be to improve `ROOTConfig.cmake` such that a given standard can be required when calling `find_package`, like `find_package(ROOT REQUIRED cxx17)`. That way, the extra steps of checking the variable are not needed, and ROOT won't be considered found if it uses C++11, for example (in which case if you have multiple versions installed, CMake might actually search until it finds the right one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:215,modifiability,variab,variable,215,"The better solution would be to improve `ROOTConfig.cmake` such that a given standard can be required when calling `find_package`, like `find_package(ROOT REQUIRED cxx17)`. That way, the extra steps of checking the variable are not needed, and ROOT won't be considered found if it uses C++11, for example (in which case if you have multiple versions installed, CMake might actually search until it finds the right one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:341,modifiability,version,versions,341,"The better solution would be to improve `ROOTConfig.cmake` such that a given standard can be required when calling `find_package`, like `find_package(ROOT REQUIRED cxx17)`. That way, the extra steps of checking the variable are not needed, and ROOT won't be considered found if it uses C++11, for example (in which case if you have multiple versions installed, CMake might actually search until it finds the right one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:143,interoperability,standard,standard,143,"Hi @amadio ,. that is an ""active requirement"". What I actually needed at some point is a ""passive"" information, an answer to a quaestion ""What standard was used?"". So these are similar, but yet different things. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:29,availability,down,downstream,29,"+1. Since ROOT requires that downstream projects be compiled with the same C++ standard that was used for ROOT, ROOT should expose that standard as `ROOT_CXX_STANDARD`. Many projects have to extract that information by regex-matching, e.g. https://gitlab.cern.ch/hepmc/HepMC3/-/blob/master/CMakeLists.txt#L153-171 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:79,interoperability,standard,standard,79,"+1. Since ROOT requires that downstream projects be compiled with the same C++ standard that was used for ROOT, ROOT should expose that standard as `ROOT_CXX_STANDARD`. Many projects have to extract that information by regex-matching, e.g. https://gitlab.cern.ch/hepmc/HepMC3/-/blob/master/CMakeLists.txt#L153-171 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:136,interoperability,standard,standard,136,"+1. Since ROOT requires that downstream projects be compiled with the same C++ standard that was used for ROOT, ROOT should expose that standard as `ROOT_CXX_STANDARD`. Many projects have to extract that information by regex-matching, e.g. https://gitlab.cern.ch/hepmc/HepMC3/-/blob/master/CMakeLists.txt#L153-171 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:124,security,expos,expose,124,"+1. Since ROOT requires that downstream projects be compiled with the same C++ standard that was used for ROOT, ROOT should expose that standard as `ROOT_CXX_STANDARD`. Many projects have to extract that information by regex-matching, e.g. https://gitlab.cern.ch/hepmc/HepMC3/-/blob/master/CMakeLists.txt#L153-171 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:38,interoperability,standard,standard,38,"ROOT's targets already export the C++ standard they were built with, so if you just link your project with ROOT using those targets, you already get the same C++ standard used in your code. Worst case, you can call `get_property` on a target to check this. However, exporting this in a variable as well can make it easier for users indeed, as calling `get_property` is a bit cumbersome.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:162,interoperability,standard,standard,162,"ROOT's targets already export the C++ standard they were built with, so if you just link your project with ROOT using those targets, you already get the same C++ standard used in your code. Worst case, you can call `get_property` on a target to check this. However, exporting this in a variable as well can make it easier for users indeed, as calling `get_property` is a bit cumbersome.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:286,modifiability,variab,variable,286,"ROOT's targets already export the C++ standard they were built with, so if you just link your project with ROOT using those targets, you already get the same C++ standard used in your code. Worst case, you can call `get_property` on a target to check this. However, exporting this in a variable as well can make it easier for users indeed, as calling `get_property` is a bit cumbersome.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:326,usability,user,users,326,"ROOT's targets already export the C++ standard they were built with, so if you just link your project with ROOT using those targets, you already get the same C++ standard used in your code. Worst case, you can call `get_property` on a target to check this. However, exporting this in a variable as well can make it easier for users indeed, as calling `get_property` is a bit cumbersome.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:291,modifiability,variab,variable,291,"> if you just link your project with ROOT using those targets. in reality most projects set their `CMAKE_CXX_STANDARD` which trumps the target's property. > you can call get_property on a target to check this. ah, that's already way better than regex-matching, thanks! > exporting this in a variable as well can make it easier for users indeed. :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:331,usability,user,users,331,"> if you just link your project with ROOT using those targets. in reality most projects set their `CMAKE_CXX_STANDARD` which trumps the target's property. > you can call get_property on a target to check this. ah, that's already way better than regex-matching, thanks! > exporting this in a variable as well can make it easier for users indeed. :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:46,interoperability,standard,standard,46,hi @bellenot : would it be hard to expose the standard in a potential new ROOT_CXX_STANDARD variable in your opinion?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:92,modifiability,variab,variable,92,hi @bellenot : would it be hard to expose the standard in a potential new ROOT_CXX_STANDARD variable in your opinion?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:35,security,expos,expose,35,hi @bellenot : would it be hard to expose the standard in a potential new ROOT_CXX_STANDARD variable in your opinion?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:48,interoperability,standard,standard,48,"> hi @bellenot : would it be hard to expose the standard in a potential new ROOT_CXX_STANDARD variable in your opinion? No, but that requires quite some changes, also for the projects using ROOT. I'll investigate (I have plenty of changes for CMake on Windows anyway).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:94,modifiability,variab,variable,94,"> hi @bellenot : would it be hard to expose the standard in a potential new ROOT_CXX_STANDARD variable in your opinion? No, but that requires quite some changes, also for the projects using ROOT. I'll investigate (I have plenty of changes for CMake on Windows anyway).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:37,security,expos,expose,37,"> hi @bellenot : would it be hard to expose the standard in a potential new ROOT_CXX_STANDARD variable in your opinion? No, but that requires quite some changes, also for the projects using ROOT. I'll investigate (I have plenty of changes for CMake on Windows anyway).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:15,testability,understand,understand,15,"@bellenot If I understand correctly, what @dpiparo is suggesting is a simple. ```cmake. set(ROOT_CXX_STANDARD @CMAKE_CXX_STANDARD@). ```. somewhere in `ROOTConfig.cmake.in`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:70,testability,simpl,simple,70,"@bellenot If I understand correctly, what @dpiparo is suggesting is a simple. ```cmake. set(ROOT_CXX_STANDARD @CMAKE_CXX_STANDARD@). ```. somewhere in `ROOTConfig.cmake.in`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:70,usability,simpl,simple,70,"@bellenot If I understand correctly, what @dpiparo is suggesting is a simple. ```cmake. set(ROOT_CXX_STANDARD @CMAKE_CXX_STANDARD@). ```. somewhere in `ROOTConfig.cmake.in`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:129,availability,down,downstream,129,Happy to see this moving forward! > also for the projects using ROOT. this should be sufficiently backwards-compatible. unless a downstream project was somehow setting and using a variable called like that already they should see no change. (P.S. don't forget to update https://root.cern/manual/integrate_root_into_my_cmake_project ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:263,deployability,updat,update,263,Happy to see this moving forward! > also for the projects using ROOT. this should be sufficiently backwards-compatible. unless a downstream project was somehow setting and using a variable called like that already they should see no change. (P.S. don't forget to update https://root.cern/manual/integrate_root_into_my_cmake_project ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:108,interoperability,compatib,compatible,108,Happy to see this moving forward! > also for the projects using ROOT. this should be sufficiently backwards-compatible. unless a downstream project was somehow setting and using a variable called like that already they should see no change. (P.S. don't forget to update https://root.cern/manual/integrate_root_into_my_cmake_project ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:180,modifiability,variab,variable,180,Happy to see this moving forward! > also for the projects using ROOT. this should be sufficiently backwards-compatible. unless a downstream project was somehow setting and using a variable called like that already they should see no change. (P.S. don't forget to update https://root.cern/manual/integrate_root_into_my_cmake_project ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:263,safety,updat,update,263,Happy to see this moving forward! > also for the projects using ROOT. this should be sufficiently backwards-compatible. unless a downstream project was somehow setting and using a variable called like that already they should see no change. (P.S. don't forget to update https://root.cern/manual/integrate_root_into_my_cmake_project ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:263,security,updat,update,263,Happy to see this moving forward! > also for the projects using ROOT. this should be sufficiently backwards-compatible. unless a downstream project was somehow setting and using a variable called like that already they should see no change. (P.S. don't forget to update https://root.cern/manual/integrate_root_into_my_cmake_project ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:24,deployability,updat,update,24,"> (P.S. don't forget to update https://root.cern/manual/integrate_root_into_my_cmake_project ). Right, thanks Enrico!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:24,safety,updat,update,24,"> (P.S. don't forget to update https://root.cern/manual/integrate_root_into_my_cmake_project ). Right, thanks Enrico!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7644:24,security,updat,update,24,"> (P.S. don't forget to update https://root.cern/manual/integrate_root_into_my_cmake_project ). Right, thanks Enrico!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644
https://github.com/root-project/root/issues/7646:238,deployability,version,version,238,"Hi @will-cern, I realized now that this issue is still open. I think we have already discussed this at one of our meetings: RooFit doesn't aim for forward compatibility, so it is expected that you can't open a workspace with a newer ROOT version in an older one. If it works, then consider it just as luck :). This is only supported for very commonly used classes like ROOT histograms. I'll close this issue for now, feel free to open new ones for forward compatibility problems! That's what we want to ensure: old workspaces should be possible to read with any newer ROOT version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7646
https://github.com/root-project/root/issues/7646:573,deployability,version,version,573,"Hi @will-cern, I realized now that this issue is still open. I think we have already discussed this at one of our meetings: RooFit doesn't aim for forward compatibility, so it is expected that you can't open a workspace with a newer ROOT version in an older one. If it works, then consider it just as luck :). This is only supported for very commonly used classes like ROOT histograms. I'll close this issue for now, feel free to open new ones for forward compatibility problems! That's what we want to ensure: old workspaces should be possible to read with any newer ROOT version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7646
https://github.com/root-project/root/issues/7646:238,integrability,version,version,238,"Hi @will-cern, I realized now that this issue is still open. I think we have already discussed this at one of our meetings: RooFit doesn't aim for forward compatibility, so it is expected that you can't open a workspace with a newer ROOT version in an older one. If it works, then consider it just as luck :). This is only supported for very commonly used classes like ROOT histograms. I'll close this issue for now, feel free to open new ones for forward compatibility problems! That's what we want to ensure: old workspaces should be possible to read with any newer ROOT version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7646
https://github.com/root-project/root/issues/7646:573,integrability,version,version,573,"Hi @will-cern, I realized now that this issue is still open. I think we have already discussed this at one of our meetings: RooFit doesn't aim for forward compatibility, so it is expected that you can't open a workspace with a newer ROOT version in an older one. If it works, then consider it just as luck :). This is only supported for very commonly used classes like ROOT histograms. I'll close this issue for now, feel free to open new ones for forward compatibility problems! That's what we want to ensure: old workspaces should be possible to read with any newer ROOT version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7646
https://github.com/root-project/root/issues/7646:155,interoperability,compatib,compatibility,155,"Hi @will-cern, I realized now that this issue is still open. I think we have already discussed this at one of our meetings: RooFit doesn't aim for forward compatibility, so it is expected that you can't open a workspace with a newer ROOT version in an older one. If it works, then consider it just as luck :). This is only supported for very commonly used classes like ROOT histograms. I'll close this issue for now, feel free to open new ones for forward compatibility problems! That's what we want to ensure: old workspaces should be possible to read with any newer ROOT version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7646
https://github.com/root-project/root/issues/7646:456,interoperability,compatib,compatibility,456,"Hi @will-cern, I realized now that this issue is still open. I think we have already discussed this at one of our meetings: RooFit doesn't aim for forward compatibility, so it is expected that you can't open a workspace with a newer ROOT version in an older one. If it works, then consider it just as luck :). This is only supported for very commonly used classes like ROOT histograms. I'll close this issue for now, feel free to open new ones for forward compatibility problems! That's what we want to ensure: old workspaces should be possible to read with any newer ROOT version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7646
https://github.com/root-project/root/issues/7646:238,modifiability,version,version,238,"Hi @will-cern, I realized now that this issue is still open. I think we have already discussed this at one of our meetings: RooFit doesn't aim for forward compatibility, so it is expected that you can't open a workspace with a newer ROOT version in an older one. If it works, then consider it just as luck :). This is only supported for very commonly used classes like ROOT histograms. I'll close this issue for now, feel free to open new ones for forward compatibility problems! That's what we want to ensure: old workspaces should be possible to read with any newer ROOT version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7646
https://github.com/root-project/root/issues/7646:573,modifiability,version,version,573,"Hi @will-cern, I realized now that this issue is still open. I think we have already discussed this at one of our meetings: RooFit doesn't aim for forward compatibility, so it is expected that you can't open a workspace with a newer ROOT version in an older one. If it works, then consider it just as luck :). This is only supported for very commonly used classes like ROOT histograms. I'll close this issue for now, feel free to open new ones for forward compatibility problems! That's what we want to ensure: old workspaces should be possible to read with any newer ROOT version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7646
https://github.com/root-project/root/issues/7646:131,reliability,doe,doesn,131,"Hi @will-cern, I realized now that this issue is still open. I think we have already discussed this at one of our meetings: RooFit doesn't aim for forward compatibility, so it is expected that you can't open a workspace with a newer ROOT version in an older one. If it works, then consider it just as luck :). This is only supported for very commonly used classes like ROOT histograms. I'll close this issue for now, feel free to open new ones for forward compatibility problems! That's what we want to ensure: old workspaces should be possible to read with any newer ROOT version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7646
https://github.com/root-project/root/issues/7646:323,usability,support,supported,323,"Hi @will-cern, I realized now that this issue is still open. I think we have already discussed this at one of our meetings: RooFit doesn't aim for forward compatibility, so it is expected that you can't open a workspace with a newer ROOT version in an older one. If it works, then consider it just as luck :). This is only supported for very commonly used classes like ROOT histograms. I'll close this issue for now, feel free to open new ones for forward compatibility problems! That's what we want to ensure: old workspaces should be possible to read with any newer ROOT version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7646
https://github.com/root-project/root/issues/7646:391,usability,close,close,391,"Hi @will-cern, I realized now that this issue is still open. I think we have already discussed this at one of our meetings: RooFit doesn't aim for forward compatibility, so it is expected that you can't open a workspace with a newer ROOT version in an older one. If it works, then consider it just as luck :). This is only supported for very commonly used classes like ROOT histograms. I'll close this issue for now, feel free to open new ones for forward compatibility problems! That's what we want to ensure: old workspaces should be possible to read with any newer ROOT version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7646
https://github.com/root-project/root/pull/7651:29,deployability,integr,integrated,29,The benchmark is running and integrated in the dashboard here: https://rootbnch-grafana-test.cern.ch/d/G2qrd2SWk/rdataframe?orgId=1,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7651
https://github.com/root-project/root/pull/7651:29,integrability,integr,integrated,29,The benchmark is running and integrated in the dashboard here: https://rootbnch-grafana-test.cern.ch/d/G2qrd2SWk/rdataframe?orgId=1,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7651
https://github.com/root-project/root/pull/7651:29,interoperability,integr,integrated,29,The benchmark is running and integrated in the dashboard here: https://rootbnch-grafana-test.cern.ch/d/G2qrd2SWk/rdataframe?orgId=1,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7651
https://github.com/root-project/root/pull/7651:29,modifiability,integr,integrated,29,The benchmark is running and integrated in the dashboard here: https://rootbnch-grafana-test.cern.ch/d/G2qrd2SWk/rdataframe?orgId=1,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7651
https://github.com/root-project/root/pull/7651:29,reliability,integr,integrated,29,The benchmark is running and integrated in the dashboard here: https://rootbnch-grafana-test.cern.ch/d/G2qrd2SWk/rdataframe?orgId=1,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7651
https://github.com/root-project/root/pull/7651:88,safety,test,test,88,The benchmark is running and integrated in the dashboard here: https://rootbnch-grafana-test.cern.ch/d/G2qrd2SWk/rdataframe?orgId=1,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7651
https://github.com/root-project/root/pull/7651:29,security,integr,integrated,29,The benchmark is running and integrated in the dashboard here: https://rootbnch-grafana-test.cern.ch/d/G2qrd2SWk/rdataframe?orgId=1,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7651
https://github.com/root-project/root/pull/7651:29,testability,integr,integrated,29,The benchmark is running and integrated in the dashboard here: https://rootbnch-grafana-test.cern.ch/d/G2qrd2SWk/rdataframe?orgId=1,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7651
https://github.com/root-project/root/pull/7651:88,testability,test,test,88,The benchmark is running and integrated in the dashboard here: https://rootbnch-grafana-test.cern.ch/d/G2qrd2SWk/rdataframe?orgId=1,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7651
https://github.com/root-project/root/pull/7651:61,usability,user,user-images,61,The benchmark is happy with these changes:. ![image](https://user-images.githubusercontent.com/10999034/113843943-4e53c980-9794-11eb-983b-e3beb3ed94b4.png).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7651
https://github.com/root-project/root/pull/7653:21,deployability,build,build,21,(aborted the jenkins build),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7653
https://github.com/root-project/root/issues/7654:88,deployability,patch,patch,88,"@mxxo heya, thanks a lot for reporting! could you please open PR in case, if you have a patch that is working with your setup?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7654
https://github.com/root-project/root/issues/7654:88,safety,patch,patch,88,"@mxxo heya, thanks a lot for reporting! could you please open PR in case, if you have a patch that is working with your setup?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7654
https://github.com/root-project/root/issues/7654:88,security,patch,patch,88,"@mxxo heya, thanks a lot for reporting! could you please open PR in case, if you have a patch that is working with your setup?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7654
https://github.com/root-project/root/pull/7655:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos8-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7655
https://github.com/root-project/root/pull/7655:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos8-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7655
https://github.com/root-project/root/pull/7655:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos8-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7655
https://github.com/root-project/root/issues/7657:178,availability,error,error,178,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:224,availability,error,error,224,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:13,deployability,observ,observed,13,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:230,integrability,messag,message,230,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:230,interoperability,messag,message,230,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:178,performance,error,error,178,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:224,performance,error,error,224,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:178,safety,error,error,178,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:224,safety,error,error,224,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:13,testability,observ,observed,13,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:217,testability,simpl,simple,217,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:178,usability,error,error,178,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:217,usability,simpl,simple,217,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:224,usability,error,error,224,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:126,deployability,patch,patches,126,@scott-snyder @krasznaa is there any chance that you can confirm https://github.com/root-project/root/pull/7767 (for v6-24-00-patches) or https://github.com/root-project/root/pull/7752 (for master) is resolving this for ATLAS?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:126,safety,patch,patches,126,@scott-snyder @krasznaa is there any chance that you can confirm https://github.com/root-project/root/pull/7767 (for v6-24-00-patches) or https://github.com/root-project/root/pull/7752 (for master) is resolving this for ATLAS?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:126,security,patch,patches,126,@scott-snyder @krasznaa is there any chance that you can confirm https://github.com/root-project/root/pull/7767 (for v6-24-00-patches) or https://github.com/root-project/root/pull/7752 (for master) is resolving this for ATLAS?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:57,usability,confirm,confirm,57,@scott-snyder @krasznaa is there any chance that you can confirm https://github.com/root-project/root/pull/7767 (for v6-24-00-patches) or https://github.com/root-project/root/pull/7752 (for master) is resolving this for ATLAS?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:110,deployability,patch,patches,110,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:339,deployability,depend,depend,339,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:84,energy efficiency,current,current,84,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:339,integrability,depend,depend,339,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:64,interoperability,compatib,compatible,64,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:145,interoperability,compatib,compatible,145,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:241,interoperability,compatib,compatible,241,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:339,modifiability,depend,depend,339,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:40,reliability,doe,does,40,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:110,safety,patch,patches,110,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:130,safety,Test,Testing,130,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:209,safety,test,testing,209,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:339,safety,depend,depend,339,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:110,security,patch,patches,110,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:130,testability,Test,Testing,130,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:209,testability,test,testing,209,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:339,testability,depend,depend,339,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it? Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:188,integrability,interfac,interface,188,It is not ABI compatible per se but for your purpose it is sufficiently so. The code in cling/llvm is only used/access from libCling which should only be accessed through the TIntepre ter interface (i.e. no user code should need to be rebuild).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:14,interoperability,compatib,compatible,14,It is not ABI compatible per se but for your purpose it is sufficiently so. The code in cling/llvm is only used/access from libCling which should only be accessed through the TIntepre ter interface (i.e. no user code should need to be rebuild).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:188,interoperability,interfac,interface,188,It is not ABI compatible per se but for your purpose it is sufficiently so. The code in cling/llvm is only used/access from libCling which should only be accessed through the TIntepre ter interface (i.e. no user code should need to be rebuild).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:188,modifiability,interfac,interface,188,It is not ABI compatible per se but for your purpose it is sufficiently so. The code in cling/llvm is only used/access from libCling which should only be accessed through the TIntepre ter interface (i.e. no user code should need to be rebuild).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:112,security,access,access,112,It is not ABI compatible per se but for your purpose it is sufficiently so. The code in cling/llvm is only used/access from libCling which should only be accessed through the TIntepre ter interface (i.e. no user code should need to be rebuild).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:154,security,access,accessed,154,It is not ABI compatible per se but for your purpose it is sufficiently so. The code in cling/llvm is only used/access from libCling which should only be accessed through the TIntepre ter interface (i.e. no user code should need to be rebuild).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:207,usability,user,user,207,It is not ABI compatible per se but for your purpose it is sufficiently so. The code in cling/llvm is only used/access from libCling which should only be accessed through the TIntepre ter interface (i.e. no user code should need to be rebuild).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:65,reliability,doe,doesn,65,"In that case Scott will probably try this out himself. But if he doesn't, I'll give it a go tomorrow. üòâ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:30,interoperability,specif,specific,30,hi -. This fixes at least the specific crashes i was looking at here. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:115,safety,test,testing,115,"Thank you very much, @scott-snyder - both for this excellent analysis of the problem and the your quick turnaround testing!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7657:115,testability,test,testing,115,"Thank you very much, @scott-snyder - both for this excellent analysis of the problem and the your quick turnaround testing!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657
https://github.com/root-project/root/issues/7659:359,performance,cach,caching,359,"The problem is not the step sizes. It is in the nll computed value. The minimizer computes the minimum nll to be 52.58, while `nll->getVal() `returns `1163.66`. When calling `minmizer.hesse()` afterwards the nll value computed by the minimizer is also 1163 not consiustent with the minimum value and causing then a wrong Hesse computation. . It is maybe some caching in the nll that behaves differently after calling `nll.getVal()`. I will investigate this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:72,usability,minim,minimizer,72,"The problem is not the step sizes. It is in the nll computed value. The minimizer computes the minimum nll to be 52.58, while `nll->getVal() `returns `1163.66`. When calling `minmizer.hesse()` afterwards the nll value computed by the minimizer is also 1163 not consiustent with the minimum value and causing then a wrong Hesse computation. . It is maybe some caching in the nll that behaves differently after calling `nll.getVal()`. I will investigate this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:95,usability,minim,minimum,95,"The problem is not the step sizes. It is in the nll computed value. The minimizer computes the minimum nll to be 52.58, while `nll->getVal() `returns `1163.66`. When calling `minmizer.hesse()` afterwards the nll value computed by the minimizer is also 1163 not consiustent with the minimum value and causing then a wrong Hesse computation. . It is maybe some caching in the nll that behaves differently after calling `nll.getVal()`. I will investigate this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:234,usability,minim,minimizer,234,"The problem is not the step sizes. It is in the nll computed value. The minimizer computes the minimum nll to be 52.58, while `nll->getVal() `returns `1163.66`. When calling `minmizer.hesse()` afterwards the nll value computed by the minimizer is also 1163 not consiustent with the minimum value and causing then a wrong Hesse computation. . It is maybe some caching in the nll that behaves differently after calling `nll.getVal()`. I will investigate this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:282,usability,minim,minimum,282,"The problem is not the step sizes. It is in the nll computed value. The minimizer computes the minimum nll to be 52.58, while `nll->getVal() `returns `1163.66`. When calling `minmizer.hesse()` afterwards the nll value computed by the minimizer is also 1163 not consiustent with the minimum value and causing then a wrong Hesse computation. . It is maybe some caching in the nll that behaves differently after calling `nll.getVal()`. I will investigate this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:949,availability,state,state,949,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:613,deployability,contain,contain,613,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:153,integrability,compon,components,153,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:213,integrability,compon,components,213,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:703,integrability,sub,subtracted,703,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:949,integrability,state,state,949,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:153,interoperability,compon,components,153,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:213,interoperability,compon,components,213,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:153,modifiability,compon,components,153,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:213,modifiability,compon,components,213,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:350,performance,perform,performed,350,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:383,performance,cach,cached,383,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:445,performance,cach,cached,445,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:604,reliability,doe,does,604,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:83,testability,simul,simultaneous,83,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:109,testability,simul,simultaneous,109,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:350,usability,perform,performed,350,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/issues/7659:969,usability,minim,minimize,969,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. . For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. . Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. . Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. . Adding this two lines before calling `hesse()`, fixes the problem: . ```. auto mu = (RooRealVar*)params.find(""mu"");. mu->setValueDirty();. ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse(). .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7659
https://github.com/root-project/root/pull/7663:25,safety,review,review,25,"@eguiraud thanks for the review and the comment. Nobody relies on the return code of root-config.bat on Windows, since it has only been introduced very recently (Oct 30, 2020). But I'll see what I can do",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7663
https://github.com/root-project/root/pull/7663:25,testability,review,review,25,"@eguiraud thanks for the review and the comment. Nobody relies on the return code of root-config.bat on Windows, since it has only been introduced very recently (Oct 30, 2020). But I'll see what I can do",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7663
https://github.com/root-project/root/pull/7665:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7665
https://github.com/root-project/root/pull/7667:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7667
https://github.com/root-project/root/pull/7667:24,availability,Failur,Failure,24,"Thanks a lot for a fix! Failure is unrelated, merging!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7667
https://github.com/root-project/root/pull/7667:24,deployability,Fail,Failure,24,"Thanks a lot for a fix! Failure is unrelated, merging!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7667
https://github.com/root-project/root/pull/7667:24,performance,Failur,Failure,24,"Thanks a lot for a fix! Failure is unrelated, merging!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7667
https://github.com/root-project/root/pull/7667:24,reliability,Fail,Failure,24,"Thanks a lot for a fix! Failure is unrelated, merging!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7667
https://github.com/root-project/root/issues/7669:166,interoperability,bind,bindings,166,"Hi @vepadulano, sorry for the very late reply :stuck_out_tongue: . I think doing from `ROOT import *` is quite a bad idea because of the dynamic nature of our Python bindings. In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). So in that sense, we also don't have any inconsistent behavior anymore :). In fact, maybe we can just make it explicit that this is not supported by raising an exception here? https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L182. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:517,interoperability,bind,bindings,517,"Hi @vepadulano, sorry for the very late reply :stuck_out_tongue: . I think doing from `ROOT import *` is quite a bad idea because of the dynamic nature of our Python bindings. In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). So in that sense, we also don't have any inconsistent behavior anymore :). In fact, maybe we can just make it explicit that this is not supported by raising an exception here? https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L182. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:166,modifiability,bind,bindings,166,"Hi @vepadulano, sorry for the very late reply :stuck_out_tongue: . I think doing from `ROOT import *` is quite a bad idea because of the dynamic nature of our Python bindings. In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). So in that sense, we also don't have any inconsistent behavior anymore :). In fact, maybe we can just make it explicit that this is not supported by raising an exception here? https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L182. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:517,modifiability,bind,bindings,517,"Hi @vepadulano, sorry for the very late reply :stuck_out_tongue: . I think doing from `ROOT import *` is quite a bad idea because of the dynamic nature of our Python bindings. In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). So in that sense, we also don't have any inconsistent behavior anymore :). In fact, maybe we can just make it explicit that this is not supported by raising an exception here? https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L182. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:188,reliability,doe,doesn,188,"Hi @vepadulano, sorry for the very late reply :stuck_out_tongue: . I think doing from `ROOT import *` is quite a bad idea because of the dynamic nature of our Python bindings. In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). So in that sense, we also don't have any inconsistent behavior anymore :). In fact, maybe we can just make it explicit that this is not supported by raising an exception here? https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L182. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:452,safety,except,exception,452,"Hi @vepadulano, sorry for the very late reply :stuck_out_tongue: . I think doing from `ROOT import *` is quite a bad idea because of the dynamic nature of our Python bindings. In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). So in that sense, we also don't have any inconsistent behavior anymore :). In fact, maybe we can just make it explicit that this is not supported by raising an exception here? https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L182. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:346,usability,behavi,behavior,346,"Hi @vepadulano, sorry for the very late reply :stuck_out_tongue: . I think doing from `ROOT import *` is quite a bad idea because of the dynamic nature of our Python bindings. In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). So in that sense, we also don't have any inconsistent behavior anymore :). In fact, maybe we can just make it explicit that this is not supported by raising an exception here? https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L182. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:428,usability,support,supported,428,"Hi @vepadulano, sorry for the very late reply :stuck_out_tongue: . I think doing from `ROOT import *` is quite a bad idea because of the dynamic nature of our Python bindings. In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). So in that sense, we also don't have any inconsistent behavior anymore :). In fact, maybe we can just make it explicit that this is not supported by raising an exception here? https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L182. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:229,deployability,modul,modules,229,"> I think doing from ROOT import * is quite a bad idea because of the dynamic nature of our Python bindings. Indeed it is quite a bad idea in general and I would really like to avoid it :smile: https://docs.python.org/3/tutorial/modules.html#importing-from-a-package. > In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). This is a bug unfortunately :smiling_face_with_tear: . > What do you think? Raising the exception is ok, but will break (probably many) existing applications. I am not saying it is a bad thing per se, but maybe we want to soft-break it first with a warning and then break it in a future ROOT release. Need to think about it a bit more, because this will also change whenever we get rid of the facade. But in principle I agree it is the correct way forward",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:678,deployability,releas,release,678,"> I think doing from ROOT import * is quite a bad idea because of the dynamic nature of our Python bindings. Indeed it is quite a bad idea in general and I would really like to avoid it :smile: https://docs.python.org/3/tutorial/modules.html#importing-from-a-package. > In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). This is a bug unfortunately :smiling_face_with_tear: . > What do you think? Raising the exception is ok, but will break (probably many) existing applications. I am not saying it is a bad thing per se, but maybe we want to soft-break it first with a warning and then break it in a future ROOT release. Need to think about it a bit more, because this will also change whenever we get rid of the facade. But in principle I agree it is the correct way forward",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:99,interoperability,bind,bindings,99,"> I think doing from ROOT import * is quite a bad idea because of the dynamic nature of our Python bindings. Indeed it is quite a bad idea in general and I would really like to avoid it :smile: https://docs.python.org/3/tutorial/modules.html#importing-from-a-package. > In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). This is a bug unfortunately :smiling_face_with_tear: . > What do you think? Raising the exception is ok, but will break (probably many) existing applications. I am not saying it is a bad thing per se, but maybe we want to soft-break it first with a warning and then break it in a future ROOT release. Need to think about it a bit more, because this will also change whenever we get rid of the facade. But in principle I agree it is the correct way forward",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:99,modifiability,bind,bindings,99,"> I think doing from ROOT import * is quite a bad idea because of the dynamic nature of our Python bindings. Indeed it is quite a bad idea in general and I would really like to avoid it :smile: https://docs.python.org/3/tutorial/modules.html#importing-from-a-package. > In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). This is a bug unfortunately :smiling_face_with_tear: . > What do you think? Raising the exception is ok, but will break (probably many) existing applications. I am not saying it is a bad thing per se, but maybe we want to soft-break it first with a warning and then break it in a future ROOT release. Need to think about it a bit more, because this will also change whenever we get rid of the facade. But in principle I agree it is the correct way forward",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:229,modifiability,modul,modules,229,"> I think doing from ROOT import * is quite a bad idea because of the dynamic nature of our Python bindings. Indeed it is quite a bad idea in general and I would really like to avoid it :smile: https://docs.python.org/3/tutorial/modules.html#importing-from-a-package. > In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). This is a bug unfortunately :smiling_face_with_tear: . > What do you think? Raising the exception is ok, but will break (probably many) existing applications. I am not saying it is a bad thing per se, but maybe we want to soft-break it first with a warning and then break it in a future ROOT release. Need to think about it a bit more, because this will also change whenever we get rid of the facade. But in principle I agree it is the correct way forward",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:259,modifiability,pac,package,259,"> I think doing from ROOT import * is quite a bad idea because of the dynamic nature of our Python bindings. Indeed it is quite a bad idea in general and I would really like to avoid it :smile: https://docs.python.org/3/tutorial/modules.html#importing-from-a-package. > In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). This is a bug unfortunately :smiling_face_with_tear: . > What do you think? Raising the exception is ok, but will break (probably many) existing applications. I am not saying it is a bad thing per se, but maybe we want to soft-break it first with a warning and then break it in a future ROOT release. Need to think about it a bit more, because this will also change whenever we get rid of the facade. But in principle I agree it is the correct way forward",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:282,reliability,doe,doesn,282,"> I think doing from ROOT import * is quite a bad idea because of the dynamic nature of our Python bindings. Indeed it is quite a bad idea in general and I would really like to avoid it :smile: https://docs.python.org/3/tutorial/modules.html#importing-from-a-package. > In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). This is a bug unfortunately :smiling_face_with_tear: . > What do you think? Raising the exception is ok, but will break (probably many) existing applications. I am not saying it is a bad thing per se, but maybe we want to soft-break it first with a warning and then break it in a future ROOT release. Need to think about it a bit more, because this will also change whenever we get rid of the facade. But in principle I agree it is the correct way forward",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:177,safety,avoid,avoid,177,"> I think doing from ROOT import * is quite a bad idea because of the dynamic nature of our Python bindings. Indeed it is quite a bad idea in general and I would really like to avoid it :smile: https://docs.python.org/3/tutorial/modules.html#importing-from-a-package. > In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). This is a bug unfortunately :smiling_face_with_tear: . > What do you think? Raising the exception is ok, but will break (probably many) existing applications. I am not saying it is a bad thing per se, but maybe we want to soft-break it first with a warning and then break it in a future ROOT release. Need to think about it a bit more, because this will also change whenever we get rid of the facade. But in principle I agree it is the correct way forward",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:229,safety,modul,modules,229,"> I think doing from ROOT import * is quite a bad idea because of the dynamic nature of our Python bindings. Indeed it is quite a bad idea in general and I would really like to avoid it :smile: https://docs.python.org/3/tutorial/modules.html#importing-from-a-package. > In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). This is a bug unfortunately :smiling_face_with_tear: . > What do you think? Raising the exception is ok, but will break (probably many) existing applications. I am not saying it is a bad thing per se, but maybe we want to soft-break it first with a warning and then break it in a future ROOT release. Need to think about it a bit more, because this will also change whenever we get rid of the facade. But in principle I agree it is the correct way forward",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:474,safety,except,exception,474,"> I think doing from ROOT import * is quite a bad idea because of the dynamic nature of our Python bindings. Indeed it is quite a bad idea in general and I would really like to avoid it :smile: https://docs.python.org/3/tutorial/modules.html#importing-from-a-package. > In fact, it doesn't even work when I try it with ROOT master (it just takes forever, the execution never finishes). This is a bug unfortunately :smiling_face_with_tear: . > What do you think? Raising the exception is ok, but will break (probably many) existing applications. I am not saying it is a bad thing per se, but maybe we want to soft-break it first with a warning and then break it in a future ROOT release. Need to think about it a bit more, because this will also change whenever we get rid of the facade. But in principle I agree it is the correct way forward",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:648,interoperability,bind,bindings,648,"A soft-break would require the effort of fixing the wild card import just to drop it afterwards.... There is a structural problem with Python 3.11 that prevents the wildcard import with the lazy lookup to work. Upstream CPyCppyy dropped that feature even:. https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005. Quote:. > As of py3.11, there is no longer a lookup function pointer in the dict object to replace. Since this feature is not widely advertised, it's simply droped. The dropped `SetCppLazyLookup()` function is exactly the one we used for `from ROOT import *`. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L162. @vepadulano, given this new information that it will never work with Python 3.11 onward, maybe we should remove the code path for `import ROOT *`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:648,modifiability,bind,bindings,648,"A soft-break would require the effort of fixing the wild card import just to drop it afterwards.... There is a structural problem with Python 3.11 that prevents the wildcard import with the lazy lookup to work. Upstream CPyCppyy dropped that feature even:. https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005. Quote:. > As of py3.11, there is no longer a lookup function pointer in the dict object to replace. Since this feature is not widely advertised, it's simply droped. The dropped `SetCppLazyLookup()` function is exactly the one we used for `from ROOT import *`. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L162. @vepadulano, given this new information that it will never work with Python 3.11 onward, maybe we should remove the code path for `import ROOT *`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:152,safety,prevent,prevents,152,"A soft-break would require the effort of fixing the wild card import just to drop it afterwards.... There is a structural problem with Python 3.11 that prevents the wildcard import with the lazy lookup to work. Upstream CPyCppyy dropped that feature even:. https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005. Quote:. > As of py3.11, there is no longer a lookup function pointer in the dict object to replace. Since this feature is not widely advertised, it's simply droped. The dropped `SetCppLazyLookup()` function is exactly the one we used for `from ROOT import *`. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L162. @vepadulano, given this new information that it will never work with Python 3.11 onward, maybe we should remove the code path for `import ROOT *`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:152,security,preven,prevents,152,"A soft-break would require the effort of fixing the wild card import just to drop it afterwards.... There is a structural problem with Python 3.11 that prevents the wildcard import with the lazy lookup to work. Upstream CPyCppyy dropped that feature even:. https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005. Quote:. > As of py3.11, there is no longer a lookup function pointer in the dict object to replace. Since this feature is not widely advertised, it's simply droped. The dropped `SetCppLazyLookup()` function is exactly the one we used for `from ROOT import *`. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L162. @vepadulano, given this new information that it will never work with Python 3.11 onward, maybe we should remove the code path for `import ROOT *`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:489,testability,simpl,simply,489,"A soft-break would require the effort of fixing the wild card import just to drop it afterwards.... There is a structural problem with Python 3.11 that prevents the wildcard import with the lazy lookup to work. Upstream CPyCppyy dropped that feature even:. https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005. Quote:. > As of py3.11, there is no longer a lookup function pointer in the dict object to replace. Since this feature is not widely advertised, it's simply droped. The dropped `SetCppLazyLookup()` function is exactly the one we used for `from ROOT import *`. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L162. @vepadulano, given this new information that it will never work with Python 3.11 onward, maybe we should remove the code path for `import ROOT *`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:489,usability,simpl,simply,489,"A soft-break would require the effort of fixing the wild card import just to drop it afterwards.... There is a structural problem with Python 3.11 that prevents the wildcard import with the lazy lookup to work. Upstream CPyCppyy dropped that feature even:. https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005. Quote:. > As of py3.11, there is no longer a lookup function pointer in the dict object to replace. Since this feature is not widely advertised, it's simply droped. The dropped `SetCppLazyLookup()` function is exactly the one we used for `from ROOT import *`. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L162. @vepadulano, given this new information that it will never work with Python 3.11 onward, maybe we should remove the code path for `import ROOT *`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:64,usability,user,users,64,"A soft-break with deprecation warning could still be useful for users of Python 3.8, 3.9 or 3.10, but I doubt that it's worth it, given that no user even noticed that `from ROOT import *` stopped working with Python 3.11.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:144,usability,user,user,144,"A soft-break with deprecation warning could still be useful for users of Python 3.8, 3.9 or 3.10, but I doubt that it's worth it, given that no user even noticed that `from ROOT import *` stopped working with Python 3.11.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:188,usability,stop,stopped,188,"A soft-break with deprecation warning could still be useful for users of Python 3.8, 3.9 or 3.10, but I doubt that it's worth it, given that no user even noticed that `from ROOT import *` stopped working with Python 3.11.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:54,safety,compl,completely,54,"I am always wary about dropping support for a feature completely without a deprecation notice, even if that feature was buggy and incomplete. This might be one occasion where we simply can't do otherwise",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:54,security,compl,completely,54,"I am always wary about dropping support for a feature completely without a deprecation notice, even if that feature was buggy and incomplete. This might be one occasion where we simply can't do otherwise",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:178,testability,simpl,simply,178,"I am always wary about dropping support for a feature completely without a deprecation notice, even if that feature was buggy and incomplete. This might be one occasion where we simply can't do otherwise",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:32,usability,support,support,32,"I am always wary about dropping support for a feature completely without a deprecation notice, even if that feature was buggy and incomplete. This might be one occasion where we simply can't do otherwise",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7669:178,usability,simpl,simply,178,"I am always wary about dropping support for a feature completely without a deprecation notice, even if that feature was buggy and incomplete. This might be one occasion where we simply can't do otherwise",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669
https://github.com/root-project/root/issues/7673:38,energy efficiency,draw,draw,38,"So in the following example it should draw only the axis. not the bin. ```. TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);. Double_t x[4] = {0.,0.,2.,2.};. Double_t y[4] = {0.,2.,2.,0.};. TGraph *g = new TGraph(4,x,y);. h2pol->AddBin(g);. h2pol->Fill(1.,1.,3);. h2pol->Draw(""AXIS""). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7673
https://github.com/root-project/root/issues/7673:271,energy efficiency,Draw,Draw,271,"So in the following example it should draw only the axis. not the bin. ```. TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);. Double_t x[4] = {0.,0.,2.,2.};. Double_t y[4] = {0.,2.,2.,0.};. TGraph *g = new TGraph(4,x,y);. h2pol->AddBin(g);. h2pol->Fill(1.,1.,3);. h2pol->Draw(""AXIS""). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7673
https://github.com/root-project/root/issues/7673:318,energy efficiency,draw,drawn,318,"Please see https://root.cern/doc/master/classTHistPainter.html#HP20a AXIS option is not listed for TH2Poly. If I run your code example under ROOT 6.22/06 I get the attached figure. ![c1](https://user-images.githubusercontent.com/55505042/112357480-91467500-8c9d-11eb-9f04-4bbf630ecafe.png). As you can see, a frame is drawn around the bin. What happens in fact, and what is not seen, since the code example fills the histogram with a negative value, is that what is drawn is a scatter plot. If I extend the code as follows:. ```. TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);. Double_t x[4] = {0.,0.,2.,2.};. Double_t y[4] = {0.,2.,2.,0.};. TGraph *g = new TGraph(4,x,y);. h2pol->AddBin(g);. h2pol->Fill(1.,1.,-3);. Double_t x2[4] = {1.,1.,3.,3.};. Double_t y2[4] = {2.,4.,4.,2.};. TGraph *g2 = new TGraph(4,x2,y2);. h2pol->AddBin(g2);. h2pol->Fill(2.,3.,3);. h2pol->Draw(""axis""). ```. I get the following picture which clearly demonstrates it. ![c2](https://user-images.githubusercontent.com/55505042/112357745-ceab0280-8c9d-11eb-8167-3b3b2cd603bb.png). So if I draw h2pol with ""AXIS"" option, it is simply ignored, and a scatter plot is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7673
https://github.com/root-project/root/issues/7673:466,energy efficiency,draw,drawn,466,"Please see https://root.cern/doc/master/classTHistPainter.html#HP20a AXIS option is not listed for TH2Poly. If I run your code example under ROOT 6.22/06 I get the attached figure. ![c1](https://user-images.githubusercontent.com/55505042/112357480-91467500-8c9d-11eb-9f04-4bbf630ecafe.png). As you can see, a frame is drawn around the bin. What happens in fact, and what is not seen, since the code example fills the histogram with a negative value, is that what is drawn is a scatter plot. If I extend the code as follows:. ```. TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);. Double_t x[4] = {0.,0.,2.,2.};. Double_t y[4] = {0.,2.,2.,0.};. TGraph *g = new TGraph(4,x,y);. h2pol->AddBin(g);. h2pol->Fill(1.,1.,-3);. Double_t x2[4] = {1.,1.,3.,3.};. Double_t y2[4] = {2.,4.,4.,2.};. TGraph *g2 = new TGraph(4,x2,y2);. h2pol->AddBin(g2);. h2pol->Fill(2.,3.,3);. h2pol->Draw(""axis""). ```. I get the following picture which clearly demonstrates it. ![c2](https://user-images.githubusercontent.com/55505042/112357745-ceab0280-8c9d-11eb-8167-3b3b2cd603bb.png). So if I draw h2pol with ""AXIS"" option, it is simply ignored, and a scatter plot is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7673
https://github.com/root-project/root/issues/7673:870,energy efficiency,Draw,Draw,870,"Please see https://root.cern/doc/master/classTHistPainter.html#HP20a AXIS option is not listed for TH2Poly. If I run your code example under ROOT 6.22/06 I get the attached figure. ![c1](https://user-images.githubusercontent.com/55505042/112357480-91467500-8c9d-11eb-9f04-4bbf630ecafe.png). As you can see, a frame is drawn around the bin. What happens in fact, and what is not seen, since the code example fills the histogram with a negative value, is that what is drawn is a scatter plot. If I extend the code as follows:. ```. TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);. Double_t x[4] = {0.,0.,2.,2.};. Double_t y[4] = {0.,2.,2.,0.};. TGraph *g = new TGraph(4,x,y);. h2pol->AddBin(g);. h2pol->Fill(1.,1.,-3);. Double_t x2[4] = {1.,1.,3.,3.};. Double_t y2[4] = {2.,4.,4.,2.};. TGraph *g2 = new TGraph(4,x2,y2);. h2pol->AddBin(g2);. h2pol->Fill(2.,3.,3);. h2pol->Draw(""axis""). ```. I get the following picture which clearly demonstrates it. ![c2](https://user-images.githubusercontent.com/55505042/112357745-ceab0280-8c9d-11eb-8167-3b3b2cd603bb.png). So if I draw h2pol with ""AXIS"" option, it is simply ignored, and a scatter plot is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7673
https://github.com/root-project/root/issues/7673:1066,energy efficiency,draw,draw,1066,"Please see https://root.cern/doc/master/classTHistPainter.html#HP20a AXIS option is not listed for TH2Poly. If I run your code example under ROOT 6.22/06 I get the attached figure. ![c1](https://user-images.githubusercontent.com/55505042/112357480-91467500-8c9d-11eb-9f04-4bbf630ecafe.png). As you can see, a frame is drawn around the bin. What happens in fact, and what is not seen, since the code example fills the histogram with a negative value, is that what is drawn is a scatter plot. If I extend the code as follows:. ```. TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);. Double_t x[4] = {0.,0.,2.,2.};. Double_t y[4] = {0.,2.,2.,0.};. TGraph *g = new TGraph(4,x,y);. h2pol->AddBin(g);. h2pol->Fill(1.,1.,-3);. Double_t x2[4] = {1.,1.,3.,3.};. Double_t y2[4] = {2.,4.,4.,2.};. TGraph *g2 = new TGraph(4,x2,y2);. h2pol->AddBin(g2);. h2pol->Fill(2.,3.,3);. h2pol->Draw(""axis""). ```. I get the following picture which clearly demonstrates it. ![c2](https://user-images.githubusercontent.com/55505042/112357745-ceab0280-8c9d-11eb-8167-3b3b2cd603bb.png). So if I draw h2pol with ""AXIS"" option, it is simply ignored, and a scatter plot is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7673
https://github.com/root-project/root/issues/7673:1141,energy efficiency,draw,drawn,1141,"Please see https://root.cern/doc/master/classTHistPainter.html#HP20a AXIS option is not listed for TH2Poly. If I run your code example under ROOT 6.22/06 I get the attached figure. ![c1](https://user-images.githubusercontent.com/55505042/112357480-91467500-8c9d-11eb-9f04-4bbf630ecafe.png). As you can see, a frame is drawn around the bin. What happens in fact, and what is not seen, since the code example fills the histogram with a negative value, is that what is drawn is a scatter plot. If I extend the code as follows:. ```. TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);. Double_t x[4] = {0.,0.,2.,2.};. Double_t y[4] = {0.,2.,2.,0.};. TGraph *g = new TGraph(4,x,y);. h2pol->AddBin(g);. h2pol->Fill(1.,1.,-3);. Double_t x2[4] = {1.,1.,3.,3.};. Double_t y2[4] = {2.,4.,4.,2.};. TGraph *g2 = new TGraph(4,x2,y2);. h2pol->AddBin(g2);. h2pol->Fill(2.,3.,3);. h2pol->Draw(""axis""). ```. I get the following picture which clearly demonstrates it. ![c2](https://user-images.githubusercontent.com/55505042/112357745-ceab0280-8c9d-11eb-8167-3b3b2cd603bb.png). So if I draw h2pol with ""AXIS"" option, it is simply ignored, and a scatter plot is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7673
https://github.com/root-project/root/issues/7673:496,modifiability,exten,extend,496,"Please see https://root.cern/doc/master/classTHistPainter.html#HP20a AXIS option is not listed for TH2Poly. If I run your code example under ROOT 6.22/06 I get the attached figure. ![c1](https://user-images.githubusercontent.com/55505042/112357480-91467500-8c9d-11eb-9f04-4bbf630ecafe.png). As you can see, a frame is drawn around the bin. What happens in fact, and what is not seen, since the code example fills the histogram with a negative value, is that what is drawn is a scatter plot. If I extend the code as follows:. ```. TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);. Double_t x[4] = {0.,0.,2.,2.};. Double_t y[4] = {0.,2.,2.,0.};. TGraph *g = new TGraph(4,x,y);. h2pol->AddBin(g);. h2pol->Fill(1.,1.,-3);. Double_t x2[4] = {1.,1.,3.,3.};. Double_t y2[4] = {2.,4.,4.,2.};. TGraph *g2 = new TGraph(4,x2,y2);. h2pol->AddBin(g2);. h2pol->Fill(2.,3.,3);. h2pol->Draw(""axis""). ```. I get the following picture which clearly demonstrates it. ![c2](https://user-images.githubusercontent.com/55505042/112357745-ceab0280-8c9d-11eb-8167-3b3b2cd603bb.png). So if I draw h2pol with ""AXIS"" option, it is simply ignored, and a scatter plot is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7673
https://github.com/root-project/root/issues/7673:1103,testability,simpl,simply,1103,"Please see https://root.cern/doc/master/classTHistPainter.html#HP20a AXIS option is not listed for TH2Poly. If I run your code example under ROOT 6.22/06 I get the attached figure. ![c1](https://user-images.githubusercontent.com/55505042/112357480-91467500-8c9d-11eb-9f04-4bbf630ecafe.png). As you can see, a frame is drawn around the bin. What happens in fact, and what is not seen, since the code example fills the histogram with a negative value, is that what is drawn is a scatter plot. If I extend the code as follows:. ```. TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);. Double_t x[4] = {0.,0.,2.,2.};. Double_t y[4] = {0.,2.,2.,0.};. TGraph *g = new TGraph(4,x,y);. h2pol->AddBin(g);. h2pol->Fill(1.,1.,-3);. Double_t x2[4] = {1.,1.,3.,3.};. Double_t y2[4] = {2.,4.,4.,2.};. TGraph *g2 = new TGraph(4,x2,y2);. h2pol->AddBin(g2);. h2pol->Fill(2.,3.,3);. h2pol->Draw(""axis""). ```. I get the following picture which clearly demonstrates it. ![c2](https://user-images.githubusercontent.com/55505042/112357745-ceab0280-8c9d-11eb-8167-3b3b2cd603bb.png). So if I draw h2pol with ""AXIS"" option, it is simply ignored, and a scatter plot is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7673
https://github.com/root-project/root/issues/7673:195,usability,user,user-images,195,"Please see https://root.cern/doc/master/classTHistPainter.html#HP20a AXIS option is not listed for TH2Poly. If I run your code example under ROOT 6.22/06 I get the attached figure. ![c1](https://user-images.githubusercontent.com/55505042/112357480-91467500-8c9d-11eb-9f04-4bbf630ecafe.png). As you can see, a frame is drawn around the bin. What happens in fact, and what is not seen, since the code example fills the histogram with a negative value, is that what is drawn is a scatter plot. If I extend the code as follows:. ```. TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);. Double_t x[4] = {0.,0.,2.,2.};. Double_t y[4] = {0.,2.,2.,0.};. TGraph *g = new TGraph(4,x,y);. h2pol->AddBin(g);. h2pol->Fill(1.,1.,-3);. Double_t x2[4] = {1.,1.,3.,3.};. Double_t y2[4] = {2.,4.,4.,2.};. TGraph *g2 = new TGraph(4,x2,y2);. h2pol->AddBin(g2);. h2pol->Fill(2.,3.,3);. h2pol->Draw(""axis""). ```. I get the following picture which clearly demonstrates it. ![c2](https://user-images.githubusercontent.com/55505042/112357745-ceab0280-8c9d-11eb-8167-3b3b2cd603bb.png). So if I draw h2pol with ""AXIS"" option, it is simply ignored, and a scatter plot is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7673
https://github.com/root-project/root/issues/7673:923,usability,clear,clearly,923,"Please see https://root.cern/doc/master/classTHistPainter.html#HP20a AXIS option is not listed for TH2Poly. If I run your code example under ROOT 6.22/06 I get the attached figure. ![c1](https://user-images.githubusercontent.com/55505042/112357480-91467500-8c9d-11eb-9f04-4bbf630ecafe.png). As you can see, a frame is drawn around the bin. What happens in fact, and what is not seen, since the code example fills the histogram with a negative value, is that what is drawn is a scatter plot. If I extend the code as follows:. ```. TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);. Double_t x[4] = {0.,0.,2.,2.};. Double_t y[4] = {0.,2.,2.,0.};. TGraph *g = new TGraph(4,x,y);. h2pol->AddBin(g);. h2pol->Fill(1.,1.,-3);. Double_t x2[4] = {1.,1.,3.,3.};. Double_t y2[4] = {2.,4.,4.,2.};. TGraph *g2 = new TGraph(4,x2,y2);. h2pol->AddBin(g2);. h2pol->Fill(2.,3.,3);. h2pol->Draw(""axis""). ```. I get the following picture which clearly demonstrates it. ![c2](https://user-images.githubusercontent.com/55505042/112357745-ceab0280-8c9d-11eb-8167-3b3b2cd603bb.png). So if I draw h2pol with ""AXIS"" option, it is simply ignored, and a scatter plot is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7673
https://github.com/root-project/root/issues/7673:962,usability,user,user-images,962,"Please see https://root.cern/doc/master/classTHistPainter.html#HP20a AXIS option is not listed for TH2Poly. If I run your code example under ROOT 6.22/06 I get the attached figure. ![c1](https://user-images.githubusercontent.com/55505042/112357480-91467500-8c9d-11eb-9f04-4bbf630ecafe.png). As you can see, a frame is drawn around the bin. What happens in fact, and what is not seen, since the code example fills the histogram with a negative value, is that what is drawn is a scatter plot. If I extend the code as follows:. ```. TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);. Double_t x[4] = {0.,0.,2.,2.};. Double_t y[4] = {0.,2.,2.,0.};. TGraph *g = new TGraph(4,x,y);. h2pol->AddBin(g);. h2pol->Fill(1.,1.,-3);. Double_t x2[4] = {1.,1.,3.,3.};. Double_t y2[4] = {2.,4.,4.,2.};. TGraph *g2 = new TGraph(4,x2,y2);. h2pol->AddBin(g2);. h2pol->Fill(2.,3.,3);. h2pol->Draw(""axis""). ```. I get the following picture which clearly demonstrates it. ![c2](https://user-images.githubusercontent.com/55505042/112357745-ceab0280-8c9d-11eb-8167-3b3b2cd603bb.png). So if I draw h2pol with ""AXIS"" option, it is simply ignored, and a scatter plot is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7673
https://github.com/root-project/root/issues/7673:1103,usability,simpl,simply,1103,"Please see https://root.cern/doc/master/classTHistPainter.html#HP20a AXIS option is not listed for TH2Poly. If I run your code example under ROOT 6.22/06 I get the attached figure. ![c1](https://user-images.githubusercontent.com/55505042/112357480-91467500-8c9d-11eb-9f04-4bbf630ecafe.png). As you can see, a frame is drawn around the bin. What happens in fact, and what is not seen, since the code example fills the histogram with a negative value, is that what is drawn is a scatter plot. If I extend the code as follows:. ```. TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);. Double_t x[4] = {0.,0.,2.,2.};. Double_t y[4] = {0.,2.,2.,0.};. TGraph *g = new TGraph(4,x,y);. h2pol->AddBin(g);. h2pol->Fill(1.,1.,-3);. Double_t x2[4] = {1.,1.,3.,3.};. Double_t y2[4] = {2.,4.,4.,2.};. TGraph *g2 = new TGraph(4,x2,y2);. h2pol->AddBin(g2);. h2pol->Fill(2.,3.,3);. h2pol->Draw(""axis""). ```. I get the following picture which clearly demonstrates it. ![c2](https://user-images.githubusercontent.com/55505042/112357745-ceab0280-8c9d-11eb-8167-3b3b2cd603bb.png). So if I draw h2pol with ""AXIS"" option, it is simply ignored, and a scatter plot is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7673
https://github.com/root-project/root/issues/7678:88,deployability,build,build,88,"This behaviour is understood (discussed already with @stwunsch). In a multi-python ROOT build, `TPython` is only compiled for the highest Python (i.e. Python3) and therefore it can only be used from that Python. The situation reported here only happens when using `TPython` from Python2 in a multi-python ROOT build, since `TPython` will trigger the loading of `libcppyy3_X` and `libcppyy_backend3_X`, thus causing the redefinition of symbols.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7678
https://github.com/root-project/root/issues/7678:310,deployability,build,build,310,"This behaviour is understood (discussed already with @stwunsch). In a multi-python ROOT build, `TPython` is only compiled for the highest Python (i.e. Python3) and therefore it can only be used from that Python. The situation reported here only happens when using `TPython` from Python2 in a multi-python ROOT build, since `TPython` will trigger the loading of `libcppyy3_X` and `libcppyy_backend3_X`, thus causing the redefinition of symbols.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7678
https://github.com/root-project/root/issues/7678:350,energy efficiency,load,loading,350,"This behaviour is understood (discussed already with @stwunsch). In a multi-python ROOT build, `TPython` is only compiled for the highest Python (i.e. Python3) and therefore it can only be used from that Python. The situation reported here only happens when using `TPython` from Python2 in a multi-python ROOT build, since `TPython` will trigger the loading of `libcppyy3_X` and `libcppyy_backend3_X`, thus causing the redefinition of symbols.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7678
https://github.com/root-project/root/issues/7678:350,performance,load,loading,350,"This behaviour is understood (discussed already with @stwunsch). In a multi-python ROOT build, `TPython` is only compiled for the highest Python (i.e. Python3) and therefore it can only be used from that Python. The situation reported here only happens when using `TPython` from Python2 in a multi-python ROOT build, since `TPython` will trigger the loading of `libcppyy3_X` and `libcppyy_backend3_X`, thus causing the redefinition of symbols.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7678
https://github.com/root-project/root/issues/7678:5,usability,behavi,behaviour,5,"This behaviour is understood (discussed already with @stwunsch). In a multi-python ROOT build, `TPython` is only compiled for the highest Python (i.e. Python3) and therefore it can only be used from that Python. The situation reported here only happens when using `TPython` from Python2 in a multi-python ROOT build, since `TPython` will trigger the loading of `libcppyy3_X` and `libcppyy_backend3_X`, thus causing the redefinition of symbols.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7678
https://github.com/root-project/root/pull/7679:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7679
https://github.com/root-project/root/pull/7680:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7680
https://github.com/root-project/root/pull/7680:58,availability,slo,slow,58,All green except infrastructure problems on windows and a slow mac 11 node that is not done yet. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7680
https://github.com/root-project/root/pull/7680:17,deployability,infrastructur,infrastructure,17,All green except infrastructure problems on windows and a slow mac 11 node that is not done yet. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7680
https://github.com/root-project/root/pull/7680:4,energy efficiency,green,green,4,All green except infrastructure problems on windows and a slow mac 11 node that is not done yet. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7680
https://github.com/root-project/root/pull/7680:58,reliability,slo,slow,58,All green except infrastructure problems on windows and a slow mac 11 node that is not done yet. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7680
https://github.com/root-project/root/pull/7680:10,safety,except,except,10,All green except infrastructure problems on windows and a slow mac 11 node that is not done yet. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7680
https://github.com/root-project/root/pull/7683:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7683
https://github.com/root-project/root/pull/7683:280,deployability,releas,releases,280,"Hi, thank you very much Will! This makes sense to me, I will approve this PR tomorrow when the tests pass and merge if @lmoneta and @hageboeck don't have anything to say against this PR. I can make a backport to 6.24 for sure. Would you benefit if this goes into even older point releases?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7683
https://github.com/root-project/root/pull/7683:95,safety,test,tests,95,"Hi, thank you very much Will! This makes sense to me, I will approve this PR tomorrow when the tests pass and merge if @lmoneta and @hageboeck don't have anything to say against this PR. I can make a backport to 6.24 for sure. Would you benefit if this goes into even older point releases?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7683
https://github.com/root-project/root/pull/7683:95,testability,test,tests,95,"Hi, thank you very much Will! This makes sense to me, I will approve this PR tomorrow when the tests pass and merge if @lmoneta and @hageboeck don't have anything to say against this PR. I can make a backport to 6.24 for sure. Would you benefit if this goes into even older point releases?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7683
https://github.com/root-project/root/issues/7684:425,availability,restor,restored,425,"OK, I created an implementation of a non-blocking equivalent. I'm sure there are some bugs:. [This notebook](https://github.com/root-project/root/files/6205495/io-handler-fast.ipynb.txt) uses a thread-based trampoline to execute the various blocking waits without interrupting the kernel. The results are displayed asynchronously using the ZMQ event loop (used by the kernel), and the executing cell's context is temporarily restored to ensure results end up (visually) in the right place. Clearly this would need some more work to replace the existing contents of `JupyROOT.helpers.utils`, but I hope that it's a starting point for discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:315,integrability,asynchron,asynchronously,315,"OK, I created an implementation of a non-blocking equivalent. I'm sure there are some bugs:. [This notebook](https://github.com/root-project/root/files/6205495/io-handler-fast.ipynb.txt) uses a thread-based trampoline to execute the various blocking waits without interrupting the kernel. The results are displayed asynchronously using the ZMQ event loop (used by the kernel), and the executing cell's context is temporarily restored to ensure results end up (visually) in the right place. Clearly this would need some more work to replace the existing contents of `JupyROOT.helpers.utils`, but I hope that it's a starting point for discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:344,integrability,event,event,344,"OK, I created an implementation of a non-blocking equivalent. I'm sure there are some bugs:. [This notebook](https://github.com/root-project/root/files/6205495/io-handler-fast.ipynb.txt) uses a thread-based trampoline to execute the various blocking waits without interrupting the kernel. The results are displayed asynchronously using the ZMQ event loop (used by the kernel), and the executing cell's context is temporarily restored to ensure results end up (visually) in the right place. Clearly this would need some more work to replace the existing contents of `JupyROOT.helpers.utils`, but I hope that it's a starting point for discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:315,performance,asynch,asynchronously,315,"OK, I created an implementation of a non-blocking equivalent. I'm sure there are some bugs:. [This notebook](https://github.com/root-project/root/files/6205495/io-handler-fast.ipynb.txt) uses a thread-based trampoline to execute the various blocking waits without interrupting the kernel. The results are displayed asynchronously using the ZMQ event loop (used by the kernel), and the executing cell's context is temporarily restored to ensure results end up (visually) in the right place. Clearly this would need some more work to replace the existing contents of `JupyROOT.helpers.utils`, but I hope that it's a starting point for discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:553,performance,content,contents,553,"OK, I created an implementation of a non-blocking equivalent. I'm sure there are some bugs:. [This notebook](https://github.com/root-project/root/files/6205495/io-handler-fast.ipynb.txt) uses a thread-based trampoline to execute the various blocking waits without interrupting the kernel. The results are displayed asynchronously using the ZMQ event loop (used by the kernel), and the executing cell's context is temporarily restored to ensure results end up (visually) in the right place. Clearly this would need some more work to replace the existing contents of `JupyROOT.helpers.utils`, but I hope that it's a starting point for discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:425,reliability,restor,restored,425,"OK, I created an implementation of a non-blocking equivalent. I'm sure there are some bugs:. [This notebook](https://github.com/root-project/root/files/6205495/io-handler-fast.ipynb.txt) uses a thread-based trampoline to execute the various blocking waits without interrupting the kernel. The results are displayed asynchronously using the ZMQ event loop (used by the kernel), and the executing cell's context is temporarily restored to ensure results end up (visually) in the right place. Clearly this would need some more work to replace the existing contents of `JupyROOT.helpers.utils`, but I hope that it's a starting point for discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:402,testability,context,context,402,"OK, I created an implementation of a non-blocking equivalent. I'm sure there are some bugs:. [This notebook](https://github.com/root-project/root/files/6205495/io-handler-fast.ipynb.txt) uses a thread-based trampoline to execute the various blocking waits without interrupting the kernel. The results are displayed asynchronously using the ZMQ event loop (used by the kernel), and the executing cell's context is temporarily restored to ensure results end up (visually) in the right place. Clearly this would need some more work to replace the existing contents of `JupyROOT.helpers.utils`, but I hope that it's a starting point for discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:460,usability,visual,visually,460,"OK, I created an implementation of a non-blocking equivalent. I'm sure there are some bugs:. [This notebook](https://github.com/root-project/root/files/6205495/io-handler-fast.ipynb.txt) uses a thread-based trampoline to execute the various blocking waits without interrupting the kernel. The results are displayed asynchronously using the ZMQ event loop (used by the kernel), and the executing cell's context is temporarily restored to ensure results end up (visually) in the right place. Clearly this would need some more work to replace the existing contents of `JupyROOT.helpers.utils`, but I hope that it's a starting point for discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:490,usability,Clear,Clearly,490,"OK, I created an implementation of a non-blocking equivalent. I'm sure there are some bugs:. [This notebook](https://github.com/root-project/root/files/6205495/io-handler-fast.ipynb.txt) uses a thread-based trampoline to execute the various blocking waits without interrupting the kernel. The results are displayed asynchronously using the ZMQ event loop (used by the kernel), and the executing cell's context is temporarily restored to ensure results end up (visually) in the right place. Clearly this would need some more work to replace the existing contents of `JupyROOT.helpers.utils`, but I hope that it's a starting point for discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:575,usability,help,helpers,575,"OK, I created an implementation of a non-blocking equivalent. I'm sure there are some bugs:. [This notebook](https://github.com/root-project/root/files/6205495/io-handler-fast.ipynb.txt) uses a thread-based trampoline to execute the various blocking waits without interrupting the kernel. The results are displayed asynchronously using the ZMQ event loop (used by the kernel), and the executing cell's context is temporarily restored to ensure results end up (visually) in the right place. Clearly this would need some more work to replace the existing contents of `JupyROOT.helpers.utils`, but I hope that it's a starting point for discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:295,deployability,patch,patched,295,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:352,integrability,messag,messages,352,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:365,integrability,buffer,buffered,365,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:15,interoperability,bind,binder,15,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:28,interoperability,Bind,Binder,28,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:220,interoperability,coordinat,coordinates,220,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:352,interoperability,messag,messages,352,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:15,modifiability,bind,binder,15,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:28,modifiability,Bind,Binder,28,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:338,performance,time,time,338,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:295,safety,patch,patched,295,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:313,safety,input,input,313,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:295,security,patch,patched,295,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:3,usability,interact,interactive,3,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:239,usability,statu,status-bar,239,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:257,usability,cursor,cursor,257,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:313,usability,input,input,313,"An interactive binder: . [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/7e9a8c146a7dc68c87f47678d1f2e51c/HEAD?urlpath=%2Flab). Run all cells in each notebook, and then look at the coordinates in the status-bar as the cursor moves over the plot. In the un-patched case, the input lag increases with time (as more messages are buffered behind the calls to `sleep`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:39,modifiability,extens,extensive,39,@agoose77 thank you very much for this extensive research you did! Do you think you could apply this to `JupyROOT.helpers.utils`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7684:114,usability,help,helpers,114,@agoose77 thank you very much for this extensive research you did! Do you think you could apply this to `JupyROOT.helpers.utils`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7684
https://github.com/root-project/root/issues/7685:10,testability,simpl,simple,10,Is this a simple pythonisation or do we need something more?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7685
https://github.com/root-project/root/issues/7685:10,usability,simpl,simple,10,Is this a simple pythonisation or do we need something more?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7685
https://github.com/root-project/root/issues/7686:538,availability,operat,operator,538,"Another reproducer pointing in the same direction is here. The iteration over the vector class fails because the `size` method is not picked up from the base class:. ```python. import ROOT. ROOT.gInterpreter.Declare('''. struct Base {. std::vector<float> data;. int size() { return data.size(); }. };. struct Vec : public Base {. // using Base::size; // comment in this line to fix the iteration! void push_back(float x) { data.push_back(x); }. float* begin() { return &data[0]; }. float* end() { return &data[data.size() - 1]; }. float& operator[](int idx) { return data[idx]; }. void print() { for (auto x : data) std::cout << x << std::endl; }. };. '''). v = ROOT.Vec(). for i in [42, 43, 44]:. v.push_back(i). v.print(). c = 0. for x in v:. print(c, x). if c > 10:. raise Exception('Iteration failed!'). c += 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7686
https://github.com/root-project/root/issues/7686:95,deployability,fail,fails,95,"Another reproducer pointing in the same direction is here. The iteration over the vector class fails because the `size` method is not picked up from the base class:. ```python. import ROOT. ROOT.gInterpreter.Declare('''. struct Base {. std::vector<float> data;. int size() { return data.size(); }. };. struct Vec : public Base {. // using Base::size; // comment in this line to fix the iteration! void push_back(float x) { data.push_back(x); }. float* begin() { return &data[0]; }. float* end() { return &data[data.size() - 1]; }. float& operator[](int idx) { return data[idx]; }. void print() { for (auto x : data) std::cout << x << std::endl; }. };. '''). v = ROOT.Vec(). for i in [42, 43, 44]:. v.push_back(i). v.print(). c = 0. for x in v:. print(c, x). if c > 10:. raise Exception('Iteration failed!'). c += 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7686
https://github.com/root-project/root/issues/7686:797,deployability,fail,failed,797,"Another reproducer pointing in the same direction is here. The iteration over the vector class fails because the `size` method is not picked up from the base class:. ```python. import ROOT. ROOT.gInterpreter.Declare('''. struct Base {. std::vector<float> data;. int size() { return data.size(); }. };. struct Vec : public Base {. // using Base::size; // comment in this line to fix the iteration! void push_back(float x) { data.push_back(x); }. float* begin() { return &data[0]; }. float* end() { return &data[data.size() - 1]; }. float& operator[](int idx) { return data[idx]; }. void print() { for (auto x : data) std::cout << x << std::endl; }. };. '''). v = ROOT.Vec(). for i in [42, 43, 44]:. v.push_back(i). v.print(). c = 0. for x in v:. print(c, x). if c > 10:. raise Exception('Iteration failed!'). c += 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7686
https://github.com/root-project/root/issues/7686:315,integrability,pub,public,315,"Another reproducer pointing in the same direction is here. The iteration over the vector class fails because the `size` method is not picked up from the base class:. ```python. import ROOT. ROOT.gInterpreter.Declare('''. struct Base {. std::vector<float> data;. int size() { return data.size(); }. };. struct Vec : public Base {. // using Base::size; // comment in this line to fix the iteration! void push_back(float x) { data.push_back(x); }. float* begin() { return &data[0]; }. float* end() { return &data[data.size() - 1]; }. float& operator[](int idx) { return data[idx]; }. void print() { for (auto x : data) std::cout << x << std::endl; }. };. '''). v = ROOT.Vec(). for i in [42, 43, 44]:. v.push_back(i). v.print(). c = 0. for x in v:. print(c, x). if c > 10:. raise Exception('Iteration failed!'). c += 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7686
https://github.com/root-project/root/issues/7686:95,reliability,fail,fails,95,"Another reproducer pointing in the same direction is here. The iteration over the vector class fails because the `size` method is not picked up from the base class:. ```python. import ROOT. ROOT.gInterpreter.Declare('''. struct Base {. std::vector<float> data;. int size() { return data.size(); }. };. struct Vec : public Base {. // using Base::size; // comment in this line to fix the iteration! void push_back(float x) { data.push_back(x); }. float* begin() { return &data[0]; }. float* end() { return &data[data.size() - 1]; }. float& operator[](int idx) { return data[idx]; }. void print() { for (auto x : data) std::cout << x << std::endl; }. };. '''). v = ROOT.Vec(). for i in [42, 43, 44]:. v.push_back(i). v.print(). c = 0. for x in v:. print(c, x). if c > 10:. raise Exception('Iteration failed!'). c += 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7686
https://github.com/root-project/root/issues/7686:797,reliability,fail,failed,797,"Another reproducer pointing in the same direction is here. The iteration over the vector class fails because the `size` method is not picked up from the base class:. ```python. import ROOT. ROOT.gInterpreter.Declare('''. struct Base {. std::vector<float> data;. int size() { return data.size(); }. };. struct Vec : public Base {. // using Base::size; // comment in this line to fix the iteration! void push_back(float x) { data.push_back(x); }. float* begin() { return &data[0]; }. float* end() { return &data[data.size() - 1]; }. float& operator[](int idx) { return data[idx]; }. void print() { for (auto x : data) std::cout << x << std::endl; }. };. '''). v = ROOT.Vec(). for i in [42, 43, 44]:. v.push_back(i). v.print(). c = 0. for x in v:. print(c, x). if c > 10:. raise Exception('Iteration failed!'). c += 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7686
https://github.com/root-project/root/issues/7686:776,safety,Except,Exception,776,"Another reproducer pointing in the same direction is here. The iteration over the vector class fails because the `size` method is not picked up from the base class:. ```python. import ROOT. ROOT.gInterpreter.Declare('''. struct Base {. std::vector<float> data;. int size() { return data.size(); }. };. struct Vec : public Base {. // using Base::size; // comment in this line to fix the iteration! void push_back(float x) { data.push_back(x); }. float* begin() { return &data[0]; }. float* end() { return &data[data.size() - 1]; }. float& operator[](int idx) { return data[idx]; }. void print() { for (auto x : data) std::cout << x << std::endl; }. };. '''). v = ROOT.Vec(). for i in [42, 43, 44]:. v.push_back(i). v.print(). c = 0. for x in v:. print(c, x). if c > 10:. raise Exception('Iteration failed!'). c += 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7686
https://github.com/root-project/root/issues/7686:91,deployability,upgrad,upgrade,91,To be checked with the latest cppyy in the first place. Perhaps this will be fixed once we upgrade.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7686
https://github.com/root-project/root/issues/7686:91,modifiability,upgrad,upgrade,91,To be checked with the latest cppyy in the first place. Perhaps this will be fixed once we upgrade.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7686
https://github.com/root-project/root/issues/7686:47,deployability,updat,update,47,"Indeed, this will be fixed with the `CPyCppyy` update.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7686
https://github.com/root-project/root/issues/7686:47,safety,updat,update,47,"Indeed, this will be fixed with the `CPyCppyy` update.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7686
https://github.com/root-project/root/issues/7686:47,security,updat,update,47,"Indeed, this will be fixed with the `CPyCppyy` update.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7686
https://github.com/root-project/root/pull/7687:32,interoperability,platform,platforms,32,"Uhm, why it doesn't work on all platforms? üòì",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:12,reliability,doe,doesn,12,"Uhm, why it doesn't work on all platforms? üòì",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:216,availability,sli,slipped,216,"> What are your arguments for inclusion into 6.24/00 - do you think it's better to have it in? It was originally marked as blocker for 6.22 because it's a backwards incompatible change wrt the old pyroot. It kind of slipped through, I think :/ But since there were not any users complaining, pushing it more to the top of the priority list for the next release should also be fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:353,deployability,releas,release,353,"> What are your arguments for inclusion into 6.24/00 - do you think it's better to have it in? It was originally marked as blocker for 6.22 because it's a backwards incompatible change wrt the old pyroot. It kind of slipped through, I think :/ But since there were not any users complaining, pushing it more to the top of the priority list for the next release should also be fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:165,interoperability,incompatib,incompatible,165,"> What are your arguments for inclusion into 6.24/00 - do you think it's better to have it in? It was originally marked as blocker for 6.22 because it's a backwards incompatible change wrt the old pyroot. It kind of slipped through, I think :/ But since there were not any users complaining, pushing it more to the top of the priority list for the next release should also be fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:216,reliability,sli,slipped,216,"> What are your arguments for inclusion into 6.24/00 - do you think it's better to have it in? It was originally marked as blocker for 6.22 because it's a backwards incompatible change wrt the old pyroot. It kind of slipped through, I think :/ But since there were not any users complaining, pushing it more to the top of the priority list for the next release should also be fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:279,safety,compl,complaining,279,"> What are your arguments for inclusion into 6.24/00 - do you think it's better to have it in? It was originally marked as blocker for 6.22 because it's a backwards incompatible change wrt the old pyroot. It kind of slipped through, I think :/ But since there were not any users complaining, pushing it more to the top of the priority list for the next release should also be fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:279,security,compl,complaining,279,"> What are your arguments for inclusion into 6.24/00 - do you think it's better to have it in? It was originally marked as blocker for 6.22 because it's a backwards incompatible change wrt the old pyroot. It kind of slipped through, I think :/ But since there were not any users complaining, pushing it more to the top of the priority list for the next release should also be fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:273,usability,user,users,273,"> What are your arguments for inclusion into 6.24/00 - do you think it's better to have it in? It was originally marked as blocker for 6.22 because it's a backwards incompatible change wrt the old pyroot. It kind of slipped through, I think :/ But since there were not any users complaining, pushing it more to the top of the priority list for the next release should also be fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:192,performance,time,time,192,"Oh I see - this was about the bug, not this PR. Well - that's a visible, existing, long-standing limitation. It won't be a blocker for 6.24 simply because I expect to not be able to fix it in time...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:140,testability,simpl,simply,140,"Oh I see - this was about the bug, not this PR. Well - that's a visible, existing, long-standing limitation. It won't be a blocker for 6.24 simply because I expect to not be able to fix it in time...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:140,usability,simpl,simply,140,"Oh I see - this was about the bug, not this PR. Well - that's a visible, existing, long-standing limitation. It won't be a blocker for 6.24 simply because I expect to not be able to fix it in time...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:68,safety,test,test,68,"> @stwunsch do we keep this PR or #5361 ? We keep both :) The other test checks the usage of the ROOT namespace implicitly (so not ROOT.ROOT.RDataFrame but just ROOT.RDataFrame). That RVec was part of this there was just by chance. I think testing this ""feature"" explicitly in the RVec tests is a good idea from the documentation point of view.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:240,safety,test,testing,240,"> @stwunsch do we keep this PR or #5361 ? We keep both :) The other test checks the usage of the ROOT namespace implicitly (so not ROOT.ROOT.RDataFrame but just ROOT.RDataFrame). That RVec was part of this there was just by chance. I think testing this ""feature"" explicitly in the RVec tests is a good idea from the documentation point of view.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:286,safety,test,tests,286,"> @stwunsch do we keep this PR or #5361 ? We keep both :) The other test checks the usage of the ROOT namespace implicitly (so not ROOT.ROOT.RDataFrame but just ROOT.RDataFrame). That RVec was part of this there was just by chance. I think testing this ""feature"" explicitly in the RVec tests is a good idea from the documentation point of view.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:68,testability,test,test,68,"> @stwunsch do we keep this PR or #5361 ? We keep both :) The other test checks the usage of the ROOT namespace implicitly (so not ROOT.ROOT.RDataFrame but just ROOT.RDataFrame). That RVec was part of this there was just by chance. I think testing this ""feature"" explicitly in the RVec tests is a good idea from the documentation point of view.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:240,testability,test,testing,240,"> @stwunsch do we keep this PR or #5361 ? We keep both :) The other test checks the usage of the ROOT namespace implicitly (so not ROOT.ROOT.RDataFrame but just ROOT.RDataFrame). That RVec was part of this there was just by chance. I think testing this ""feature"" explicitly in the RVec tests is a good idea from the documentation point of view.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:286,testability,test,tests,286,"> @stwunsch do we keep this PR or #5361 ? We keep both :) The other test checks the usage of the ROOT namespace implicitly (so not ROOT.ROOT.RDataFrame but just ROOT.RDataFrame). That RVec was part of this there was just by chance. I think testing this ""feature"" explicitly in the RVec tests is a good idea from the documentation point of view.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:316,usability,document,documentation,316,"> @stwunsch do we keep this PR or #5361 ? We keep both :) The other test checks the usage of the ROOT namespace implicitly (so not ROOT.ROOT.RDataFrame but just ROOT.RDataFrame). That RVec was part of this there was just by chance. I think testing this ""feature"" explicitly in the RVec tests is a good idea from the documentation point of view.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:97,deployability,patch,patch,97,@stwunsch maybe making this a draft or adding a `[WIP]` would help reminding us that even if the patch itself is ok this is not ready to be merged,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:97,safety,patch,patch,97,@stwunsch maybe making this a draft or adding a `[WIP]` would help reminding us that even if the patch itself is ok this is not ready to be merged,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:97,security,patch,patch,97,@stwunsch maybe making this a draft or adding a `[WIP]` would help reminding us that even if the patch itself is ok this is not ready to be merged,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:62,usability,help,help,62,@stwunsch maybe making this a draft or adding a `[WIP]` would help reminding us that even if the patch itself is ok this is not ready to be merged,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:117,deployability,depend,depend,117,This is analogous to this other PR with similar tests:. https://github.com/root-project/root/pull/5361. Both of them depend on https://sft.its.cern.ch/jira/browse/ROOT-10688 being fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:117,integrability,depend,depend,117,This is analogous to this other PR with similar tests:. https://github.com/root-project/root/pull/5361. Both of them depend on https://sft.its.cern.ch/jira/browse/ROOT-10688 being fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:117,modifiability,depend,depend,117,This is analogous to this other PR with similar tests:. https://github.com/root-project/root/pull/5361. Both of them depend on https://sft.its.cern.ch/jira/browse/ROOT-10688 being fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:48,safety,test,tests,48,This is analogous to this other PR with similar tests:. https://github.com/root-project/root/pull/5361. Both of them depend on https://sft.its.cern.ch/jira/browse/ROOT-10688 being fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:117,safety,depend,depend,117,This is analogous to this other PR with similar tests:. https://github.com/root-project/root/pull/5361. Both of them depend on https://sft.its.cern.ch/jira/browse/ROOT-10688 being fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:48,testability,test,tests,48,This is analogous to this other PR with similar tests:. https://github.com/root-project/root/pull/5361. Both of them depend on https://sft.its.cern.ch/jira/browse/ROOT-10688 being fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:117,testability,depend,depend,117,This is analogous to this other PR with similar tests:. https://github.com/root-project/root/pull/5361. Both of them depend on https://sft.its.cern.ch/jira/browse/ROOT-10688 being fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:96,security,expir,expired,96,"This can be merged now, because the ROOT-10688 that blocked this PR is now closed (or rather it expired because the problem was only present for C++14 or lower, which we don't support anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:75,usability,close,closed,75,"This can be merged now, because the ROOT-10688 that blocked this PR is now closed (or rather it expired because the problem was only present for C++14 or lower, which we don't support anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7687:176,usability,support,support,176,"This can be merged now, because the ROOT-10688 that blocked this PR is now closed (or rather it expired because the problem was only present for C++14 or lower, which we don't support anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687
https://github.com/root-project/root/pull/7689:15,deployability,build,build,15,"Aborted the PR build, should have used ""skip-ci""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7689
https://github.com/root-project/root/issues/7692:89,modifiability,inherit,inherited,89,"Same problem exists in pyroot_lagcy/src/TMethodHolder.cxx,. seems to be same problem was inherited into new code",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7692
https://github.com/root-project/root/pull/7695:89,modifiability,inherit,inherited,89,"Same problem exists in pyroot_lagcy/src/TMethodHolder.cxx,. seems to be same problem was inherited into new code",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7695
https://github.com/root-project/root/issues/7697:100,modifiability,concern,concerns,100,"I have created a PR that addresses this request. However, after some more consideration, I have two concerns:. - With this change, we would have both the PascalCase naming and the lowercase naming, which could lead to more confusion rather than clarification. Also, what about other RVec methods such as `size` and `at`? These are still lowercase only. - While PascalCase aligns with the naming conventions of ROOT, it seems like lowercase naming was an intentional choice for RVec to make RVec a drop-in replacement for std::vector (see https://github.com/root-project/root/blob/b8e267afe416700024c63667f06b0408c6704bac/math/vecops/inc/ROOT/RVec.hxx#L1350). So should we stick to lowercase instead?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7697
https://github.com/root-project/root/issues/7697:100,testability,concern,concerns,100,"I have created a PR that addresses this request. However, after some more consideration, I have two concerns:. - With this change, we would have both the PascalCase naming and the lowercase naming, which could lead to more confusion rather than clarification. Also, what about other RVec methods such as `size` and `at`? These are still lowercase only. - While PascalCase aligns with the naming conventions of ROOT, it seems like lowercase naming was an intentional choice for RVec to make RVec a drop-in replacement for std::vector (see https://github.com/root-project/root/blob/b8e267afe416700024c63667f06b0408c6704bac/math/vecops/inc/ROOT/RVec.hxx#L1350). So should we stick to lowercase instead?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7697
https://github.com/root-project/root/issues/7697:127,deployability,version,version,127,"This issue was brought up for discussion within the team. As things currently stand, the benefits of introducing the uppercase version of these function in the `VecOps` namespace is not clear. The decision is to close this issue for now, if more users will identify this as a blocker for their use cases then we can reassess the decision. Thanks a lot @jolly-chen for taking the time to address this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7697
https://github.com/root-project/root/issues/7697:68,energy efficiency,current,currently,68,"This issue was brought up for discussion within the team. As things currently stand, the benefits of introducing the uppercase version of these function in the `VecOps` namespace is not clear. The decision is to close this issue for now, if more users will identify this as a blocker for their use cases then we can reassess the decision. Thanks a lot @jolly-chen for taking the time to address this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7697
https://github.com/root-project/root/issues/7697:127,integrability,version,version,127,"This issue was brought up for discussion within the team. As things currently stand, the benefits of introducing the uppercase version of these function in the `VecOps` namespace is not clear. The decision is to close this issue for now, if more users will identify this as a blocker for their use cases then we can reassess the decision. Thanks a lot @jolly-chen for taking the time to address this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7697
https://github.com/root-project/root/issues/7697:127,modifiability,version,version,127,"This issue was brought up for discussion within the team. As things currently stand, the benefits of introducing the uppercase version of these function in the `VecOps` namespace is not clear. The decision is to close this issue for now, if more users will identify this as a blocker for their use cases then we can reassess the decision. Thanks a lot @jolly-chen for taking the time to address this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7697
https://github.com/root-project/root/issues/7697:379,performance,time,time,379,"This issue was brought up for discussion within the team. As things currently stand, the benefits of introducing the uppercase version of these function in the `VecOps` namespace is not clear. The decision is to close this issue for now, if more users will identify this as a blocker for their use cases then we can reassess the decision. Thanks a lot @jolly-chen for taking the time to address this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7697
https://github.com/root-project/root/issues/7697:52,security,team,team,52,"This issue was brought up for discussion within the team. As things currently stand, the benefits of introducing the uppercase version of these function in the `VecOps` namespace is not clear. The decision is to close this issue for now, if more users will identify this as a blocker for their use cases then we can reassess the decision. Thanks a lot @jolly-chen for taking the time to address this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7697
https://github.com/root-project/root/issues/7697:257,security,ident,identify,257,"This issue was brought up for discussion within the team. As things currently stand, the benefits of introducing the uppercase version of these function in the `VecOps` namespace is not clear. The decision is to close this issue for now, if more users will identify this as a blocker for their use cases then we can reassess the decision. Thanks a lot @jolly-chen for taking the time to address this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7697
https://github.com/root-project/root/issues/7697:186,usability,clear,clear,186,"This issue was brought up for discussion within the team. As things currently stand, the benefits of introducing the uppercase version of these function in the `VecOps` namespace is not clear. The decision is to close this issue for now, if more users will identify this as a blocker for their use cases then we can reassess the decision. Thanks a lot @jolly-chen for taking the time to address this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7697
https://github.com/root-project/root/issues/7697:212,usability,close,close,212,"This issue was brought up for discussion within the team. As things currently stand, the benefits of introducing the uppercase version of these function in the `VecOps` namespace is not clear. The decision is to close this issue for now, if more users will identify this as a blocker for their use cases then we can reassess the decision. Thanks a lot @jolly-chen for taking the time to address this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7697
https://github.com/root-project/root/issues/7697:246,usability,user,users,246,"This issue was brought up for discussion within the team. As things currently stand, the benefits of introducing the uppercase version of these function in the `VecOps` namespace is not clear. The decision is to close this issue for now, if more users will identify this as a blocker for their use cases then we can reassess the decision. Thanks a lot @jolly-chen for taking the time to address this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7697
https://github.com/root-project/root/pull/7698:11,deployability,build,build,11,@phsft-bot build just on mac11.0/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:20,deployability,configurat,configuration,20,It appears that the configuration option `pyspark.spark.python` is somehow ineffective and Spark really only cares about the environment variable `PYSPARK_PYTHON` https://issues.apache.org/jira/browse/SPARK-26404 . This is a bummer...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:20,integrability,configur,configuration,20,It appears that the configuration option `pyspark.spark.python` is somehow ineffective and Spark really only cares about the environment variable `PYSPARK_PYTHON` https://issues.apache.org/jira/browse/SPARK-26404 . This is a bummer...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:20,modifiability,configur,configuration,20,It appears that the configuration option `pyspark.spark.python` is somehow ineffective and Spark really only cares about the environment variable `PYSPARK_PYTHON` https://issues.apache.org/jira/browse/SPARK-26404 . This is a bummer...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:137,modifiability,variab,variable,137,It appears that the configuration option `pyspark.spark.python` is somehow ineffective and Spark really only cares about the environment variable `PYSPARK_PYTHON` https://issues.apache.org/jira/browse/SPARK-26404 . This is a bummer...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:20,security,configur,configuration,20,It appears that the configuration option `pyspark.spark.python` is somehow ineffective and Spark really only cares about the environment variable `PYSPARK_PYTHON` https://issues.apache.org/jira/browse/SPARK-26404 . This is a bummer...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:11,deployability,build,build,11,@phsft-bot build just on mac11.0/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:242,availability,servic,services,242,"The latest commit fixes the PYSPARK_PYTHON issue by setting the environment variable in the ctest invocation, tutorial is green on mac11 (the only label that runs tutorial by default and has pyspark installed at the same time) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112683/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/ . I just noticed I need to change this line and this is good to go. ```suggestion. - h_poisson = df_1.Histo1D((""poisson"", ""Exponential distribution"", 50, 0, 30), ""poisson""). + h_poisson = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:199,deployability,instal,installed,199,"The latest commit fixes the PYSPARK_PYTHON issue by setting the environment variable in the ctest invocation, tutorial is green on mac11 (the only label that runs tutorial by default and has pyspark installed at the same time) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112683/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/ . I just noticed I need to change this line and this is good to go. ```suggestion. - h_poisson = df_1.Histo1D((""poisson"", ""Exponential distribution"", 50, 0, 30), ""poisson""). + h_poisson = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:242,deployability,servic,services,242,"The latest commit fixes the PYSPARK_PYTHON issue by setting the environment variable in the ctest invocation, tutorial is green on mac11 (the only label that runs tutorial by default and has pyspark installed at the same time) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112683/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/ . I just noticed I need to change this line and this is good to go. ```suggestion. - h_poisson = df_1.Histo1D((""poisson"", ""Exponential distribution"", 50, 0, 30), ""poisson""). + h_poisson = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:294,deployability,build,build,294,"The latest commit fixes the PYSPARK_PYTHON issue by setting the environment variable in the ctest invocation, tutorial is green on mac11 (the only label that runs tutorial by default and has pyspark installed at the same time) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112683/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/ . I just noticed I need to change this line and this is good to go. ```suggestion. - h_poisson = df_1.Histo1D((""poisson"", ""Exponential distribution"", 50, 0, 30), ""poisson""). + h_poisson = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:122,energy efficiency,green,green,122,"The latest commit fixes the PYSPARK_PYTHON issue by setting the environment variable in the ctest invocation, tutorial is green on mac11 (the only label that runs tutorial by default and has pyspark installed at the same time) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112683/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/ . I just noticed I need to change this line and this is good to go. ```suggestion. - h_poisson = df_1.Histo1D((""poisson"", ""Exponential distribution"", 50, 0, 30), ""poisson""). + h_poisson = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:242,integrability,servic,services,242,"The latest commit fixes the PYSPARK_PYTHON issue by setting the environment variable in the ctest invocation, tutorial is green on mac11 (the only label that runs tutorial by default and has pyspark installed at the same time) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112683/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/ . I just noticed I need to change this line and this is good to go. ```suggestion. - h_poisson = df_1.Histo1D((""poisson"", ""Exponential distribution"", 50, 0, 30), ""poisson""). + h_poisson = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:529,interoperability,distribut,distribution,529,"The latest commit fixes the PYSPARK_PYTHON issue by setting the environment variable in the ctest invocation, tutorial is green on mac11 (the only label that runs tutorial by default and has pyspark installed at the same time) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112683/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/ . I just noticed I need to change this line and this is good to go. ```suggestion. - h_poisson = df_1.Histo1D((""poisson"", ""Exponential distribution"", 50, 0, 30), ""poisson""). + h_poisson = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:624,interoperability,distribut,distribution,624,"The latest commit fixes the PYSPARK_PYTHON issue by setting the environment variable in the ctest invocation, tutorial is green on mac11 (the only label that runs tutorial by default and has pyspark installed at the same time) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112683/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/ . I just noticed I need to change this line and this is good to go. ```suggestion. - h_poisson = df_1.Histo1D((""poisson"", ""Exponential distribution"", 50, 0, 30), ""poisson""). + h_poisson = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:76,modifiability,variab,variable,76,"The latest commit fixes the PYSPARK_PYTHON issue by setting the environment variable in the ctest invocation, tutorial is green on mac11 (the only label that runs tutorial by default and has pyspark installed at the same time) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112683/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/ . I just noticed I need to change this line and this is good to go. ```suggestion. - h_poisson = df_1.Histo1D((""poisson"", ""Exponential distribution"", 50, 0, 30), ""poisson""). + h_poisson = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:242,modifiability,servic,services,242,"The latest commit fixes the PYSPARK_PYTHON issue by setting the environment variable in the ctest invocation, tutorial is green on mac11 (the only label that runs tutorial by default and has pyspark installed at the same time) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112683/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/ . I just noticed I need to change this line and this is good to go. ```suggestion. - h_poisson = df_1.Histo1D((""poisson"", ""Exponential distribution"", 50, 0, 30), ""poisson""). + h_poisson = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:221,performance,time,time,221,"The latest commit fixes the PYSPARK_PYTHON issue by setting the environment variable in the ctest invocation, tutorial is green on mac11 (the only label that runs tutorial by default and has pyspark installed at the same time) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112683/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/ . I just noticed I need to change this line and this is good to go. ```suggestion. - h_poisson = df_1.Histo1D((""poisson"", ""Exponential distribution"", 50, 0, 30), ""poisson""). + h_poisson = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:506,reliability,poisson,poisson,506,"The latest commit fixes the PYSPARK_PYTHON issue by setting the environment variable in the ctest invocation, tutorial is green on mac11 (the only label that runs tutorial by default and has pyspark installed at the same time) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112683/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/ . I just noticed I need to change this line and this is good to go. ```suggestion. - h_poisson = df_1.Histo1D((""poisson"", ""Exponential distribution"", 50, 0, 30), ""poisson""). + h_poisson = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:557,reliability,poisson,poisson,557,"The latest commit fixes the PYSPARK_PYTHON issue by setting the environment variable in the ctest invocation, tutorial is green on mac11 (the only label that runs tutorial by default and has pyspark installed at the same time) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112683/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/ . I just noticed I need to change this line and this is good to go. ```suggestion. - h_poisson = df_1.Histo1D((""poisson"", ""Exponential distribution"", 50, 0, 30), ""poisson""). + h_poisson = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:307,safety,test,testReport,307,"The latest commit fixes the PYSPARK_PYTHON issue by setting the environment variable in the ctest invocation, tutorial is green on mac11 (the only label that runs tutorial by default and has pyspark installed at the same time) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112683/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/ . I just noticed I need to change this line and this is good to go. ```suggestion. - h_poisson = df_1.Histo1D((""poisson"", ""Exponential distribution"", 50, 0, 30), ""poisson""). + h_poisson = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/pull/7698:307,testability,test,testReport,307,"The latest commit fixes the PYSPARK_PYTHON issue by setting the environment variable in the ctest invocation, tutorial is green on mac11 (the only label that runs tutorial by default and has pyspark installed at the same time) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112683/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/ . I just noticed I need to change this line and this is good to go. ```suggestion. - h_poisson = df_1.Histo1D((""poisson"", ""Exponential distribution"", 50, 0, 30), ""poisson""). + h_poisson = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7698
https://github.com/root-project/root/issues/7699:162,usability,command,command,162,"We can either ""expand"" the macros manually (i.e. get rid of the macros), or maybe better we can explicitly write doxygen strings for them using the `\fn` Doxygen command and similar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7699
https://github.com/root-project/root/issues/7702:34,deployability,configurat,configuration,34,"And yet another idea was having a configuration objection, which can be passed to the RDF ctor to avoid this explosion of overloads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7702
https://github.com/root-project/root/issues/7702:34,integrability,configur,configuration,34,"And yet another idea was having a configuration objection, which can be passed to the RDF ctor to avoid this explosion of overloads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7702
https://github.com/root-project/root/issues/7702:34,modifiability,configur,configuration,34,"And yet another idea was having a configuration objection, which can be passed to the RDF ctor to avoid this explosion of overloads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7702
https://github.com/root-project/root/issues/7702:98,safety,avoid,avoid,98,"And yet another idea was having a configuration objection, which can be passed to the RDF ctor to avoid this explosion of overloads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7702
https://github.com/root-project/root/issues/7702:34,security,configur,configuration,34,"And yet another idea was having a configuration objection, which can be passed to the RDF ctor to avoid this explosion of overloads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7702
https://github.com/root-project/root/issues/7702:22,interoperability,specif,specification,22,"Solution is to have a specification object, which can accept a global sequential range. This object also takes care of easy-to-use friend passing, and constructing a TChain from trees of different names.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7702
https://github.com/root-project/root/issues/7704:0,reliability,Doe,Does,0,"Does that still reproduce for you, I seem to be unable to reproduce...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:4,availability,error,error,4,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1269,availability,error,error,1269,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1672,availability,error,error,1672,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:234,deployability,build,build,234,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:993,deployability,build,build,993,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1123,deployability,build,build,1123,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1276,deployability,modul,module,1276,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1315,deployability,build,build,1315,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1387,deployability,modul,module,1387,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1471,deployability,modul,module,1471,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1519,deployability,build,build,1519,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1557,deployability,Fail,Failed,1557,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1572,deployability,modul,module,1572,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1589,deployability,Fail,Failed,1589,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1604,deployability,modul,module,1604,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1617,deployability,Fail,Failed,1617,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1632,deployability,modul,module,1632,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1567,energy efficiency,load,load,1567,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1599,energy efficiency,load,load,1599,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1627,energy efficiency,load,load,1627,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:10,integrability,messag,messages,10,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:80,integrability,messag,message,80,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:108,integrability,messag,message,108,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:425,integrability,pub,public,425,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:545,integrability,buffer,buffer,545,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:639,integrability,buffer,buffer,639,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:726,integrability,buffer,buffer,726,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:10,interoperability,messag,messages,10,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:80,interoperability,messag,message,80,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:108,interoperability,messag,message,108,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1192,interoperability,share,shared,1192,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1276,modifiability,modul,module,1276,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1387,modifiability,modul,module,1387,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1471,modifiability,modul,module,1471,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1572,modifiability,modul,module,1572,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1604,modifiability,modul,module,1604,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1632,modifiability,modul,module,1632,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:4,performance,error,error,4,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1269,performance,error,error,1269,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1567,performance,load,load,1567,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1599,performance,load,load,1599,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1627,performance,load,load,1627,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1672,performance,error,error,1672,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1557,reliability,Fail,Failed,1557,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1589,reliability,Fail,Failed,1589,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1617,reliability,Fail,Failed,1617,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:4,safety,error,error,4,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1269,safety,error,error,1269,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1276,safety,modul,module,1276,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1387,safety,modul,module,1387,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1471,safety,modul,module,1471,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1572,safety,modul,module,1572,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1604,safety,modul,module,1604,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1632,safety,modul,module,1632,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1672,safety,error,error,1672,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:58,security,legitim,legitimate,58,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:166,security,modif,modification,166,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:4,usability,error,error,4,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:156,usability,effectiv,effective,156,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1232,usability,interact,interactive,1232,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1269,usability,error,error,1269,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1422,usability,interact,interactive,1422,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:1672,usability,error,error,1672,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff. diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h. index d5d6722e70..02d310f1cd 100644. --- a/io/io/inc/TFile.h. +++ b/io/io/inc/TFile.h. @@ -71,7 +71,8 @@ public:. enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:. - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. +int fnewmember;. +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far. Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far. Long64_t fBytesWrite{0}; ///<Number of bytes written to this file. Long64_t fBytesRead{0}; ///<Number of bytes read from this file. ```. and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:. ```. ninja RIO. ```. (otherwise ninja/make will correctly rebuild the pcm) and then:. ```. pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q. [26/26] Linking CXX shared library lib/libRIO.so. <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'. Failed to load module MathCore. Failed to load module Hist. Failed to load module ROOTTMVASofie. input_line_4:2:2: error: unknown type name 'include'. #include ""TError.h"". ^. etc .... ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:131,availability,error,error-rint-pcm-is-out-of-date-cannot-read-module-signature,131,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:274,availability,error,error,274,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:541,availability,Error,Error,541,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:113,deployability,build,build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature,113,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:281,deployability,modul,module,281,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:318,deployability,build,build,318,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:393,deployability,modul,module,393,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:470,deployability,modul,module,470,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:516,deployability,build,build,516,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:548,deployability,Modul,Module,548,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:570,deployability,fail,failed,570,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:723,deployability,build,build,723,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:580,energy efficiency,load,load,580,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:209,integrability,messag,message,209,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:209,interoperability,messag,message,209,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:173,modifiability,modul,module-signature,173,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:281,modifiability,modul,module,281,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:393,modifiability,modul,module,393,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:470,modifiability,modul,module,470,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:548,modifiability,Modul,Module,548,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:131,performance,error,error-rint-pcm-is-out-of-date-cannot-read-module-signature,131,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:274,performance,error,error,274,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:541,performance,Error,Error,541,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:580,performance,load,load,580,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:570,reliability,fail,failed,570,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:131,safety,error,error-rint-pcm-is-out-of-date-cannot-read-module-signature,131,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:274,safety,error,error,274,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:281,safety,modul,module,281,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:393,safety,modul,module,393,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:470,safety,modul,module,470,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:541,safety,Error,Error,541,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:548,safety,Modul,Module,548,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:180,security,sign,signature,180,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:400,security,sign,signature,400,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:131,usability,error,error-rint-pcm-is-out-of-date-cannot-read-module-signature,131,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:237,usability,interact,interactive,237,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:274,usability,error,error,274,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:421,usability,interact,interactive,421,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/issues/7704:541,usability,Error,Error,541,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. ```. where as `Rint.pcm` is actually the newer of the 2 files:. ```. (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm. -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7704
https://github.com/root-project/root/pull/7705:106,deployability,modul,module,106,"Indeed, you are right. I still want to give some hints though. How about. ```. ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:128,deployability,instal,installing,128,"Indeed, you are right. I still want to give some hints though. How about. ```. ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:152,deployability,instal,install,152,"Indeed, you are right. I still want to give some hints though. How about. ```. ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:179,deployability,instal,install,179,"Indeed, you are right. I still want to give some hints though. How about. ```. ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:106,modifiability,modul,module,106,"Indeed, you are right. I still want to give some hints though. How about. ```. ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:106,safety,modul,module,106,"Indeed, you are right. I still want to give some hints though. How about. ```. ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:49,usability,hint,hints,49,"Indeed, you are right. I still want to give some hints though. How about. ```. ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:218,usability,document,documentation,218,"Indeed, you are right. I still want to give some hints though. How about. ```. ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:116,deployability,modul,module,116,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:138,deployability,instal,installing,138,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:162,deployability,instal,install,162,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:189,deployability,instal,install,189,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:312,deployability,modul,module,312,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:369,deployability,instal,installation,369,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:539,deployability,instal,install,539,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:605,deployability,configurat,configuration,605,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:605,integrability,configur,configuration,605,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:116,modifiability,modul,module,116,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:312,modifiability,modul,module,312,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:462,modifiability,pac,pacman,462,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:605,modifiability,configur,configuration,605,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:116,safety,modul,module,116,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:312,safety,modul,module,312,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:452,security,apt,apt,452,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:605,security,configur,configuration,605,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:492,testability,simpl,simple,492,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:51,usability,hint,hints,51,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:228,usability,document,documentation,228,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:351,usability,document,documentation,351,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:445,usability,prefer,prefer,445,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:492,usability,simpl,simple,492,"> Indeed, you are right. I still want to give some hints though. How about. > . > ```. > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details. > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:47,deployability,modul,module,47,"> I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). Alright, latest commit uses this wording :+1: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:104,deployability,instal,installation,104,"> I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). Alright, latest commit uses this wording :+1: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:47,modifiability,modul,module,47,"> I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). Alright, latest commit uses this wording :+1: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:197,modifiability,pac,pacman,197,"> I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). Alright, latest commit uses this wording :+1: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:47,safety,modul,module,47,"> I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). Alright, latest commit uses this wording :+1: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:187,security,apt,apt,187,"> I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). Alright, latest commit uses this wording :+1: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:227,testability,simpl,simple,227,"> I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). Alright, latest commit uses this wording :+1: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:86,usability,document,documentation,86,"> I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). Alright, latest commit uses this wording :+1: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:180,usability,prefer,prefer,180,"> I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). Alright, latest commit uses this wording :+1: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7705:227,usability,simpl,simple,227,"> I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). Alright, latest commit uses this wording :+1: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705
https://github.com/root-project/root/pull/7706:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7706
https://github.com/root-project/root/pull/7706:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7706
https://github.com/root-project/root/issues/7708:160,reliability,pra,pragma,160,"A more minimal reproducer that catches at least some of the problems:. ```cpp. // LinkDef.h. #include <ROOT/RVec.hxx>. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>::*+;. #endif. ```. ```cpp. // TwoInts.h. #ifndef TWOINTS. #define TWOINTS. struct TwoInts {. int a, b;. };. #endif. ```. and `rootcling ""twoints_dict.cxx"" LinkDef.h` produces invalid C++ in `twoints_dict.cxx`. The line `#pragma link C++ class ROOT::VecOps::RVec<TwoInts>::*+;` is required to trigger the problematic behavior (and `TCling::GenerateDictionary` puts it in the auto-dicts).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7708
https://github.com/root-project/root/issues/7708:214,reliability,pra,pragma,214,"A more minimal reproducer that catches at least some of the problems:. ```cpp. // LinkDef.h. #include <ROOT/RVec.hxx>. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>::*+;. #endif. ```. ```cpp. // TwoInts.h. #ifndef TWOINTS. #define TWOINTS. struct TwoInts {. int a, b;. };. #endif. ```. and `rootcling ""twoints_dict.cxx"" LinkDef.h` produces invalid C++ in `twoints_dict.cxx`. The line `#pragma link C++ class ROOT::VecOps::RVec<TwoInts>::*+;` is required to trigger the problematic behavior (and `TCling::GenerateDictionary` puts it in the auto-dicts).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7708
https://github.com/root-project/root/issues/7708:485,reliability,pra,pragma,485,"A more minimal reproducer that catches at least some of the problems:. ```cpp. // LinkDef.h. #include <ROOT/RVec.hxx>. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>::*+;. #endif. ```. ```cpp. // TwoInts.h. #ifndef TWOINTS. #define TWOINTS. struct TwoInts {. int a, b;. };. #endif. ```. and `rootcling ""twoints_dict.cxx"" LinkDef.h` produces invalid C++ in `twoints_dict.cxx`. The line `#pragma link C++ class ROOT::VecOps::RVec<TwoInts>::*+;` is required to trigger the problematic behavior (and `TCling::GenerateDictionary` puts it in the auto-dicts).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7708
https://github.com/root-project/root/issues/7708:7,usability,minim,minimal,7,"A more minimal reproducer that catches at least some of the problems:. ```cpp. // LinkDef.h. #include <ROOT/RVec.hxx>. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>::*+;. #endif. ```. ```cpp. // TwoInts.h. #ifndef TWOINTS. #define TWOINTS. struct TwoInts {. int a, b;. };. #endif. ```. and `rootcling ""twoints_dict.cxx"" LinkDef.h` produces invalid C++ in `twoints_dict.cxx`. The line `#pragma link C++ class ROOT::VecOps::RVec<TwoInts>::*+;` is required to trigger the problematic behavior (and `TCling::GenerateDictionary` puts it in the auto-dicts).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7708
https://github.com/root-project/root/issues/7708:580,usability,behavi,behavior,580,"A more minimal reproducer that catches at least some of the problems:. ```cpp. // LinkDef.h. #include <ROOT/RVec.hxx>. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>::*+;. #endif. ```. ```cpp. // TwoInts.h. #ifndef TWOINTS. #define TWOINTS. struct TwoInts {. int a, b;. };. #endif. ```. and `rootcling ""twoints_dict.cxx"" LinkDef.h` produces invalid C++ in `twoints_dict.cxx`. The line `#pragma link C++ class ROOT::VecOps::RVec<TwoInts>::*+;` is required to trigger the problematic behavior (and `TCling::GenerateDictionary` puts it in the auto-dicts).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7708
https://github.com/root-project/root/issues/7708:69,availability,ping,ping,69,I was just hit by this again after forgetting about it again :smile: ping @pcanal @Axel-Naumann :grimacing:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7708
https://github.com/root-project/root/issues/7708:38,usability,hint,hint,38,@devajithvs @vgvassilev do you have a hint?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7708
https://github.com/root-project/root/issues/7709:1190,availability,sla,slac,1190,"c.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [784MB/2.09GB][ 36%][==================> ][11.04MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 2875 | wc -l. 10. ```. ### XRD_PARALLELEVTLOOP=1. This should use 1 thread, I see 7. ```. $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [184MB/2.09GB][ 8%][====> ][10.82MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3000 | wc -l. 7. ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1. I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```. $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [192MB/2.09GB][ 8%][====> ][10.67MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3036 | wc -l. 5. ```. So for now:. 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event loop, but I still can't reason about the other 3 threads. 2. The two variables seem to be independently adding threads to the `xrdcp` process when they are increased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1989,integrability,event,event,1989,"c.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [784MB/2.09GB][ 36%][==================> ][11.04MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 2875 | wc -l. 10. ```. ### XRD_PARALLELEVTLOOP=1. This should use 1 thread, I see 7. ```. $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [184MB/2.09GB][ 8%][====> ][10.82MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3000 | wc -l. 7. ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1. I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```. $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [192MB/2.09GB][ 8%][====> ][10.67MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3036 | wc -l. 5. ```. So for now:. 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event loop, but I still can't reason about the other 3 threads. 2. The two variables seem to be independently adding threads to the `xrdcp` process when they are increased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1147,modifiability,variab,variable,1147,"//eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [784MB/2.09GB][ 36%][==================> ][11.04MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 2875 | wc -l. 10. ```. ### XRD_PARALLELEVTLOOP=1. This should use 1 thread, I see 7. ```. $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [184MB/2.09GB][ 8%][====> ][10.82MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3000 | wc -l. 7. ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1. I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```. $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [192MB/2.09GB][ 8%][====> ][10.67MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3036 | wc -l. 5. ```. So for now:. 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event loop, but I still can't reason about the other 3 threads. 2. The two variables seem to be independently adding threads to the `xrdcp` process when they are ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1333,modifiability,variab,variables,1333,"c.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [784MB/2.09GB][ 36%][==================> ][11.04MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 2875 | wc -l. 10. ```. ### XRD_PARALLELEVTLOOP=1. This should use 1 thread, I see 7. ```. $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [184MB/2.09GB][ 8%][====> ][10.82MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3000 | wc -l. 7. ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1. I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```. $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [192MB/2.09GB][ 8%][====> ][10.67MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3036 | wc -l. 5. ```. So for now:. 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event loop, but I still can't reason about the other 3 threads. 2. The two variables seem to be independently adding threads to the `xrdcp` process when they are increased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:2064,modifiability,variab,variables,2064,"c.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [784MB/2.09GB][ 36%][==================> ][11.04MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 2875 | wc -l. 10. ```. ### XRD_PARALLELEVTLOOP=1. This should use 1 thread, I see 7. ```. $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [184MB/2.09GB][ 8%][====> ][10.82MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3000 | wc -l. 7. ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1. I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```. $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [192MB/2.09GB][ 8%][====> ][10.67MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3036 | wc -l. 5. ```. So for now:. 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event loop, but I still can't reason about the other 3 threads. 2. The two variables seem to be independently adding threads to the `xrdcp` process when they are increased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1190,reliability,sla,slac,1190,"c.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [784MB/2.09GB][ 36%][==================> ][11.04MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 2875 | wc -l. 10. ```. ### XRD_PARALLELEVTLOOP=1. This should use 1 thread, I see 7. ```. $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [184MB/2.09GB][ 8%][====> ][10.82MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3000 | wc -l. 7. ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1. I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```. $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [192MB/2.09GB][ 8%][====> ][10.67MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3036 | wc -l. 5. ```. So for now:. 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event loop, but I still can't reason about the other 3 threads. 2. The two variables seem to be independently adding threads to the `xrdcp` process when they are increased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:13,safety,test,tests,13,"First simple tests:. ### XRD_PARALLELEVTLOOP=4. In theory this should use 4 threads, but there are 10 instead. ```. $ XRD_PARALLELEVTLOOP=4 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [784MB/2.09GB][ 36%][==================> ][11.04MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 2875 | wc -l. 10. ```. ### XRD_PARALLELEVTLOOP=1. This should use 1 thread, I see 7. ```. $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [184MB/2.09GB][ 8%][====> ][10.82MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3000 | wc -l. 7. ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1. I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```. $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [192MB/2.09GB][ 8%][====> ][10.67MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3036 | wc -l. 5. ```. So for now:. 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event loop,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:6,testability,simpl,simple,6,"First simple tests:. ### XRD_PARALLELEVTLOOP=4. In theory this should use 4 threads, but there are 10 instead. ```. $ XRD_PARALLELEVTLOOP=4 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [784MB/2.09GB][ 36%][==================> ][11.04MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 2875 | wc -l. 10. ```. ### XRD_PARALLELEVTLOOP=1. This should use 1 thread, I see 7. ```. $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [184MB/2.09GB][ 8%][====> ][10.82MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3000 | wc -l. 7. ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1. I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```. $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [192MB/2.09GB][ 8%][====> ][10.67MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3036 | wc -l. 5. ```. So for now:. 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event loop,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:13,testability,test,tests,13,"First simple tests:. ### XRD_PARALLELEVTLOOP=4. In theory this should use 4 threads, but there are 10 instead. ```. $ XRD_PARALLELEVTLOOP=4 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [784MB/2.09GB][ 36%][==================> ][11.04MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 2875 | wc -l. 10. ```. ### XRD_PARALLELEVTLOOP=1. This should use 1 thread, I see 7. ```. $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [184MB/2.09GB][ 8%][====> ][10.82MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3000 | wc -l. 7. ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1. I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```. $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [192MB/2.09GB][ 8%][====> ][10.67MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3036 | wc -l. 5. ```. So for now:. 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event loop,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:6,usability,simpl,simple,6,"First simple tests:. ### XRD_PARALLELEVTLOOP=4. In theory this should use 4 threads, but there are 10 instead. ```. $ XRD_PARALLELEVTLOOP=4 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [784MB/2.09GB][ 36%][==================> ][11.04MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 2875 | wc -l. 10. ```. ### XRD_PARALLELEVTLOOP=1. This should use 1 thread, I see 7. ```. $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [184MB/2.09GB][ 8%][====> ][10.82MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3000 | wc -l. 7. ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1. I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```. $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [192MB/2.09GB][ 8%][====> ][10.67MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3036 | wc -l. 5. ```. So for now:. 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event loop,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1280,usability,user,user,1280,"c.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [784MB/2.09GB][ 36%][==================> ][11.04MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 2875 | wc -l. 10. ```. ### XRD_PARALLELEVTLOOP=1. This should use 1 thread, I see 7. ```. $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [184MB/2.09GB][ 8%][====> ][10.82MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3000 | wc -l. 7. ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1. I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```. $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . [192MB/2.09GB][ 8%][====> ][10.67MB/s]. ```. ```. $ ps aux | grep xrdcp. vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root . $ ps hH p 3036 | wc -l. 5. ```. So for now:. 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event loop, but I still can't reason about the other 3 threads. 2. The two variables seem to be independently adding threads to the `xrdcp` process when they are increased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1644,deployability,observ,observed,1644,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:365,energy efficiency,CPU,CPU,365,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1121,energy efficiency,CPU,CPU,1121,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1585,energy efficiency,measur,measured,1585,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:187,integrability,event,event-loop,187,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:343,integrability,event,event,343,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:429,integrability,event,event-loops,429,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:834,integrability,event,event,834,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:885,integrability,event,event,885,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:912,integrability,event,events,912,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1266,integrability,event,event-loop,1266,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1303,integrability,event,events,1303,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1408,integrability,event,event-loops,1408,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1474,integrability,event,events,1474,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1517,integrability,event,event-loops,1517,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1565,integrability,event,event,1565,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:901,interoperability,socket,socket,901,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:388,modifiability,scenario,scenarios,388,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:225,performance,I/O,I/O,225,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:365,performance,CPU,CPU,365,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:631,performance,time,timers,631,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:682,performance,time,timeouts,682,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:815,performance,parallel,parallel,815,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:908,performance,I/O,I/O,908,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1027,performance,synch,synchronous,1027,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1039,performance,I/O,I/O,1039,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1121,performance,CPU,CPU,1121,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1299,performance,I/O,I/O,1299,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1470,performance,I/O,I/O,1470,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1561,performance,I/O,I/O,1561,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1715,performance,parallel,parallel,1715,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:310,reliability,doe,does,310,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:549,safety,compl,completion,549,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:682,safety,timeout,timeouts,682,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:988,safety,avoid,avoid,988,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:549,security,compl,completion,549,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:901,security,soc,socket,901,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:994,testability,context,context,994,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:1644,testability,observ,observed,1644,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:273,usability,interact,interacting,273,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops. - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers. - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts. - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`. The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:256,availability,avail,available,256,"Hello. This feature is now leveraged by the newest xrootd client versions, including the one that comes with ROOT. See for example this [PPP meeting](https://indico.cern.ch/event/1330503/). The item was investigated, judged interesting and now the feature available by default to every xrootd user, including ROOT. For this reason, @amadio @vepadulano, I propose to close the item: would you agree?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:65,deployability,version,versions,65,"Hello. This feature is now leveraged by the newest xrootd client versions, including the one that comes with ROOT. See for example this [PPP meeting](https://indico.cern.ch/event/1330503/). The item was investigated, judged interesting and now the feature available by default to every xrootd user, including ROOT. For this reason, @amadio @vepadulano, I propose to close the item: would you agree?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:65,integrability,version,versions,65,"Hello. This feature is now leveraged by the newest xrootd client versions, including the one that comes with ROOT. See for example this [PPP meeting](https://indico.cern.ch/event/1330503/). The item was investigated, judged interesting and now the feature available by default to every xrootd user, including ROOT. For this reason, @amadio @vepadulano, I propose to close the item: would you agree?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:173,integrability,event,event,173,"Hello. This feature is now leveraged by the newest xrootd client versions, including the one that comes with ROOT. See for example this [PPP meeting](https://indico.cern.ch/event/1330503/). The item was investigated, judged interesting and now the feature available by default to every xrootd user, including ROOT. For this reason, @amadio @vepadulano, I propose to close the item: would you agree?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:65,modifiability,version,versions,65,"Hello. This feature is now leveraged by the newest xrootd client versions, including the one that comes with ROOT. See for example this [PPP meeting](https://indico.cern.ch/event/1330503/). The item was investigated, judged interesting and now the feature available by default to every xrootd user, including ROOT. For this reason, @amadio @vepadulano, I propose to close the item: would you agree?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:256,reliability,availab,available,256,"Hello. This feature is now leveraged by the newest xrootd client versions, including the one that comes with ROOT. See for example this [PPP meeting](https://indico.cern.ch/event/1330503/). The item was investigated, judged interesting and now the feature available by default to every xrootd user, including ROOT. For this reason, @amadio @vepadulano, I propose to close the item: would you agree?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:256,safety,avail,available,256,"Hello. This feature is now leveraged by the newest xrootd client versions, including the one that comes with ROOT. See for example this [PPP meeting](https://indico.cern.ch/event/1330503/). The item was investigated, judged interesting and now the feature available by default to every xrootd user, including ROOT. For this reason, @amadio @vepadulano, I propose to close the item: would you agree?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:256,security,availab,available,256,"Hello. This feature is now leveraged by the newest xrootd client versions, including the one that comes with ROOT. See for example this [PPP meeting](https://indico.cern.ch/event/1330503/). The item was investigated, judged interesting and now the feature available by default to every xrootd user, including ROOT. For this reason, @amadio @vepadulano, I propose to close the item: would you agree?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:293,usability,user,user,293,"Hello. This feature is now leveraged by the newest xrootd client versions, including the one that comes with ROOT. See for example this [PPP meeting](https://indico.cern.ch/event/1330503/). The item was investigated, judged interesting and now the feature available by default to every xrootd user, including ROOT. For this reason, @amadio @vepadulano, I propose to close the item: would you agree?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:366,usability,close,close,366,"Hello. This feature is now leveraged by the newest xrootd client versions, including the one that comes with ROOT. See for example this [PPP meeting](https://indico.cern.ch/event/1330503/). The item was investigated, judged interesting and now the feature available by default to every xrootd user, including ROOT. For this reason, @amadio @vepadulano, I propose to close the item: would you agree?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:108,availability,cluster,cluster,108,"Yes, I think this can be closed. I'd just like to remark that after the Xcache server was reconfigured as a cluster internally (my suggestion, but done by David), then the performance with Xcache is now also good enough with MT, as the bottleneck was on the server side due to it being a single machine and the way connections are handled. No fake client trick should be required anymore!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:108,deployability,cluster,cluster,108,"Yes, I think this can be closed. I'd just like to remark that after the Xcache server was reconfigured as a cluster internally (my suggestion, but done by David), then the performance with Xcache is now also good enough with MT, as the bottleneck was on the server side due to it being a single machine and the way connections are handled. No fake client trick should be required anymore!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:172,performance,perform,performance,172,"Yes, I think this can be closed. I'd just like to remark that after the Xcache server was reconfigured as a cluster internally (my suggestion, but done by David), then the performance with Xcache is now also good enough with MT, as the bottleneck was on the server side due to it being a single machine and the way connections are handled. No fake client trick should be required anymore!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:236,performance,bottleneck,bottleneck,236,"Yes, I think this can be closed. I'd just like to remark that after the Xcache server was reconfigured as a cluster internally (my suggestion, but done by David), then the performance with Xcache is now also good enough with MT, as the bottleneck was on the server side due to it being a single machine and the way connections are handled. No fake client trick should be required anymore!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:25,usability,close,closed,25,"Yes, I think this can be closed. I'd just like to remark that after the Xcache server was reconfigured as a cluster internally (my suggestion, but done by David), then the performance with Xcache is now also good enough with MT, as the bottleneck was on the server side due to it being a single machine and the way connections are handled. No fake client trick should be required anymore!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:172,usability,perform,performance,172,"Yes, I think this can be closed. I'd just like to remark that after the Xcache server was reconfigured as a cluster internally (my suggestion, but done by David), then the performance with Xcache is now also good enough with MT, as the bottleneck was on the server side due to it being a single machine and the way connections are handled. No fake client trick should be required anymore!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:134,integrability,topic,topic,134,"Yes, @amadio , that was a nice intuition of yours. The comment also goes beyond this particular item and shows we really explored the topic in depth :) I am closing the issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7709:31,usability,intuit,intuition,31,"Yes, @amadio , that was a nice intuition of yours. The comment also goes beyond this particular item and shows we really explored the topic in depth :) I am closing the issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709
https://github.com/root-project/root/issues/7710:104,usability,satisfa,satisfactory,104,@bendavid @pcanal do you think https://github.com/root-project/root/pull/9486 addressed this issue to a satisfactory degree?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:222,deployability,patch,patch,222,"No, there is exactly one remaining usage of the global lock which still needs to be addressed. This happens when the TFile object is added or removed from the global list of UUIDs. It can be bypassed by e.g. the following patch. https://github.com/bendavid/root/commit/7262eb3babbb660c497fb879e4cdd32b99927c26. But this isn't safe in general as we previously discussed, since it could break the (maybe esoteric) case where a TRef points to a TFile object. One way out could be to add another static switch to TFile (a la ```TFIle::SetReadStreamerInfo(false)``) to disable this. Unfortunate that this can't be the default given that it's probably only a small number of workflows that rely on this behaviour, but I don't have any better ideas for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:55,performance,lock,lock,55,"No, there is exactly one remaining usage of the global lock which still needs to be addressed. This happens when the TFile object is added or removed from the global list of UUIDs. It can be bypassed by e.g. the following patch. https://github.com/bendavid/root/commit/7262eb3babbb660c497fb879e4cdd32b99927c26. But this isn't safe in general as we previously discussed, since it could break the (maybe esoteric) case where a TRef points to a TFile object. One way out could be to add another static switch to TFile (a la ```TFIle::SetReadStreamerInfo(false)``) to disable this. Unfortunate that this can't be the default given that it's probably only a small number of workflows that rely on this behaviour, but I don't have any better ideas for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:222,safety,patch,patch,222,"No, there is exactly one remaining usage of the global lock which still needs to be addressed. This happens when the TFile object is added or removed from the global list of UUIDs. It can be bypassed by e.g. the following patch. https://github.com/bendavid/root/commit/7262eb3babbb660c497fb879e4cdd32b99927c26. But this isn't safe in general as we previously discussed, since it could break the (maybe esoteric) case where a TRef points to a TFile object. One way out could be to add another static switch to TFile (a la ```TFIle::SetReadStreamerInfo(false)``) to disable this. Unfortunate that this can't be the default given that it's probably only a small number of workflows that rely on this behaviour, but I don't have any better ideas for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:326,safety,safe,safe,326,"No, there is exactly one remaining usage of the global lock which still needs to be addressed. This happens when the TFile object is added or removed from the global list of UUIDs. It can be bypassed by e.g. the following patch. https://github.com/bendavid/root/commit/7262eb3babbb660c497fb879e4cdd32b99927c26. But this isn't safe in general as we previously discussed, since it could break the (maybe esoteric) case where a TRef points to a TFile object. One way out could be to add another static switch to TFile (a la ```TFIle::SetReadStreamerInfo(false)``) to disable this. Unfortunate that this can't be the default given that it's probably only a small number of workflows that rely on this behaviour, but I don't have any better ideas for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:55,security,lock,lock,55,"No, there is exactly one remaining usage of the global lock which still needs to be addressed. This happens when the TFile object is added or removed from the global list of UUIDs. It can be bypassed by e.g. the following patch. https://github.com/bendavid/root/commit/7262eb3babbb660c497fb879e4cdd32b99927c26. But this isn't safe in general as we previously discussed, since it could break the (maybe esoteric) case where a TRef points to a TFile object. One way out could be to add another static switch to TFile (a la ```TFIle::SetReadStreamerInfo(false)``) to disable this. Unfortunate that this can't be the default given that it's probably only a small number of workflows that rely on this behaviour, but I don't have any better ideas for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:222,security,patch,patch,222,"No, there is exactly one remaining usage of the global lock which still needs to be addressed. This happens when the TFile object is added or removed from the global list of UUIDs. It can be bypassed by e.g. the following patch. https://github.com/bendavid/root/commit/7262eb3babbb660c497fb879e4cdd32b99927c26. But this isn't safe in general as we previously discussed, since it could break the (maybe esoteric) case where a TRef points to a TFile object. One way out could be to add another static switch to TFile (a la ```TFIle::SetReadStreamerInfo(false)``) to disable this. Unfortunate that this can't be the default given that it's probably only a small number of workflows that rely on this behaviour, but I don't have any better ideas for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:669,usability,workflow,workflows,669,"No, there is exactly one remaining usage of the global lock which still needs to be addressed. This happens when the TFile object is added or removed from the global list of UUIDs. It can be bypassed by e.g. the following patch. https://github.com/bendavid/root/commit/7262eb3babbb660c497fb879e4cdd32b99927c26. But this isn't safe in general as we previously discussed, since it could break the (maybe esoteric) case where a TRef points to a TFile object. One way out could be to add another static switch to TFile (a la ```TFIle::SetReadStreamerInfo(false)``) to disable this. Unfortunate that this can't be the default given that it's probably only a small number of workflows that rely on this behaviour, but I don't have any better ideas for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:697,usability,behavi,behaviour,697,"No, there is exactly one remaining usage of the global lock which still needs to be addressed. This happens when the TFile object is added or removed from the global list of UUIDs. It can be bypassed by e.g. the following patch. https://github.com/bendavid/root/commit/7262eb3babbb660c497fb879e4cdd32b99927c26. But this isn't safe in general as we previously discussed, since it could break the (maybe esoteric) case where a TRef points to a TFile object. One way out could be to add another static switch to TFile (a la ```TFIle::SetReadStreamerInfo(false)``) to disable this. Unfortunate that this can't be the default given that it's probably only a small number of workflows that rely on this behaviour, but I don't have any better ideas for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:15,performance,perform,performance,15,"There are some performance numbers comparing what went into master with the additional impact of this commit in the description of https://github.com/root-project/root/pull/9486 (at the bottom). The detailed previous discussion over why this couldn't go into the above PR, etc is in https://github.com/root-project/root/pull/9486#discussion_r779221047 and the follow-up comments",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:15,usability,perform,performance,15,"There are some performance numbers comparing what went into master with the additional impact of this commit in the description of https://github.com/root-project/root/pull/9486 (at the bottom). The detailed previous discussion over why this couldn't go into the above PR, etc is in https://github.com/root-project/root/pull/9486#discussion_r779221047 and the follow-up comments",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:182,deployability,patch,patches,182,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:335,energy efficiency,core,core,335,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:438,energy efficiency,optim,optimized,438,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:489,energy efficiency,core,core,489,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:653,energy efficiency,core,core,653,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:699,energy efficiency,Load,LoadClass,699,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:816,energy efficiency,core,core,816,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:889,energy efficiency,Load,LoadPlugin,889,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:968,energy efficiency,core,core,968,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:1050,energy efficiency,optim,optimized,1050,"331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:1146,energy efficiency,optim,optimized,1146,"lematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:1204,energy efficiency,optim,optimized,1204,"eentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized ou",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:1248,energy efficiency,optim,optimized,1248,"ecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""RE",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:1375,energy efficiency,Load,LoadTree,1375,"1 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@ent",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:1607,energy efficiency,core,core,1607,"2ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f0614025d80, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:1749,energy efficiency,core,core,1749,""", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f0614025d80, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. #17 0x00007f0a12345963 in TTreeReader::SetEntryBase (this=this@entry=0x7f083494ded0, entry=0, local=<optimized out>, local@",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:1935,energy efficiency,core,core,1935,"0. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f0614025d80, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. #17 0x00007f0a12345963 in TTreeReader::SetEntryBase (this=this@entry=0x7f083494ded0, entry=0, local=<optimized out>, local@entry=false) at /home/b/bendavid/rootdev25/root/tree/treeplayer/src/TTreeReader.cxx:546. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:2139,energy efficiency,core,core,2139,"0. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f0614025d80, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. #17 0x00007f0a12345963 in TTreeReader::SetEntryBase (this=this@entry=0x7f083494ded0, entry=0, local=<optimized out>, local@entry=false) at /home/b/bendavid/rootdev25/root/tree/treeplayer/src/TTreeReader.cxx:546. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:2197,energy efficiency,optim,optimized,2197,"0. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f0614025d80, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. #17 0x00007f0a12345963 in TTreeReader::SetEntryBase (this=this@entry=0x7f083494ded0, entry=0, local=<optimized out>, local@entry=false) at /home/b/bendavid/rootdev25/root/tree/treeplayer/src/TTreeReader.cxx:546. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:2293,energy efficiency,optim,optimized,2293,"0. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f0614025d80, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. #17 0x00007f0a12345963 in TTreeReader::SetEntryBase (this=this@entry=0x7f083494ded0, entry=0, local=<optimized out>, local@entry=false) at /home/b/bendavid/rootdev25/root/tree/treeplayer/src/TTreeReader.cxx:546. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:2351,energy efficiency,optim,optimized,2351,"0. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f0614025d80, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. #17 0x00007f0a12345963 in TTreeReader::SetEntryBase (this=this@entry=0x7f083494ded0, entry=0, local=<optimized out>, local@entry=false) at /home/b/bendavid/rootdev25/root/tree/treeplayer/src/TTreeReader.cxx:546. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:2395,energy efficiency,optim,optimized,2395,"0. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f0614025d80, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. #17 0x00007f0a12345963 in TTreeReader::SetEntryBase (this=this@entry=0x7f083494ded0, entry=0, local=<optimized out>, local@entry=false) at /home/b/bendavid/rootdev25/root/tree/treeplayer/src/TTreeReader.cxx:546. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:2522,energy efficiency,Load,LoadTree,2522,"0. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f0614025d80, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. #17 0x00007f0a12345963 in TTreeReader::SetEntryBase (this=this@entry=0x7f083494ded0, entry=0, local=<optimized out>, local@entry=false) at /home/b/bendavid/rootdev25/root/tree/treeplayer/src/TTreeReader.cxx:546. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:2729,energy efficiency,optim,optimized,2729,"0. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f0614025d80, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. #17 0x00007f0a12345963 in TTreeReader::SetEntryBase (this=this@entry=0x7f083494ded0, entry=0, local=<optimized out>, local@entry=false) at /home/b/bendavid/rootdev25/root/tree/treeplayer/src/TTreeReader.cxx:546. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:124,performance,lock,lock,124,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:129,performance,content,contention,129,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:426,performance,Lock,Lock,426,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:438,performance,optimiz,optimized,438,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:699,performance,Load,LoadClass,699,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:889,performance,Load,LoadPlugin,889,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:1050,performance,optimiz,optimized,1050,"331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:1146,performance,optimiz,optimized,1146,"lematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:1204,performance,optimiz,optimized,1204,"eentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized ou",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:1248,performance,optimiz,optimized,1248,"ecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""RE",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:1375,performance,Load,LoadTree,1375,"1 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@ent",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:1545,performance,Lock,Lock,1545," in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f061402",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:2197,performance,optimiz,optimized,2197,"0. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f0614025d80, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. #17 0x00007f0a12345963 in TTreeReader::SetEntryBase (this=this@entry=0x7f083494ded0, entry=0, local=<optimized out>, local@entry=false) at /home/b/bendavid/rootdev25/root/tree/treeplayer/src/TTreeReader.cxx:546. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:2293,performance,optimiz,optimized,2293,"0. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f0614025d80, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. #17 0x00007f0a12345963 in TTreeReader::SetEntryBase (this=this@entry=0x7f083494ded0, entry=0, local=<optimized out>, local@entry=false) at /home/b/bendavid/rootdev25/root/tree/treeplayer/src/TTreeReader.cxx:546. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:2351,performance,optimiz,optimized,2351,"0. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f0614025d80, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. #17 0x00007f0a12345963 in TTreeReader::SetEntryBase (this=this@entry=0x7f083494ded0, entry=0, local=<optimized out>, local@entry=false) at /home/b/bendavid/rootdev25/root/tree/treeplayer/src/TTreeReader.cxx:546. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:2395,performance,optimiz,optimized,2395,"0. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f0614025d80, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. #17 0x00007f0a12345963 in TTreeReader::SetEntryBase (this=this@entry=0x7f083494ded0, entry=0, local=<optimized out>, local@entry=false) at /home/b/bendavid/rootdev25/root/tree/treeplayer/src/TTreeReader.cxx:546. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:2522,performance,Load,LoadTree,2522,"0. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f0614025d80, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. #17 0x00007f0a12345963 in TTreeReader::SetEntryBase (this=this@entry=0x7f083494ded0, entry=0, local=<optimized out>, local@entry=false) at /home/b/bendavid/rootdev25/root/tree/treeplayer/src/TTreeReader.cxx:546. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:2729,performance,optimiz,optimized,2729,"0. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f0614025d80, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. #17 0x00007f0a12345963 in TTreeReader::SetEntryBase (this=this@entry=0x7f083494ded0, entry=0, local=<optimized out>, local@entry=false) at /home/b/bendavid/rootdev25/root/tree/treeplayer/src/TTreeReader.cxx:546. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:182,safety,patch,patches,182,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:124,security,lock,lock,124,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:182,security,patch,patches,182,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:426,security,Lock,Lock,426,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```. #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190. #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:1545,security,Lock,Lock,1545," in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740. #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261. #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499. ```. and. ```. #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79. #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80. #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156. #14 0x00007f0a342e109b in TPluginHandler::ExecPlugin<char const*, char const*, char const*, int, int> (nargs=5, this=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:172. #15 TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4196. #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f061402",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:7,deployability,stack,stack,7,"A full stack trace with 256 threads is. [rootnetlockdebug.txt](https://github.com/root-project/root/files/9834797/rootnetlockdebug.txt). attached. (this run was also done with forcing SetEnablePrefetching(true) as suggested by @pcanal elsewhere for testing but this didn't affect performance much, so probably the lock contention is orthogonal).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:280,performance,perform,performance,280,"A full stack trace with 256 threads is. [rootnetlockdebug.txt](https://github.com/root-project/root/files/9834797/rootnetlockdebug.txt). attached. (this run was also done with forcing SetEnablePrefetching(true) as suggested by @pcanal elsewhere for testing but this didn't affect performance much, so probably the lock contention is orthogonal).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:314,performance,lock,lock,314,"A full stack trace with 256 threads is. [rootnetlockdebug.txt](https://github.com/root-project/root/files/9834797/rootnetlockdebug.txt). attached. (this run was also done with forcing SetEnablePrefetching(true) as suggested by @pcanal elsewhere for testing but this didn't affect performance much, so probably the lock contention is orthogonal).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:319,performance,content,contention,319,"A full stack trace with 256 threads is. [rootnetlockdebug.txt](https://github.com/root-project/root/files/9834797/rootnetlockdebug.txt). attached. (this run was also done with forcing SetEnablePrefetching(true) as suggested by @pcanal elsewhere for testing but this didn't affect performance much, so probably the lock contention is orthogonal).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:249,safety,test,testing,249,"A full stack trace with 256 threads is. [rootnetlockdebug.txt](https://github.com/root-project/root/files/9834797/rootnetlockdebug.txt). attached. (this run was also done with forcing SetEnablePrefetching(true) as suggested by @pcanal elsewhere for testing but this didn't affect performance much, so probably the lock contention is orthogonal).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:314,security,lock,lock,314,"A full stack trace with 256 threads is. [rootnetlockdebug.txt](https://github.com/root-project/root/files/9834797/rootnetlockdebug.txt). attached. (this run was also done with forcing SetEnablePrefetching(true) as suggested by @pcanal elsewhere for testing but this didn't affect performance much, so probably the lock contention is orthogonal).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:13,testability,trace,trace,13,"A full stack trace with 256 threads is. [rootnetlockdebug.txt](https://github.com/root-project/root/files/9834797/rootnetlockdebug.txt). attached. (this run was also done with forcing SetEnablePrefetching(true) as suggested by @pcanal elsewhere for testing but this didn't affect performance much, so probably the lock contention is orthogonal).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:249,testability,test,testing,249,"A full stack trace with 256 threads is. [rootnetlockdebug.txt](https://github.com/root-project/root/files/9834797/rootnetlockdebug.txt). attached. (this run was also done with forcing SetEnablePrefetching(true) as suggested by @pcanal elsewhere for testing but this didn't affect performance much, so probably the lock contention is orthogonal).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:280,usability,perform,performance,280,"A full stack trace with 256 threads is. [rootnetlockdebug.txt](https://github.com/root-project/root/files/9834797/rootnetlockdebug.txt). attached. (this run was also done with forcing SetEnablePrefetching(true) as suggested by @pcanal elsewhere for testing but this didn't affect performance much, so probably the lock contention is orthogonal).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:487,availability,slo,slot,487,"I'm re-opening this one because with @mariadalfonso we realized that there are still related issues with locking when calling Snapshot from RDF. Some locking is probably unavoidable here because at some point there are multiple threads and one file output, but from the stack trace it looks like this could be im. [gdb_StackTrace.txt](https://github.com/root-project/root/files/11969095/gdb_StackTrace.txt). proved. (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:270,deployability,stack,stack,270,"I'm re-opening this one because with @mariadalfonso we realized that there are still related issues with locking when calling Snapshot from RDF. Some locking is probably unavoidable here because at some point there are multiple threads and one file output, but from the stack trace it looks like this could be im. [gdb_StackTrace.txt](https://github.com/root-project/root/files/11969095/gdb_StackTrace.txt). proved. (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:105,performance,lock,locking,105,"I'm re-opening this one because with @mariadalfonso we realized that there are still related issues with locking when calling Snapshot from RDF. Some locking is probably unavoidable here because at some point there are multiple threads and one file output, but from the stack trace it looks like this could be im. [gdb_StackTrace.txt](https://github.com/root-project/root/files/11969095/gdb_StackTrace.txt). proved. (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:150,performance,lock,locking,150,"I'm re-opening this one because with @mariadalfonso we realized that there are still related issues with locking when calling Snapshot from RDF. Some locking is probably unavoidable here because at some point there are multiple threads and one file output, but from the stack trace it looks like this could be im. [gdb_StackTrace.txt](https://github.com/root-project/root/files/11969095/gdb_StackTrace.txt). proved. (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:466,performance,lock,locks,466,"I'm re-opening this one because with @mariadalfonso we realized that there are still related issues with locking when calling Snapshot from RDF. Some locking is probably unavoidable here because at some point there are multiple threads and one file output, but from the stack trace it looks like this could be im. [gdb_StackTrace.txt](https://github.com/root-project/root/files/11969095/gdb_StackTrace.txt). proved. (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:487,reliability,slo,slot,487,"I'm re-opening this one because with @mariadalfonso we realized that there are still related issues with locking when calling Snapshot from RDF. Some locking is probably unavoidable here because at some point there are multiple threads and one file output, but from the stack trace it looks like this could be im. [gdb_StackTrace.txt](https://github.com/root-project/root/files/11969095/gdb_StackTrace.txt). proved. (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:105,security,lock,locking,105,"I'm re-opening this one because with @mariadalfonso we realized that there are still related issues with locking when calling Snapshot from RDF. Some locking is probably unavoidable here because at some point there are multiple threads and one file output, but from the stack trace it looks like this could be im. [gdb_StackTrace.txt](https://github.com/root-project/root/files/11969095/gdb_StackTrace.txt). proved. (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:150,security,lock,locking,150,"I'm re-opening this one because with @mariadalfonso we realized that there are still related issues with locking when calling Snapshot from RDF. Some locking is probably unavoidable here because at some point there are multiple threads and one file output, but from the stack trace it looks like this could be im. [gdb_StackTrace.txt](https://github.com/root-project/root/files/11969095/gdb_StackTrace.txt). proved. (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:466,security,lock,locks,466,"I'm re-opening this one because with @mariadalfonso we realized that there are still related issues with locking when calling Snapshot from RDF. Some locking is probably unavoidable here because at some point there are multiple threads and one file output, but from the stack trace it looks like this could be im. [gdb_StackTrace.txt](https://github.com/root-project/root/files/11969095/gdb_StackTrace.txt). proved. (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:276,testability,trace,trace,276,"I'm re-opening this one because with @mariadalfonso we realized that there are still related issues with locking when calling Snapshot from RDF. Some locking is probably unavoidable here because at some point there are multiple threads and one file output, but from the stack trace it looks like this could be im. [gdb_StackTrace.txt](https://github.com/root-project/root/files/11969095/gdb_StackTrace.txt). proved. (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:115,availability,slo,slot,115,"@bendavid Can you share the reproducer? . > (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file). I don't see that as consequence of the stack trace (yet?). . What I do see is a large number of:. ```. #2 0x00007ffff6491f39 in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::ReadLock() () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/./libThread.so.6.28. #3 0x00007ffff6537809 in TBufferFile::ReadClassBuffer(TClass const*, void*, int, unsigned int, unsigned int, TClass const*) () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/libRIO.so. ```. which (seemingly) comes from a part of the code activated when schema evolution is needed. (I also see a bunch of things that are one-time per TTree initialization (or at least should be) .. those could be due to input files that are smallish.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:197,deployability,stack,stack,197,"@bendavid Can you share the reproducer? . > (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file). I don't see that as consequence of the stack trace (yet?). . What I do see is a large number of:. ```. #2 0x00007ffff6491f39 in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::ReadLock() () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/./libThread.so.6.28. #3 0x00007ffff6537809 in TBufferFile::ReadClassBuffer(TClass const*, void*, int, unsigned int, unsigned int, TClass const*) () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/libRIO.so. ```. which (seemingly) comes from a part of the code activated when schema evolution is needed. (I also see a bunch of things that are one-time per TTree initialization (or at least should be) .. those could be due to input files that are smallish.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:387,integrability,sub,submit,387,"@bendavid Can you share the reproducer? . > (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file). I don't see that as consequence of the stack trace (yet?). . What I do see is a large number of:. ```. #2 0x00007ffff6491f39 in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::ReadLock() () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/./libThread.so.6.28. #3 0x00007ffff6537809 in TBufferFile::ReadClassBuffer(TClass const*, void*, int, unsigned int, unsigned int, TClass const*) () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/libRIO.so. ```. which (seemingly) comes from a part of the code activated when schema evolution is needed. (I also see a bunch of things that are one-time per TTree initialization (or at least should be) .. those could be due to input files that are smallish.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:588,integrability,sub,submit,588,"@bendavid Can you share the reproducer? . > (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file). I don't see that as consequence of the stack trace (yet?). . What I do see is a large number of:. ```. #2 0x00007ffff6491f39 in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::ReadLock() () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/./libThread.so.6.28. #3 0x00007ffff6537809 in TBufferFile::ReadClassBuffer(TClass const*, void*, int, unsigned int, unsigned int, TClass const*) () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/libRIO.so. ```. which (seemingly) comes from a part of the code activated when schema evolution is needed. (I also see a bunch of things that are one-time per TTree initialization (or at least should be) .. those could be due to input files that are smallish.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:709,integrability,schema,schema,709,"@bendavid Can you share the reproducer? . > (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file). I don't see that as consequence of the stack trace (yet?). . What I do see is a large number of:. ```. #2 0x00007ffff6491f39 in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::ReadLock() () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/./libThread.so.6.28. #3 0x00007ffff6537809 in TBufferFile::ReadClassBuffer(TClass const*, void*, int, unsigned int, unsigned int, TClass const*) () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/libRIO.so. ```. which (seemingly) comes from a part of the code activated when schema evolution is needed. (I also see a bunch of things that are one-time per TTree initialization (or at least should be) .. those could be due to input files that are smallish.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:18,interoperability,share,share,18,"@bendavid Can you share the reproducer? . > (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file). I don't see that as consequence of the stack trace (yet?). . What I do see is a large number of:. ```. #2 0x00007ffff6491f39 in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::ReadLock() () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/./libThread.so.6.28. #3 0x00007ffff6537809 in TBufferFile::ReadClassBuffer(TClass const*, void*, int, unsigned int, unsigned int, TClass const*) () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/libRIO.so. ```. which (seemingly) comes from a part of the code activated when schema evolution is needed. (I also see a bunch of things that are one-time per TTree initialization (or at least should be) .. those could be due to input files that are smallish.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:94,performance,lock,locks,94,"@bendavid Can you share the reproducer? . > (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file). I don't see that as consequence of the stack trace (yet?). . What I do see is a large number of:. ```. #2 0x00007ffff6491f39 in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::ReadLock() () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/./libThread.so.6.28. #3 0x00007ffff6537809 in TBufferFile::ReadClassBuffer(TClass const*, void*, int, unsigned int, unsigned int, TClass const*) () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/libRIO.so. ```. which (seemingly) comes from a part of the code activated when schema evolution is needed. (I also see a bunch of things that are one-time per TTree initialization (or at least should be) .. those could be due to input files that are smallish.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:780,performance,time,time,780,"@bendavid Can you share the reproducer? . > (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file). I don't see that as consequence of the stack trace (yet?). . What I do see is a large number of:. ```. #2 0x00007ffff6491f39 in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::ReadLock() () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/./libThread.so.6.28. #3 0x00007ffff6537809 in TBufferFile::ReadClassBuffer(TClass const*, void*, int, unsigned int, unsigned int, TClass const*) () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/libRIO.so. ```. which (seemingly) comes from a part of the code activated when schema evolution is needed. (I also see a bunch of things that are one-time per TTree initialization (or at least should be) .. those could be due to input files that are smallish.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:115,reliability,slo,slot,115,"@bendavid Can you share the reproducer? . > (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file). I don't see that as consequence of the stack trace (yet?). . What I do see is a large number of:. ```. #2 0x00007ffff6491f39 in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::ReadLock() () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/./libThread.so.6.28. #3 0x00007ffff6537809 in TBufferFile::ReadClassBuffer(TClass const*, void*, int, unsigned int, unsigned int, TClass const*) () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/libRIO.so. ```. which (seemingly) comes from a part of the code activated when schema evolution is needed. (I also see a bunch of things that are one-time per TTree initialization (or at least should be) .. those could be due to input files that are smallish.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:859,safety,input,input,859,"@bendavid Can you share the reproducer? . > (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file). I don't see that as consequence of the stack trace (yet?). . What I do see is a large number of:. ```. #2 0x00007ffff6491f39 in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::ReadLock() () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/./libThread.so.6.28. #3 0x00007ffff6537809 in TBufferFile::ReadClassBuffer(TClass const*, void*, int, unsigned int, unsigned int, TClass const*) () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/libRIO.so. ```. which (seemingly) comes from a part of the code activated when schema evolution is needed. (I also see a bunch of things that are one-time per TTree initialization (or at least should be) .. those could be due to input files that are smallish.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:94,security,lock,locks,94,"@bendavid Can you share the reproducer? . > (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file). I don't see that as consequence of the stack trace (yet?). . What I do see is a large number of:. ```. #2 0x00007ffff6491f39 in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::ReadLock() () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/./libThread.so.6.28. #3 0x00007ffff6537809 in TBufferFile::ReadClassBuffer(TClass const*, void*, int, unsigned int, unsigned int, TClass const*) () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/libRIO.so. ```. which (seemingly) comes from a part of the code activated when schema evolution is needed. (I also see a bunch of things that are one-time per TTree initialization (or at least should be) .. those could be due to input files that are smallish.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:776,security,one-tim,one-time,776,"@bendavid Can you share the reproducer? . > (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file). I don't see that as consequence of the stack trace (yet?). . What I do see is a large number of:. ```. #2 0x00007ffff6491f39 in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::ReadLock() () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/./libThread.so.6.28. #3 0x00007ffff6537809 in TBufferFile::ReadClassBuffer(TClass const*, void*, int, unsigned int, unsigned int, TClass const*) () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/libRIO.so. ```. which (seemingly) comes from a part of the code activated when schema evolution is needed. (I also see a bunch of things that are one-time per TTree initialization (or at least should be) .. those could be due to input files that are smallish.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:203,testability,trace,trace,203,"@bendavid Can you share the reproducer? . > (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file). I don't see that as consequence of the stack trace (yet?). . What I do see is a large number of:. ```. #2 0x00007ffff6491f39 in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::ReadLock() () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/./libThread.so.6.28. #3 0x00007ffff6537809 in TBufferFile::ReadClassBuffer(TClass const*, void*, int, unsigned int, unsigned int, TClass const*) () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/libRIO.so. ```. which (seemingly) comes from a part of the code activated when schema evolution is needed. (I also see a bunch of things that are one-time per TTree initialization (or at least should be) .. those could be due to input files that are smallish.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:859,usability,input,input,859,"@bendavid Can you share the reproducer? . > (and in principle could also get rid of remaining locks by having each slot/thread write a separate output file). I don't see that as consequence of the stack trace (yet?). . What I do see is a large number of:. ```. #2 0x00007ffff6491f39 in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>::ReadLock() () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/./libThread.so.6.28. #3 0x00007ffff6537809 in TBufferFile::ReadClassBuffer(TClass const*, void*, int, unsigned int, unsigned int, TClass const*) () from /work/submit/mariadlf/miniforge3/envs/myenv/lib/libRIO.so. ```. which (seemingly) comes from a part of the code activated when schema evolution is needed. (I also see a bunch of things that are one-time per TTree initialization (or at least should be) .. those could be due to input files that are smallish.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:84,deployability,manag,managed,84,"So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:84,energy efficiency,manag,managed,84,"So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:15,interoperability,standard,standard,15,"So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:112,modifiability,scal,scaling,112,"So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:84,safety,manag,managed,84,"So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:95,safety,avoid,avoid,95,"So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:28,usability,workflow,workflows,28,"So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:86,deployability,manag,managed,86,"> So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences. Are you talking about the previous improvements or a new improvements? (ReadLock should indeed not affect 'too much' scalability unless there are write locks)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:86,energy efficiency,manag,managed,86,"> So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences. Are you talking about the previous improvements or a new improvements? (ReadLock should indeed not affect 'too much' scalability unless there are write locks)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:17,interoperability,standard,standard,17,"> So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences. Are you talking about the previous improvements or a new improvements? (ReadLock should indeed not affect 'too much' scalability unless there are write locks)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:114,modifiability,scal,scaling,114,"> So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences. Are you talking about the previous improvements or a new improvements? (ReadLock should indeed not affect 'too much' scalability unless there are write locks)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:299,modifiability,scal,scalability,299,"> So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences. Are you talking about the previous improvements or a new improvements? (ReadLock should indeed not affect 'too much' scalability unless there are write locks)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:299,performance,scalab,scalability,299,"> So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences. Are you talking about the previous improvements or a new improvements? (ReadLock should indeed not affect 'too much' scalability unless there are write locks)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:334,performance,lock,locks,334,"> So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences. Are you talking about the previous improvements or a new improvements? (ReadLock should indeed not affect 'too much' scalability unless there are write locks)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:86,safety,manag,managed,86,"> So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences. Are you talking about the previous improvements or a new improvements? (ReadLock should indeed not affect 'too much' scalability unless there are write locks)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:97,safety,avoid,avoid,97,"> So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences. Are you talking about the previous improvements or a new improvements? (ReadLock should indeed not affect 'too much' scalability unless there are write locks)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:334,security,lock,locks,334,"> So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences. Are you talking about the previous improvements or a new improvements? (ReadLock should indeed not affect 'too much' scalability unless there are write locks)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:30,usability,workflow,workflows,30,"> So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences. Are you talking about the previous improvements or a new improvements? (ReadLock should indeed not affect 'too much' scalability unless there are write locks)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
https://github.com/root-project/root/issues/7710:36,interoperability,standard,standard,36,"After all existing fixes, running a standard RDF multithreaded workflow without Snapshot leads to many ReadLocks and zero WriteLocks (and therefore good thread scaling). As opposed to the behaviour with Snapshot, where there are both ReadLock and WriteLock and therefore poor thread scaling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7710
