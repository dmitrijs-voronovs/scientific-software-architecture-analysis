id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/5118:4,performance,error,errors,4,The errors are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5118
https://github.com/root-project/root/pull/5118:4,safety,error,errors,4,The errors are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5118
https://github.com/root-project/root/pull/5118:4,usability,error,errors,4,The errors are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5118
https://github.com/root-project/root/pull/5119:35,availability,error,error,35,"Thanks, Bertrand. Just got several error messages in my previous PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5119
https://github.com/root-project/root/pull/5119:41,integrability,messag,messages,41,"Thanks, Bertrand. Just got several error messages in my previous PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5119
https://github.com/root-project/root/pull/5119:41,interoperability,messag,messages,41,"Thanks, Bertrand. Just got several error messages in my previous PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5119
https://github.com/root-project/root/pull/5119:35,performance,error,error,35,"Thanks, Bertrand. Just got several error messages in my previous PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5119
https://github.com/root-project/root/pull/5119:35,safety,error,error,35,"Thanks, Bertrand. Just got several error messages in my previous PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5119
https://github.com/root-project/root/pull/5119:35,usability,error,error,35,"Thanks, Bertrand. Just got several error messages in my previous PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5119
https://github.com/root-project/root/pull/5123:220,deployability,releas,release,220,This change (removing TBuffer.h from TDirectory.h) has a very high probably of breaking user code. This is cleaner so unless @Axel-Naumann objects it should go in but we need to call it clearly in (the beginning of) the release notes (the other header moves should probably be called there too).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:88,usability,user,user,88,This change (removing TBuffer.h from TDirectory.h) has a very high probably of breaking user code. This is cleaner so unless @Axel-Naumann objects it should go in but we need to call it clearly in (the beginning of) the release notes (the other header moves should probably be called there too).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:186,usability,clear,clearly,186,This change (removing TBuffer.h from TDirectory.h) has a very high probably of breaking user code. This is cleaner so unless @Axel-Naumann objects it should go in but we need to call it clearly in (the beginning of) the release notes (the other header moves should probably be called there too).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:90,usability,user,user,90,"> This change (removing TBuffer.h from TDirectory.h) has a very high probably of breaking user code. Yes, it has impact ~80 ROOT classes (in this PR). . And most probably - many user classes with custom streamers. Just checking against our project - at least two classes need to add TBuffer.h.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:178,usability,user,user,178,"> This change (removing TBuffer.h from TDirectory.h) has a very high probably of breaking user code. Yes, it has impact ~80 ROOT classes (in this PR). . And most probably - many user classes with custom streamers. Just checking against our project - at least two classes need to add TBuffer.h.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:196,usability,custom,custom,196,"> This change (removing TBuffer.h from TDirectory.h) has a very high probably of breaking user code. Yes, it has impact ~80 ROOT classes (in this PR). . And most probably - many user classes with custom streamers. Just checking against our project - at least two classes need to add TBuffer.h.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:80,safety,compl,complains,80,"@Axel-Naumann that do you think? I would apply PR. . If there are too many user complains, we always can put back TBuffer.h and TDatime.h into TDirectory.h. But at least one could see now where classes are really used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:80,security,compl,complains,80,"@Axel-Naumann that do you think? I would apply PR. . If there are too many user complains, we always can put back TBuffer.h and TDatime.h into TDirectory.h. But at least one could see now where classes are really used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:75,usability,user,user,75,"@Axel-Naumann that do you think? I would apply PR. . If there are too many user complains, we always can put back TBuffer.h and TDatime.h into TDirectory.h. But at least one could see now where classes are really used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:291,deployability,build,build,291,"I'd like to understand pro/cons a bit better. The cost is clear: we will break user code, and likely significant fractions. What's the benefit - I don't think we'll reduce compilation times dramatically: TBuffer without what's anyway included in TDirectory is small. Do you see a measurable build time reduction? I do value code hygiene, but the cost might be too high here, so we'll need more convincing arguments than usually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:165,energy efficiency,reduc,reduce,165,"I'd like to understand pro/cons a bit better. The cost is clear: we will break user code, and likely significant fractions. What's the benefit - I don't think we'll reduce compilation times dramatically: TBuffer without what's anyway included in TDirectory is small. Do you see a measurable build time reduction? I do value code hygiene, but the cost might be too high here, so we'll need more convincing arguments than usually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:280,energy efficiency,measur,measurable,280,"I'd like to understand pro/cons a bit better. The cost is clear: we will break user code, and likely significant fractions. What's the benefit - I don't think we'll reduce compilation times dramatically: TBuffer without what's anyway included in TDirectory is small. Do you see a measurable build time reduction? I do value code hygiene, but the cost might be too high here, so we'll need more convincing arguments than usually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:302,energy efficiency,reduc,reduction,302,"I'd like to understand pro/cons a bit better. The cost is clear: we will break user code, and likely significant fractions. What's the benefit - I don't think we'll reduce compilation times dramatically: TBuffer without what's anyway included in TDirectory is small. Do you see a measurable build time reduction? I do value code hygiene, but the cost might be too high here, so we'll need more convincing arguments than usually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:184,performance,time,times,184,"I'd like to understand pro/cons a bit better. The cost is clear: we will break user code, and likely significant fractions. What's the benefit - I don't think we'll reduce compilation times dramatically: TBuffer without what's anyway included in TDirectory is small. Do you see a measurable build time reduction? I do value code hygiene, but the cost might be too high here, so we'll need more convincing arguments than usually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:297,performance,time,time,297,"I'd like to understand pro/cons a bit better. The cost is clear: we will break user code, and likely significant fractions. What's the benefit - I don't think we'll reduce compilation times dramatically: TBuffer without what's anyway included in TDirectory is small. Do you see a measurable build time reduction? I do value code hygiene, but the cost might be too high here, so we'll need more convincing arguments than usually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:101,security,sign,significant,101,"I'd like to understand pro/cons a bit better. The cost is clear: we will break user code, and likely significant fractions. What's the benefit - I don't think we'll reduce compilation times dramatically: TBuffer without what's anyway included in TDirectory is small. Do you see a measurable build time reduction? I do value code hygiene, but the cost might be too high here, so we'll need more convincing arguments than usually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:12,testability,understand,understand,12,"I'd like to understand pro/cons a bit better. The cost is clear: we will break user code, and likely significant fractions. What's the benefit - I don't think we'll reduce compilation times dramatically: TBuffer without what's anyway included in TDirectory is small. Do you see a measurable build time reduction? I do value code hygiene, but the cost might be too high here, so we'll need more convincing arguments than usually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:58,usability,clear,clear,58,"I'd like to understand pro/cons a bit better. The cost is clear: we will break user code, and likely significant fractions. What's the benefit - I don't think we'll reduce compilation times dramatically: TBuffer without what's anyway included in TDirectory is small. Do you see a measurable build time reduction? I do value code hygiene, but the cost might be too high here, so we'll need more convincing arguments than usually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:79,usability,user,user,79,"I'd like to understand pro/cons a bit better. The cost is clear: we will break user code, and likely significant fractions. What's the benefit - I don't think we'll reduce compilation times dramatically: TBuffer without what's anyway included in TDirectory is small. Do you see a measurable build time reduction? I do value code hygiene, but the cost might be too high here, so we'll need more convincing arguments than usually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:210,usability,user,users,210,"And from my point of view, removing TVirtualX.h from TGWindow.h (or wherever it was) caused already some trouble (I had to add `#include ""TVirtualX.h""` in all GUI related source files in my projects...). So if users will have to do the same for TBuffer.h, they may be unhappy (just my two cents)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:26,deployability,build,build,26,"> Do you see a measurable build time reduction? I do not think that performance plays big role here. . > so we'll need more convincing arguments than usually. The only argument here - sanitise code and include that one really using. . As a compromise - we can add special define into RConfig.h which let switch on/off such convenience includes. Now there are several places: . * TDirectory.h, . * TVirtualPad.h (where TVirtualX.h was removed). * TGWindow.h (also TVirtualX.h was removed). * TROOT.h (I removed TSystem.h). There are other candidates where such ifdef can be used. And at any time we could decide that should be default value for such `define`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:15,energy efficiency,measur,measurable,15,"> Do you see a measurable build time reduction? I do not think that performance plays big role here. . > so we'll need more convincing arguments than usually. The only argument here - sanitise code and include that one really using. . As a compromise - we can add special define into RConfig.h which let switch on/off such convenience includes. Now there are several places: . * TDirectory.h, . * TVirtualPad.h (where TVirtualX.h was removed). * TGWindow.h (also TVirtualX.h was removed). * TROOT.h (I removed TSystem.h). There are other candidates where such ifdef can be used. And at any time we could decide that should be default value for such `define`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:37,energy efficiency,reduc,reduction,37,"> Do you see a measurable build time reduction? I do not think that performance plays big role here. . > so we'll need more convincing arguments than usually. The only argument here - sanitise code and include that one really using. . As a compromise - we can add special define into RConfig.h which let switch on/off such convenience includes. Now there are several places: . * TDirectory.h, . * TVirtualPad.h (where TVirtualX.h was removed). * TGWindow.h (also TVirtualX.h was removed). * TROOT.h (I removed TSystem.h). There are other candidates where such ifdef can be used. And at any time we could decide that should be default value for such `define`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:32,performance,time,time,32,"> Do you see a measurable build time reduction? I do not think that performance plays big role here. . > so we'll need more convincing arguments than usually. The only argument here - sanitise code and include that one really using. . As a compromise - we can add special define into RConfig.h which let switch on/off such convenience includes. Now there are several places: . * TDirectory.h, . * TVirtualPad.h (where TVirtualX.h was removed). * TGWindow.h (also TVirtualX.h was removed). * TROOT.h (I removed TSystem.h). There are other candidates where such ifdef can be used. And at any time we could decide that should be default value for such `define`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:68,performance,perform,performance,68,"> Do you see a measurable build time reduction? I do not think that performance plays big role here. . > so we'll need more convincing arguments than usually. The only argument here - sanitise code and include that one really using. . As a compromise - we can add special define into RConfig.h which let switch on/off such convenience includes. Now there are several places: . * TDirectory.h, . * TVirtualPad.h (where TVirtualX.h was removed). * TGWindow.h (also TVirtualX.h was removed). * TROOT.h (I removed TSystem.h). There are other candidates where such ifdef can be used. And at any time we could decide that should be default value for such `define`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:590,performance,time,time,590,"> Do you see a measurable build time reduction? I do not think that performance plays big role here. . > so we'll need more convincing arguments than usually. The only argument here - sanitise code and include that one really using. . As a compromise - we can add special define into RConfig.h which let switch on/off such convenience includes. Now there are several places: . * TDirectory.h, . * TVirtualPad.h (where TVirtualX.h was removed). * TGWindow.h (also TVirtualX.h was removed). * TROOT.h (I removed TSystem.h). There are other candidates where such ifdef can be used. And at any time we could decide that should be default value for such `define`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:184,safety,sanit,sanitise,184,"> Do you see a measurable build time reduction? I do not think that performance plays big role here. . > so we'll need more convincing arguments than usually. The only argument here - sanitise code and include that one really using. . As a compromise - we can add special define into RConfig.h which let switch on/off such convenience includes. Now there are several places: . * TDirectory.h, . * TVirtualPad.h (where TVirtualX.h was removed). * TGWindow.h (also TVirtualX.h was removed). * TROOT.h (I removed TSystem.h). There are other candidates where such ifdef can be used. And at any time we could decide that should be default value for such `define`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:184,security,sanit,sanitise,184,"> Do you see a measurable build time reduction? I do not think that performance plays big role here. . > so we'll need more convincing arguments than usually. The only argument here - sanitise code and include that one really using. . As a compromise - we can add special define into RConfig.h which let switch on/off such convenience includes. Now there are several places: . * TDirectory.h, . * TVirtualPad.h (where TVirtualX.h was removed). * TGWindow.h (also TVirtualX.h was removed). * TROOT.h (I removed TSystem.h). There are other candidates where such ifdef can be used. And at any time we could decide that should be default value for such `define`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:68,usability,perform,performance,68,"> Do you see a measurable build time reduction? I do not think that performance plays big role here. . > so we'll need more convincing arguments than usually. The only argument here - sanitise code and include that one really using. . As a compromise - we can add special define into RConfig.h which let switch on/off such convenience includes. Now there are several places: . * TDirectory.h, . * TVirtualPad.h (where TVirtualX.h was removed). * TGWindow.h (also TVirtualX.h was removed). * TROOT.h (I removed TSystem.h). There are other candidates where such ifdef can be used. And at any time we could decide that should be default value for such `define`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:22,modifiability,paramet,parameter,22,"I add `less_includes` parameter to cmake. By default is off. As an example, shows how can be used in TDirectory.h.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:94,deployability,depend,dependency,94,"@Axel-Naumann @pcanal . Just to have some performance numbers. If I compare with root6.18.04, dependency tree in our small ROOT-based project reduced by 5%. If one considers only ROOT-related includes - it is about 10%. It is approx gain in compilation compared to previous releases. And with `less_includes` switch one could keep longer transition period to let users adjust their code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:274,deployability,releas,releases,274,"@Axel-Naumann @pcanal . Just to have some performance numbers. If I compare with root6.18.04, dependency tree in our small ROOT-based project reduced by 5%. If one considers only ROOT-related includes - it is about 10%. It is approx gain in compilation compared to previous releases. And with `less_includes` switch one could keep longer transition period to let users adjust their code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:142,energy efficiency,reduc,reduced,142,"@Axel-Naumann @pcanal . Just to have some performance numbers. If I compare with root6.18.04, dependency tree in our small ROOT-based project reduced by 5%. If one considers only ROOT-related includes - it is about 10%. It is approx gain in compilation compared to previous releases. And with `less_includes` switch one could keep longer transition period to let users adjust their code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:94,integrability,depend,dependency,94,"@Axel-Naumann @pcanal . Just to have some performance numbers. If I compare with root6.18.04, dependency tree in our small ROOT-based project reduced by 5%. If one considers only ROOT-related includes - it is about 10%. It is approx gain in compilation compared to previous releases. And with `less_includes` switch one could keep longer transition period to let users adjust their code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:94,modifiability,depend,dependency,94,"@Axel-Naumann @pcanal . Just to have some performance numbers. If I compare with root6.18.04, dependency tree in our small ROOT-based project reduced by 5%. If one considers only ROOT-related includes - it is about 10%. It is approx gain in compilation compared to previous releases. And with `less_includes` switch one could keep longer transition period to let users adjust their code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:42,performance,perform,performance,42,"@Axel-Naumann @pcanal . Just to have some performance numbers. If I compare with root6.18.04, dependency tree in our small ROOT-based project reduced by 5%. If one considers only ROOT-related includes - it is about 10%. It is approx gain in compilation compared to previous releases. And with `less_includes` switch one could keep longer transition period to let users adjust their code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:94,safety,depend,dependency,94,"@Axel-Naumann @pcanal . Just to have some performance numbers. If I compare with root6.18.04, dependency tree in our small ROOT-based project reduced by 5%. If one considers only ROOT-related includes - it is about 10%. It is approx gain in compilation compared to previous releases. And with `less_includes` switch one could keep longer transition period to let users adjust their code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:94,testability,depend,dependency,94,"@Axel-Naumann @pcanal . Just to have some performance numbers. If I compare with root6.18.04, dependency tree in our small ROOT-based project reduced by 5%. If one considers only ROOT-related includes - it is about 10%. It is approx gain in compilation compared to previous releases. And with `less_includes` switch one could keep longer transition period to let users adjust their code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:42,usability,perform,performance,42,"@Axel-Naumann @pcanal . Just to have some performance numbers. If I compare with root6.18.04, dependency tree in our small ROOT-based project reduced by 5%. If one considers only ROOT-related includes - it is about 10%. It is approx gain in compilation compared to previous releases. And with `less_includes` switch one could keep longer transition period to let users adjust their code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:363,usability,user,users,363,"@Axel-Naumann @pcanal . Just to have some performance numbers. If I compare with root6.18.04, dependency tree in our small ROOT-based project reduced by 5%. If one considers only ROOT-related includes - it is about 10%. It is approx gain in compilation compared to previous releases. And with `less_includes` switch one could keep longer transition period to let users adjust their code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:94,availability,servic,services,94,@linev: [projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71688/testReport/projectroot.roottest.root.tree/friend/roottest_root_tree_friend_make/) indicates that at least on more change is needed in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:94,deployability,servic,services,94,@linev: [projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71688/testReport/projectroot.roottest.root.tree/friend/roottest_root_tree_friend_make/) indicates that at least on more change is needed in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:146,deployability,build,build,146,@linev: [projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71688/testReport/projectroot.roottest.root.tree/friend/roottest_root_tree_friend_make/) indicates that at least on more change is needed in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:94,integrability,servic,services,94,@linev: [projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71688/testReport/projectroot.roottest.root.tree/friend/roottest_root_tree_friend_make/) indicates that at least on more change is needed in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:94,modifiability,servic,services,94,@linev: [projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71688/testReport/projectroot.roottest.root.tree/friend/roottest_root_tree_friend_make/) indicates that at least on more change is needed in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:158,safety,test,testReport,158,@linev: [projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71688/testReport/projectroot.roottest.root.tree/friend/roottest_root_tree_friend_make/) indicates that at least on more change is needed in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:158,testability,test,testReport,158,@linev: [projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71688/testReport/projectroot.roottest.root.tree/friend/roottest_root_tree_friend_make/) indicates that at least on more change is needed in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:240,usability,indicat,indicates,240,@linev: [projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71688/testReport/projectroot.roottest.root.tree/friend/roottest_root_tree_friend_make/) indicates that at least on more change is needed in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:71,usability,indicat,indicates,71,> projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make indicates that at least on more change is needed in roottest. @pcanal Done,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5123:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5123
https://github.com/root-project/root/pull/5124:0,availability,Failur,Failure,0,Failure has nothing to do with json parser - merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5124
https://github.com/root-project/root/pull/5124:0,deployability,Fail,Failure,0,Failure has nothing to do with json parser - merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5124
https://github.com/root-project/root/pull/5124:0,performance,Failur,Failure,0,Failure has nothing to do with json parser - merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5124
https://github.com/root-project/root/pull/5124:0,reliability,Fail,Failure,0,Failure has nothing to do with json parser - merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5124
https://github.com/root-project/root/pull/5126:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5126
https://github.com/root-project/root/pull/5130:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:28,availability,Error,Errors,28,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:166,availability,error,error,166,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:338,availability,error,error,338,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:37,deployability,FAIL,FAILED,37,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:215,deployability,FAIL,FAILED,215,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:28,performance,Error,Errors,28,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:166,performance,error,error,166,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:338,performance,error,error,338,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:37,reliability,FAIL,FAILED,37,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:215,reliability,FAIL,FAILED,215,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:0,safety,Test,Testing,0,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:28,safety,Error,Errors,28,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:166,safety,error,error,166,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:338,safety,error,error,338,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:180,security,sign,signal,180,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:352,security,sign,signal,352,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:0,testability,Test,Testing,0,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:28,usability,Error,Errors,28,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:66,usability,tool,tools,66,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:166,usability,error,error,166,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:244,usability,tool,tools,244,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:338,usability,error,error,338,Testing evil comment:. ```. Errors:. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/IncrementalParser.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. FAILED: interpreter/llvm/src/tools/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/Interpreter.cpp.o. c++: fatal error: Killed signal terminated program cc1plus. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:11,deployability,build,build,11,@phsft-bot build just on mac1014/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5130:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5130
https://github.com/root-project/root/pull/5131:175,modifiability,variab,variable,175,"@Axel-Naumann sadly looks like I can't add a check and warning when python is OFF, because python is BOOL and if(NOT python) will trigger warning all the time, after 'python' variable was initialized.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5131
https://github.com/root-project/root/pull/5131:154,performance,time,time,154,"@Axel-Naumann sadly looks like I can't add a check and warning when python is OFF, because python is BOOL and if(NOT python) will trigger warning all the time, after 'python' variable was initialized.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5131
https://github.com/root-project/root/pull/5131:126,usability,user,user,126,"Couldn't you make it a string option instead and check if the value is changed from the ""unlikely to be actually typed by the user"" default?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5131
https://github.com/root-project/root/pull/5131:296,deployability,releas,releases,296,@pcanal the problem is that options are boolean (OFF/ON). I am not sure how much I can compare what people put there? (I need to take in consideration all cases such as Off/OFF/off). Also I tried and it looks like very complex hack. With current approach I believe we will at least not break LCG releases or CMSSW. Should we add renaming of python -> pyroot to Release notes when I will backport?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5131
https://github.com/root-project/root/pull/5131:361,deployability,Releas,Release,361,@pcanal the problem is that options are boolean (OFF/ON). I am not sure how much I can compare what people put there? (I need to take in consideration all cases such as Off/OFF/off). Also I tried and it looks like very complex hack. With current approach I believe we will at least not break LCG releases or CMSSW. Should we add renaming of python -> pyroot to Release notes when I will backport?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5131
https://github.com/root-project/root/pull/5131:238,energy efficiency,current,current,238,@pcanal the problem is that options are boolean (OFF/ON). I am not sure how much I can compare what people put there? (I need to take in consideration all cases such as Off/OFF/off). Also I tried and it looks like very complex hack. With current approach I believe we will at least not break LCG releases or CMSSW. Should we add renaming of python -> pyroot to Release notes when I will backport?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5131
https://github.com/root-project/root/pull/5131:219,safety,compl,complex,219,@pcanal the problem is that options are boolean (OFF/ON). I am not sure how much I can compare what people put there? (I need to take in consideration all cases such as Off/OFF/off). Also I tried and it looks like very complex hack. With current approach I believe we will at least not break LCG releases or CMSSW. Should we add renaming of python -> pyroot to Release notes when I will backport?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5131
https://github.com/root-project/root/pull/5131:219,security,compl,complex,219,@pcanal the problem is that options are boolean (OFF/ON). I am not sure how much I can compare what people put there? (I need to take in consideration all cases such as Off/OFF/off). Also I tried and it looks like very complex hack. With current approach I believe we will at least not break LCG releases or CMSSW. Should we add renaming of python -> pyroot to Release notes when I will backport?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5131
https://github.com/root-project/root/pull/5131:227,security,hack,hack,227,@pcanal the problem is that options are boolean (OFF/ON). I am not sure how much I can compare what people put there? (I need to take in consideration all cases such as Off/OFF/off). Also I tried and it looks like very complex hack. With current approach I believe we will at least not break LCG releases or CMSSW. Should we add renaming of python -> pyroot to Release notes when I will backport?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5131
https://github.com/root-project/root/pull/5133:80,modifiability,exten,extend,80,"@pcanal How should we proceed? Is it goes in right direction? If yes, should we extend `TClass::HasDefaultConstructor(bool testio=false)` or add new method `TClass::HasIOConstructor()`? Also problem with array of objects is not clear for me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:123,safety,test,testio,123,"@pcanal How should we proceed? Is it goes in right direction? If yes, should we extend `TClass::HasDefaultConstructor(bool testio=false)` or add new method `TClass::HasIOConstructor()`? Also problem with array of objects is not clear for me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:123,testability,test,testio,123,"@pcanal How should we proceed? Is it goes in right direction? If yes, should we extend `TClass::HasDefaultConstructor(bool testio=false)` or add new method `TClass::HasIOConstructor()`? Also problem with array of objects is not clear for me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:228,usability,clear,clear,228,"@pcanal How should we proceed? Is it goes in right direction? If yes, should we extend `TClass::HasDefaultConstructor(bool testio=false)` or add new method `TClass::HasIOConstructor()`? Also problem with array of objects is not clear for me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:105,interoperability,bind,binding,105,"Last point - when I generate signature ClassName(*((__void__*)nullptr)), I get warning from cling:. ```. binding dereferenced null pointer to reference has undefined behavior [-Wnull-dereference]. ```. How one can avoid it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:105,modifiability,bind,binding,105,"Last point - when I generate signature ClassName(*((__void__*)nullptr)), I get warning from cling:. ```. binding dereferenced null pointer to reference has undefined behavior [-Wnull-dereference]. ```. How one can avoid it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:214,safety,avoid,avoid,214,"Last point - when I generate signature ClassName(*((__void__*)nullptr)), I get warning from cling:. ```. binding dereferenced null pointer to reference has undefined behavior [-Wnull-dereference]. ```. How one can avoid it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:29,security,sign,signature,29,"Last point - when I generate signature ClassName(*((__void__*)nullptr)), I get warning from cling:. ```. binding dereferenced null pointer to reference has undefined behavior [-Wnull-dereference]. ```. How one can avoid it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:166,usability,behavi,behavior,166,"Last point - when I generate signature ClassName(*((__void__*)nullptr)), I get warning from cling:. ```. binding dereferenced null pointer to reference has undefined behavior [-Wnull-dereference]. ```. How one can avoid it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:49,modifiability,variab,variable,49,"> How one can avoid it? Finally I just use dummy variable like ` ClassName(*((__void__)arena))`. . Not nice, but seems to be work. Now v7 histogram works with both kinds of constructor signature",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:14,safety,avoid,avoid,14,"> How one can avoid it? Finally I just use dummy variable like ` ClassName(*((__void__)arena))`. . Not nice, but seems to be work. Now v7 histogram works with both kinds of constructor signature",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:185,security,sign,signature,185,"> How one can avoid it? Finally I just use dummy variable like ` ClassName(*((__void__)arena))`. . Not nice, but seems to be work. Now v7 histogram works with both kinds of constructor signature",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:14,safety,test,tests,14,Could you add tests for the Callfunc changes and maybe the rest?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:14,testability,test,tests,14,Could you add tests for the Callfunc changes and maybe the rest?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:79,performance,I/O,I/O,79,> Could you add tests for the Callfunc changes. That do you mean? Signature of I/O constructor changes for the class? Is it possible?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:16,safety,test,tests,16,> Could you add tests for the Callfunc changes. That do you mean? Signature of I/O constructor changes for the class? Is it possible?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:66,security,Sign,Signature,66,> Could you add tests for the Callfunc changes. That do you mean? Signature of I/O constructor changes for the class? Is it possible?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:16,testability,test,tests,16,> Could you add tests for the Callfunc changes. That do you mean? Signature of I/O constructor changes for the class? Is it possible?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:46,deployability,continu,continue,46,@pcanal Are you approve changes or we want to continue. I tried to clarify interface - split methods of constructor detection. And introduce special enum which used only for wrapper creation - see my last three commits,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:75,integrability,interfac,interface,75,@pcanal Are you approve changes or we want to continue. I tried to clarify interface - split methods of constructor detection. And introduce special enum which used only for wrapper creation - see my last three commits,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:174,integrability,wrap,wrapper,174,@pcanal Are you approve changes or we want to continue. I tried to clarify interface - split methods of constructor detection. And introduce special enum which used only for wrapper creation - see my last three commits,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:75,interoperability,interfac,interface,75,@pcanal Are you approve changes or we want to continue. I tried to clarify interface - split methods of constructor detection. And introduce special enum which used only for wrapper creation - see my last three commits,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:174,interoperability,wrapper,wrapper,174,@pcanal Are you approve changes or we want to continue. I tried to clarify interface - split methods of constructor detection. And introduce special enum which used only for wrapper creation - see my last three commits,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:75,modifiability,interfac,interface,75,@pcanal Are you approve changes or we want to continue. I tried to clarify interface - split methods of constructor detection. And introduce special enum which used only for wrapper creation - see my last three commits,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:116,safety,detect,detection,116,@pcanal Are you approve changes or we want to continue. I tried to clarify interface - split methods of constructor detection. And introduce special enum which used only for wrapper creation - see my last three commits,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:116,security,detect,detection,116,@pcanal Are you approve changes or we want to continue. I tried to clarify interface - split methods of constructor detection. And introduce special enum which used only for wrapper creation - see my last three commits,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:8,availability,Failur,Failure,8,@pcanal Failure with `root_dataframe_test_splitcoll_arrayview` has nothing to do with the PR. I just tried dummy PR #5155 - got same kind of errors,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:141,availability,error,errors,141,@pcanal Failure with `root_dataframe_test_splitcoll_arrayview` has nothing to do with the PR. I just tried dummy PR #5155 - got same kind of errors,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:8,deployability,Fail,Failure,8,@pcanal Failure with `root_dataframe_test_splitcoll_arrayview` has nothing to do with the PR. I just tried dummy PR #5155 - got same kind of errors,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:8,performance,Failur,Failure,8,@pcanal Failure with `root_dataframe_test_splitcoll_arrayview` has nothing to do with the PR. I just tried dummy PR #5155 - got same kind of errors,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:141,performance,error,errors,141,@pcanal Failure with `root_dataframe_test_splitcoll_arrayview` has nothing to do with the PR. I just tried dummy PR #5155 - got same kind of errors,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:8,reliability,Fail,Failure,8,@pcanal Failure with `root_dataframe_test_splitcoll_arrayview` has nothing to do with the PR. I just tried dummy PR #5155 - got same kind of errors,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:141,safety,error,errors,141,@pcanal Failure with `root_dataframe_test_splitcoll_arrayview` has nothing to do with the PR. I just tried dummy PR #5155 - got same kind of errors,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:141,usability,error,errors,141,@pcanal Failure with `root_dataframe_test_splitcoll_arrayview` has nothing to do with the PR. I just tried dummy PR #5155 - got same kind of errors,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:39,availability,failur,failure,39,Indeed. The message (that provokes the failure) appears because NDEBUG is now undefined in the PR build (as originally intended and fix today by @Axel-Naumann),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:39,deployability,fail,failure,39,Indeed. The message (that provokes the failure) appears because NDEBUG is now undefined in the PR build (as originally intended and fix today by @Axel-Naumann),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:98,deployability,build,build,98,Indeed. The message (that provokes the failure) appears because NDEBUG is now undefined in the PR build (as originally intended and fix today by @Axel-Naumann),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:12,integrability,messag,message,12,Indeed. The message (that provokes the failure) appears because NDEBUG is now undefined in the PR build (as originally intended and fix today by @Axel-Naumann),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:12,interoperability,messag,message,12,Indeed. The message (that provokes the failure) appears because NDEBUG is now undefined in the PR build (as originally intended and fix today by @Axel-Naumann),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:39,performance,failur,failure,39,Indeed. The message (that provokes the failure) appears because NDEBUG is now undefined in the PR build (as originally intended and fix today by @Axel-Naumann),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:39,reliability,fail,failure,39,Indeed. The message (that provokes the failure) appears because NDEBUG is now undefined in the PR build (as originally intended and fix today by @Axel-Naumann),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:10,availability,failur,failures,10,All tests failures has nothing to do with PR - merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:10,deployability,fail,failures,10,All tests failures has nothing to do with PR - merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:10,performance,failur,failures,10,All tests failures has nothing to do with PR - merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:10,reliability,fail,failures,10,All tests failures has nothing to do with PR - merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:4,safety,test,tests,4,All tests failures has nothing to do with PR - merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5133:4,testability,test,tests,4,All tests failures has nothing to do with PR - merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5133
https://github.com/root-project/root/pull/5137:4,availability,failur,failures,4,"The failures (compiler crash building clang, infrastructure problems) are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5137
https://github.com/root-project/root/pull/5137:4,deployability,fail,failures,4,"The failures (compiler crash building clang, infrastructure problems) are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5137
https://github.com/root-project/root/pull/5137:29,deployability,build,building,29,"The failures (compiler crash building clang, infrastructure problems) are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5137
https://github.com/root-project/root/pull/5137:45,deployability,infrastructur,infrastructure,45,"The failures (compiler crash building clang, infrastructure problems) are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5137
https://github.com/root-project/root/pull/5137:4,performance,failur,failures,4,"The failures (compiler crash building clang, infrastructure problems) are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5137
https://github.com/root-project/root/pull/5137:4,reliability,fail,failures,4,"The failures (compiler crash building clang, infrastructure problems) are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5137
https://github.com/root-project/root/pull/5138:0,availability,failur,failures,0,failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5138
https://github.com/root-project/root/pull/5138:0,deployability,fail,failures,0,failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5138
https://github.com/root-project/root/pull/5138:0,performance,failur,failures,0,failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5138
https://github.com/root-project/root/pull/5138:0,reliability,fail,failures,0,failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5138
https://github.com/root-project/root/pull/5139:35,safety,compl,complicated,35,"It turns out it's quite a bit more complicated to use TTree::SetBranchAddress to reset TTree branch pointers at the beginning of every task rather than just create new branches with TTree::Branch. In particular, TTree::Branch accepts addresses of STL collections while TTree::SetBranchAddress requires the address of a pointer to the STL collection, and the pointer is required to have same lifetime as the pointee. This would require quite a bit of book-keeping inside a MT Snapshot. I'll open a new PR that will take a similar approach but will only rely on TTree::Branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5139
https://github.com/root-project/root/pull/5139:35,security,compl,complicated,35,"It turns out it's quite a bit more complicated to use TTree::SetBranchAddress to reset TTree branch pointers at the beginning of every task rather than just create new branches with TTree::Branch. In particular, TTree::Branch accepts addresses of STL collections while TTree::SetBranchAddress requires the address of a pointer to the STL collection, and the pointer is required to have same lifetime as the pointee. This would require quite a bit of book-keeping inside a MT Snapshot. I'll open a new PR that will take a similar approach but will only rely on TTree::Branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5139
https://github.com/root-project/root/pull/5140:131,availability,failur,failures,131,"These changes seem to have more implications than I thought (I only ran the relevant tests, not others). Will investigate the test failures asap.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5140
https://github.com/root-project/root/pull/5140:131,deployability,fail,failures,131,"These changes seem to have more implications than I thought (I only ran the relevant tests, not others). Will investigate the test failures asap.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5140
https://github.com/root-project/root/pull/5140:131,performance,failur,failures,131,"These changes seem to have more implications than I thought (I only ran the relevant tests, not others). Will investigate the test failures asap.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5140
https://github.com/root-project/root/pull/5140:131,reliability,fail,failures,131,"These changes seem to have more implications than I thought (I only ran the relevant tests, not others). Will investigate the test failures asap.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5140
https://github.com/root-project/root/pull/5140:85,safety,test,tests,85,"These changes seem to have more implications than I thought (I only ran the relevant tests, not others). Will investigate the test failures asap.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5140
https://github.com/root-project/root/pull/5140:126,safety,test,test,126,"These changes seem to have more implications than I thought (I only ran the relevant tests, not others). Will investigate the test failures asap.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5140
https://github.com/root-project/root/pull/5140:85,testability,test,tests,85,"These changes seem to have more implications than I thought (I only ran the relevant tests, not others). Will investigate the test failures asap.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5140
https://github.com/root-project/root/pull/5140:126,testability,test,test,126,"These changes seem to have more implications than I thought (I only ran the relevant tests, not others). Will investigate the test failures asap.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5140
https://github.com/root-project/root/pull/5140:35,safety,compl,complicated,35,"It turns out it's quite a bit more complicated to use `TTree::SetBranchAddress` to reset TTree branch pointers at the beginning of every task rather than just create new branches with `TTree::Branch`. In particular, `TTree::Branch` accepts addresses of STL collections while `TTree::SetBranchAddress` requires the address of a pointer to the STL collection, and the pointer is required to have same lifetime as the pointee. This would require quite a bit of book-keeping inside a MT Snapshot. I'll open a new PR that will take a similar approach but will only rely on `TTree::Branch`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5140
https://github.com/root-project/root/pull/5140:35,security,compl,complicated,35,"It turns out it's quite a bit more complicated to use `TTree::SetBranchAddress` to reset TTree branch pointers at the beginning of every task rather than just create new branches with `TTree::Branch`. In particular, `TTree::Branch` accepts addresses of STL collections while `TTree::SetBranchAddress` requires the address of a pointer to the STL collection, and the pointer is required to have same lifetime as the pointee. This would require quite a bit of book-keeping inside a MT Snapshot. I'll open a new PR that will take a similar approach but will only rely on `TTree::Branch`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5140
https://github.com/root-project/root/pull/5146:70,deployability,patch,patch,70,"Thanks, but that's certainly not in scope for this bug fix PR for the patch release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5146
https://github.com/root-project/root/pull/5146:76,deployability,releas,release,76,"Thanks, but that's certainly not in scope for this bug fix PR for the patch release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5146
https://github.com/root-project/root/pull/5146:70,safety,patch,patch,70,"Thanks, but that's certainly not in scope for this bug fix PR for the patch release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5146
https://github.com/root-project/root/pull/5146:70,security,patch,patch,70,"Thanks, but that's certainly not in scope for this bug fix PR for the patch release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5146
https://github.com/root-project/root/pull/5146:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5146
https://github.com/root-project/root/pull/5148:18,deployability,modul,modules,18,The file ```cmake/modules/#SearchInstalledSoftware.cmake#``` (note the # characters) seems to have been inadvertently added to the commit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:18,modifiability,modul,modules,18,The file ```cmake/modules/#SearchInstalledSoftware.cmake#``` (note the # characters) seems to have been inadvertently added to the commit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:18,safety,modul,modules,18,The file ```cmake/modules/#SearchInstalledSoftware.cmake#``` (note the # characters) seems to have been inadvertently added to the commit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:18,deployability,modul,modules,18,> The file `cmake/modules/#SearchInstalledSoftware.cmake#` (note the # characters) seems to have been inadvertently added to the commit. Thank you Philippe for noticing this ! It is removed now,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:18,modifiability,modul,modules,18,> The file `cmake/modules/#SearchInstalledSoftware.cmake#` (note the # characters) seems to have been inadvertently added to the commit. Thank you Philippe for noticing this ! It is removed now,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:18,safety,modul,modules,18,> The file `cmake/modules/#SearchInstalledSoftware.cmake#` (note the # characters) seems to have been inadvertently added to the commit. Thank you Philippe for noticing this ! It is removed now,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:11,deployability,build,build,11,@phsft-bot build on ROOT-performance-centos7-multicore/default with flags -Dfail-on-missing=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:25,performance,perform,performance-,25,@phsft-bot build on ROOT-performance-centos7-multicore/default with flags -Dfail-on-missing=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:25,usability,perform,performance-,25,@phsft-bot build on ROOT-performance-centos7-multicore/default with flags -Dfail-on-missing=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:9,deployability,build,build,9,Starting build on ROOT-performance-centos7-multicore/default with flags -Dfail-on-missing=ON -Dcudnn=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:23,performance,perform,performance-,23,Starting build on ROOT-performance-centos7-multicore/default with flags -Dfail-on-missing=ON -Dcudnn=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:23,usability,perform,performance-,23,Starting build on ROOT-performance-centos7-multicore/default with flags -Dfail-on-missing=ON -Dcudnn=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:11,deployability,build,build,11,@phsft-bot build on ROOT-performance-centos7-multicore/default with flags -Dfail-on-missing=ON -Dcudnn=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:25,performance,perform,performance-,25,@phsft-bot build on ROOT-performance-centos7-multicore/default with flags -Dfail-on-missing=ON -Dcudnn=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:25,usability,perform,performance-,25,@phsft-bot build on ROOT-performance-centos7-multicore/default with flags -Dfail-on-missing=ON -Dcudnn=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:11,deployability,build,build,11,@phsft-bot build on ROOT-performance-centos7-multicore/default with flags -Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:123,energy efficiency,gpu,gpu,123,@phsft-bot build on ROOT-performance-centos7-multicore/default with flags -Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:25,performance,perform,performance-,25,@phsft-bot build on ROOT-performance-centos7-multicore/default with flags -Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:123,performance,gpu,gpu,123,@phsft-bot build on ROOT-performance-centos7-multicore/default with flags -Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:25,usability,perform,performance-,25,@phsft-bot build on ROOT-performance-centos7-multicore/default with flags -Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:105,availability,servic,services,105,"Having `-Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON` -> makes build fail (OK) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71742/console , while `Dfail-on-missing=ON -Dcudnn=On` -> no... @amadio what is expected behavior that should be here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:74,deployability,build,build,74,"Having `-Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON` -> makes build fail (OK) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71742/console , while `Dfail-on-missing=ON -Dcudnn=On` -> no... @amadio what is expected behavior that should be here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:80,deployability,fail,fail,80,"Having `-Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON` -> makes build fail (OK) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71742/console , while `Dfail-on-missing=ON -Dcudnn=On` -> no... @amadio what is expected behavior that should be here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:105,deployability,servic,services,105,"Having `-Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON` -> makes build fail (OK) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71742/console , while `Dfail-on-missing=ON -Dcudnn=On` -> no... @amadio what is expected behavior that should be here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:157,deployability,build,build,157,"Having `-Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON` -> makes build fail (OK) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71742/console , while `Dfail-on-missing=ON -Dcudnn=On` -> no... @amadio what is expected behavior that should be here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:57,energy efficiency,gpu,gpu,57,"Having `-Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON` -> makes build fail (OK) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71742/console , while `Dfail-on-missing=ON -Dcudnn=On` -> no... @amadio what is expected behavior that should be here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:105,integrability,servic,services,105,"Having `-Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON` -> makes build fail (OK) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71742/console , while `Dfail-on-missing=ON -Dcudnn=On` -> no... @amadio what is expected behavior that should be here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:105,modifiability,servic,services,105,"Having `-Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON` -> makes build fail (OK) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71742/console , while `Dfail-on-missing=ON -Dcudnn=On` -> no... @amadio what is expected behavior that should be here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:57,performance,gpu,gpu,57,"Having `-Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON` -> makes build fail (OK) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71742/console , while `Dfail-on-missing=ON -Dcudnn=On` -> no... @amadio what is expected behavior that should be here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:80,reliability,fail,fail,80,"Having `-Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON` -> makes build fail (OK) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71742/console , while `Dfail-on-missing=ON -Dcudnn=On` -> no... @amadio what is expected behavior that should be here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:252,usability,behavi,behavior,252,"Having `-Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON` -> makes build fail (OK) https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71742/console , while `Dfail-on-missing=ON -Dcudnn=On` -> no... @amadio what is expected behavior that should be here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:45,energy efficiency,gpu,gpu,45,If you have -DCudnn=On but Cuda=Off and TMVA-gpu=Off then the flag has no effect. This is expected,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:45,performance,gpu,gpu,45,If you have -DCudnn=On but Cuda=Off and TMVA-gpu=Off then the flag has no effect. This is expected,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:48,deployability,fail,fails,48,"I expect that `-Dfail-on-missing=On -Dcudnn=On` fails if it cannot build CuDNN, whatever the other parameters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:67,deployability,build,build,67,"I expect that `-Dfail-on-missing=On -Dcudnn=On` fails if it cannot build CuDNN, whatever the other parameters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:99,modifiability,paramet,parameters,99,"I expect that `-Dfail-on-missing=On -Dcudnn=On` fails if it cannot build CuDNN, whatever the other parameters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5148:48,reliability,fail,fails,48,"I expect that `-Dfail-on-missing=On -Dcudnn=On` fails if it cannot build CuDNN, whatever the other parameters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5148
https://github.com/root-project/root/pull/5149:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5149
https://github.com/root-project/root/pull/5149:0,availability,Failur,Failure,0,"Failure is not related to the PR itself. Code has been reviewed and approved by @lmoneta, tests pass on all other platforms. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5149
https://github.com/root-project/root/pull/5149:0,deployability,Fail,Failure,0,"Failure is not related to the PR itself. Code has been reviewed and approved by @lmoneta, tests pass on all other platforms. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5149
https://github.com/root-project/root/pull/5149:114,interoperability,platform,platforms,114,"Failure is not related to the PR itself. Code has been reviewed and approved by @lmoneta, tests pass on all other platforms. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5149
https://github.com/root-project/root/pull/5149:0,performance,Failur,Failure,0,"Failure is not related to the PR itself. Code has been reviewed and approved by @lmoneta, tests pass on all other platforms. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5149
https://github.com/root-project/root/pull/5149:0,reliability,Fail,Failure,0,"Failure is not related to the PR itself. Code has been reviewed and approved by @lmoneta, tests pass on all other platforms. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5149
https://github.com/root-project/root/pull/5149:55,safety,review,reviewed,55,"Failure is not related to the PR itself. Code has been reviewed and approved by @lmoneta, tests pass on all other platforms. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5149
https://github.com/root-project/root/pull/5149:90,safety,test,tests,90,"Failure is not related to the PR itself. Code has been reviewed and approved by @lmoneta, tests pass on all other platforms. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5149
https://github.com/root-project/root/pull/5149:55,testability,review,reviewed,55,"Failure is not related to the PR itself. Code has been reviewed and approved by @lmoneta, tests pass on all other platforms. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5149
https://github.com/root-project/root/pull/5149:90,testability,test,tests,90,"Failure is not related to the PR itself. Code has been reviewed and approved by @lmoneta, tests pass on all other platforms. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5149
https://github.com/root-project/root/pull/5151:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:512,availability,avail,availability,512,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:335,deployability,continu,continue,335,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:882,deployability,build,build,882,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:930,deployability,depend,dependency,930,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:392,integrability,sub,subpackage,392,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:861,integrability,interfac,interface,861,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:930,integrability,depend,dependency,930,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:1673,integrability,Interfac,Interface,1673,"on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:. Oh, and the fewer `#ifdef`s, the better. I didn't check if you can actually get around them, but just saying after I saw the last commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:2484,integrability,messag,message,2484,"on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:. Oh, and the fewer `#ifdef`s, the better. I didn't check if you can actually get around them, but just saying after I saw the last commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:861,interoperability,interfac,interface,861,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:1485,interoperability,specif,specifically,1485," on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:. Oh, and the fewer `#ifdef`s, the better. I didn't check if you can actually get around them, but just saying after I saw the last commit message",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:1673,interoperability,Interfac,Interface,1673,"on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:. Oh, and the fewer `#ifdef`s, the better. I didn't check if you can actually get around them, but just saying after I saw the last commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:2484,interoperability,messag,message,2484,"on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:. Oh, and the fewer `#ifdef`s, the better. I didn't check if you can actually get around them, but just saying after I saw the last commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:301,modifiability,pac,packaging,301,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:861,modifiability,interfac,interface,861,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:930,modifiability,depend,dependency,930,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:1673,modifiability,Interfac,Interface,1673,"on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:. Oh, and the fewer `#ifdef`s, the better. I didn't check if you can actually get around them, but just saying after I saw the last commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:1382,performance,time,time,1382,"o a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:. Oh, and the fewer `#ifdef`s, the bett",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:512,reliability,availab,availability,512,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:1544,reliability,Doe,Does,1544,"on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:. Oh, and the fewer `#ifdef`s, the better. I didn't check if you can actually get around them, but just saying after I saw the last commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:2072,reliability,doe,does,2072,"on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:. Oh, and the fewer `#ifdef`s, the better. I didn't check if you can actually get around them, but just saying after I saw the last commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:2181,reliability,doe,does,2181,"on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:. Oh, and the fewer `#ifdef`s, the better. I didn't check if you can actually get around them, but just saying after I saw the last commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:512,safety,avail,availability,512,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:930,safety,depend,dependency,930,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:1308,safety,review,review,1308," Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:2200,safety,input,inputs,2200,"on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:. Oh, and the fewer `#ifdef`s, the better. I didn't check if you can actually get around them, but just saying after I saw the last commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:512,security,availab,availability,512,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:930,testability,depend,dependency,930,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:1308,testability,review,review,1308," Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit? All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:1425,usability,guid,guide,1425,"elated things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:. Oh, and the fewer `#ifdef`s, the better. I didn't check if you can actually get a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:1828,usability,document,documentation,1828,"on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:. Oh, and the fewer `#ifdef`s, the better. I didn't check if you can actually get around them, but just saying after I saw the last commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:2028,usability,document,documentation,2028,"on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:. Oh, and the fewer `#ifdef`s, the better. I didn't check if you can actually get around them, but just saying after I saw the last commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:2129,usability,document,documentation,2129,"on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:. Oh, and the fewer `#ifdef`s, the better. I didn't check if you can actually get around them, but just saying after I saw the last commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:2200,usability,input,inputs,2200,"on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`? > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting? I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes. > build system: Is the way I encoded the optional dependency acceptable? I don't know. @oshadura? @Axel-Naumann ? > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant? As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:. > . > lack of functionality - more things will be added over time. > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added! > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code? It would be good if every function and class had documentation. They are best placed in the implementation like in. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs. An a-bit-too-long example is:. https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:. Oh, and the fewer `#ifdef`s, the better. I didn't check if you can actually get around them, but just saying after I saw the last commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5151:22,deployability,continu,continues,22,"Closing this MR, work continues [here](https://github.com/root-project/root/pull/5324)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5151
https://github.com/root-project/root/pull/5154:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5154:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5154:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5154:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5154:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5154:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5154:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5154:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5154:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5154:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5154:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5154:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5154:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5154:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5154:11,deployability,build,build,11,@phsft-bot build with flags -Dless_includes=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5154:4,reliability,doe,does,4,How does this relate to https://github.com/root-project/root/pull/5123 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5154:15,deployability,continu,continuation,15,"Yes, these are continuation with conseuent usse of `R__LESS_INCLUDES` macro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5154
https://github.com/root-project/root/pull/5157:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5157
https://github.com/root-project/root/pull/5158:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:117,deployability,build,build,117,"@ellert is proposing changes for both old and new PyROOT, so we will need to test it with both (and with a Python3.8 build too). For the Cppyy-related changes, I would prefer to first check with @wlav and see if we can merge them into Cppyy master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:77,safety,test,test,77,"@ellert is proposing changes for both old and new PyROOT, so we will need to test it with both (and with a Python3.8 build too). For the Cppyy-related changes, I would prefer to first check with @wlav and see if we can merge them into Cppyy master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:77,testability,test,test,77,"@ellert is proposing changes for both old and new PyROOT, so we will need to test it with both (and with a Python3.8 build too). For the Cppyy-related changes, I would prefer to first check with @wlav and see if we can merge them into Cppyy master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:168,usability,prefer,prefer,168,"@ellert is proposing changes for both old and new PyROOT, so we will need to test it with both (and with a Python3.8 build too). For the Cppyy-related changes, I would prefer to first check with @wlav and see if we can merge them into Cppyy master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:130,deployability,version,versions,130,"@etejedor , @ellert : if you look at the code, I've mostly kept up with field, using #ifdef to deal with the changes along Python versions. However, do note that Python itself does not bother defining all fields in many of their .c files, as these are global/static objects and are thus guaranteed, unlike stack objects, to have their members initialized to the T{}.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:306,deployability,stack,stack,306,"@etejedor , @ellert : if you look at the code, I've mostly kept up with field, using #ifdef to deal with the changes along Python versions. However, do note that Python itself does not bother defining all fields in many of their .c files, as these are global/static objects and are thus guaranteed, unlike stack objects, to have their members initialized to the T{}.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:130,integrability,version,versions,130,"@etejedor , @ellert : if you look at the code, I've mostly kept up with field, using #ifdef to deal with the changes along Python versions. However, do note that Python itself does not bother defining all fields in many of their .c files, as these are global/static objects and are thus guaranteed, unlike stack objects, to have their members initialized to the T{}.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:130,modifiability,version,versions,130,"@etejedor , @ellert : if you look at the code, I've mostly kept up with field, using #ifdef to deal with the changes along Python versions. However, do note that Python itself does not bother defining all fields in many of their .c files, as these are global/static objects and are thus guaranteed, unlike stack objects, to have their members initialized to the T{}.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:176,reliability,doe,does,176,"@etejedor , @ellert : if you look at the code, I've mostly kept up with field, using #ifdef to deal with the changes along Python versions. However, do note that Python itself does not bother defining all fields in many of their .c files, as these are global/static objects and are thus guaranteed, unlike stack objects, to have their members initialized to the T{}.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:215,energy efficiency,current,currently,215,"@ellert after @wlav 's comment, I propose to merge the changes for the old PyROOT to prevent the warning, but for the experimental PyROOT (i.e. for the cppyy files) I would just keep the silencing of the warning we currently have in:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/CMakeLists.txt#L75-L77. since as pointed out, it is safe to not explicitly defining that field and even Python internally does so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:284,interoperability,bind,bindings,284,"@ellert after @wlav 's comment, I propose to merge the changes for the old PyROOT to prevent the warning, but for the experimental PyROOT (i.e. for the cppyy files) I would just keep the silencing of the warning we currently have in:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/CMakeLists.txt#L75-L77. since as pointed out, it is safe to not explicitly defining that field and even Python internally does so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:284,modifiability,bind,bindings,284,"@ellert after @wlav 's comment, I propose to merge the changes for the old PyROOT to prevent the warning, but for the experimental PyROOT (i.e. for the cppyy files) I would just keep the silencing of the warning we currently have in:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/CMakeLists.txt#L75-L77. since as pointed out, it is safe to not explicitly defining that field and even Python internally does so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:450,reliability,doe,does,450,"@ellert after @wlav 's comment, I propose to merge the changes for the old PyROOT to prevent the warning, but for the experimental PyROOT (i.e. for the cppyy files) I would just keep the silencing of the warning we currently have in:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/CMakeLists.txt#L75-L77. since as pointed out, it is safe to not explicitly defining that field and even Python internally does so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:85,safety,prevent,prevent,85,"@ellert after @wlav 's comment, I propose to merge the changes for the old PyROOT to prevent the warning, but for the experimental PyROOT (i.e. for the cppyy files) I would just keep the silencing of the warning we currently have in:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/CMakeLists.txt#L75-L77. since as pointed out, it is safe to not explicitly defining that field and even Python internally does so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:380,safety,safe,safe,380,"@ellert after @wlav 's comment, I propose to merge the changes for the old PyROOT to prevent the warning, but for the experimental PyROOT (i.e. for the cppyy files) I would just keep the silencing of the warning we currently have in:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/CMakeLists.txt#L75-L77. since as pointed out, it is safe to not explicitly defining that field and even Python internally does so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:85,security,preven,prevent,85,"@ellert after @wlav 's comment, I propose to merge the changes for the old PyROOT to prevent the warning, but for the experimental PyROOT (i.e. for the cppyy files) I would just keep the silencing of the warning we currently have in:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/CMakeLists.txt#L75-L77. since as pointed out, it is safe to not explicitly defining that field and even Python internally does so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5158:158,usability,close,close,158,@ellert as per the discussion above I made another PR:. https://github.com/root-project/root/pull/5399. just applying your changes to the old PyROOT. I would close this PR and merge the new one.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5158
https://github.com/root-project/root/pull/5159:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:0,availability,Ping,Ping,0,"Ping. Fedora 32 is released now, which uses gcc 10. So this needs to be fixed now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:19,deployability,releas,released,19,"Ping. Fedora 32 is released now, which uses gcc 10. So this needs to be fixed now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:60,availability,failur,failures,60,"I rebased this to current master so that tests succeed. The failures were not due to the changes in the PR, but due to that at the time the PR was created master was broken and failing the tests,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:60,deployability,fail,failures,60,"I rebased this to current master so that tests succeed. The failures were not due to the changes in the PR, but due to that at the time the PR was created master was broken and failing the tests,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:177,deployability,fail,failing,177,"I rebased this to current master so that tests succeed. The failures were not due to the changes in the PR, but due to that at the time the PR was created master was broken and failing the tests,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:18,energy efficiency,current,current,18,"I rebased this to current master so that tests succeed. The failures were not due to the changes in the PR, but due to that at the time the PR was created master was broken and failing the tests,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:60,performance,failur,failures,60,"I rebased this to current master so that tests succeed. The failures were not due to the changes in the PR, but due to that at the time the PR was created master was broken and failing the tests,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:131,performance,time,time,131,"I rebased this to current master so that tests succeed. The failures were not due to the changes in the PR, but due to that at the time the PR was created master was broken and failing the tests,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:60,reliability,fail,failures,60,"I rebased this to current master so that tests succeed. The failures were not due to the changes in the PR, but due to that at the time the PR was created master was broken and failing the tests,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:177,reliability,fail,failing,177,"I rebased this to current master so that tests succeed. The failures were not due to the changes in the PR, but due to that at the time the PR was created master was broken and failing the tests,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:41,safety,test,tests,41,"I rebased this to current master so that tests succeed. The failures were not due to the changes in the PR, but due to that at the time the PR was created master was broken and failing the tests,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:189,safety,test,tests,189,"I rebased this to current master so that tests succeed. The failures were not due to the changes in the PR, but due to that at the time the PR was created master was broken and failing the tests,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:41,testability,test,tests,41,"I rebased this to current master so that tests succeed. The failures were not due to the changes in the PR, but due to that at the time the PR was created master was broken and failing the tests,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:189,testability,test,tests,189,"I rebased this to current master so that tests succeed. The failures were not due to the changes in the PR, but due to that at the time the PR was created master was broken and failing the tests,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:5,deployability,continu,continuous-integration,5,"The ""continuous-integration/travis-ci/pr"" test worked now. Are the Jenkins tests expected to work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:16,integrability,integr,integration,16,"The ""continuous-integration/travis-ci/pr"" test worked now. Are the Jenkins tests expected to work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:16,interoperability,integr,integration,16,"The ""continuous-integration/travis-ci/pr"" test worked now. Are the Jenkins tests expected to work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:16,modifiability,integr,integration,16,"The ""continuous-integration/travis-ci/pr"" test worked now. Are the Jenkins tests expected to work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:16,reliability,integr,integration,16,"The ""continuous-integration/travis-ci/pr"" test worked now. Are the Jenkins tests expected to work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:42,safety,test,test,42,"The ""continuous-integration/travis-ci/pr"" test worked now. Are the Jenkins tests expected to work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:75,safety,test,tests,75,"The ""continuous-integration/travis-ci/pr"" test worked now. Are the Jenkins tests expected to work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:16,security,integr,integration,16,"The ""continuous-integration/travis-ci/pr"" test worked now. Are the Jenkins tests expected to work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:16,testability,integr,integration,16,"The ""continuous-integration/travis-ci/pr"" test worked now. Are the Jenkins tests expected to work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:42,testability,test,test,42,"The ""continuous-integration/travis-ci/pr"" test worked now. Are the Jenkins tests expected to work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:75,testability,test,tests,75,"The ""continuous-integration/travis-ci/pr"" test worked now. Are the Jenkins tests expected to work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:4,availability,failur,failures,4,The failures have nothing to do with this PR. . I will then merge it Thank you for this contribution,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:4,deployability,fail,failures,4,The failures have nothing to do with this PR. . I will then merge it Thank you for this contribution,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:4,performance,failur,failures,4,The failures have nothing to do with this PR. . I will then merge it Thank you for this contribution,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5159:4,reliability,fail,failures,4,The failures have nothing to do with this PR. . I will then merge it Thank you for this contribution,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5159
https://github.com/root-project/root/pull/5160:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5160
https://github.com/root-project/root/pull/5160:5,availability,failur,failure,5,"Test failure are unrelated, thanks for catching problem!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5160
https://github.com/root-project/root/pull/5160:5,deployability,fail,failure,5,"Test failure are unrelated, thanks for catching problem!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5160
https://github.com/root-project/root/pull/5160:5,performance,failur,failure,5,"Test failure are unrelated, thanks for catching problem!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5160
https://github.com/root-project/root/pull/5160:5,reliability,fail,failure,5,"Test failure are unrelated, thanks for catching problem!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5160
https://github.com/root-project/root/pull/5160:0,safety,Test,Test,0,"Test failure are unrelated, thanks for catching problem!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5160
https://github.com/root-project/root/pull/5160:0,testability,Test,Test,0,"Test failure are unrelated, thanks for catching problem!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5160
https://github.com/root-project/root/pull/5161:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5161
https://github.com/root-project/root/pull/5161:10,reliability,Doe,Does,10,@bellenot Does `%z` qualifier works on Windows?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5161
https://github.com/root-project/root/pull/5161:146,interoperability,format,format-specification-syntax-printf-and-wprintf-functions,146,"> @bellenot Does `%z` qualifier works on Windows? Apparently yes, according to [this page](https://docs.microsoft.com/en-us/cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions?view=vs-2015#size-prefixes-for-printf-and-wprintf-format-type-specifiers)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5161
https://github.com/root-project/root/pull/5161:253,interoperability,format,format-type-specifiers,253,"> @bellenot Does `%z` qualifier works on Windows? Apparently yes, according to [this page](https://docs.microsoft.com/en-us/cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions?view=vs-2015#size-prefixes-for-printf-and-wprintf-format-type-specifiers)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5161
https://github.com/root-project/root/pull/5161:12,reliability,Doe,Does,12,"> @bellenot Does `%z` qualifier works on Windows? Apparently yes, according to [this page](https://docs.microsoft.com/en-us/cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions?view=vs-2015#size-prefixes-for-printf-and-wprintf-format-type-specifiers)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5161
https://github.com/root-project/root/pull/5162:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5162
https://github.com/root-project/root/pull/5162:25,deployability,version,version,25,"> I have run the current version of mlpHiggs.C. It works fine seems to me. > I do not see why changing it ? The test falls back to using a remote copy if the local file can not be opened. If the test is run in an environment without network access (e.g. koji) it fails without the change, because the local copy is not found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5162
https://github.com/root-project/root/pull/5162:263,deployability,fail,fails,263,"> I have run the current version of mlpHiggs.C. It works fine seems to me. > I do not see why changing it ? The test falls back to using a remote copy if the local file can not be opened. If the test is run in an environment without network access (e.g. koji) it fails without the change, because the local copy is not found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5162
https://github.com/root-project/root/pull/5162:17,energy efficiency,current,current,17,"> I have run the current version of mlpHiggs.C. It works fine seems to me. > I do not see why changing it ? The test falls back to using a remote copy if the local file can not be opened. If the test is run in an environment without network access (e.g. koji) it fails without the change, because the local copy is not found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5162
https://github.com/root-project/root/pull/5162:25,integrability,version,version,25,"> I have run the current version of mlpHiggs.C. It works fine seems to me. > I do not see why changing it ? The test falls back to using a remote copy if the local file can not be opened. If the test is run in an environment without network access (e.g. koji) it fails without the change, because the local copy is not found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5162
https://github.com/root-project/root/pull/5162:25,modifiability,version,version,25,"> I have run the current version of mlpHiggs.C. It works fine seems to me. > I do not see why changing it ? The test falls back to using a remote copy if the local file can not be opened. If the test is run in an environment without network access (e.g. koji) it fails without the change, because the local copy is not found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5162
https://github.com/root-project/root/pull/5162:233,performance,network,network,233,"> I have run the current version of mlpHiggs.C. It works fine seems to me. > I do not see why changing it ? The test falls back to using a remote copy if the local file can not be opened. If the test is run in an environment without network access (e.g. koji) it fails without the change, because the local copy is not found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5162
https://github.com/root-project/root/pull/5162:263,reliability,fail,fails,263,"> I have run the current version of mlpHiggs.C. It works fine seems to me. > I do not see why changing it ? The test falls back to using a remote copy if the local file can not be opened. If the test is run in an environment without network access (e.g. koji) it fails without the change, because the local copy is not found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5162
https://github.com/root-project/root/pull/5162:112,safety,test,test,112,"> I have run the current version of mlpHiggs.C. It works fine seems to me. > I do not see why changing it ? The test falls back to using a remote copy if the local file can not be opened. If the test is run in an environment without network access (e.g. koji) it fails without the change, because the local copy is not found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5162
https://github.com/root-project/root/pull/5162:195,safety,test,test,195,"> I have run the current version of mlpHiggs.C. It works fine seems to me. > I do not see why changing it ? The test falls back to using a remote copy if the local file can not be opened. If the test is run in an environment without network access (e.g. koji) it fails without the change, because the local copy is not found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5162
https://github.com/root-project/root/pull/5162:233,security,network,network,233,"> I have run the current version of mlpHiggs.C. It works fine seems to me. > I do not see why changing it ? The test falls back to using a remote copy if the local file can not be opened. If the test is run in an environment without network access (e.g. koji) it fails without the change, because the local copy is not found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5162
https://github.com/root-project/root/pull/5162:241,security,access,access,241,"> I have run the current version of mlpHiggs.C. It works fine seems to me. > I do not see why changing it ? The test falls back to using a remote copy if the local file can not be opened. If the test is run in an environment without network access (e.g. koji) it fails without the change, because the local copy is not found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5162
https://github.com/root-project/root/pull/5162:112,testability,test,test,112,"> I have run the current version of mlpHiggs.C. It works fine seems to me. > I do not see why changing it ? The test falls back to using a remote copy if the local file can not be opened. If the test is run in an environment without network access (e.g. koji) it fails without the change, because the local copy is not found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5162
https://github.com/root-project/root/pull/5162:195,testability,test,test,195,"> I have run the current version of mlpHiggs.C. It works fine seems to me. > I do not see why changing it ? The test falls back to using a remote copy if the local file can not be opened. If the test is run in an environment without network access (e.g. koji) it fails without the change, because the local copy is not found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5162
https://github.com/root-project/root/pull/5165:11,deployability,build,build,11,@phsft-bot build only on mac1014/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5165
https://github.com/root-project/root/pull/5166:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5166
https://github.com/root-project/root/pull/5166:11,deployability,build,build,11,@phsft-bot build please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5166
https://github.com/root-project/root/pull/5166:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5166
https://github.com/root-project/root/pull/5166:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5166
https://github.com/root-project/root/pull/5168:28,safety,accid,accident,28,Pressed the wrong button by accident while trying out GitHub for mobile...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5168
https://github.com/root-project/root/pull/5170:16,safety,review,review,16,@amadio Can you review this PR now?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:16,testability,review,review,16,@amadio Can you review this PR now?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:29,deployability,modul,modules,29,"Let me discuss this with the modules folks at 2pm today, whether this is really needed for runtime modules.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:99,deployability,modul,modules,99,"Let me discuss this with the modules folks at 2pm today, whether this is really needed for runtime modules.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:29,modifiability,modul,modules,29,"Let me discuss this with the modules folks at 2pm today, whether this is really needed for runtime modules.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:99,modifiability,modul,modules,99,"Let me discuss this with the modules folks at 2pm today, whether this is really needed for runtime modules.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:29,safety,modul,modules,29,"Let me discuss this with the modules folks at 2pm today, whether this is really needed for runtime modules.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:99,safety,modul,modules,99,"Let me discuss this with the modules folks at 2pm today, whether this is really needed for runtime modules.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:29,deployability,modul,moduls,29,@Axel-Naumann . Disregard of moduls requirements - it is much clear now. One do not have long lists of different dirs in CXX flags and in dependencies. If try to make opposite approach - when only source dirs are used - one will have super long list of all ROOT subdirs with includes. It is definitely a worse scenario.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:138,deployability,depend,dependencies,138,@Axel-Naumann . Disregard of moduls requirements - it is much clear now. One do not have long lists of different dirs in CXX flags and in dependencies. If try to make opposite approach - when only source dirs are used - one will have super long list of all ROOT subdirs with includes. It is definitely a worse scenario.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:138,integrability,depend,dependencies,138,@Axel-Naumann . Disregard of moduls requirements - it is much clear now. One do not have long lists of different dirs in CXX flags and in dependencies. If try to make opposite approach - when only source dirs are used - one will have super long list of all ROOT subdirs with includes. It is definitely a worse scenario.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:262,integrability,sub,subdirs,262,@Axel-Naumann . Disregard of moduls requirements - it is much clear now. One do not have long lists of different dirs in CXX flags and in dependencies. If try to make opposite approach - when only source dirs are used - one will have super long list of all ROOT subdirs with includes. It is definitely a worse scenario.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:29,modifiability,modul,moduls,29,@Axel-Naumann . Disregard of moduls requirements - it is much clear now. One do not have long lists of different dirs in CXX flags and in dependencies. If try to make opposite approach - when only source dirs are used - one will have super long list of all ROOT subdirs with includes. It is definitely a worse scenario.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:138,modifiability,depend,dependencies,138,@Axel-Naumann . Disregard of moduls requirements - it is much clear now. One do not have long lists of different dirs in CXX flags and in dependencies. If try to make opposite approach - when only source dirs are used - one will have super long list of all ROOT subdirs with includes. It is definitely a worse scenario.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:310,modifiability,scenario,scenario,310,@Axel-Naumann . Disregard of moduls requirements - it is much clear now. One do not have long lists of different dirs in CXX flags and in dependencies. If try to make opposite approach - when only source dirs are used - one will have super long list of all ROOT subdirs with includes. It is definitely a worse scenario.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:29,safety,modul,moduls,29,@Axel-Naumann . Disregard of moduls requirements - it is much clear now. One do not have long lists of different dirs in CXX flags and in dependencies. If try to make opposite approach - when only source dirs are used - one will have super long list of all ROOT subdirs with includes. It is definitely a worse scenario.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:138,safety,depend,dependencies,138,@Axel-Naumann . Disregard of moduls requirements - it is much clear now. One do not have long lists of different dirs in CXX flags and in dependencies. If try to make opposite approach - when only source dirs are used - one will have super long list of all ROOT subdirs with includes. It is definitely a worse scenario.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:138,testability,depend,dependencies,138,@Axel-Naumann . Disregard of moduls requirements - it is much clear now. One do not have long lists of different dirs in CXX flags and in dependencies. If try to make opposite approach - when only source dirs are used - one will have super long list of all ROOT subdirs with includes. It is definitely a worse scenario.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:62,usability,clear,clear,62,@Axel-Naumann . Disregard of moduls requirements - it is much clear now. One do not have long lists of different dirs in CXX flags and in dependencies. If try to make opposite approach - when only source dirs are used - one will have super long list of all ROOT subdirs with includes. It is definitely a worse scenario.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:81,deployability,depend,dependency,81,"Having the detailed list of includes is the superior solution, for many reasons: dependency tracking, smaller directories searched, IDEs. We don't pay per character in the compiler invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:81,integrability,depend,dependency,81,"Having the detailed list of includes is the superior solution, for many reasons: dependency tracking, smaller directories searched, IDEs. We don't pay per character in the compiler invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:81,modifiability,depend,dependency,81,"Having the detailed list of includes is the superior solution, for many reasons: dependency tracking, smaller directories searched, IDEs. We don't pay per character in the compiler invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:81,safety,depend,dependency,81,"Having the detailed list of includes is the superior solution, for many reasons: dependency tracking, smaller directories searched, IDEs. We don't pay per character in the compiler invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:81,testability,depend,dependency,81,"Having the detailed list of includes is the superior solution, for many reasons: dependency tracking, smaller directories searched, IDEs. We don't pay per character in the compiler invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:86,deployability,build,build,86,"If I understand correctly, this PR gets us further from the ultimate goal -- make the build system independent on ROOTSYS/include. We explicitly want to enumerate all -I to the actual locations of the files at built time and deem the copy to ROOTSYS/include an installation step...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:261,deployability,instal,installation,261,"If I understand correctly, this PR gets us further from the ultimate goal -- make the build system independent on ROOTSYS/include. We explicitly want to enumerate all -I to the actual locations of the files at built time and deem the copy to ROOTSYS/include an installation step...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:216,performance,time,time,216,"If I understand correctly, this PR gets us further from the ultimate goal -- make the build system independent on ROOTSYS/include. We explicitly want to enumerate all -I to the actual locations of the files at built time and deem the copy to ROOTSYS/include an installation step...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:5,testability,understand,understand,5,"If I understand correctly, this PR gets us further from the ultimate goal -- make the build system independent on ROOTSYS/include. We explicitly want to enumerate all -I to the actual locations of the files at built time and deem the copy to ROOTSYS/include an installation step...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:28,deployability,build,build,28,> ultimate goal -- make the build system independent on ROOTSYS/include. Are you really want it? All ROOT-based code uses `ROOTSYS/include`. . You want that ROOT itself does not work this way? If yes - then this PR is just starting point. . We cleanup many different unclear includes and then can start provide source dir as include path. But this will require extra argument in `ROOT_STANDARD_LIBRARY_PACKAGE()` or some heuristic - one can generate list of source dirs based on `DEPENDENCIES` list,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:480,deployability,DEPEND,DEPENDENCIES,480,> ultimate goal -- make the build system independent on ROOTSYS/include. Are you really want it? All ROOT-based code uses `ROOTSYS/include`. . You want that ROOT itself does not work this way? If yes - then this PR is just starting point. . We cleanup many different unclear includes and then can start provide source dir as include path. But this will require extra argument in `ROOT_STANDARD_LIBRARY_PACKAGE()` or some heuristic - one can generate list of source dirs based on `DEPENDENCIES` list,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:480,integrability,DEPEND,DEPENDENCIES,480,> ultimate goal -- make the build system independent on ROOTSYS/include. Are you really want it? All ROOT-based code uses `ROOTSYS/include`. . You want that ROOT itself does not work this way? If yes - then this PR is just starting point. . We cleanup many different unclear includes and then can start provide source dir as include path. But this will require extra argument in `ROOT_STANDARD_LIBRARY_PACKAGE()` or some heuristic - one can generate list of source dirs based on `DEPENDENCIES` list,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:480,modifiability,DEPEND,DEPENDENCIES,480,> ultimate goal -- make the build system independent on ROOTSYS/include. Are you really want it? All ROOT-based code uses `ROOTSYS/include`. . You want that ROOT itself does not work this way? If yes - then this PR is just starting point. . We cleanup many different unclear includes and then can start provide source dir as include path. But this will require extra argument in `ROOT_STANDARD_LIBRARY_PACKAGE()` or some heuristic - one can generate list of source dirs based on `DEPENDENCIES` list,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:169,reliability,doe,does,169,> ultimate goal -- make the build system independent on ROOTSYS/include. Are you really want it? All ROOT-based code uses `ROOTSYS/include`. . You want that ROOT itself does not work this way? If yes - then this PR is just starting point. . We cleanup many different unclear includes and then can start provide source dir as include path. But this will require extra argument in `ROOT_STANDARD_LIBRARY_PACKAGE()` or some heuristic - one can generate list of source dirs based on `DEPENDENCIES` list,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:480,safety,DEPEND,DEPENDENCIES,480,> ultimate goal -- make the build system independent on ROOTSYS/include. Are you really want it? All ROOT-based code uses `ROOTSYS/include`. . You want that ROOT itself does not work this way? If yes - then this PR is just starting point. . We cleanup many different unclear includes and then can start provide source dir as include path. But this will require extra argument in `ROOT_STANDARD_LIBRARY_PACKAGE()` or some heuristic - one can generate list of source dirs based on `DEPENDENCIES` list,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:480,testability,DEPEND,DEPENDENCIES,480,> ultimate goal -- make the build system independent on ROOTSYS/include. Are you really want it? All ROOT-based code uses `ROOTSYS/include`. . You want that ROOT itself does not work this way? If yes - then this PR is just starting point. . We cleanup many different unclear includes and then can start provide source dir as include path. But this will require extra argument in `ROOT_STANDARD_LIBRARY_PACKAGE()` or some heuristic - one can generate list of source dirs based on `DEPENDENCIES` list,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:47,deployability,build,build,47,And I just compare performance - after this PR build time improved by 3%,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:19,performance,perform,performance,19,And I just compare performance - after this PR build time improved by 3%,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:53,performance,time,time,53,And I just compare performance - after this PR build time improved by 3%,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:19,usability,perform,performance,19,And I just compare performance - after this PR build time improved by 3%,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:22,integrability,messag,messages,22,"Please read my commit messages on this subject, where I explain why I am making the changes to use includes from the source directory. In particular, see commit 084303671a6cc2184ccfa6c1f7153b5415a50792.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:39,integrability,sub,subject,39,"Please read my commit messages on this subject, where I explain why I am making the changes to use includes from the source directory. In particular, see commit 084303671a6cc2184ccfa6c1f7153b5415a50792.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:22,interoperability,messag,messages,22,"Please read my commit messages on this subject, where I explain why I am making the changes to use includes from the source directory. In particular, see commit 084303671a6cc2184ccfa6c1f7153b5415a50792.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:88,deployability,build,build,88,"> If I understand correctly, this PR gets us further from the ultimate goal -- make the build system independent on ROOTSYS/include. We explicitly want to enumerate all -I to the actual locations of the files at built time and deem the copy to ROOTSYS/include an installation step... I will agree with Vassil that one of main goals is make the build system independent on ROOTSYS/include, e.g. it will allow ROOT to be more modular in this case....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:263,deployability,instal,installation,263,"> If I understand correctly, this PR gets us further from the ultimate goal -- make the build system independent on ROOTSYS/include. We explicitly want to enumerate all -I to the actual locations of the files at built time and deem the copy to ROOTSYS/include an installation step... I will agree with Vassil that one of main goals is make the build system independent on ROOTSYS/include, e.g. it will allow ROOT to be more modular in this case....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:344,deployability,build,build,344,"> If I understand correctly, this PR gets us further from the ultimate goal -- make the build system independent on ROOTSYS/include. We explicitly want to enumerate all -I to the actual locations of the files at built time and deem the copy to ROOTSYS/include an installation step... I will agree with Vassil that one of main goals is make the build system independent on ROOTSYS/include, e.g. it will allow ROOT to be more modular in this case....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:424,deployability,modul,modular,424,"> If I understand correctly, this PR gets us further from the ultimate goal -- make the build system independent on ROOTSYS/include. We explicitly want to enumerate all -I to the actual locations of the files at built time and deem the copy to ROOTSYS/include an installation step... I will agree with Vassil that one of main goals is make the build system independent on ROOTSYS/include, e.g. it will allow ROOT to be more modular in this case....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:424,integrability,modular,modular,424,"> If I understand correctly, this PR gets us further from the ultimate goal -- make the build system independent on ROOTSYS/include. We explicitly want to enumerate all -I to the actual locations of the files at built time and deem the copy to ROOTSYS/include an installation step... I will agree with Vassil that one of main goals is make the build system independent on ROOTSYS/include, e.g. it will allow ROOT to be more modular in this case....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:424,modifiability,modul,modular,424,"> If I understand correctly, this PR gets us further from the ultimate goal -- make the build system independent on ROOTSYS/include. We explicitly want to enumerate all -I to the actual locations of the files at built time and deem the copy to ROOTSYS/include an installation step... I will agree with Vassil that one of main goals is make the build system independent on ROOTSYS/include, e.g. it will allow ROOT to be more modular in this case....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:218,performance,time,time,218,"> If I understand correctly, this PR gets us further from the ultimate goal -- make the build system independent on ROOTSYS/include. We explicitly want to enumerate all -I to the actual locations of the files at built time and deem the copy to ROOTSYS/include an installation step... I will agree with Vassil that one of main goals is make the build system independent on ROOTSYS/include, e.g. it will allow ROOT to be more modular in this case....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:424,safety,modul,modular,424,"> If I understand correctly, this PR gets us further from the ultimate goal -- make the build system independent on ROOTSYS/include. We explicitly want to enumerate all -I to the actual locations of the files at built time and deem the copy to ROOTSYS/include an installation step... I will agree with Vassil that one of main goals is make the build system independent on ROOTSYS/include, e.g. it will allow ROOT to be more modular in this case....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:7,testability,understand,understand,7,"> If I understand correctly, this PR gets us further from the ultimate goal -- make the build system independent on ROOTSYS/include. We explicitly want to enumerate all -I to the actual locations of the files at built time and deem the copy to ROOTSYS/include an installation step... I will agree with Vassil that one of main goals is make the build system independent on ROOTSYS/include, e.g. it will allow ROOT to be more modular in this case....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:424,testability,modula,modular,424,"> If I understand correctly, this PR gets us further from the ultimate goal -- make the build system independent on ROOTSYS/include. We explicitly want to enumerate all -I to the actual locations of the files at built time and deem the copy to ROOTSYS/include an installation step... I will agree with Vassil that one of main goals is make the build system independent on ROOTSYS/include, e.g. it will allow ROOT to be more modular in this case....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:235,deployability,depend,dependency,235,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:447,deployability,depend,dependencies,447,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:621,deployability,updat,updated,621,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:364,energy efficiency,core,core,364,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:467,energy efficiency,core,core,467,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:580,energy efficiency,core,core,580,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:235,integrability,depend,dependency,235,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:447,integrability,depend,dependencies,447,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:235,modifiability,depend,dependency,235,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:447,modifiability,depend,dependencies,447,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:141,reliability,doe,does,141,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:255,reliability,doe,does,255,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:235,safety,depend,dependency,235,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:447,safety,depend,dependencies,447,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:621,safety,updat,updated,621,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:796,safety,compl,completely,796,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:621,security,updat,updated,621,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:796,security,compl,completely,796,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:235,testability,depend,dependency,235,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:447,testability,depend,dependencies,447,"> see commit 0843036. You argue, that if compiler use includes from `${CMAKE_BINARY_DIR}/include` and one change original header file, cmake does not correctly re-compiles it. But this should never happen. cmake have to produce proper dependency - and it does it. Take an example. For each header there is copy rule:. ```. include/TError.h: /home/linev/git/webgui/core/base/inc/TError.h. copy header. ```. and every source file has proper list of dependencies:. ```. core/base/CMakeFiles/Base.dir/src/TApplication.cxx.o: include/TError.h. ```. If I touch ` /home/linev/git/webgui/core/base/inc/TError.h`, include will be updated and TApplication.cxx.o will be compiled. Therefore use from `$ROOTSYS/include` is not a problem. And other your comment is very important:. > Unfortunately, we cannot completely remove ${CMAKE_BINARY_DIR}/include. > from the include path because generated headers like RConfigure.h and. > ROOT/RConfig.hxx exist only in that directory and are needed for. > compilation. While we cannot exclude `${CMAKE_BINARY_DIR}/include`, we should just correctly use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:37,deployability,modul,modular,37,"> e.g. it will allow ROOT to be more modular in this case. That do you mean? It is just same includes, copied in single sub-dir. . Only if dependencies does not work correctly, it can be dangerous.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:139,deployability,depend,dependencies,139,"> e.g. it will allow ROOT to be more modular in this case. That do you mean? It is just same includes, copied in single sub-dir. . Only if dependencies does not work correctly, it can be dangerous.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:37,integrability,modular,modular,37,"> e.g. it will allow ROOT to be more modular in this case. That do you mean? It is just same includes, copied in single sub-dir. . Only if dependencies does not work correctly, it can be dangerous.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:120,integrability,sub,sub-dir,120,"> e.g. it will allow ROOT to be more modular in this case. That do you mean? It is just same includes, copied in single sub-dir. . Only if dependencies does not work correctly, it can be dangerous.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:139,integrability,depend,dependencies,139,"> e.g. it will allow ROOT to be more modular in this case. That do you mean? It is just same includes, copied in single sub-dir. . Only if dependencies does not work correctly, it can be dangerous.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:37,modifiability,modul,modular,37,"> e.g. it will allow ROOT to be more modular in this case. That do you mean? It is just same includes, copied in single sub-dir. . Only if dependencies does not work correctly, it can be dangerous.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:139,modifiability,depend,dependencies,139,"> e.g. it will allow ROOT to be more modular in this case. That do you mean? It is just same includes, copied in single sub-dir. . Only if dependencies does not work correctly, it can be dangerous.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:152,reliability,doe,does,152,"> e.g. it will allow ROOT to be more modular in this case. That do you mean? It is just same includes, copied in single sub-dir. . Only if dependencies does not work correctly, it can be dangerous.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:37,safety,modul,modular,37,"> e.g. it will allow ROOT to be more modular in this case. That do you mean? It is just same includes, copied in single sub-dir. . Only if dependencies does not work correctly, it can be dangerous.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:139,safety,depend,dependencies,139,"> e.g. it will allow ROOT to be more modular in this case. That do you mean? It is just same includes, copied in single sub-dir. . Only if dependencies does not work correctly, it can be dangerous.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:37,testability,modula,modular,37,"> e.g. it will allow ROOT to be more modular in this case. That do you mean? It is just same includes, copied in single sub-dir. . Only if dependencies does not work correctly, it can be dangerous.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:139,testability,depend,dependencies,139,"> e.g. it will allow ROOT to be more modular in this case. That do you mean? It is just same includes, copied in single sub-dir. . Only if dependencies does not work correctly, it can be dangerous.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:307,availability,avail,available,307,"In other PR @amadio made comment:. > We do want to use the source directory includes when possible. But there is problem with several generated headers like `RConfigure.h` - is it the only one? Only because of it we have to add `$ROOTSYS/include` in ROOT build paths. Ending in situation, that every header available twice - via source dir and via '$ROOTSYS/include` dir. This should be avoided in any case. I propose a solution - generate RConfigure.h in special directory like `${CMAKE_BINARY_DIR}/generated_includes` and copy it into `${CMAKE_BINARY_DIR}/includes`. And in the list of include paths for ROOT libraries only source dirs and `${CMAKE_BINARY_DIR}/generated_includes` should be used. Do we agree on this? . @amadio @vgvassilev @Axel-Naumann @oshadura",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:255,deployability,build,build,255,"In other PR @amadio made comment:. > We do want to use the source directory includes when possible. But there is problem with several generated headers like `RConfigure.h` - is it the only one? Only because of it we have to add `$ROOTSYS/include` in ROOT build paths. Ending in situation, that every header available twice - via source dir and via '$ROOTSYS/include` dir. This should be avoided in any case. I propose a solution - generate RConfigure.h in special directory like `${CMAKE_BINARY_DIR}/generated_includes` and copy it into `${CMAKE_BINARY_DIR}/includes`. And in the list of include paths for ROOT libraries only source dirs and `${CMAKE_BINARY_DIR}/generated_includes` should be used. Do we agree on this? . @amadio @vgvassilev @Axel-Naumann @oshadura",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:307,reliability,availab,available,307,"In other PR @amadio made comment:. > We do want to use the source directory includes when possible. But there is problem with several generated headers like `RConfigure.h` - is it the only one? Only because of it we have to add `$ROOTSYS/include` in ROOT build paths. Ending in situation, that every header available twice - via source dir and via '$ROOTSYS/include` dir. This should be avoided in any case. I propose a solution - generate RConfigure.h in special directory like `${CMAKE_BINARY_DIR}/generated_includes` and copy it into `${CMAKE_BINARY_DIR}/includes`. And in the list of include paths for ROOT libraries only source dirs and `${CMAKE_BINARY_DIR}/generated_includes` should be used. Do we agree on this? . @amadio @vgvassilev @Axel-Naumann @oshadura",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:307,safety,avail,available,307,"In other PR @amadio made comment:. > We do want to use the source directory includes when possible. But there is problem with several generated headers like `RConfigure.h` - is it the only one? Only because of it we have to add `$ROOTSYS/include` in ROOT build paths. Ending in situation, that every header available twice - via source dir and via '$ROOTSYS/include` dir. This should be avoided in any case. I propose a solution - generate RConfigure.h in special directory like `${CMAKE_BINARY_DIR}/generated_includes` and copy it into `${CMAKE_BINARY_DIR}/includes`. And in the list of include paths for ROOT libraries only source dirs and `${CMAKE_BINARY_DIR}/generated_includes` should be used. Do we agree on this? . @amadio @vgvassilev @Axel-Naumann @oshadura",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:387,safety,avoid,avoided,387,"In other PR @amadio made comment:. > We do want to use the source directory includes when possible. But there is problem with several generated headers like `RConfigure.h` - is it the only one? Only because of it we have to add `$ROOTSYS/include` in ROOT build paths. Ending in situation, that every header available twice - via source dir and via '$ROOTSYS/include` dir. This should be avoided in any case. I propose a solution - generate RConfigure.h in special directory like `${CMAKE_BINARY_DIR}/generated_includes` and copy it into `${CMAKE_BINARY_DIR}/includes`. And in the list of include paths for ROOT libraries only source dirs and `${CMAKE_BINARY_DIR}/generated_includes` should be used. Do we agree on this? . @amadio @vgvassilev @Axel-Naumann @oshadura",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:307,security,availab,available,307,"In other PR @amadio made comment:. > We do want to use the source directory includes when possible. But there is problem with several generated headers like `RConfigure.h` - is it the only one? Only because of it we have to add `$ROOTSYS/include` in ROOT build paths. Ending in situation, that every header available twice - via source dir and via '$ROOTSYS/include` dir. This should be avoided in any case. I propose a solution - generate RConfigure.h in special directory like `${CMAKE_BINARY_DIR}/generated_includes` and copy it into `${CMAKE_BINARY_DIR}/includes`. And in the list of include paths for ROOT libraries only source dirs and `${CMAKE_BINARY_DIR}/generated_includes` should be used. Do we agree on this? . @amadio @vgvassilev @Axel-Naumann @oshadura",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:139,integrability,pub,public,139,"> For example, I will say this PR is showing one small example of dangerous situation, when all includes are ""dumped"" in ROOTSYS/inc. Only public includes should be copied into $ROOTSYS/include - those which are required for compilation of user code. Otherwise it is mistake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:240,usability,user,user,240,"> For example, I will say this PR is showing one small example of dangerous situation, when all includes are ""dumped"" in ROOTSYS/inc. Only public includes should be copied into $ROOTSYS/include - those which are required for compilation of user code. Otherwise it is mistake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:265,deployability,modul,modules,265,"> generate RConfigure.h in special directory. > Do we agree on this? Yes!!! It's better to put them simply into {{${CMAKE_CURRENT_BUILD_DIR} }} (or whatever it's called), and add it to the allheaders target so cmake copies it into {{include/}}. I verified with the modules folks: we have no problem with building against headers in `module/inc` and running without that header around.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:304,deployability,build,building,304,"> generate RConfigure.h in special directory. > Do we agree on this? Yes!!! It's better to put them simply into {{${CMAKE_CURRENT_BUILD_DIR} }} (or whatever it's called), and add it to the allheaders target so cmake copies it into {{include/}}. I verified with the modules folks: we have no problem with building against headers in `module/inc` and running without that header around.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:333,deployability,modul,module,333,"> generate RConfigure.h in special directory. > Do we agree on this? Yes!!! It's better to put them simply into {{${CMAKE_CURRENT_BUILD_DIR} }} (or whatever it's called), and add it to the allheaders target so cmake copies it into {{include/}}. I verified with the modules folks: we have no problem with building against headers in `module/inc` and running without that header around.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:265,modifiability,modul,modules,265,"> generate RConfigure.h in special directory. > Do we agree on this? Yes!!! It's better to put them simply into {{${CMAKE_CURRENT_BUILD_DIR} }} (or whatever it's called), and add it to the allheaders target so cmake copies it into {{include/}}. I verified with the modules folks: we have no problem with building against headers in `module/inc` and running without that header around.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:333,modifiability,modul,module,333,"> generate RConfigure.h in special directory. > Do we agree on this? Yes!!! It's better to put them simply into {{${CMAKE_CURRENT_BUILD_DIR} }} (or whatever it's called), and add it to the allheaders target so cmake copies it into {{include/}}. I verified with the modules folks: we have no problem with building against headers in `module/inc` and running without that header around.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:265,safety,modul,modules,265,"> generate RConfigure.h in special directory. > Do we agree on this? Yes!!! It's better to put them simply into {{${CMAKE_CURRENT_BUILD_DIR} }} (or whatever it's called), and add it to the allheaders target so cmake copies it into {{include/}}. I verified with the modules folks: we have no problem with building against headers in `module/inc` and running without that header around.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:333,safety,modul,module,333,"> generate RConfigure.h in special directory. > Do we agree on this? Yes!!! It's better to put them simply into {{${CMAKE_CURRENT_BUILD_DIR} }} (or whatever it's called), and add it to the allheaders target so cmake copies it into {{include/}}. I verified with the modules folks: we have no problem with building against headers in `module/inc` and running without that header around.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:100,testability,simpl,simply,100,"> generate RConfigure.h in special directory. > Do we agree on this? Yes!!! It's better to put them simply into {{${CMAKE_CURRENT_BUILD_DIR} }} (or whatever it's called), and add it to the allheaders target so cmake copies it into {{include/}}. I verified with the modules folks: we have no problem with building against headers in `module/inc` and running without that header around.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:247,testability,verif,verified,247,"> generate RConfigure.h in special directory. > Do we agree on this? Yes!!! It's better to put them simply into {{${CMAKE_CURRENT_BUILD_DIR} }} (or whatever it's called), and add it to the allheaders target so cmake copies it into {{include/}}. I verified with the modules folks: we have no problem with building against headers in `module/inc` and running without that header around.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:100,usability,simpl,simply,100,"> generate RConfigure.h in special directory. > Do we agree on this? Yes!!! It's better to put them simply into {{${CMAKE_CURRENT_BUILD_DIR} }} (or whatever it's called), and add it to the allheaders target so cmake copies it into {{include/}}. I verified with the modules folks: we have no problem with building against headers in `module/inc` and running without that header around.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:442,availability,error,errors,442,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:43,deployability,depend,dependencies,43,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:131,deployability,depend,dependency,131,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:187,deployability,build,build,187,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:242,deployability,fail,fail,242,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:43,integrability,depend,dependencies,43,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:131,integrability,depend,dependency,131,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:43,modifiability,depend,dependencies,43,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:131,modifiability,depend,dependency,131,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:442,performance,error,errors,442,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:242,reliability,fail,fail,242,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:43,safety,depend,dependencies,43,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:131,safety,depend,dependency,131,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:442,safety,error,errors,442,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:43,testability,depend,dependencies,43,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:131,testability,depend,dependency,131,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:442,usability,error,errors,442,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:218,availability,state,state,218,Please read my comments. You are removing `-I` from a variable that was constructed by adding `-I` to directories from another list... `${incdirs}` may already be what you want. We shouldn't merge #5172 in its current state.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:210,energy efficiency,current,current,210,Please read my comments. You are removing `-I` from a variable that was constructed by adding `-I` to directories from another list... `${incdirs}` may already be what you want. We shouldn't merge #5172 in its current state.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:218,integrability,state,state,218,Please read my comments. You are removing `-I` from a variable that was constructed by adding `-I` to directories from another list... `${incdirs}` may already be what you want. We shouldn't merge #5172 in its current state.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:54,modifiability,variab,variable,54,Please read my comments. You are removing `-I` from a variable that was constructed by adding `-I` to directories from another list... `${incdirs}` may already be what you want. We shouldn't merge #5172 in its current state.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:54,modifiability,variab,variable,54,"> Please read my comments. You are removing -I from a variable that was constructed by adding -I to directories from another list... ${incdirs} may already be what you want. I read your comments - but you did not read my. . `${incdirs}` do not have all entries as `${includedirs}`. Therefore to provide all required include paths, I have to rebuild plain list from `${includedirs}`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:51,reliability,doe,does,51,Then just add what's missing to `incdirs`. This PR does extra work of removing `-I` for no good reason.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:82,availability,sli,slightly,82,> This PR does extra work of removing -I for no good reason. These lists used for slightly different purposes and should not be the same.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:10,reliability,doe,does,10,> This PR does extra work of removing -I for no good reason. These lists used for slightly different purposes and should not be the same.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5170:82,reliability,sli,slightly,82,> This PR does extra work of removing -I for no good reason. These lists used for slightly different purposes and should not be the same.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5170
https://github.com/root-project/root/pull/5172:63,deployability,DEPEND,DEPENDENCIES,63,`${includedirs}` has more entries. . It extract includes from `DEPENDENCIES` plus initial values in lines 372..379.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:63,integrability,DEPEND,DEPENDENCIES,63,`${includedirs}` has more entries. . It extract includes from `DEPENDENCIES` plus initial values in lines 372..379.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:63,modifiability,DEPEND,DEPENDENCIES,63,`${includedirs}` has more entries. . It extract includes from `DEPENDENCIES` plus initial values in lines 372..379.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:63,safety,DEPEND,DEPENDENCIES,63,`${includedirs}` has more entries. . It extract includes from `DEPENDENCIES` plus initial values in lines 372..379.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:63,testability,DEPEND,DEPENDENCIES,63,`${includedirs}` has more entries. . It extract includes from `DEPENDENCIES` plus initial values in lines 372..379.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:164,deployability,patch,patch,164,"@amadio #5170 is full PR, where I completely exclude source dir from include paths. This PR could be recognized as bugfix and also can be applied for 6.20 and 6.18 patch branches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:34,safety,compl,completely,34,"@amadio #5170 is full PR, where I completely exclude source dir from include paths. This PR could be recognized as bugfix and also can be applied for 6.20 and 6.18 patch branches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:164,safety,patch,patch,164,"@amadio #5170 is full PR, where I completely exclude source dir from include paths. This PR could be recognized as bugfix and also can be applied for 6.20 and 6.18 patch branches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:34,security,compl,completely,34,"@amadio #5170 is full PR, where I completely exclude source dir from include paths. This PR could be recognized as bugfix and also can be applied for 6.20 and 6.18 patch branches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:164,security,patch,patch,164,"@amadio #5170 is full PR, where I completely exclude source dir from include paths. This PR could be recognized as bugfix and also can be applied for 6.20 and 6.18 patch branches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:76,deployability,fail,fail,76,"Could you expand a little more the commit message and the PR description. I fail to capture the intent. In general, ROOT_GENERATE_DICTIONARY is very complex and needs to be simplified and refactored, unless this is fixing a real issue I'd be reluctant to make it more complex than it already is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:42,integrability,messag,message,42,"Could you expand a little more the commit message and the PR description. I fail to capture the intent. In general, ROOT_GENERATE_DICTIONARY is very complex and needs to be simplified and refactored, unless this is fixing a real issue I'd be reluctant to make it more complex than it already is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:42,interoperability,messag,message,42,"Could you expand a little more the commit message and the PR description. I fail to capture the intent. In general, ROOT_GENERATE_DICTIONARY is very complex and needs to be simplified and refactored, unless this is fixing a real issue I'd be reluctant to make it more complex than it already is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:188,modifiability,refact,refactored,188,"Could you expand a little more the commit message and the PR description. I fail to capture the intent. In general, ROOT_GENERATE_DICTIONARY is very complex and needs to be simplified and refactored, unless this is fixing a real issue I'd be reluctant to make it more complex than it already is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:188,performance,refactor,refactored,188,"Could you expand a little more the commit message and the PR description. I fail to capture the intent. In general, ROOT_GENERATE_DICTIONARY is very complex and needs to be simplified and refactored, unless this is fixing a real issue I'd be reluctant to make it more complex than it already is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:76,reliability,fail,fail,76,"Could you expand a little more the commit message and the PR description. I fail to capture the intent. In general, ROOT_GENERATE_DICTIONARY is very complex and needs to be simplified and refactored, unless this is fixing a real issue I'd be reluctant to make it more complex than it already is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:149,safety,compl,complex,149,"Could you expand a little more the commit message and the PR description. I fail to capture the intent. In general, ROOT_GENERATE_DICTIONARY is very complex and needs to be simplified and refactored, unless this is fixing a real issue I'd be reluctant to make it more complex than it already is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:268,safety,compl,complex,268,"Could you expand a little more the commit message and the PR description. I fail to capture the intent. In general, ROOT_GENERATE_DICTIONARY is very complex and needs to be simplified and refactored, unless this is fixing a real issue I'd be reluctant to make it more complex than it already is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:149,security,compl,complex,149,"Could you expand a little more the commit message and the PR description. I fail to capture the intent. In general, ROOT_GENERATE_DICTIONARY is very complex and needs to be simplified and refactored, unless this is fixing a real issue I'd be reluctant to make it more complex than it already is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:268,security,compl,complex,268,"Could you expand a little more the commit message and the PR description. I fail to capture the intent. In general, ROOT_GENERATE_DICTIONARY is very complex and needs to be simplified and refactored, unless this is fixing a real issue I'd be reluctant to make it more complex than it already is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:173,testability,simpl,simplified,173,"Could you expand a little more the commit message and the PR description. I fail to capture the intent. In general, ROOT_GENERATE_DICTIONARY is very complex and needs to be simplified and refactored, unless this is fixing a real issue I'd be reluctant to make it more complex than it already is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:173,usability,simpl,simplified,173,"Could you expand a little more the commit message and the PR description. I fail to capture the intent. In general, ROOT_GENERATE_DICTIONARY is very complex and needs to be simplified and refactored, unless this is fixing a real issue I'd be reluctant to make it more complex than it already is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:440,deployability,depend,dependencies,440,"We *do* want to use the source directory includes when possible. So I don't agree that we should exclude those includes. What we have is already almost as good as we can have. We just need to fix the issue with lack of space between includes, and generate headers in `${CMAKE_CURRENT_BINARY_DIR}` instead of `${CMAKE_BINARY_DIR}/include`. See PRs #4108, #4281, and #4299 for more information on the subject. Note that many of those missing dependencies from #4299 are still not fixed, because it was decided that each person would take care of their parts of the code...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:399,integrability,sub,subject,399,"We *do* want to use the source directory includes when possible. So I don't agree that we should exclude those includes. What we have is already almost as good as we can have. We just need to fix the issue with lack of space between includes, and generate headers in `${CMAKE_CURRENT_BINARY_DIR}` instead of `${CMAKE_BINARY_DIR}/include`. See PRs #4108, #4281, and #4299 for more information on the subject. Note that many of those missing dependencies from #4299 are still not fixed, because it was decided that each person would take care of their parts of the code...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:440,integrability,depend,dependencies,440,"We *do* want to use the source directory includes when possible. So I don't agree that we should exclude those includes. What we have is already almost as good as we can have. We just need to fix the issue with lack of space between includes, and generate headers in `${CMAKE_CURRENT_BINARY_DIR}` instead of `${CMAKE_BINARY_DIR}/include`. See PRs #4108, #4281, and #4299 for more information on the subject. Note that many of those missing dependencies from #4299 are still not fixed, because it was decided that each person would take care of their parts of the code...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:440,modifiability,depend,dependencies,440,"We *do* want to use the source directory includes when possible. So I don't agree that we should exclude those includes. What we have is already almost as good as we can have. We just need to fix the issue with lack of space between includes, and generate headers in `${CMAKE_CURRENT_BINARY_DIR}` instead of `${CMAKE_BINARY_DIR}/include`. See PRs #4108, #4281, and #4299 for more information on the subject. Note that many of those missing dependencies from #4299 are still not fixed, because it was decided that each person would take care of their parts of the code...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:440,safety,depend,dependencies,440,"We *do* want to use the source directory includes when possible. So I don't agree that we should exclude those includes. What we have is already almost as good as we can have. We just need to fix the issue with lack of space between includes, and generate headers in `${CMAKE_CURRENT_BINARY_DIR}` instead of `${CMAKE_BINARY_DIR}/include`. See PRs #4108, #4281, and #4299 for more information on the subject. Note that many of those missing dependencies from #4299 are still not fixed, because it was decided that each person would take care of their parts of the code...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:440,testability,depend,dependencies,440,"We *do* want to use the source directory includes when possible. So I don't agree that we should exclude those includes. What we have is already almost as good as we can have. We just need to fix the issue with lack of space between includes, and generate headers in `${CMAKE_CURRENT_BINARY_DIR}` instead of `${CMAKE_BINARY_DIR}/include`. See PRs #4108, #4281, and #4299 for more information on the subject. Note that many of those missing dependencies from #4299 are still not fixed, because it was decided that each person would take care of their parts of the code...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:518,usability,person,person,518,"We *do* want to use the source directory includes when possible. So I don't agree that we should exclude those includes. What we have is already almost as good as we can have. We just need to fix the issue with lack of space between includes, and generate headers in `${CMAKE_CURRENT_BINARY_DIR}` instead of `${CMAKE_BINARY_DIR}/include`. See PRs #4108, #4281, and #4299 for more information on the subject. Note that many of those missing dependencies from #4299 are still not fixed, because it was decided that each person would take care of their parts of the code...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:198,reliability,doe,doesn,198,"> We do want to use the source directory includes when possible. That's fine, but how's that connected to this PR (which removes the `-I` prefix from the list elements)? This PR is fixing a bug and doesn't preclude other, independent improvements.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:814,deployability,build,builds,814,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:902,deployability,build,builds,902,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:2033,deployability,build,builds,2033,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:82,energy efficiency,core,core,82,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:169,energy efficiency,core,core,169,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:216,energy efficiency,core,core,216,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:263,energy efficiency,core,core,263,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:310,energy efficiency,core,core,310,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:363,energy efficiency,core,core,363,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:412,energy efficiency,core,core,412,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:459,energy efficiency,core,core,459,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:507,energy efficiency,core,core,507,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:560,energy efficiency,core,core,560,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:607,energy efficiency,core,core,607,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:653,energy efficiency,core,core,653,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:705,energy efficiency,core,core,705,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:776,energy efficiency,core,core,776,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:864,energy efficiency,core,core,864,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:950,energy efficiency,core,core,950,@linev I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1003,energy efficiency,core,core,1003,v I tried to reproduce your issue on my computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/ho,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1041,energy efficiency,core,core,1041,y computer and I have next output:. `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/inc,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1088,energy efficiency,core,core,1088,keFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1126,energy efficiency,core,core,1126,LUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhas,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1173,energy efficiency,core,core,1173,ase/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1211,energy efficiency,core,core,1211,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1258,energy efficiency,core,core,1258,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1296,energy efficiency,core,core,1296,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1349,energy efficiency,core,core,1349,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1387,energy efficiency,core,core,1387,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1436,energy efficiency,core,core,1436,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1474,energy efficiency,core,core,1474,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1521,energy efficiency,core,core,1521,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1559,energy efficiency,core,core,1559,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1607,energy efficiency,core,core,1607,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1645,energy efficiency,core,core,1645,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1698,energy efficiency,core,core,1698,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1736,energy efficiency,core,core,1736,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1783,energy efficiency,core,core,1783,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1821,energy efficiency,core,core,1821,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1867,energy efficiency,core,core,1867,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1905,energy efficiency,core,core,1905,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1957,energy efficiency,core,core,1957,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:1995,energy efficiency,core,core,1995,CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core/-I/usr/include -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builtins/xxhash `. It looks dramatic... I will try to see how it behave with your PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:127,energy efficiency,core,core,127,@oshadura . You have exactly my problem! Corrupted entries are at the end of your list:. ```. -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:165,energy efficiency,core,core,165,@oshadura . You have exactly my problem! Corrupted entries are at the end of your list:. ```. -I/home/oksana/CERN_sources/root/core/-I/home/oksana/CERN_sources/root/core/gui/inc. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:60,deployability,releas,release,60,If we agree to merge it - this PR should be applied only to release branches. For the master #5181 should fix this the problem,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:673,deployability,build,builds,673,"With your PR: `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builtins/xxhash . `. @vgvassilev @amadio what do you think, can we try find an agreement here? Personally I think it is at least a quality improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:723,deployability,build,builds,723,"With your PR: `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builtins/xxhash . `. @vgvassilev @amadio what do you think, can we try find an agreement here? Personally I think it is at least a quality improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:17,energy efficiency,core,core,17,"With your PR: `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builtins/xxhash . `. @vgvassilev @amadio what do you think, can we try find an agreement here? Personally I think it is at least a quality improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:104,energy efficiency,core,core,104,"With your PR: `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builtins/xxhash . `. @vgvassilev @amadio what do you think, can we try find an agreement here? Personally I think it is at least a quality improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:151,energy efficiency,core,core,151,"With your PR: `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builtins/xxhash . `. @vgvassilev @amadio what do you think, can we try find an agreement here? Personally I think it is at least a quality improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:198,energy efficiency,core,core,198,"With your PR: `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builtins/xxhash . `. @vgvassilev @amadio what do you think, can we try find an agreement here? Personally I think it is at least a quality improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:245,energy efficiency,core,core,245,"With your PR: `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builtins/xxhash . `. @vgvassilev @amadio what do you think, can we try find an agreement here? Personally I think it is at least a quality improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:298,energy efficiency,core,core,298,"With your PR: `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builtins/xxhash . `. @vgvassilev @amadio what do you think, can we try find an agreement here? Personally I think it is at least a quality improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:347,energy efficiency,core,core,347,"With your PR: `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builtins/xxhash . `. @vgvassilev @amadio what do you think, can we try find an agreement here? Personally I think it is at least a quality improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:394,energy efficiency,core,core,394,"With your PR: `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builtins/xxhash . `. @vgvassilev @amadio what do you think, can we try find an agreement here? Personally I think it is at least a quality improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:442,energy efficiency,core,core,442,"With your PR: `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builtins/xxhash . `. @vgvassilev @amadio what do you think, can we try find an agreement here? Personally I think it is at least a quality improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:495,energy efficiency,core,core,495,"With your PR: `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builtins/xxhash . `. @vgvassilev @amadio what do you think, can we try find an agreement here? Personally I think it is at least a quality improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:542,energy efficiency,core,core,542,"With your PR: `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builtins/xxhash . `. @vgvassilev @amadio what do you think, can we try find an agreement here? Personally I think it is at least a quality improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:588,energy efficiency,core,core,588,"With your PR: `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builtins/xxhash . `. @vgvassilev @amadio what do you think, can we try find an agreement here? Personally I think it is at least a quality improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:771,energy efficiency,core,core,771,"With your PR: `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builtins/xxhash . `. @vgvassilev @amadio what do you think, can we try find an agreement here? Personally I think it is at least a quality improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:904,usability,Person,Personally,904,"With your PR: `./core/CMakeFiles/G__Core.dir/flags.make:CXX_INCLUDES = -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/macosx/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/winnt/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root -I/home/oksana/CERN_sources/root/builds/etc/cling -I/home/oksana/CERN_sources/root/builds/include -I/home/oksana/CERN_sources/root/core -I/home/oksana/CERN_sources/root/builtins/xxhash . `. @vgvassilev @amadio what do you think, can we try find an agreement here? Personally I think it is at least a quality improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:170,modifiability,variab,variable,170,"It is your call, I like the fact that we do not duplicate include paths and we make things less. I do not like the fact it happens at the cost of introducing yet another variable. If there is no way to do it without it, then I'd be okay to merge this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5172:111,modifiability,variab,variables,111,My changes less invasive and just fixing a bug. In #5181 I trying to solve same problem without duplication of variables and for this purpose using `INCLUDES` argument,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5172
https://github.com/root-project/root/pull/5175:280,deployability,fail,failed,280,"@vgvassilev @Axel-Naumann This tutorial is broken on master due to:. ```. python: path/to/root/interpreter/llvm/src/lib/IR/Value.cpp:800: void llvm::ValueHandleBase::RemoveFromUseList(): Assertion `getValPtr() && getValPtr()->HasValueHandle && ""Pointer doesn't have a use list!""' failed. ```. Same than we see in the conda channel on mattermost, I guess. Sry, I was confused. It was the pyroot channel. I'll ask again there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5175
https://github.com/root-project/root/pull/5175:253,reliability,doe,doesn,253,"@vgvassilev @Axel-Naumann This tutorial is broken on master due to:. ```. python: path/to/root/interpreter/llvm/src/lib/IR/Value.cpp:800: void llvm::ValueHandleBase::RemoveFromUseList(): Assertion `getValPtr() && getValPtr()->HasValueHandle && ""Pointer doesn't have a use list!""' failed. ```. Same than we see in the conda channel on mattermost, I guess. Sry, I was confused. It was the pyroot channel. I'll ask again there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5175
https://github.com/root-project/root/pull/5175:280,reliability,fail,failed,280,"@vgvassilev @Axel-Naumann This tutorial is broken on master due to:. ```. python: path/to/root/interpreter/llvm/src/lib/IR/Value.cpp:800: void llvm::ValueHandleBase::RemoveFromUseList(): Assertion `getValPtr() && getValPtr()->HasValueHandle && ""Pointer doesn't have a use list!""' failed. ```. Same than we see in the conda channel on mattermost, I guess. Sry, I was confused. It was the pyroot channel. I'll ask again there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5175
https://github.com/root-project/root/pull/5175:187,testability,Assert,Assertion,187,"@vgvassilev @Axel-Naumann This tutorial is broken on master due to:. ```. python: path/to/root/interpreter/llvm/src/lib/IR/Value.cpp:800: void llvm::ValueHandleBase::RemoveFromUseList(): Assertion `getValPtr() && getValPtr()->HasValueHandle && ""Pointer doesn't have a use list!""' failed. ```. Same than we see in the conda channel on mattermost, I guess. Sry, I was confused. It was the pyroot channel. I'll ask again there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5175
https://github.com/root-project/root/pull/5175:26,availability,error,errors,26,"The tutorial will trigger errors with python 3.8, tracked by [ROOT-10629](https://sft.its.cern.ch/jira/browse/ROOT-10629).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5175
https://github.com/root-project/root/pull/5175:26,performance,error,errors,26,"The tutorial will trigger errors with python 3.8, tracked by [ROOT-10629](https://sft.its.cern.ch/jira/browse/ROOT-10629).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5175
https://github.com/root-project/root/pull/5175:26,safety,error,errors,26,"The tutorial will trigger errors with python 3.8, tracked by [ROOT-10629](https://sft.its.cern.ch/jira/browse/ROOT-10629).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5175
https://github.com/root-project/root/pull/5175:26,usability,error,errors,26,"The tutorial will trigger errors with python 3.8, tracked by [ROOT-10629](https://sft.its.cern.ch/jira/browse/ROOT-10629).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5175
https://github.com/root-project/root/pull/5175:35,availability,failur,failures,35,@Axel-Naumann Why we don't see any failures here? Either we have no xrootd on any PR builds or no runtime cxxmodules?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5175
https://github.com/root-project/root/pull/5175:35,deployability,fail,failures,35,@Axel-Naumann Why we don't see any failures here? Either we have no xrootd on any PR builds or no runtime cxxmodules?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5175
https://github.com/root-project/root/pull/5175:85,deployability,build,builds,85,@Axel-Naumann Why we don't see any failures here? Either we have no xrootd on any PR builds or no runtime cxxmodules?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5175
https://github.com/root-project/root/pull/5175:35,performance,failur,failures,35,@Axel-Naumann Why we don't see any failures here? Either we have no xrootd on any PR builds or no runtime cxxmodules?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5175
https://github.com/root-project/root/pull/5175:35,reliability,fail,failures,35,@Axel-Naumann Why we don't see any failures here? Either we have no xrootd on any PR builds or no runtime cxxmodules?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5175
https://github.com/root-project/root/pull/5175:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5175
https://github.com/root-project/root/pull/5175:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5175
https://github.com/root-project/root/pull/5178:56,availability,failur,failure,56,I do not see how these changes could cause the reported failure...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5178
https://github.com/root-project/root/pull/5178:56,deployability,fail,failure,56,I do not see how these changes could cause the reported failure...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5178
https://github.com/root-project/root/pull/5178:56,performance,failur,failure,56,I do not see how these changes could cause the reported failure...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5178
https://github.com/root-project/root/pull/5178:56,reliability,fail,failure,56,I do not see how these changes could cause the reported failure...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5178
https://github.com/root-project/root/pull/5178:6,availability,failur,failures,6,These failures will be fixed in https://github.com/root-project/roottest/pull/468 https://github.com/root-project/root/pull/5180,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5178
https://github.com/root-project/root/pull/5178:6,deployability,fail,failures,6,These failures will be fixed in https://github.com/root-project/roottest/pull/468 https://github.com/root-project/root/pull/5180,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5178
https://github.com/root-project/root/pull/5178:6,performance,failur,failures,6,These failures will be fixed in https://github.com/root-project/roottest/pull/468 https://github.com/root-project/root/pull/5180,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5178
https://github.com/root-project/root/pull/5178:6,reliability,fail,failures,6,These failures will be fixed in https://github.com/root-project/roottest/pull/468 https://github.com/root-project/root/pull/5180,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5178
https://github.com/root-project/root/pull/5179:65,integrability,messag,messages,65,"Other generic request: it is required to write meaningful commit messages and squash ""non functional"" changes (like remove one empty line and etc.).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:65,interoperability,messag,messages,65,"Other generic request: it is required to write meaningful commit messages and squash ""non functional"" changes (like remove one empty line and etc.).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:25,safety,test,tests,25,"> Many thanks! More unit tests are always a good thing! > . > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no? I Will work on all the issues mentioned asap. Thanks for your review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:115,safety,test,tests,115,"> Many thanks! More unit tests are always a good thing! > . > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no? I Will work on all the issues mentioned asap. Thanks for your review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:321,safety,review,review,321,"> Many thanks! More unit tests are always a good thing! > . > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no? I Will work on all the issues mentioned asap. Thanks for your review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:20,testability,unit,unit,20,"> Many thanks! More unit tests are always a good thing! > . > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no? I Will work on all the issues mentioned asap. Thanks for your review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:25,testability,test,tests,25,"> Many thanks! More unit tests are always a good thing! > . > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no? I Will work on all the issues mentioned asap. Thanks for your review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:115,testability,test,tests,115,"> Many thanks! More unit tests are always a good thing! > . > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no? I Will work on all the issues mentioned asap. Thanks for your review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:143,testability,understand,understand,143,"> Many thanks! More unit tests are always a good thing! > . > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no? I Will work on all the issues mentioned asap. Thanks for your review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:321,testability,review,review,321,"> Many thanks! More unit tests are always a good thing! > . > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no? I Will work on all the issues mentioned asap. Thanks for your review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:25,safety,test,tests,25,"> Many thanks! More unit tests are always a good thing! > . > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no? hello, jblomer,. so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled? Also, I am referring: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_zip.cxx#L67 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:115,safety,test,tests,115,"> Many thanks! More unit tests are always a good thing! > . > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no? hello, jblomer,. so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled? Also, I am referring: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_zip.cxx#L67 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:512,safety,test,test,512,"> Many thanks! More unit tests are always a good thing! > . > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no? hello, jblomer,. so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled? Also, I am referring: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_zip.cxx#L67 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:20,testability,unit,unit,20,"> Many thanks! More unit tests are always a good thing! > . > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no? hello, jblomer,. so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled? Also, I am referring: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_zip.cxx#L67 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:25,testability,test,tests,25,"> Many thanks! More unit tests are always a good thing! > . > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no? hello, jblomer,. so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled? Also, I am referring: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_zip.cxx#L67 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:115,testability,test,tests,115,"> Many thanks! More unit tests are always a good thing! > . > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no? hello, jblomer,. so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled? Also, I am referring: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_zip.cxx#L67 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:143,testability,understand,understand,143,"> Many thanks! More unit tests are always a good thing! > . > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no? hello, jblomer,. so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled? Also, I am referring: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_zip.cxx#L67 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:512,testability,test,test,512,"> Many thanks! More unit tests are always a good thing! > . > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no? hello, jblomer,. so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled? Also, I am referring: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_zip.cxx#L67 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:258,safety,test,test,258,> so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled? I'm still a bit puzzled. Can you please describe which functionality or property of RNTuple you'd like to test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:258,testability,test,test,258,> so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled? I'm still a bit puzzled. Can you please describe which functionality or property of RNTuple you'd like to test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:266,safety,test,test,266,"> > so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled? > . > I'm still a bit puzzled. Can you please describe which functionality or property of RNTuple you'd like to test? hello,. what I intend to do is to create an RNTuple, populate it with random data, and checking default compression settings used for generated files (by default, without explicitly saying which compression algorithm I want to use).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:266,testability,test,test,266,"> > so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled? > . > I'm still a bit puzzled. Can you please describe which functionality or property of RNTuple you'd like to test? hello,. what I intend to do is to create an RNTuple, populate it with random data, and checking default compression settings used for generated files (by default, without explicitly saying which compression algorithm I want to use).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:93,safety,test,test,93,"Ok, I see. In this case, you would not need to generate a lot of data, right? A more concise test would be to create an empty RNTuple, to add one value, and then to open it and check what's the compression setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:93,testability,test,test,93,"Ok, I see. In this case, you would not need to generate a lot of data, right? A more concise test would be to create an empty RNTuple, to add one value, and then to open it and check what's the compression setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:95,safety,test,test,95,"> Ok, I see. In this case, you would not need to generate a lot of data, right? A more concise test would be to create an empty RNTuple, to add one value, and then to open it and check what's the compression setting. Yes, and I'm looking in https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_zip.cxx#L67. Also discussed my approach in previous comment, please tell me am I going right ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:305,safety,test,test,305,"> Ok, I see. In this case, you would not need to generate a lot of data, right? A more concise test would be to create an empty RNTuple, to add one value, and then to open it and check what's the compression setting. Yes, and I'm looking in https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_zip.cxx#L67. Also discussed my approach in previous comment, please tell me am I going right ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:95,testability,test,test,95,"> Ok, I see. In this case, you would not need to generate a lot of data, right? A more concise test would be to create an empty RNTuple, to add one value, and then to open it and check what's the compression setting. Yes, and I'm looking in https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_zip.cxx#L67. Also discussed my approach in previous comment, please tell me am I going right ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:305,testability,test,test,305,"> Ok, I see. In this case, you would not need to generate a lot of data, right? A more concise test would be to create an empty RNTuple, to add one value, and then to open it and check what's the compression setting. Yes, and I'm looking in https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_zip.cxx#L67. Also discussed my approach in previous comment, please tell me am I going right ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:71,integrability,event,event,71,"I think the PR goes into the right direction. Please use just 1 simple event instead of 1000, because we are really testing only if the compression setting gets applied. The `ntuple_zip` unit tests are _not_ really relevant here -- they test the compression routines themselves and not if the correct compression settings were used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:258,integrability,rout,routines,258,"I think the PR goes into the right direction. Please use just 1 simple event instead of 1000, because we are really testing only if the compression setting gets applied. The `ntuple_zip` unit tests are _not_ really relevant here -- they test the compression routines themselves and not if the correct compression settings were used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:116,safety,test,testing,116,"I think the PR goes into the right direction. Please use just 1 simple event instead of 1000, because we are really testing only if the compression setting gets applied. The `ntuple_zip` unit tests are _not_ really relevant here -- they test the compression routines themselves and not if the correct compression settings were used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:192,safety,test,tests,192,"I think the PR goes into the right direction. Please use just 1 simple event instead of 1000, because we are really testing only if the compression setting gets applied. The `ntuple_zip` unit tests are _not_ really relevant here -- they test the compression routines themselves and not if the correct compression settings were used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:237,safety,test,test,237,"I think the PR goes into the right direction. Please use just 1 simple event instead of 1000, because we are really testing only if the compression setting gets applied. The `ntuple_zip` unit tests are _not_ really relevant here -- they test the compression routines themselves and not if the correct compression settings were used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:64,testability,simpl,simple,64,"I think the PR goes into the right direction. Please use just 1 simple event instead of 1000, because we are really testing only if the compression setting gets applied. The `ntuple_zip` unit tests are _not_ really relevant here -- they test the compression routines themselves and not if the correct compression settings were used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:116,testability,test,testing,116,"I think the PR goes into the right direction. Please use just 1 simple event instead of 1000, because we are really testing only if the compression setting gets applied. The `ntuple_zip` unit tests are _not_ really relevant here -- they test the compression routines themselves and not if the correct compression settings were used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:187,testability,unit,unit,187,"I think the PR goes into the right direction. Please use just 1 simple event instead of 1000, because we are really testing only if the compression setting gets applied. The `ntuple_zip` unit tests are _not_ really relevant here -- they test the compression routines themselves and not if the correct compression settings were used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:192,testability,test,tests,192,"I think the PR goes into the right direction. Please use just 1 simple event instead of 1000, because we are really testing only if the compression setting gets applied. The `ntuple_zip` unit tests are _not_ really relevant here -- they test the compression routines themselves and not if the correct compression settings were used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:237,testability,test,test,237,"I think the PR goes into the right direction. Please use just 1 simple event instead of 1000, because we are really testing only if the compression setting gets applied. The `ntuple_zip` unit tests are _not_ really relevant here -- they test the compression routines themselves and not if the correct compression settings were used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:64,usability,simpl,simple,64,"I think the PR goes into the right direction. Please use just 1 simple event instead of 1000, because we are really testing only if the compression setting gets applied. The `ntuple_zip` unit tests are _not_ really relevant here -- they test the compression routines themselves and not if the correct compression settings were used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5179:50,performance,time,time,50,"@jblomer , sorry to say but I am not able to find time for this, right now I am closing this issue but will open as soon as possible when I'm ready to work on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5179
https://github.com/root-project/root/pull/5181:222,integrability,event,eventual,222,"I would be in favor of squashing some (not all) of the commits. For instance, IIUC, we introduce `ROOT_CONFIGURE_LIBRARY_INCLUDES` and then we use it in later commits. IMO, this should be one atomic commit which will make eventual reversal easier.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:159,availability,error,errors,159,> we introduce ROOT_CONFIGURE_LIBRARY_INCLUDES and then we use it in later commits. I always try to split large changes on smaller parts to be able search for errors. If we will made single commit and found error much later - it will be real challenge to fix it. `ROOT_CONFIGURE_LIBRARY_INCLUDES` is central part of this PR. I did all changes step by step and only at very end removed `${CMAKE_BUILD_DIR}/include` from list of includes. And by these steps I have to modify code which had many wrong (not mentioned in library dependencies) includes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:207,availability,error,error,207,> we introduce ROOT_CONFIGURE_LIBRARY_INCLUDES and then we use it in later commits. I always try to split large changes on smaller parts to be able search for errors. If we will made single commit and found error much later - it will be real challenge to fix it. `ROOT_CONFIGURE_LIBRARY_INCLUDES` is central part of this PR. I did all changes step by step and only at very end removed `${CMAKE_BUILD_DIR}/include` from list of includes. And by these steps I have to modify code which had many wrong (not mentioned in library dependencies) includes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:525,deployability,depend,dependencies,525,> we introduce ROOT_CONFIGURE_LIBRARY_INCLUDES and then we use it in later commits. I always try to split large changes on smaller parts to be able search for errors. If we will made single commit and found error much later - it will be real challenge to fix it. `ROOT_CONFIGURE_LIBRARY_INCLUDES` is central part of this PR. I did all changes step by step and only at very end removed `${CMAKE_BUILD_DIR}/include` from list of includes. And by these steps I have to modify code which had many wrong (not mentioned in library dependencies) includes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:525,integrability,depend,dependencies,525,> we introduce ROOT_CONFIGURE_LIBRARY_INCLUDES and then we use it in later commits. I always try to split large changes on smaller parts to be able search for errors. If we will made single commit and found error much later - it will be real challenge to fix it. `ROOT_CONFIGURE_LIBRARY_INCLUDES` is central part of this PR. I did all changes step by step and only at very end removed `${CMAKE_BUILD_DIR}/include` from list of includes. And by these steps I have to modify code which had many wrong (not mentioned in library dependencies) includes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:525,modifiability,depend,dependencies,525,> we introduce ROOT_CONFIGURE_LIBRARY_INCLUDES and then we use it in later commits. I always try to split large changes on smaller parts to be able search for errors. If we will made single commit and found error much later - it will be real challenge to fix it. `ROOT_CONFIGURE_LIBRARY_INCLUDES` is central part of this PR. I did all changes step by step and only at very end removed `${CMAKE_BUILD_DIR}/include` from list of includes. And by these steps I have to modify code which had many wrong (not mentioned in library dependencies) includes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:159,performance,error,errors,159,> we introduce ROOT_CONFIGURE_LIBRARY_INCLUDES and then we use it in later commits. I always try to split large changes on smaller parts to be able search for errors. If we will made single commit and found error much later - it will be real challenge to fix it. `ROOT_CONFIGURE_LIBRARY_INCLUDES` is central part of this PR. I did all changes step by step and only at very end removed `${CMAKE_BUILD_DIR}/include` from list of includes. And by these steps I have to modify code which had many wrong (not mentioned in library dependencies) includes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:207,performance,error,error,207,> we introduce ROOT_CONFIGURE_LIBRARY_INCLUDES and then we use it in later commits. I always try to split large changes on smaller parts to be able search for errors. If we will made single commit and found error much later - it will be real challenge to fix it. `ROOT_CONFIGURE_LIBRARY_INCLUDES` is central part of this PR. I did all changes step by step and only at very end removed `${CMAKE_BUILD_DIR}/include` from list of includes. And by these steps I have to modify code which had many wrong (not mentioned in library dependencies) includes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:159,safety,error,errors,159,> we introduce ROOT_CONFIGURE_LIBRARY_INCLUDES and then we use it in later commits. I always try to split large changes on smaller parts to be able search for errors. If we will made single commit and found error much later - it will be real challenge to fix it. `ROOT_CONFIGURE_LIBRARY_INCLUDES` is central part of this PR. I did all changes step by step and only at very end removed `${CMAKE_BUILD_DIR}/include` from list of includes. And by these steps I have to modify code which had many wrong (not mentioned in library dependencies) includes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:207,safety,error,error,207,> we introduce ROOT_CONFIGURE_LIBRARY_INCLUDES and then we use it in later commits. I always try to split large changes on smaller parts to be able search for errors. If we will made single commit and found error much later - it will be real challenge to fix it. `ROOT_CONFIGURE_LIBRARY_INCLUDES` is central part of this PR. I did all changes step by step and only at very end removed `${CMAKE_BUILD_DIR}/include` from list of includes. And by these steps I have to modify code which had many wrong (not mentioned in library dependencies) includes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:525,safety,depend,dependencies,525,> we introduce ROOT_CONFIGURE_LIBRARY_INCLUDES and then we use it in later commits. I always try to split large changes on smaller parts to be able search for errors. If we will made single commit and found error much later - it will be real challenge to fix it. `ROOT_CONFIGURE_LIBRARY_INCLUDES` is central part of this PR. I did all changes step by step and only at very end removed `${CMAKE_BUILD_DIR}/include` from list of includes. And by these steps I have to modify code which had many wrong (not mentioned in library dependencies) includes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:466,security,modif,modify,466,> we introduce ROOT_CONFIGURE_LIBRARY_INCLUDES and then we use it in later commits. I always try to split large changes on smaller parts to be able search for errors. If we will made single commit and found error much later - it will be real challenge to fix it. `ROOT_CONFIGURE_LIBRARY_INCLUDES` is central part of this PR. I did all changes step by step and only at very end removed `${CMAKE_BUILD_DIR}/include` from list of includes. And by these steps I have to modify code which had many wrong (not mentioned in library dependencies) includes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:525,testability,depend,dependencies,525,> we introduce ROOT_CONFIGURE_LIBRARY_INCLUDES and then we use it in later commits. I always try to split large changes on smaller parts to be able search for errors. If we will made single commit and found error much later - it will be real challenge to fix it. `ROOT_CONFIGURE_LIBRARY_INCLUDES` is central part of this PR. I did all changes step by step and only at very end removed `${CMAKE_BUILD_DIR}/include` from list of includes. And by these steps I have to modify code which had many wrong (not mentioned in library dependencies) includes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:159,usability,error,errors,159,> we introduce ROOT_CONFIGURE_LIBRARY_INCLUDES and then we use it in later commits. I always try to split large changes on smaller parts to be able search for errors. If we will made single commit and found error much later - it will be real challenge to fix it. `ROOT_CONFIGURE_LIBRARY_INCLUDES` is central part of this PR. I did all changes step by step and only at very end removed `${CMAKE_BUILD_DIR}/include` from list of includes. And by these steps I have to modify code which had many wrong (not mentioned in library dependencies) includes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:207,usability,error,error,207,> we introduce ROOT_CONFIGURE_LIBRARY_INCLUDES and then we use it in later commits. I always try to split large changes on smaller parts to be able search for errors. If we will made single commit and found error much later - it will be real challenge to fix it. `ROOT_CONFIGURE_LIBRARY_INCLUDES` is central part of this PR. I did all changes step by step and only at very end removed `${CMAKE_BUILD_DIR}/include` from list of includes. And by these steps I have to modify code which had many wrong (not mentioned in library dependencies) includes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:65,safety,review,review,65,@Axel-Naumann @vgvassilev @amadio @pcanal can you help please to review this PR? (@vgvassilev thanks for doing it already). I will test this PR now with cxxmodules and PCH and let you know if there are any problems.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:131,safety,test,test,131,@Axel-Naumann @vgvassilev @amadio @pcanal can you help please to review this PR? (@vgvassilev thanks for doing it already). I will test this PR now with cxxmodules and PCH and let you know if there are any problems.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:65,testability,review,review,65,@Axel-Naumann @vgvassilev @amadio @pcanal can you help please to review this PR? (@vgvassilev thanks for doing it already). I will test this PR now with cxxmodules and PCH and let you know if there are any problems.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:131,testability,test,test,131,@Axel-Naumann @vgvassilev @amadio @pcanal can you help please to review this PR? (@vgvassilev thanks for doing it already). I will test this PR now with cxxmodules and PCH and let you know if there are any problems.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:50,usability,help,help,50,@Axel-Naumann @vgvassilev @amadio @pcanal can you help please to review this PR? (@vgvassilev thanks for doing it already). I will test this PR now with cxxmodules and PCH and let you know if there are any problems.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:46,deployability,log,logical,46,"@vgvassilev Thanks for review. To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:104,deployability,depend,dependencies,104,"@vgvassilev Thanks for review. To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:104,integrability,depend,dependencies,104,"@vgvassilev Thanks for review. To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:140,integrability,sub,sub-class,140,"@vgvassilev Thanks for review. To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:104,modifiability,depend,dependencies,104,"@vgvassilev Thanks for review. To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:23,safety,review,review,23,"@vgvassilev Thanks for review. To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:46,safety,log,logical,46,"@vgvassilev Thanks for review. To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:104,safety,depend,dependencies,104,"@vgvassilev Thanks for review. To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:46,security,log,logical,46,"@vgvassilev Thanks for review. To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:23,testability,review,review,23,"@vgvassilev Thanks for review. To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:46,testability,log,logical,46,"@vgvassilev Thanks for review. To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:104,testability,depend,dependencies,104,"@vgvassilev Thanks for review. To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:50,deployability,log,logical,50,"> @vgvassilev Thanks for review. > To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive. I can do it for you if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:108,deployability,depend,dependencies,108,"> @vgvassilev Thanks for review. > To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive. I can do it for you if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:108,integrability,depend,dependencies,108,"> @vgvassilev Thanks for review. > To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive. I can do it for you if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:144,integrability,sub,sub-class,144,"> @vgvassilev Thanks for review. > To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive. I can do it for you if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:108,modifiability,depend,dependencies,108,"> @vgvassilev Thanks for review. > To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive. I can do it for you if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:25,safety,review,review,25,"> @vgvassilev Thanks for review. > To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive. I can do it for you if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:50,safety,log,logical,50,"> @vgvassilev Thanks for review. > To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive. I can do it for you if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:108,safety,depend,dependencies,108,"> @vgvassilev Thanks for review. > To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive. I can do it for you if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:50,security,log,logical,50,"> @vgvassilev Thanks for review. > To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive. I can do it for you if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:25,testability,review,review,25,"> @vgvassilev Thanks for review. > To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive. I can do it for you if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:50,testability,log,logical,50,"> @vgvassilev Thanks for review. > To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive. I can do it for you if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:108,testability,depend,dependencies,108,"> @vgvassilev Thanks for review. > To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive. I can do it for you if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:342,usability,prefer,prefer,342,"> @vgvassilev Thanks for review. > To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive. I can do it for you if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:440,availability,recov,recover,440,"@vgvassilev . > For example, I'd recommend to move the include_directories to target_include_directories outside of this PR. Not always it can be done easily. In several places I have to change from `target_include_directories` to `include_directories` to solve dependency issue between library and dictionary. We were discussing it in mattermost, but now I delete myself from discussion trying adding you. Maybe @oshadura could help us to recover it. Long story short - dictionary need information about library includes BEFORE `target_include_directories` for that library is called. There is workaround in cmake (generator expressions), but it is not flexible enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:262,deployability,depend,dependency,262,"@vgvassilev . > For example, I'd recommend to move the include_directories to target_include_directories outside of this PR. Not always it can be done easily. In several places I have to change from `target_include_directories` to `include_directories` to solve dependency issue between library and dictionary. We were discussing it in mattermost, but now I delete myself from discussion trying adding you. Maybe @oshadura could help us to recover it. Long story short - dictionary need information about library includes BEFORE `target_include_directories` for that library is called. There is workaround in cmake (generator expressions), but it is not flexible enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:440,deployability,recov,recover,440,"@vgvassilev . > For example, I'd recommend to move the include_directories to target_include_directories outside of this PR. Not always it can be done easily. In several places I have to change from `target_include_directories` to `include_directories` to solve dependency issue between library and dictionary. We were discussing it in mattermost, but now I delete myself from discussion trying adding you. Maybe @oshadura could help us to recover it. Long story short - dictionary need information about library includes BEFORE `target_include_directories` for that library is called. There is workaround in cmake (generator expressions), but it is not flexible enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:262,integrability,depend,dependency,262,"@vgvassilev . > For example, I'd recommend to move the include_directories to target_include_directories outside of this PR. Not always it can be done easily. In several places I have to change from `target_include_directories` to `include_directories` to solve dependency issue between library and dictionary. We were discussing it in mattermost, but now I delete myself from discussion trying adding you. Maybe @oshadura could help us to recover it. Long story short - dictionary need information about library includes BEFORE `target_include_directories` for that library is called. There is workaround in cmake (generator expressions), but it is not flexible enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:262,modifiability,depend,dependency,262,"@vgvassilev . > For example, I'd recommend to move the include_directories to target_include_directories outside of this PR. Not always it can be done easily. In several places I have to change from `target_include_directories` to `include_directories` to solve dependency issue between library and dictionary. We were discussing it in mattermost, but now I delete myself from discussion trying adding you. Maybe @oshadura could help us to recover it. Long story short - dictionary need information about library includes BEFORE `target_include_directories` for that library is called. There is workaround in cmake (generator expressions), but it is not flexible enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:440,reliability,recov,recover,440,"@vgvassilev . > For example, I'd recommend to move the include_directories to target_include_directories outside of this PR. Not always it can be done easily. In several places I have to change from `target_include_directories` to `include_directories` to solve dependency issue between library and dictionary. We were discussing it in mattermost, but now I delete myself from discussion trying adding you. Maybe @oshadura could help us to recover it. Long story short - dictionary need information about library includes BEFORE `target_include_directories` for that library is called. There is workaround in cmake (generator expressions), but it is not flexible enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:262,safety,depend,dependency,262,"@vgvassilev . > For example, I'd recommend to move the include_directories to target_include_directories outside of this PR. Not always it can be done easily. In several places I have to change from `target_include_directories` to `include_directories` to solve dependency issue between library and dictionary. We were discussing it in mattermost, but now I delete myself from discussion trying adding you. Maybe @oshadura could help us to recover it. Long story short - dictionary need information about library includes BEFORE `target_include_directories` for that library is called. There is workaround in cmake (generator expressions), but it is not flexible enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:440,safety,recov,recover,440,"@vgvassilev . > For example, I'd recommend to move the include_directories to target_include_directories outside of this PR. Not always it can be done easily. In several places I have to change from `target_include_directories` to `include_directories` to solve dependency issue between library and dictionary. We were discussing it in mattermost, but now I delete myself from discussion trying adding you. Maybe @oshadura could help us to recover it. Long story short - dictionary need information about library includes BEFORE `target_include_directories` for that library is called. There is workaround in cmake (generator expressions), but it is not flexible enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:440,security,recov,recover,440,"@vgvassilev . > For example, I'd recommend to move the include_directories to target_include_directories outside of this PR. Not always it can be done easily. In several places I have to change from `target_include_directories` to `include_directories` to solve dependency issue between library and dictionary. We were discussing it in mattermost, but now I delete myself from discussion trying adding you. Maybe @oshadura could help us to recover it. Long story short - dictionary need information about library includes BEFORE `target_include_directories` for that library is called. There is workaround in cmake (generator expressions), but it is not flexible enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:262,testability,depend,dependency,262,"@vgvassilev . > For example, I'd recommend to move the include_directories to target_include_directories outside of this PR. Not always it can be done easily. In several places I have to change from `target_include_directories` to `include_directories` to solve dependency issue between library and dictionary. We were discussing it in mattermost, but now I delete myself from discussion trying adding you. Maybe @oshadura could help us to recover it. Long story short - dictionary need information about library includes BEFORE `target_include_directories` for that library is called. There is workaround in cmake (generator expressions), but it is not flexible enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:429,usability,help,help,429,"@vgvassilev . > For example, I'd recommend to move the include_directories to target_include_directories outside of this PR. Not always it can be done easily. In several places I have to change from `target_include_directories` to `include_directories` to solve dependency issue between library and dictionary. We were discussing it in mattermost, but now I delete myself from discussion trying adding you. Maybe @oshadura could help us to recover it. Long story short - dictionary need information about library includes BEFORE `target_include_directories` for that library is called. There is workaround in cmake (generator expressions), but it is not flexible enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:284,deployability,build,build,284,"@linev PR looks good for me (I think there could be improvements but we can do them afterwords very carefully). I really afraid that this PR is very big, and if we will need to revert something it will be almost impossible. Can it go in ""a smaller pieces""? Other thing can you try to build with full test suite?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:300,safety,test,test,300,"@linev PR looks good for me (I think there could be improvements but we can do them afterwords very carefully). I really afraid that this PR is very big, and if we will need to revert something it will be almost impossible. Can it go in ""a smaller pieces""? Other thing can you try to build with full test suite?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:300,testability,test,test,300,"@linev PR looks good for me (I think there could be improvements but we can do them afterwords very carefully). I really afraid that this PR is very big, and if we will need to revert something it will be almost impossible. Can it go in ""a smaller pieces""? Other thing can you try to build with full test suite?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:227,availability,consist,consistent,227,"> Can it go in ""a smaller pieces""? . It is mostly impossible. When `${CMAKE_BINARY_DIR}/include` disappears from includes lists, most CMakeLists.txt file should be touched. I propose to make squash commit - at least it will be consistent and in emergency case can be reverted as whole.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:227,usability,consist,consistent,227,"> Can it go in ""a smaller pieces""? . It is mostly impossible. When `${CMAKE_BINARY_DIR}/include` disappears from includes lists, most CMakeLists.txt file should be touched. I propose to make squash commit - at least it will be consistent and in emergency case can be reverted as whole.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:134,interoperability,specif,specify,134,@oshadura Finally I found a way to use everywhere `target_include_directories` - there is special flag in rootcling which I forgot to specify. Now in all places `target_include_directories` specified. Once all tests pass - we can merge it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:190,interoperability,specif,specified,190,@oshadura Finally I found a way to use everywhere `target_include_directories` - there is special flag in rootcling which I forgot to specify. Now in all places `target_include_directories` specified. Once all tests pass - we can merge it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:210,safety,test,tests,210,@oshadura Finally I found a way to use everywhere `target_include_directories` - there is special flag in rootcling which I forgot to specify. Now in all places `target_include_directories` specified. Once all tests pass - we can merge it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5181:210,testability,test,tests,210,@oshadura Finally I found a way to use everywhere `target_include_directories` - there is special flag in rootcling which I forgot to specify. Now in all places `target_include_directories` specified. Once all tests pass - we can merge it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5181
https://github.com/root-project/root/pull/5182:83,availability,Error,Error,83,"Fixed dataframe_snapshot to not use reshuffled tree as friend, changed `throw` to `Error`, changed `BIT(15)` to `BIT(19)`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5182
https://github.com/root-project/root/pull/5182:83,performance,Error,Error,83,"Fixed dataframe_snapshot to not use reshuffled tree as friend, changed `throw` to `Error`, changed `BIT(15)` to `BIT(19)`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5182
https://github.com/root-project/root/pull/5182:83,safety,Error,Error,83,"Fixed dataframe_snapshot to not use reshuffled tree as friend, changed `throw` to `Error`, changed `BIT(15)` to `BIT(19)`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5182
https://github.com/root-project/root/pull/5182:83,usability,Error,Error,83,"Fixed dataframe_snapshot to not use reshuffled tree as friend, changed `throw` to `Error`, changed `BIT(15)` to `BIT(19)`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5182
https://github.com/root-project/root/pull/5182:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5182
https://github.com/root-project/root/pull/5182:154,safety,test,test,154,"`projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make` should be fixed by https://github.com/root-project/roottest/pull/476, `projectroot.test.test_stressentrylist_interpreted` is unrelated",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5182
https://github.com/root-project/root/pull/5182:154,testability,test,test,154,"`projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make` should be fixed by https://github.com/root-project/roottest/pull/476, `projectroot.test.test_stressentrylist_interpreted` is unrelated",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5182
https://github.com/root-project/root/pull/5182:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5182
https://github.com/root-project/root/pull/5182:0,availability,Failur,Failure,0,Failure are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5182
https://github.com/root-project/root/pull/5182:0,deployability,Fail,Failure,0,Failure are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5182
https://github.com/root-project/root/pull/5182:0,performance,Failur,Failure,0,Failure are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5182
https://github.com/root-project/root/pull/5182:0,reliability,Fail,Failure,0,Failure are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5182
https://github.com/root-project/root/pull/5185:56,deployability,version,versions,56,Let me know how will go check with two different python versions: https://github.com/root-project/root/blob/14055a79161a8e7bc27a1757468b8c591db8089b/cmake/modules/SearchRootCoreDeps.cmake#L11,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5185
https://github.com/root-project/root/pull/5185:155,deployability,modul,modules,155,Let me know how will go check with two different python versions: https://github.com/root-project/root/blob/14055a79161a8e7bc27a1757468b8c591db8089b/cmake/modules/SearchRootCoreDeps.cmake#L11,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5185
https://github.com/root-project/root/pull/5185:56,integrability,version,versions,56,Let me know how will go check with two different python versions: https://github.com/root-project/root/blob/14055a79161a8e7bc27a1757468b8c591db8089b/cmake/modules/SearchRootCoreDeps.cmake#L11,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5185
https://github.com/root-project/root/pull/5185:56,modifiability,version,versions,56,Let me know how will go check with two different python versions: https://github.com/root-project/root/blob/14055a79161a8e7bc27a1757468b8c591db8089b/cmake/modules/SearchRootCoreDeps.cmake#L11,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5185
https://github.com/root-project/root/pull/5185:155,modifiability,modul,modules,155,Let me know how will go check with two different python versions: https://github.com/root-project/root/blob/14055a79161a8e7bc27a1757468b8c591db8089b/cmake/modules/SearchRootCoreDeps.cmake#L11,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5185
https://github.com/root-project/root/pull/5185:155,safety,modul,modules,155,Let me know how will go check with two different python versions: https://github.com/root-project/root/blob/14055a79161a8e7bc27a1757468b8c591db8089b/cmake/modules/SearchRootCoreDeps.cmake#L11,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5185
https://github.com/root-project/root/pull/5187:136,deployability,Fail,Failed,136,As discussed with @etejedor . - add back exception for `__all__`. - add comment about caching of `hasattr`. - changed final message to `Failed to get attribute {} from ROOT`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5187
https://github.com/root-project/root/pull/5187:124,integrability,messag,message,124,As discussed with @etejedor . - add back exception for `__all__`. - add comment about caching of `hasattr`. - changed final message to `Failed to get attribute {} from ROOT`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5187
https://github.com/root-project/root/pull/5187:124,interoperability,messag,message,124,As discussed with @etejedor . - add back exception for `__all__`. - add comment about caching of `hasattr`. - changed final message to `Failed to get attribute {} from ROOT`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5187
https://github.com/root-project/root/pull/5187:86,performance,cach,caching,86,As discussed with @etejedor . - add back exception for `__all__`. - add comment about caching of `hasattr`. - changed final message to `Failed to get attribute {} from ROOT`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5187
https://github.com/root-project/root/pull/5187:136,reliability,Fail,Failed,136,As discussed with @etejedor . - add back exception for `__all__`. - add comment about caching of `hasattr`. - changed final message to `Failed to get attribute {} from ROOT`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5187
https://github.com/root-project/root/pull/5187:41,safety,except,exception,41,As discussed with @etejedor . - add back exception for `__all__`. - add comment about caching of `hasattr`. - changed final message to `Failed to get attribute {} from ROOT`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5187
https://github.com/root-project/root/pull/5187:5,availability,failur,failures,5,"Test failures are unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5187
https://github.com/root-project/root/pull/5187:5,deployability,fail,failures,5,"Test failures are unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5187
https://github.com/root-project/root/pull/5187:5,performance,failur,failures,5,"Test failures are unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5187
https://github.com/root-project/root/pull/5187:5,reliability,fail,failures,5,"Test failures are unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5187
https://github.com/root-project/root/pull/5187:0,safety,Test,Test,0,"Test failures are unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5187
https://github.com/root-project/root/pull/5187:0,testability,Test,Test,0,"Test failures are unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5187
https://github.com/root-project/root/pull/5191:0,reliability,doe,does,0,does stressGraphics still run after the PR ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:25,deployability,patch,patch,25,"@musinsky This is a nice patch, but as I suspected, it makes stressGraphics fail. `stressGraphics.ref` `stressGraphics_builtinzlib.ref` need to be updated. Can you add that to this PR ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:76,deployability,fail,fail,76,"@musinsky This is a nice patch, but as I suspected, it makes stressGraphics fail. `stressGraphics.ref` `stressGraphics_builtinzlib.ref` need to be updated. Can you add that to this PR ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:147,deployability,updat,updated,147,"@musinsky This is a nice patch, but as I suspected, it makes stressGraphics fail. `stressGraphics.ref` `stressGraphics_builtinzlib.ref` need to be updated. Can you add that to this PR ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:76,reliability,fail,fail,76,"@musinsky This is a nice patch, but as I suspected, it makes stressGraphics fail. `stressGraphics.ref` `stressGraphics_builtinzlib.ref` need to be updated. Can you add that to this PR ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:25,safety,patch,patch,25,"@musinsky This is a nice patch, but as I suspected, it makes stressGraphics fail. `stressGraphics.ref` `stressGraphics_builtinzlib.ref` need to be updated. Can you add that to this PR ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:147,safety,updat,updated,147,"@musinsky This is a nice patch, but as I suspected, it makes stressGraphics fail. `stressGraphics.ref` `stressGraphics_builtinzlib.ref` need to be updated. Can you add that to this PR ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:25,security,patch,patch,25,"@musinsky This is a nice patch, but as I suspected, it makes stressGraphics fail. `stressGraphics.ref` `stressGraphics_builtinzlib.ref` need to be updated. Can you add that to this PR ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:147,security,updat,updated,147,"@musinsky This is a nice patch, but as I suspected, it makes stressGraphics fail. `stressGraphics.ref` `stressGraphics_builtinzlib.ref` need to be updated. Can you add that to this PR ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:3,usability,progress,progress,3,in progress,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:362,availability,error,error,362,"Let me know if you need some help. You need to go in the ""test"" directory of the ROOT sources et type make. Then run `./stressGraphics"" you will get several things like:. ```. Test 4: Fill patterns............................................. OK. PDF output.......................................... 4 FAILED. Result = 19386. Reference = 19255. ```. to fix this error you will need to replace 19225 by 19386 in stressGraphics.ref",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:302,deployability,FAIL,FAILED,302,"Let me know if you need some help. You need to go in the ""test"" directory of the ROOT sources et type make. Then run `./stressGraphics"" you will get several things like:. ```. Test 4: Fill patterns............................................. OK. PDF output.......................................... 4 FAILED. Result = 19386. Reference = 19255. ```. to fix this error you will need to replace 19225 by 19386 in stressGraphics.ref",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:362,performance,error,error,362,"Let me know if you need some help. You need to go in the ""test"" directory of the ROOT sources et type make. Then run `./stressGraphics"" you will get several things like:. ```. Test 4: Fill patterns............................................. OK. PDF output.......................................... 4 FAILED. Result = 19386. Reference = 19255. ```. to fix this error you will need to replace 19225 by 19386 in stressGraphics.ref",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:302,reliability,FAIL,FAILED,302,"Let me know if you need some help. You need to go in the ""test"" directory of the ROOT sources et type make. Then run `./stressGraphics"" you will get several things like:. ```. Test 4: Fill patterns............................................. OK. PDF output.......................................... 4 FAILED. Result = 19386. Reference = 19255. ```. to fix this error you will need to replace 19225 by 19386 in stressGraphics.ref",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:58,safety,test,test,58,"Let me know if you need some help. You need to go in the ""test"" directory of the ROOT sources et type make. Then run `./stressGraphics"" you will get several things like:. ```. Test 4: Fill patterns............................................. OK. PDF output.......................................... 4 FAILED. Result = 19386. Reference = 19255. ```. to fix this error you will need to replace 19225 by 19386 in stressGraphics.ref",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:176,safety,Test,Test,176,"Let me know if you need some help. You need to go in the ""test"" directory of the ROOT sources et type make. Then run `./stressGraphics"" you will get several things like:. ```. Test 4: Fill patterns............................................. OK. PDF output.......................................... 4 FAILED. Result = 19386. Reference = 19255. ```. to fix this error you will need to replace 19225 by 19386 in stressGraphics.ref",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:362,safety,error,error,362,"Let me know if you need some help. You need to go in the ""test"" directory of the ROOT sources et type make. Then run `./stressGraphics"" you will get several things like:. ```. Test 4: Fill patterns............................................. OK. PDF output.......................................... 4 FAILED. Result = 19386. Reference = 19255. ```. to fix this error you will need to replace 19225 by 19386 in stressGraphics.ref",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:58,testability,test,test,58,"Let me know if you need some help. You need to go in the ""test"" directory of the ROOT sources et type make. Then run `./stressGraphics"" you will get several things like:. ```. Test 4: Fill patterns............................................. OK. PDF output.......................................... 4 FAILED. Result = 19386. Reference = 19255. ```. to fix this error you will need to replace 19225 by 19386 in stressGraphics.ref",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:176,testability,Test,Test,176,"Let me know if you need some help. You need to go in the ""test"" directory of the ROOT sources et type make. Then run `./stressGraphics"" you will get several things like:. ```. Test 4: Fill patterns............................................. OK. PDF output.......................................... 4 FAILED. Result = 19386. Reference = 19255. ```. to fix this error you will need to replace 19225 by 19386 in stressGraphics.ref",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:29,usability,help,help,29,"Let me know if you need some help. You need to go in the ""test"" directory of the ROOT sources et type make. Then run `./stressGraphics"" you will get several things like:. ```. Test 4: Fill patterns............................................. OK. PDF output.......................................... 4 FAILED. Result = 19386. Reference = 19255. ```. to fix this error you will need to replace 19225 by 19386 in stressGraphics.ref",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:362,usability,error,error,362,"Let me know if you need some help. You need to go in the ""test"" directory of the ROOT sources et type make. Then run `./stressGraphics"" you will get several things like:. ```. Test 4: Fill patterns............................................. OK. PDF output.......................................... 4 FAILED. Result = 19386. Reference = 19255. ```. to fix this error you will need to replace 19225 by 19386 in stressGraphics.ref",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:21,deployability,updat,updated,21,`stressGraphics.ref` updated. `stressGraphics_builtinzlib.ref` without changes (build ROOT with `-Dbuiltin_zlib=ON`).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:80,deployability,build,build,80,`stressGraphics.ref` updated. `stressGraphics_builtinzlib.ref` without changes (build ROOT with `-Dbuiltin_zlib=ON`).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:21,safety,updat,updated,21,`stressGraphics.ref` updated. `stressGraphics_builtinzlib.ref` without changes (build ROOT with `-Dbuiltin_zlib=ON`).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:21,security,updat,updated,21,`stressGraphics.ref` updated. `stressGraphics_builtinzlib.ref` without changes (build ROOT with `-Dbuiltin_zlib=ON`).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:97,deployability,Releas,ReleaseNotes,97,"Many tanks for the new stressGraphics.ref It works. May be you can add a few word in edit README/ReleaseNotes/v622/index.md in the section ""2D graphics Libraries"" to annonce this new feature ? Meanwhile I will check also stressGraphics_builtinzlib.ref",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:20,deployability,build,build,20,I think that if you build ROOT with -Dbuiltin_zlib=ON you need to run stressGraphics with option -r. : `./stressGraphics -r` which will give you an output tu be put in `stressGraphics_builtinzlib.ref`. . If act doing:. `./stressGraphics -r > stressGraphics_builtinzlib.ref`. should be fine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:84,performance,time,time,84,[builtinzlib_newPDF](https://paste.centos.org/view/0d1d17e7) PDF with new universal time. [builtinzlib_oldPDF](https://paste.centos.org/view/9222397b) original PDF. `stressGraphics` with ROOT `-Dbuiltin_zlib=ON` => all the tests passed with reference file `stressGraphics_builtinzlib.ref`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:223,safety,test,tests,223,[builtinzlib_newPDF](https://paste.centos.org/view/0d1d17e7) PDF with new universal time. [builtinzlib_oldPDF](https://paste.centos.org/view/9222397b) original PDF. `stressGraphics` with ROOT `-Dbuiltin_zlib=ON` => all the tests passed with reference file `stressGraphics_builtinzlib.ref`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:223,testability,test,tests,223,[builtinzlib_newPDF](https://paste.centos.org/view/0d1d17e7) PDF with new universal time. [builtinzlib_oldPDF](https://paste.centos.org/view/9222397b) original PDF. `stressGraphics` with ROOT `-Dbuiltin_zlib=ON` => all the tests passed with reference file `stressGraphics_builtinzlib.ref`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5191:92,deployability,Releas,Release,92,"Ok, lets merge it like that in that case. We will see. May be one more little thing: in the Release notes file you can add your name in the text to say it was implemented by you ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5191
https://github.com/root-project/root/pull/5193:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5193
https://github.com/root-project/root/pull/5194:169,modifiability,pac,package,169,@eguiraud Regarding silencing warnings: I don't think this a feature we have to implement actively. You can either write `python -W ignore foo.py` or use the `warnings` package from the std. We are raising a proper Python warning!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:3,reliability,doe,doesn,3,It doesn't seem right to have to turn off _all_ python warnings just to be able to use a feature the way it's intended to be used without having ROOT warn about it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:32,deployability,build,build,32,"Well damn, we need numba on the build nodes. @oshadura Is this possible?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:140,integrability,configur,configure,140,"@oshadura If we want to have numba in this tutorial, we would have to add a `FindNumba.cmake` thingy, to enable/disable the tutorial during configure time. This is quite some overhead ... What do you recommend?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:140,modifiability,configur,configure,140,"@oshadura If we want to have numba in this tutorial, we would have to add a `FindNumba.cmake` thingy, to enable/disable the tutorial during configure time. This is quite some overhead ... What do you recommend?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:150,performance,time,time,150,"@oshadura If we want to have numba in this tutorial, we would have to add a `FindNumba.cmake` thingy, to enable/disable the tutorial during configure time. This is quite some overhead ... What do you recommend?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:175,performance,overhead,overhead,175,"@oshadura If we want to have numba in this tutorial, we would have to add a `FindNumba.cmake` thingy, to enable/disable the tutorial during configure time. This is quite some overhead ... What do you recommend?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:140,security,configur,configure,140,"@oshadura If we want to have numba in this tutorial, we would have to add a `FindNumba.cmake` thingy, to enable/disable the tutorial during configure time. This is quite some overhead ... What do you recommend?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:18,deployability,instal,install,18,"Still, we need to install `numba` (and also `pandas`) in some places. @Axel-Naumann What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:20,deployability,instal,install,20,"> Still, we need to install numba (and also pandas) in some places. We usually do it like that:. - introduce a `-Dfeature=On` (incl handling of ""fail-on-missing""). - enable it on all platforms that have package managers installing it. Are we done with the former?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:145,deployability,fail,fail-on-missing,145,"> Still, we need to install numba (and also pandas) in some places. We usually do it like that:. - introduce a `-Dfeature=On` (incl handling of ""fail-on-missing""). - enable it on all platforms that have package managers installing it. Are we done with the former?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:211,deployability,manag,managers,211,"> Still, we need to install numba (and also pandas) in some places. We usually do it like that:. - introduce a `-Dfeature=On` (incl handling of ""fail-on-missing""). - enable it on all platforms that have package managers installing it. Are we done with the former?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:220,deployability,instal,installing,220,"> Still, we need to install numba (and also pandas) in some places. We usually do it like that:. - introduce a `-Dfeature=On` (incl handling of ""fail-on-missing""). - enable it on all platforms that have package managers installing it. Are we done with the former?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:211,energy efficiency,manag,managers,211,"> Still, we need to install numba (and also pandas) in some places. We usually do it like that:. - introduce a `-Dfeature=On` (incl handling of ""fail-on-missing""). - enable it on all platforms that have package managers installing it. Are we done with the former?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:183,interoperability,platform,platforms,183,"> Still, we need to install numba (and also pandas) in some places. We usually do it like that:. - introduce a `-Dfeature=On` (incl handling of ""fail-on-missing""). - enable it on all platforms that have package managers installing it. Are we done with the former?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:203,modifiability,pac,package,203,"> Still, we need to install numba (and also pandas) in some places. We usually do it like that:. - introduce a `-Dfeature=On` (incl handling of ""fail-on-missing""). - enable it on all platforms that have package managers installing it. Are we done with the former?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:145,reliability,fail,fail-on-missing,145,"> Still, we need to install numba (and also pandas) in some places. We usually do it like that:. - introduce a `-Dfeature=On` (incl handling of ""fail-on-missing""). - enable it on all platforms that have package managers installing it. Are we done with the former?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:211,safety,manag,managers,211,"> Still, we need to install numba (and also pandas) in some places. We usually do it like that:. - introduce a `-Dfeature=On` (incl handling of ""fail-on-missing""). - enable it on all platforms that have package managers installing it. Are we done with the former?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:26,deployability,build,build,26,"There is the pandas/numba build system check issue, but also @stwunsch and I were thinking about a possible redesign of the feature, so maybe we should wait a little bit before ""publishing"" the feature?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:178,integrability,pub,publishing,178,"There is the pandas/numba build system check issue, but also @stwunsch and I were thinking about a possible redesign of the feature, so maybe we should wait a little bit before ""publishing"" the feature?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:68,deployability,build,build,68,We just discussed with @oshadura and @etejedor that we will fix the build system issue in a dedicated PR. But I agree that we should wait for Thursday's PPP until we discuss the redesign idea.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:35,modifiability,refact,refactored,35,Closed in favor of the PR with the refactored feature #5310,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:35,performance,refactor,refactored,35,Closed in favor of the PR with the refactored feature #5310,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5194:0,usability,Close,Closed,0,Closed in favor of the PR with the refactored feature #5310,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5194
https://github.com/root-project/root/pull/5195:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5195
https://github.com/root-project/root/pull/5195:39,interoperability,conflict,conflicts,39,"I rebased this pull request because of conflicts. Two of the empty files in the original request were already removed from master since the PR was first created. A third empty file in the original request in now no longer empty, so this file was also dropped from the PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5195
https://github.com/root-project/root/pull/5195:27,deployability,version,version,27,"Everything in the original version of this PR has been gradually fixed by other commits, except for the removal of the tree/dataframe/test/.gdb_history file. So the rebased proposed change is now quite small.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5195
https://github.com/root-project/root/pull/5195:27,integrability,version,version,27,"Everything in the original version of this PR has been gradually fixed by other commits, except for the removal of the tree/dataframe/test/.gdb_history file. So the rebased proposed change is now quite small.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5195
https://github.com/root-project/root/pull/5195:27,modifiability,version,version,27,"Everything in the original version of this PR has been gradually fixed by other commits, except for the removal of the tree/dataframe/test/.gdb_history file. So the rebased proposed change is now quite small.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5195
https://github.com/root-project/root/pull/5195:89,safety,except,except,89,"Everything in the original version of this PR has been gradually fixed by other commits, except for the removal of the tree/dataframe/test/.gdb_history file. So the rebased proposed change is now quite small.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5195
https://github.com/root-project/root/pull/5195:134,safety,test,test,134,"Everything in the original version of this PR has been gradually fixed by other commits, except for the removal of the tree/dataframe/test/.gdb_history file. So the rebased proposed change is now quite small.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5195
https://github.com/root-project/root/pull/5195:134,testability,test,test,134,"Everything in the original version of this PR has been gradually fixed by other commits, except for the removal of the tree/dataframe/test/.gdb_history file. So the rebased proposed change is now quite small.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5195
https://github.com/root-project/root/pull/5195:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5195
https://github.com/root-project/root/pull/5196:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5196
https://github.com/root-project/root/pull/5196:34,deployability,fail,failing,34,Looks like these tests on osx are failing everywhere...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5196
https://github.com/root-project/root/pull/5196:34,reliability,fail,failing,34,Looks like these tests on osx are failing everywhere...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5196
https://github.com/root-project/root/pull/5196:17,safety,test,tests,17,Looks like these tests on osx are failing everywhere...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5196
https://github.com/root-project/root/pull/5196:17,testability,test,tests,17,Looks like these tests on osx are failing everywhere...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5196
https://github.com/root-project/root/pull/5198:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5198
https://github.com/root-project/root/pull/5203:123,availability,error,error,123,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:226,availability,Error,Error,226,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:283,availability,Error,Error,283,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:308,availability,Error,Error,308,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:9,deployability,updat,update,9,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:145,deployability,fail,failed,145,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:48,interoperability,share,shared,48,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:123,performance,error,error,123,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:226,performance,Error,Error,226,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:283,performance,Error,Error,283,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:308,performance,Error,Error,308,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:145,reliability,fail,failed,145,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:9,safety,updat,update,9,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:123,safety,error,error,123,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:226,safety,Error,Error,226,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:283,safety,Error,Error,283,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:308,safety,Error,Error,308,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:9,security,updat,update,9,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:123,usability,error,error,123,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:137,usability,command,command,137,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:226,usability,Error,Error,226,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:283,usability,Error,Error,283,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:308,usability,Error,Error,308,One more update from forum:. ` 98%] Linking CXX shared library …/…/lib/libRGL.so. ld: library not found for -lGLEW. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make: *** [all] Error 2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:21,deployability,depend,dependency,21,"> Can you add please dependency on ${OPENGL_LIBRARIES}? Seems to be, I need add `GLEW` as dependency - but only when it `builtin_glew`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:90,deployability,depend,dependency,90,"> Can you add please dependency on ${OPENGL_LIBRARIES}? Seems to be, I need add `GLEW` as dependency - but only when it `builtin_glew`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:21,integrability,depend,dependency,21,"> Can you add please dependency on ${OPENGL_LIBRARIES}? Seems to be, I need add `GLEW` as dependency - but only when it `builtin_glew`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:90,integrability,depend,dependency,90,"> Can you add please dependency on ${OPENGL_LIBRARIES}? Seems to be, I need add `GLEW` as dependency - but only when it `builtin_glew`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:21,modifiability,depend,dependency,21,"> Can you add please dependency on ${OPENGL_LIBRARIES}? Seems to be, I need add `GLEW` as dependency - but only when it `builtin_glew`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:90,modifiability,depend,dependency,90,"> Can you add please dependency on ${OPENGL_LIBRARIES}? Seems to be, I need add `GLEW` as dependency - but only when it `builtin_glew`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:21,safety,depend,dependency,21,"> Can you add please dependency on ${OPENGL_LIBRARIES}? Seems to be, I need add `GLEW` as dependency - but only when it `builtin_glew`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:90,safety,depend,dependency,90,"> Can you add please dependency on ${OPENGL_LIBRARIES}? Seems to be, I need add `GLEW` as dependency - but only when it `builtin_glew`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:21,testability,depend,dependency,21,"> Can you add please dependency on ${OPENGL_LIBRARIES}? Seems to be, I need add `GLEW` as dependency - but only when it `builtin_glew`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:90,testability,depend,dependency,90,"> Can you add please dependency on ${OPENGL_LIBRARIES}? Seems to be, I need add `GLEW` as dependency - but only when it `builtin_glew`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:40,deployability,depend,dependency,40,If this is a case - we need to add same dependency in 6.20 branch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:40,integrability,depend,dependency,40,If this is a case - we need to add same dependency in 6.20 branch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:40,modifiability,depend,dependency,40,If this is a case - we need to add same dependency in 6.20 branch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:40,safety,depend,dependency,40,If this is a case - we need to add same dependency in 6.20 branch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:40,testability,depend,dependency,40,If this is a case - we need to add same dependency in 6.20 branch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:30,deployability,build,build,30,@oshadura That does it mean - build unstable?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5203:15,reliability,doe,does,15,@oshadura That does it mean - build unstable?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5203
https://github.com/root-project/root/pull/5204:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:160,availability,state,state,160,@oshadura The manual phsft-bot build did correctly cancel the automatic one but github is showing the build has failed rather than still building (which is the state of the manual build as of this writing).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:31,deployability,build,build,31,@oshadura The manual phsft-bot build did correctly cancel the automatic one but github is showing the build has failed rather than still building (which is the state of the manual build as of this writing).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:62,deployability,automat,automatic,62,@oshadura The manual phsft-bot build did correctly cancel the automatic one but github is showing the build has failed rather than still building (which is the state of the manual build as of this writing).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:102,deployability,build,build,102,@oshadura The manual phsft-bot build did correctly cancel the automatic one but github is showing the build has failed rather than still building (which is the state of the manual build as of this writing).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:112,deployability,fail,failed,112,@oshadura The manual phsft-bot build did correctly cancel the automatic one but github is showing the build has failed rather than still building (which is the state of the manual build as of this writing).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:137,deployability,build,building,137,@oshadura The manual phsft-bot build did correctly cancel the automatic one but github is showing the build has failed rather than still building (which is the state of the manual build as of this writing).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:180,deployability,build,build,180,@oshadura The manual phsft-bot build did correctly cancel the automatic one but github is showing the build has failed rather than still building (which is the state of the manual build as of this writing).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:160,integrability,state,state,160,@oshadura The manual phsft-bot build did correctly cancel the automatic one but github is showing the build has failed rather than still building (which is the state of the manual build as of this writing).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:112,reliability,fail,failed,112,@oshadura The manual phsft-bot build did correctly cancel the automatic one but github is showing the build has failed rather than still building (which is the state of the manual build as of this writing).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:62,testability,automat,automatic,62,@oshadura The manual phsft-bot build did correctly cancel the automatic one but github is showing the build has failed rather than still building (which is the state of the manual build as of this writing).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:51,usability,cancel,cancel,51,@oshadura The manual phsft-bot build did correctly cancel the automatic one but github is showing the build has failed rather than still building (which is the state of the manual build as of this writing).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:0,availability,Failur,Failure,0,Failure are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:0,deployability,Fail,Failure,0,Failure are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:0,performance,Failur,Failure,0,Failure are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:0,reliability,Fail,Failure,0,Failure are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:50,integrability,sub,subcommand,50,> in MAKEXE `$BXX \$Opt \$ObjectFiles ...` (third subcommand) ? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:0,availability,failur,failures,0,failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:0,deployability,fail,failures,0,failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:0,performance,failur,failures,0,failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5204:0,reliability,fail,failures,0,failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5204
https://github.com/root-project/root/pull/5207:0,availability,Failur,Failures,0,Failures in `chainZombieFile` and `typeguessing` are fixes by https://github.com/root-project/roottest/pull/471. Failure in `dataframe_simple` on some platforms is due to their TBB not being able to propagate exceptions correctly. Investigating.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:113,availability,Failur,Failure,113,Failures in `chainZombieFile` and `typeguessing` are fixes by https://github.com/root-project/roottest/pull/471. Failure in `dataframe_simple` on some platforms is due to their TBB not being able to propagate exceptions correctly. Investigating.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:0,deployability,Fail,Failures,0,Failures in `chainZombieFile` and `typeguessing` are fixes by https://github.com/root-project/roottest/pull/471. Failure in `dataframe_simple` on some platforms is due to their TBB not being able to propagate exceptions correctly. Investigating.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:113,deployability,Fail,Failure,113,Failures in `chainZombieFile` and `typeguessing` are fixes by https://github.com/root-project/roottest/pull/471. Failure in `dataframe_simple` on some platforms is due to their TBB not being able to propagate exceptions correctly. Investigating.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:151,interoperability,platform,platforms,151,Failures in `chainZombieFile` and `typeguessing` are fixes by https://github.com/root-project/roottest/pull/471. Failure in `dataframe_simple` on some platforms is due to their TBB not being able to propagate exceptions correctly. Investigating.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:0,performance,Failur,Failures,0,Failures in `chainZombieFile` and `typeguessing` are fixes by https://github.com/root-project/roottest/pull/471. Failure in `dataframe_simple` on some platforms is due to their TBB not being able to propagate exceptions correctly. Investigating.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:113,performance,Failur,Failure,113,Failures in `chainZombieFile` and `typeguessing` are fixes by https://github.com/root-project/roottest/pull/471. Failure in `dataframe_simple` on some platforms is due to their TBB not being able to propagate exceptions correctly. Investigating.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:0,reliability,Fail,Failures,0,Failures in `chainZombieFile` and `typeguessing` are fixes by https://github.com/root-project/roottest/pull/471. Failure in `dataframe_simple` on some platforms is due to their TBB not being able to propagate exceptions correctly. Investigating.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:113,reliability,Fail,Failure,113,Failures in `chainZombieFile` and `typeguessing` are fixes by https://github.com/root-project/roottest/pull/471. Failure in `dataframe_simple` on some platforms is due to their TBB not being able to propagate exceptions correctly. Investigating.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:209,safety,except,exceptions,209,Failures in `chainZombieFile` and `typeguessing` are fixes by https://github.com/root-project/roottest/pull/471. Failure in `dataframe_simple` on some platforms is due to their TBB not being able to propagate exceptions correctly. Investigating.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:15,deployability,build,build,15,doing one last build round since #5214 (just merged) interacts with these changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:53,usability,interact,interacts,53,doing one last build round since #5214 (just merged) interacts with these changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:0,availability,Failur,Failures,0,"Failures are due to built-in TBB missing a build flag, @oshadura has a fix coming up",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:0,deployability,Fail,Failures,0,"Failures are due to built-in TBB missing a build flag, @oshadura has a fix coming up",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:43,deployability,build,build,43,"Failures are due to built-in TBB missing a build flag, @oshadura has a fix coming up",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:0,performance,Failur,Failures,0,"Failures are due to built-in TBB missing a build flag, @oshadura has a fix coming up",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:0,reliability,Fail,Failures,0,"Failures are due to built-in TBB missing a build flag, @oshadura has a fix coming up",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5207:11,deployability,build,build,11,@phsft-bot build -DCTEST_TEST_EXCLUDE_NONE=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5207
https://github.com/root-project/root/pull/5208:174,performance,time,time,174,"Oh I was too fast: So the `BranchTypes` part of the template was simply not used? In case I undestand this correctly, is it possible to detect something like this at compile time?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5208
https://github.com/root-project/root/pull/5208:136,safety,detect,detect,136,"Oh I was too fast: So the `BranchTypes` part of the template was simply not used? In case I undestand this correctly, is it possible to detect something like this at compile time?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5208
https://github.com/root-project/root/pull/5208:136,security,detect,detect,136,"Oh I was too fast: So the `BranchTypes` part of the template was simply not used? In case I undestand this correctly, is it possible to detect something like this at compile time?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5208
https://github.com/root-project/root/pull/5208:65,testability,simpl,simply,65,"Oh I was too fast: So the `BranchTypes` part of the template was simply not used? In case I undestand this correctly, is it possible to detect something like this at compile time?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5208
https://github.com/root-project/root/pull/5208:65,usability,simpl,simply,65,"Oh I was too fast: So the `BranchTypes` part of the template was simply not used? In case I undestand this correctly, is it possible to detect something like this at compile time?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5208
https://github.com/root-project/root/pull/5208:189,reliability,doe,doesn,189,"> So the BranchTypes part of the template was simply not used? yup, I think at some point we needed it (or I thought we needed it) to delay the instantiation of the template method, but it doesn't seem to be the case anymore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5208
https://github.com/root-project/root/pull/5208:46,testability,simpl,simply,46,"> So the BranchTypes part of the template was simply not used? yup, I think at some point we needed it (or I thought we needed it) to delay the instantiation of the template method, but it doesn't seem to be the case anymore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5208
https://github.com/root-project/root/pull/5208:46,usability,simpl,simply,46,"> So the BranchTypes part of the template was simply not used? yup, I think at some point we needed it (or I thought we needed it) to delay the instantiation of the template method, but it doesn't seem to be the case anymore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5208
https://github.com/root-project/root/pull/5209:57,availability,error,error,57,Also backports for 6.20 and 6.18 are required - original error message was about for v6.18.04,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:63,integrability,messag,message,63,Also backports for 6.20 and 6.18 are required - original error message was about for v6.18.04,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:63,interoperability,messag,message,63,Also backports for 6.20 and 6.18 are required - original error message was about for v6.18.04,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:57,performance,error,error,57,Also backports for 6.20 and 6.18 are required - original error message was about for v6.18.04,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:57,safety,error,error,57,Also backports for 6.20 and 6.18 are required - original error message was about for v6.18.04,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:57,usability,error,error,57,Also backports for 6.20 and 6.18 are required - original error message was about for v6.18.04,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:18,testability,verif,verify,18,@etejedor Can you verify my last changes?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:225,performance,time,time,225,"@linev thanks for implementing my suggestions. I really think it doesn't hurt to learn a bit the language and do it yourself, that's why I made the effort to explain the Python coding style changes in my comments. Also, next time it will be faster if you fully read my comments so I don't have to repeat myself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:65,reliability,doe,doesn,65,"@linev thanks for implementing my suggestions. I really think it doesn't hurt to learn a bit the language and do it yourself, that's why I made the effort to explain the Python coding style changes in my comments. Also, next time it will be faster if you fully read my comments so I don't have to repeat myself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:81,usability,learn,learn,81,"@linev thanks for implementing my suggestions. I really think it doesn't hurt to learn a bit the language and do it yourself, that's why I made the effort to explain the Python coding style changes in my comments. Also, next time it will be faster if you fully read my comments so I don't have to repeat myself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:38,deployability,version,versions,38,@etejedor Should we fix 6.18 and 6.20 versions? Original JIRA ticket from @stwunsch is about version 6.18,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:93,deployability,version,version,93,@etejedor Should we fix 6.18 and 6.20 versions? Original JIRA ticket from @stwunsch is about version 6.18,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:38,integrability,version,versions,38,@etejedor Should we fix 6.18 and 6.20 versions? Original JIRA ticket from @stwunsch is about version 6.18,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:93,integrability,version,version,93,@etejedor Should we fix 6.18 and 6.20 versions? Original JIRA ticket from @stwunsch is about version 6.18,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:38,modifiability,version,versions,38,@etejedor Should we fix 6.18 and 6.20 versions? Original JIRA ticket from @stwunsch is about version 6.18,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:93,modifiability,version,version,93,@etejedor Should we fix 6.18 and 6.20 versions? Original JIRA ticket from @stwunsch is about version 6.18,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:140,interoperability,bind,binder,140,Hi! I would appreciate if this goes into 6.20 :) Then we get it fixed for root on conda as well and we don't break our notebook examples on binder.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5209:140,modifiability,bind,binder,140,Hi! I would appreciate if this goes into 6.20 :) Then we get it fixed for root on conda as well and we don't break our notebook examples on binder.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5209
https://github.com/root-project/root/pull/5211:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5211
https://github.com/root-project/root/pull/5211:93,deployability,modul,modules-world,93,"Forgot to mention that this is also in the context of a much bigger change that's coming. In modules-world we do not have an on-disk rdict files to pass as arguments to `-m`, however, I will still use that option to tell rootcling which modules to preload. So this change allows me to move forward step by step without submitting large code changes while keeping relatively reasonable history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5211
https://github.com/root-project/root/pull/5211:237,deployability,modul,modules,237,"Forgot to mention that this is also in the context of a much bigger change that's coming. In modules-world we do not have an on-disk rdict files to pass as arguments to `-m`, however, I will still use that option to tell rootcling which modules to preload. So this change allows me to move forward step by step without submitting large code changes while keeping relatively reasonable history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5211
https://github.com/root-project/root/pull/5211:319,integrability,sub,submitting,319,"Forgot to mention that this is also in the context of a much bigger change that's coming. In modules-world we do not have an on-disk rdict files to pass as arguments to `-m`, however, I will still use that option to tell rootcling which modules to preload. So this change allows me to move forward step by step without submitting large code changes while keeping relatively reasonable history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5211
https://github.com/root-project/root/pull/5211:93,modifiability,modul,modules-world,93,"Forgot to mention that this is also in the context of a much bigger change that's coming. In modules-world we do not have an on-disk rdict files to pass as arguments to `-m`, however, I will still use that option to tell rootcling which modules to preload. So this change allows me to move forward step by step without submitting large code changes while keeping relatively reasonable history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5211
https://github.com/root-project/root/pull/5211:237,modifiability,modul,modules,237,"Forgot to mention that this is also in the context of a much bigger change that's coming. In modules-world we do not have an on-disk rdict files to pass as arguments to `-m`, however, I will still use that option to tell rootcling which modules to preload. So this change allows me to move forward step by step without submitting large code changes while keeping relatively reasonable history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5211
https://github.com/root-project/root/pull/5211:128,performance,disk,disk,128,"Forgot to mention that this is also in the context of a much bigger change that's coming. In modules-world we do not have an on-disk rdict files to pass as arguments to `-m`, however, I will still use that option to tell rootcling which modules to preload. So this change allows me to move forward step by step without submitting large code changes while keeping relatively reasonable history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5211
https://github.com/root-project/root/pull/5211:93,safety,modul,modules-world,93,"Forgot to mention that this is also in the context of a much bigger change that's coming. In modules-world we do not have an on-disk rdict files to pass as arguments to `-m`, however, I will still use that option to tell rootcling which modules to preload. So this change allows me to move forward step by step without submitting large code changes while keeping relatively reasonable history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5211
https://github.com/root-project/root/pull/5211:237,safety,modul,modules,237,"Forgot to mention that this is also in the context of a much bigger change that's coming. In modules-world we do not have an on-disk rdict files to pass as arguments to `-m`, however, I will still use that option to tell rootcling which modules to preload. So this change allows me to move forward step by step without submitting large code changes while keeping relatively reasonable history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5211
https://github.com/root-project/root/pull/5211:43,testability,context,context,43,"Forgot to mention that this is also in the context of a much bigger change that's coming. In modules-world we do not have an on-disk rdict files to pass as arguments to `-m`, however, I will still use that option to tell rootcling which modules to preload. So this change allows me to move forward step by step without submitting large code changes while keeping relatively reasonable history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5211
https://github.com/root-project/root/pull/5211:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5211
https://github.com/root-project/root/pull/5212:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5212
https://github.com/root-project/root/pull/5212:12,availability,failur,failure,12,The jenkins failure appears unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5212
https://github.com/root-project/root/pull/5212:12,deployability,fail,failure,12,The jenkins failure appears unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5212
https://github.com/root-project/root/pull/5212:12,performance,failur,failure,12,The jenkins failure appears unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5212
https://github.com/root-project/root/pull/5212:12,reliability,fail,failure,12,The jenkins failure appears unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5212
https://github.com/root-project/root/pull/5214:131,availability,Error,Error,131,"@pcanal as per discussion with Axel and Stephan on the PPP channel on mattermost, I switched `std::throw_nested_exception` with a `Error` + re-throw.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:131,performance,Error,Error,131,"@pcanal as per discussion with Axel and Stephan on the PPP channel on mattermost, I switched `std::throw_nested_exception` with a `Error` + re-throw.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:131,safety,Error,Error,131,"@pcanal as per discussion with Axel and Stephan on the PPP channel on mattermost, I switched `std::throw_nested_exception` with a `Error` + re-throw.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:131,usability,Error,Error,131,"@pcanal as per discussion with Axel and Stephan on the PPP channel on mattermost, I switched `std::throw_nested_exception` with a `Error` + re-throw.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:130,availability,Error,Error,130,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:283,availability,Error,Error,283,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:101,integrability,event,event,101,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:341,integrability,messag,message,341,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:341,interoperability,messag,message,341,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:130,performance,Error,Error,130,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:283,performance,Error,Error,283,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:130,safety,Error,Error,130,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:206,safety,except,exception,206,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:283,safety,Error,Error,283,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:396,safety,except,exception,396,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:275,security,modif,modify,275,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:445,testability,understand,understanding,445,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:130,usability,Error,Error,130,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:283,usability,Error,Error,283,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5214:377,usability,user,users,377,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5214
https://github.com/root-project/root/pull/5215:126,deployability,version,version,126,@oshadura I reviewed #5158 and decided to keep this warning disabling. This PR just fixes an issue with the comparison of the version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:126,integrability,version,version,126,@oshadura I reviewed #5158 and decided to keep this warning disabling. This PR just fixes an issue with the comparison of the version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:126,modifiability,version,version,126,@oshadura I reviewed #5158 and decided to keep this warning disabling. This PR just fixes an issue with the comparison of the version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:12,safety,review,reviewed,12,@oshadura I reviewed #5158 and decided to keep this warning disabling. This PR just fixes an issue with the comparison of the version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:12,testability,review,reviewed,12,@oshadura I reviewed #5158 and decided to keep this warning disabling. This PR just fixes an issue with the comparison of the version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:31,deployability,version,version,31,"IIRC @maxgalli needed this `_` version of the python major.minor to construct the PyROOT library names, which, since some of them are Python extension modules, can't contain a dot in the name. What he can do is just not set the `_` version to the CMake variable and leave it intact, but still have his own variable with the underscore to generate the PyROOT library names. @maxgalli can you take care of this? You can start from this PR or I close and you start from a new one, as you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:151,deployability,modul,modules,151,"IIRC @maxgalli needed this `_` version of the python major.minor to construct the PyROOT library names, which, since some of them are Python extension modules, can't contain a dot in the name. What he can do is just not set the `_` version to the CMake variable and leave it intact, but still have his own variable with the underscore to generate the PyROOT library names. @maxgalli can you take care of this? You can start from this PR or I close and you start from a new one, as you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:166,deployability,contain,contain,166,"IIRC @maxgalli needed this `_` version of the python major.minor to construct the PyROOT library names, which, since some of them are Python extension modules, can't contain a dot in the name. What he can do is just not set the `_` version to the CMake variable and leave it intact, but still have his own variable with the underscore to generate the PyROOT library names. @maxgalli can you take care of this? You can start from this PR or I close and you start from a new one, as you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:232,deployability,version,version,232,"IIRC @maxgalli needed this `_` version of the python major.minor to construct the PyROOT library names, which, since some of them are Python extension modules, can't contain a dot in the name. What he can do is just not set the `_` version to the CMake variable and leave it intact, but still have his own variable with the underscore to generate the PyROOT library names. @maxgalli can you take care of this? You can start from this PR or I close and you start from a new one, as you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:31,integrability,version,version,31,"IIRC @maxgalli needed this `_` version of the python major.minor to construct the PyROOT library names, which, since some of them are Python extension modules, can't contain a dot in the name. What he can do is just not set the `_` version to the CMake variable and leave it intact, but still have his own variable with the underscore to generate the PyROOT library names. @maxgalli can you take care of this? You can start from this PR or I close and you start from a new one, as you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:232,integrability,version,version,232,"IIRC @maxgalli needed this `_` version of the python major.minor to construct the PyROOT library names, which, since some of them are Python extension modules, can't contain a dot in the name. What he can do is just not set the `_` version to the CMake variable and leave it intact, but still have his own variable with the underscore to generate the PyROOT library names. @maxgalli can you take care of this? You can start from this PR or I close and you start from a new one, as you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:31,modifiability,version,version,31,"IIRC @maxgalli needed this `_` version of the python major.minor to construct the PyROOT library names, which, since some of them are Python extension modules, can't contain a dot in the name. What he can do is just not set the `_` version to the CMake variable and leave it intact, but still have his own variable with the underscore to generate the PyROOT library names. @maxgalli can you take care of this? You can start from this PR or I close and you start from a new one, as you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:141,modifiability,extens,extension,141,"IIRC @maxgalli needed this `_` version of the python major.minor to construct the PyROOT library names, which, since some of them are Python extension modules, can't contain a dot in the name. What he can do is just not set the `_` version to the CMake variable and leave it intact, but still have his own variable with the underscore to generate the PyROOT library names. @maxgalli can you take care of this? You can start from this PR or I close and you start from a new one, as you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:151,modifiability,modul,modules,151,"IIRC @maxgalli needed this `_` version of the python major.minor to construct the PyROOT library names, which, since some of them are Python extension modules, can't contain a dot in the name. What he can do is just not set the `_` version to the CMake variable and leave it intact, but still have his own variable with the underscore to generate the PyROOT library names. @maxgalli can you take care of this? You can start from this PR or I close and you start from a new one, as you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:232,modifiability,version,version,232,"IIRC @maxgalli needed this `_` version of the python major.minor to construct the PyROOT library names, which, since some of them are Python extension modules, can't contain a dot in the name. What he can do is just not set the `_` version to the CMake variable and leave it intact, but still have his own variable with the underscore to generate the PyROOT library names. @maxgalli can you take care of this? You can start from this PR or I close and you start from a new one, as you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:253,modifiability,variab,variable,253,"IIRC @maxgalli needed this `_` version of the python major.minor to construct the PyROOT library names, which, since some of them are Python extension modules, can't contain a dot in the name. What he can do is just not set the `_` version to the CMake variable and leave it intact, but still have his own variable with the underscore to generate the PyROOT library names. @maxgalli can you take care of this? You can start from this PR or I close and you start from a new one, as you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:306,modifiability,variab,variable,306,"IIRC @maxgalli needed this `_` version of the python major.minor to construct the PyROOT library names, which, since some of them are Python extension modules, can't contain a dot in the name. What he can do is just not set the `_` version to the CMake variable and leave it intact, but still have his own variable with the underscore to generate the PyROOT library names. @maxgalli can you take care of this? You can start from this PR or I close and you start from a new one, as you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:151,safety,modul,modules,151,"IIRC @maxgalli needed this `_` version of the python major.minor to construct the PyROOT library names, which, since some of them are Python extension modules, can't contain a dot in the name. What he can do is just not set the `_` version to the CMake variable and leave it intact, but still have his own variable with the underscore to generate the PyROOT library names. @maxgalli can you take care of this? You can start from this PR or I close and you start from a new one, as you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:442,usability,close,close,442,"IIRC @maxgalli needed this `_` version of the python major.minor to construct the PyROOT library names, which, since some of them are Python extension modules, can't contain a dot in the name. What he can do is just not set the `_` version to the CMake variable and leave it intact, but still have his own variable with the underscore to generate the PyROOT library names. @maxgalli can you take care of this? You can start from this PR or I close and you start from a new one, as you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5215:485,usability,prefer,prefer,485,"IIRC @maxgalli needed this `_` version of the python major.minor to construct the PyROOT library names, which, since some of them are Python extension modules, can't contain a dot in the name. What he can do is just not set the `_` version to the CMake variable and leave it intact, but still have his own variable with the underscore to generate the PyROOT library names. @maxgalli can you take care of this? You can start from this PR or I close and you start from a new one, as you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5215
https://github.com/root-project/root/pull/5217:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5217
https://github.com/root-project/root/pull/5218:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:59,deployability,Scale,Scale,59,Is it really worth it introducing a new method while `TH1::Scale(1.0)` does exactly the same?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:59,energy efficiency,Scale,Scale,59,Is it really worth it introducing a new method while `TH1::Scale(1.0)` does exactly the same?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:59,modifiability,Scal,Scale,59,Is it really worth it introducing a new method while `TH1::Scale(1.0)` does exactly the same?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:59,performance,Scale,Scale,59,Is it really worth it introducing a new method while `TH1::Scale(1.0)` does exactly the same?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:71,reliability,doe,does,71,Is it really worth it introducing a new method while `TH1::Scale(1.0)` does exactly the same?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:264,deployability,Scale,Scale,264,"I think it is worth having this method, also to clarify the confusion happening when normalising histograms, see https://root-forum.cern.ch/t/different-ways-of-normalizing-histograms/15582. I would however add the option ""width"" which will internally call . hist->Scale(1./integral, ""width"") which will normalising by dividing the bin width. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:273,deployability,integr,integral,273,"I think it is worth having this method, also to clarify the confusion happening when normalising histograms, see https://root-forum.cern.ch/t/different-ways-of-normalizing-histograms/15582. I would however add the option ""width"" which will internally call . hist->Scale(1./integral, ""width"") which will normalising by dividing the bin width. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:264,energy efficiency,Scale,Scale,264,"I think it is worth having this method, also to clarify the confusion happening when normalising histograms, see https://root-forum.cern.ch/t/different-ways-of-normalizing-histograms/15582. I would however add the option ""width"" which will internally call . hist->Scale(1./integral, ""width"") which will normalising by dividing the bin width. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:273,integrability,integr,integral,273,"I think it is worth having this method, also to clarify the confusion happening when normalising histograms, see https://root-forum.cern.ch/t/different-ways-of-normalizing-histograms/15582. I would however add the option ""width"" which will internally call . hist->Scale(1./integral, ""width"") which will normalising by dividing the bin width. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:273,interoperability,integr,integral,273,"I think it is worth having this method, also to clarify the confusion happening when normalising histograms, see https://root-forum.cern.ch/t/different-ways-of-normalizing-histograms/15582. I would however add the option ""width"" which will internally call . hist->Scale(1./integral, ""width"") which will normalising by dividing the bin width. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:264,modifiability,Scal,Scale,264,"I think it is worth having this method, also to clarify the confusion happening when normalising histograms, see https://root-forum.cern.ch/t/different-ways-of-normalizing-histograms/15582. I would however add the option ""width"" which will internally call . hist->Scale(1./integral, ""width"") which will normalising by dividing the bin width. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:273,modifiability,integr,integral,273,"I think it is worth having this method, also to clarify the confusion happening when normalising histograms, see https://root-forum.cern.ch/t/different-ways-of-normalizing-histograms/15582. I would however add the option ""width"" which will internally call . hist->Scale(1./integral, ""width"") which will normalising by dividing the bin width. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:264,performance,Scale,Scale,264,"I think it is worth having this method, also to clarify the confusion happening when normalising histograms, see https://root-forum.cern.ch/t/different-ways-of-normalizing-histograms/15582. I would however add the option ""width"" which will internally call . hist->Scale(1./integral, ""width"") which will normalising by dividing the bin width. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:273,reliability,integr,integral,273,"I think it is worth having this method, also to clarify the confusion happening when normalising histograms, see https://root-forum.cern.ch/t/different-ways-of-normalizing-histograms/15582. I would however add the option ""width"" which will internally call . hist->Scale(1./integral, ""width"") which will normalising by dividing the bin width. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:273,security,integr,integral,273,"I think it is worth having this method, also to clarify the confusion happening when normalising histograms, see https://root-forum.cern.ch/t/different-ways-of-normalizing-histograms/15582. I would however add the option ""width"" which will internally call . hist->Scale(1./integral, ""width"") which will normalising by dividing the bin width. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:273,testability,integr,integral,273,"I think it is worth having this method, also to clarify the confusion happening when normalising histograms, see https://root-forum.cern.ch/t/different-ways-of-normalizing-histograms/15582. I would however add the option ""width"" which will internally call . hist->Scale(1./integral, ""width"") which will normalising by dividing the bin width. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:64,availability,failur,failure,64,@dvotaw please fork also roottest in order to prevent the build failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:58,deployability,build,build,58,@dvotaw please fork also roottest in order to prevent the build failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:64,deployability,fail,failure,64,@dvotaw please fork also roottest in order to prevent the build failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:64,performance,failur,failure,64,@dvotaw please fork also roottest in order to prevent the build failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:64,reliability,fail,failure,64,@dvotaw please fork also roottest in order to prevent the build failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:46,safety,prevent,prevent,46,@dvotaw please fork also roottest in order to prevent the build failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:46,security,preven,prevent,46,@dvotaw please fork also roottest in order to prevent the build failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:67,deployability,build,build,67,"@bellenot, I've forked roottest now too. Is there a way to try the build again? @phsft-bot build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:91,deployability,build,build,91,"@bellenot, I've forked roottest now too. Is there a way to try the build again? @phsft-bot build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:31,deployability,Scale,Scale,31,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:81,deployability,scale,scale,81,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:152,deployability,scale,scales,152,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:170,deployability,integr,integral,170,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:216,deployability,Scale,Scale,216,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:31,energy efficiency,Scale,Scale,31,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:81,energy efficiency,scale,scale,81,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:152,energy efficiency,scale,scales,152,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:216,energy efficiency,Scale,Scale,216,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:170,integrability,integr,integral,170,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:170,interoperability,integr,integral,170,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:31,modifiability,Scal,Scale,31,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:81,modifiability,scal,scale,81,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:152,modifiability,scal,scales,152,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:170,modifiability,integr,integral,170,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:216,modifiability,Scal,Scale,216,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:31,performance,Scale,Scale,31,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:81,performance,scale,scale,81,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:152,performance,scale,scales,152,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:216,performance,Scale,Scale,216,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:42,reliability,doe,does,42,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:63,reliability,Doe,Doesn,63,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:170,reliability,integr,integral,170,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:170,security,integr,integral,170,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:165,testability,unit,unit,165,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5218:170,testability,integr,integral,170,"@bellenot I don't see how TH1::Scale(1.0) does the same thing. Doesn't that just scale the histogram by 1.0, leaving it exactly the same? This function scales it to unit integral. @lmoneta I didn't realize that TH1::Scale() had the ""option"" argument. I'll rewrite this function to include the bin width option, as you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5218
https://github.com/root-project/root/pull/5219:99,availability,failur,failure,99,"Now, progress is blocked by [ROOT-10671](https://sft.its.cern.ch/jira/browse/ROOT-10671). The test failure is a direct consequence of that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5219
https://github.com/root-project/root/pull/5219:99,deployability,fail,failure,99,"Now, progress is blocked by [ROOT-10671](https://sft.its.cern.ch/jira/browse/ROOT-10671). The test failure is a direct consequence of that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5219
https://github.com/root-project/root/pull/5219:99,performance,failur,failure,99,"Now, progress is blocked by [ROOT-10671](https://sft.its.cern.ch/jira/browse/ROOT-10671). The test failure is a direct consequence of that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5219
https://github.com/root-project/root/pull/5219:99,reliability,fail,failure,99,"Now, progress is blocked by [ROOT-10671](https://sft.its.cern.ch/jira/browse/ROOT-10671). The test failure is a direct consequence of that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5219
https://github.com/root-project/root/pull/5219:94,safety,test,test,94,"Now, progress is blocked by [ROOT-10671](https://sft.its.cern.ch/jira/browse/ROOT-10671). The test failure is a direct consequence of that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5219
https://github.com/root-project/root/pull/5219:94,testability,test,test,94,"Now, progress is blocked by [ROOT-10671](https://sft.its.cern.ch/jira/browse/ROOT-10671). The test failure is a direct consequence of that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5219
https://github.com/root-project/root/pull/5219:5,usability,progress,progress,5,"Now, progress is blocked by [ROOT-10671](https://sft.its.cern.ch/jira/browse/ROOT-10671). The test failure is a direct consequence of that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5219
https://github.com/root-project/root/pull/5220:3,usability,person,personal,3,my personal opinion from CMake point of view this PR is ready to go and and fixes discrepancy between Mac and Unix Debug setup. @Axel-Naumann can you please confirm that Mac should have `-O2` and nor `-O3`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5220
https://github.com/root-project/root/pull/5220:157,usability,confirm,confirm,157,my personal opinion from CMake point of view this PR is ready to go and and fixes discrepancy between Mac and Unix Debug setup. @Axel-Naumann can you please confirm that Mac should have `-O2` and nor `-O3`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5220
https://github.com/root-project/root/pull/5220:8,safety,reme,remember,8,"I don't remember why Mac had O2 not O3, sorry. I do remember we looked at it once. But either way that discussion seems not relevant for this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5220
https://github.com/root-project/root/pull/5220:52,safety,reme,remember,52,"I don't remember why Mac had O2 not O3, sorry. I do remember we looked at it once. But either way that discussion seems not relevant for this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5220
https://github.com/root-project/root/pull/5221:93,deployability,updat,update,93,"I would love to, but you just edited the GitHub comment and not the commit itself. Could you update the message there?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:104,integrability,messag,message,104,"I would love to, but you just edited the GitHub comment and not the commit itself. Could you update the message there?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:104,interoperability,messag,message,104,"I would love to, but you just edited the GitHub comment and not the commit itself. Could you update the message there?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:93,safety,updat,update,93,"I would love to, but you just edited the GitHub comment and not the commit itself. Could you update the message there?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:93,security,updat,update,93,"I would love to, but you just edited the GitHub comment and not the commit itself. Could you update the message there?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:63,integrability,messag,message,63,"Also, taggin the commit with something like `[RDF] <your short message>` is helpful for the commit history. Further, take care that you have a ""short head message"" and a ""body"", if you do it like this:. ```. [RDF] Fix tutorial df103. <Here goes the long explanation!>. ```. The long explanation the shows only up if you click on the commit on GitHub, which is a nice thing!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:155,integrability,messag,message,155,"Also, taggin the commit with something like `[RDF] <your short message>` is helpful for the commit history. Further, take care that you have a ""short head message"" and a ""body"", if you do it like this:. ```. [RDF] Fix tutorial df103. <Here goes the long explanation!>. ```. The long explanation the shows only up if you click on the commit on GitHub, which is a nice thing!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:63,interoperability,messag,message,63,"Also, taggin the commit with something like `[RDF] <your short message>` is helpful for the commit history. Further, take care that you have a ""short head message"" and a ""body"", if you do it like this:. ```. [RDF] Fix tutorial df103. <Here goes the long explanation!>. ```. The long explanation the shows only up if you click on the commit on GitHub, which is a nice thing!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:155,interoperability,messag,message,155,"Also, taggin the commit with something like `[RDF] <your short message>` is helpful for the commit history. Further, take care that you have a ""short head message"" and a ""body"", if you do it like this:. ```. [RDF] Fix tutorial df103. <Here goes the long explanation!>. ```. The long explanation the shows only up if you click on the commit on GitHub, which is a nice thing!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:76,usability,help,helpful,76,"Also, taggin the commit with something like `[RDF] <your short message>` is helpful for the commit history. Further, take care that you have a ""short head message"" and a ""body"", if you do it like this:. ```. [RDF] Fix tutorial df103. <Here goes the long explanation!>. ```. The long explanation the shows only up if you click on the commit on GitHub, which is a nice thing!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:162,integrability,messag,message,162,"No ;) I'm judging from the commits associated to this PR. Most likely you have to force push to this branch. Actually, I'm not sure if you change only the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:162,interoperability,messag,message,162,"No ;) I'm judging from the commits associated to this PR. Most likely you have to force push to this branch. Actually, I'm not sure if you change only the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:41,deployability,updat,update-,41,this should work:. ```bash. git checkout update-df103. git commit --amend # and change the commit message. git push --force upstream update-df103 # or maybe origin instead of upstream depending on your setup. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:133,deployability,updat,update-,133,this should work:. ```bash. git checkout update-df103. git commit --amend # and change the commit message. git push --force upstream update-df103 # or maybe origin instead of upstream depending on your setup. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:184,deployability,depend,depending,184,this should work:. ```bash. git checkout update-df103. git commit --amend # and change the commit message. git push --force upstream update-df103 # or maybe origin instead of upstream depending on your setup. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:98,integrability,messag,message,98,this should work:. ```bash. git checkout update-df103. git commit --amend # and change the commit message. git push --force upstream update-df103 # or maybe origin instead of upstream depending on your setup. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:184,integrability,depend,depending,184,this should work:. ```bash. git checkout update-df103. git commit --amend # and change the commit message. git push --force upstream update-df103 # or maybe origin instead of upstream depending on your setup. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:98,interoperability,messag,message,98,this should work:. ```bash. git checkout update-df103. git commit --amend # and change the commit message. git push --force upstream update-df103 # or maybe origin instead of upstream depending on your setup. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:184,modifiability,depend,depending,184,this should work:. ```bash. git checkout update-df103. git commit --amend # and change the commit message. git push --force upstream update-df103 # or maybe origin instead of upstream depending on your setup. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:41,safety,updat,update-,41,this should work:. ```bash. git checkout update-df103. git commit --amend # and change the commit message. git push --force upstream update-df103 # or maybe origin instead of upstream depending on your setup. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:133,safety,updat,update-,133,this should work:. ```bash. git checkout update-df103. git commit --amend # and change the commit message. git push --force upstream update-df103 # or maybe origin instead of upstream depending on your setup. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:184,safety,depend,depending,184,this should work:. ```bash. git checkout update-df103. git commit --amend # and change the commit message. git push --force upstream update-df103 # or maybe origin instead of upstream depending on your setup. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:41,security,updat,update-,41,this should work:. ```bash. git checkout update-df103. git commit --amend # and change the commit message. git push --force upstream update-df103 # or maybe origin instead of upstream depending on your setup. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:133,security,updat,update-,133,this should work:. ```bash. git checkout update-df103. git commit --amend # and change the commit message. git push --force upstream update-df103 # or maybe origin instead of upstream depending on your setup. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5221:184,testability,depend,depending,184,this should work:. ```bash. git checkout update-df103. git commit --amend # and change the commit message. git push --force upstream update-df103 # or maybe origin instead of upstream depending on your setup. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5221
https://github.com/root-project/root/pull/5223:11,deployability,build,build,11,"@phsft-bot build! Could you update the commit message to something like:. ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:28,deployability,updat,update,28,"@phsft-bot build! Could you update the commit message to something like:. ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:156,deployability,patch,patch,156,"@phsft-bot build! Could you update the commit message to something like:. ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:228,deployability,log,logic,228,"@phsft-bot build! Could you update the commit message to something like:. ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:46,integrability,messag,message,46,"@phsft-bot build! Could you update the commit message to something like:. ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:46,interoperability,messag,message,46,"@phsft-bot build! Could you update the commit message to something like:. ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:28,safety,updat,update,28,"@phsft-bot build! Could you update the commit message to something like:. ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:156,safety,patch,patch,156,"@phsft-bot build! Could you update the commit message to something like:. ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:228,safety,log,logic,228,"@phsft-bot build! Could you update the commit message to something like:. ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:28,security,updat,update,28,"@phsft-bot build! Could you update the commit message to something like:. ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:156,security,patch,patch,156,"@phsft-bot build! Could you update the commit message to something like:. ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:228,security,log,logic,228,"@phsft-bot build! Could you update the commit message to something like:. ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:195,testability,simpl,simplify,195,"@phsft-bot build! Could you update the commit message to something like:. ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:228,testability,log,logic,228,"@phsft-bot build! Could you update the commit message to something like:. ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:195,usability,simpl,simplify,195,"@phsft-bot build! Could you update the commit message to something like:. ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:13,deployability,build,build,13,"> @phsft-bot build! > . > Could you update the commit message to something like:. > ""[rootcling] Don't generate dictionary to throw it away when called with -r. > . > This patch should speed up rootcling -r and simplify some of the conditional logic."". It's just cosmetics, but could you maybe shorten the first line a bit more? In github, the `-r` starts to fall into the next line. ""[rootcling] Suppress dictionary when called with -r."". Then, the ""throwing away"" part etc can go into the body.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:36,deployability,updat,update,36,"> @phsft-bot build! > . > Could you update the commit message to something like:. > ""[rootcling] Don't generate dictionary to throw it away when called with -r. > . > This patch should speed up rootcling -r and simplify some of the conditional logic."". It's just cosmetics, but could you maybe shorten the first line a bit more? In github, the `-r` starts to fall into the next line. ""[rootcling] Suppress dictionary when called with -r."". Then, the ""throwing away"" part etc can go into the body.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:172,deployability,patch,patch,172,"> @phsft-bot build! > . > Could you update the commit message to something like:. > ""[rootcling] Don't generate dictionary to throw it away when called with -r. > . > This patch should speed up rootcling -r and simplify some of the conditional logic."". It's just cosmetics, but could you maybe shorten the first line a bit more? In github, the `-r` starts to fall into the next line. ""[rootcling] Suppress dictionary when called with -r."". Then, the ""throwing away"" part etc can go into the body.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:244,deployability,log,logic,244,"> @phsft-bot build! > . > Could you update the commit message to something like:. > ""[rootcling] Don't generate dictionary to throw it away when called with -r. > . > This patch should speed up rootcling -r and simplify some of the conditional logic."". It's just cosmetics, but could you maybe shorten the first line a bit more? In github, the `-r` starts to fall into the next line. ""[rootcling] Suppress dictionary when called with -r."". Then, the ""throwing away"" part etc can go into the body.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:54,integrability,messag,message,54,"> @phsft-bot build! > . > Could you update the commit message to something like:. > ""[rootcling] Don't generate dictionary to throw it away when called with -r. > . > This patch should speed up rootcling -r and simplify some of the conditional logic."". It's just cosmetics, but could you maybe shorten the first line a bit more? In github, the `-r` starts to fall into the next line. ""[rootcling] Suppress dictionary when called with -r."". Then, the ""throwing away"" part etc can go into the body.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:54,interoperability,messag,message,54,"> @phsft-bot build! > . > Could you update the commit message to something like:. > ""[rootcling] Don't generate dictionary to throw it away when called with -r. > . > This patch should speed up rootcling -r and simplify some of the conditional logic."". It's just cosmetics, but could you maybe shorten the first line a bit more? In github, the `-r` starts to fall into the next line. ""[rootcling] Suppress dictionary when called with -r."". Then, the ""throwing away"" part etc can go into the body.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:36,safety,updat,update,36,"> @phsft-bot build! > . > Could you update the commit message to something like:. > ""[rootcling] Don't generate dictionary to throw it away when called with -r. > . > This patch should speed up rootcling -r and simplify some of the conditional logic."". It's just cosmetics, but could you maybe shorten the first line a bit more? In github, the `-r` starts to fall into the next line. ""[rootcling] Suppress dictionary when called with -r."". Then, the ""throwing away"" part etc can go into the body.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:172,safety,patch,patch,172,"> @phsft-bot build! > . > Could you update the commit message to something like:. > ""[rootcling] Don't generate dictionary to throw it away when called with -r. > . > This patch should speed up rootcling -r and simplify some of the conditional logic."". It's just cosmetics, but could you maybe shorten the first line a bit more? In github, the `-r` starts to fall into the next line. ""[rootcling] Suppress dictionary when called with -r."". Then, the ""throwing away"" part etc can go into the body.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:244,safety,log,logic,244,"> @phsft-bot build! > . > Could you update the commit message to something like:. > ""[rootcling] Don't generate dictionary to throw it away when called with -r. > . > This patch should speed up rootcling -r and simplify some of the conditional logic."". It's just cosmetics, but could you maybe shorten the first line a bit more? In github, the `-r` starts to fall into the next line. ""[rootcling] Suppress dictionary when called with -r."". Then, the ""throwing away"" part etc can go into the body.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:36,security,updat,update,36,"> @phsft-bot build! > . > Could you update the commit message to something like:. > ""[rootcling] Don't generate dictionary to throw it away when called with -r. > . > This patch should speed up rootcling -r and simplify some of the conditional logic."". It's just cosmetics, but could you maybe shorten the first line a bit more? In github, the `-r` starts to fall into the next line. ""[rootcling] Suppress dictionary when called with -r."". Then, the ""throwing away"" part etc can go into the body.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:172,security,patch,patch,172,"> @phsft-bot build! > . > Could you update the commit message to something like:. > ""[rootcling] Don't generate dictionary to throw it away when called with -r. > . > This patch should speed up rootcling -r and simplify some of the conditional logic."". It's just cosmetics, but could you maybe shorten the first line a bit more? In github, the `-r` starts to fall into the next line. ""[rootcling] Suppress dictionary when called with -r."". Then, the ""throwing away"" part etc can go into the body.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:244,security,log,logic,244,"> @phsft-bot build! > . > Could you update the commit message to something like:. > ""[rootcling] Don't generate dictionary to throw it away when called with -r. > . > This patch should speed up rootcling -r and simplify some of the conditional logic."". It's just cosmetics, but could you maybe shorten the first line a bit more? In github, the `-r` starts to fall into the next line. ""[rootcling] Suppress dictionary when called with -r."". Then, the ""throwing away"" part etc can go into the body.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:211,testability,simpl,simplify,211,"> @phsft-bot build! > . > Could you update the commit message to something like:. > ""[rootcling] Don't generate dictionary to throw it away when called with -r. > . > This patch should speed up rootcling -r and simplify some of the conditional logic."". It's just cosmetics, but could you maybe shorten the first line a bit more? In github, the `-r` starts to fall into the next line. ""[rootcling] Suppress dictionary when called with -r."". Then, the ""throwing away"" part etc can go into the body.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:244,testability,log,logic,244,"> @phsft-bot build! > . > Could you update the commit message to something like:. > ""[rootcling] Don't generate dictionary to throw it away when called with -r. > . > This patch should speed up rootcling -r and simplify some of the conditional logic."". It's just cosmetics, but could you maybe shorten the first line a bit more? In github, the `-r` starts to fall into the next line. ""[rootcling] Suppress dictionary when called with -r."". Then, the ""throwing away"" part etc can go into the body.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:211,usability,simpl,simplify,211,"> @phsft-bot build! > . > Could you update the commit message to something like:. > ""[rootcling] Don't generate dictionary to throw it away when called with -r. > . > This patch should speed up rootcling -r and simplify some of the conditional logic."". It's just cosmetics, but could you maybe shorten the first line a bit more? In github, the `-r` starts to fall into the next line. ""[rootcling] Suppress dictionary when called with -r."". Then, the ""throwing away"" part etc can go into the body.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:155,testability,simpl,simplifies,155,"> > @pcanal, this paves our way towards removing the deprecated -r. Could you take a look. > . > Could expand on how this paves the way to the removal? It simplifies and makes the code related to `-r` more explicit. Removal should just delete the if-stmts conditional to `gOptIgnoreExistingDict`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5223:155,usability,simpl,simplifies,155,"> > @pcanal, this paves our way towards removing the deprecated -r. Could you take a look. > . > Could expand on how this paves the way to the removal? It simplifies and makes the code related to `-r` more explicit. Removal should just delete the if-stmts conditional to `gOptIgnoreExistingDict`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5223
https://github.com/root-project/root/pull/5228:110,deployability,build,build,110,"Thanks @hageboeck ! I tried that as well, it works locally, but sadly not on Jenkins....(will try to debug on build nodes later)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5228
https://github.com/root-project/root/pull/5228:22,safety,review,review,22,@Axel-Naumann can you review? I would like to land it in 6.22...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5228
https://github.com/root-project/root/pull/5228:22,testability,review,review,22,@Axel-Naumann can you review? I would like to land it in 6.22...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5228
https://github.com/root-project/root/pull/5228:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5228
https://github.com/root-project/root/pull/5229:26,deployability,build,build,26,@Axel-Naumann do we still build with R module enabled?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5229
https://github.com/root-project/root/pull/5229:39,deployability,modul,module,39,@Axel-Naumann do we still build with R module enabled?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5229
https://github.com/root-project/root/pull/5229:39,modifiability,modul,module,39,@Axel-Naumann do we still build with R module enabled?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5229
https://github.com/root-project/root/pull/5229:39,safety,modul,module,39,@Axel-Naumann do we still build with R module enabled?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5229
https://github.com/root-project/root/pull/5229:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5229
https://github.com/root-project/root/pull/5229:156,deployability,build,build-root,156,"Okay too late - but you must be aware that there is no point in changing tutorials without running *all* the tests, ie including the tutorials. The rootspi build-root.cmake file (which should be known to some :-) ) shows that we build R on everything but Ubuntu 14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5229
https://github.com/root-project/root/pull/5229:229,deployability,build,build,229,"Okay too late - but you must be aware that there is no point in changing tutorials without running *all* the tests, ie including the tutorials. The rootspi build-root.cmake file (which should be known to some :-) ) shows that we build R on everything but Ubuntu 14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5229
https://github.com/root-project/root/pull/5229:109,safety,test,tests,109,"Okay too late - but you must be aware that there is no point in changing tutorials without running *all* the tests, ie including the tutorials. The rootspi build-root.cmake file (which should be known to some :-) ) shows that we build R on everything but Ubuntu 14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5229
https://github.com/root-project/root/pull/5229:109,testability,test,tests,109,"Okay too late - but you must be aware that there is no point in changing tutorials without running *all* the tests, ie including the tutorials. The rootspi build-root.cmake file (which should be known to some :-) ) shows that we build R on everything but Ubuntu 14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5229
https://github.com/root-project/root/pull/5231:54,deployability,depend,dependencies,54,"Forgot to say, this should be only 2 commits: one the dependencies the other the header/linkdef adjustments to be able to semantically track such improvements...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5231
https://github.com/root-project/root/pull/5231:54,integrability,depend,dependencies,54,"Forgot to say, this should be only 2 commits: one the dependencies the other the header/linkdef adjustments to be able to semantically track such improvements...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5231
https://github.com/root-project/root/pull/5231:122,interoperability,semant,semantically,122,"Forgot to say, this should be only 2 commits: one the dependencies the other the header/linkdef adjustments to be able to semantically track such improvements...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5231
https://github.com/root-project/root/pull/5231:54,modifiability,depend,dependencies,54,"Forgot to say, this should be only 2 commits: one the dependencies the other the header/linkdef adjustments to be able to semantically track such improvements...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5231
https://github.com/root-project/root/pull/5231:54,safety,depend,dependencies,54,"Forgot to say, this should be only 2 commits: one the dependencies the other the header/linkdef adjustments to be able to semantically track such improvements...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5231
https://github.com/root-project/root/pull/5231:54,testability,depend,dependencies,54,"Forgot to say, this should be only 2 commits: one the dependencies the other the header/linkdef adjustments to be able to semantically track such improvements...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5231
https://github.com/root-project/root/pull/5231:69,integrability,interfac,interface,69,@pcanal Can you approve my changes in `TreePlayer`. I extend virtual interface to be able use `TVirtualTreePlayer` class from GUI,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5231
https://github.com/root-project/root/pull/5231:69,interoperability,interfac,interface,69,@pcanal Can you approve my changes in `TreePlayer`. I extend virtual interface to be able use `TVirtualTreePlayer` class from GUI,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5231
https://github.com/root-project/root/pull/5231:54,modifiability,exten,extend,54,@pcanal Can you approve my changes in `TreePlayer`. I extend virtual interface to be able use `TVirtualTreePlayer` class from GUI,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5231
https://github.com/root-project/root/pull/5231:69,modifiability,interfac,interface,69,@pcanal Can you approve my changes in `TreePlayer`. I extend virtual interface to be able use `TVirtualTreePlayer` class from GUI,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5231
https://github.com/root-project/root/pull/5233:142,deployability,depend,dependency,142,"@vgvassilev You just squash all changes in CMakeLists.txt files. . But changes are incomplete. I really tried to make commits, adding missing dependency *AND* removing includes which are not used but belong to some other library, which is not listed in dependency. And trying to do it on low granularity level. One example is #5232",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5233
https://github.com/root-project/root/pull/5233:253,deployability,depend,dependency,253,"@vgvassilev You just squash all changes in CMakeLists.txt files. . But changes are incomplete. I really tried to make commits, adding missing dependency *AND* removing includes which are not used but belong to some other library, which is not listed in dependency. And trying to do it on low granularity level. One example is #5232",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5233
https://github.com/root-project/root/pull/5233:142,integrability,depend,dependency,142,"@vgvassilev You just squash all changes in CMakeLists.txt files. . But changes are incomplete. I really tried to make commits, adding missing dependency *AND* removing includes which are not used but belong to some other library, which is not listed in dependency. And trying to do it on low granularity level. One example is #5232",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5233
https://github.com/root-project/root/pull/5233:253,integrability,depend,dependency,253,"@vgvassilev You just squash all changes in CMakeLists.txt files. . But changes are incomplete. I really tried to make commits, adding missing dependency *AND* removing includes which are not used but belong to some other library, which is not listed in dependency. And trying to do it on low granularity level. One example is #5232",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5233
https://github.com/root-project/root/pull/5233:142,modifiability,depend,dependency,142,"@vgvassilev You just squash all changes in CMakeLists.txt files. . But changes are incomplete. I really tried to make commits, adding missing dependency *AND* removing includes which are not used but belong to some other library, which is not listed in dependency. And trying to do it on low granularity level. One example is #5232",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5233
https://github.com/root-project/root/pull/5233:253,modifiability,depend,dependency,253,"@vgvassilev You just squash all changes in CMakeLists.txt files. . But changes are incomplete. I really tried to make commits, adding missing dependency *AND* removing includes which are not used but belong to some other library, which is not listed in dependency. And trying to do it on low granularity level. One example is #5232",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5233
https://github.com/root-project/root/pull/5233:142,safety,depend,dependency,142,"@vgvassilev You just squash all changes in CMakeLists.txt files. . But changes are incomplete. I really tried to make commits, adding missing dependency *AND* removing includes which are not used but belong to some other library, which is not listed in dependency. And trying to do it on low granularity level. One example is #5232",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5233
https://github.com/root-project/root/pull/5233:253,safety,depend,dependency,253,"@vgvassilev You just squash all changes in CMakeLists.txt files. . But changes are incomplete. I really tried to make commits, adding missing dependency *AND* removing includes which are not used but belong to some other library, which is not listed in dependency. And trying to do it on low granularity level. One example is #5232",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5233
https://github.com/root-project/root/pull/5233:142,testability,depend,dependency,142,"@vgvassilev You just squash all changes in CMakeLists.txt files. . But changes are incomplete. I really tried to make commits, adding missing dependency *AND* removing includes which are not used but belong to some other library, which is not listed in dependency. And trying to do it on low granularity level. One example is #5232",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5233
https://github.com/root-project/root/pull/5233:253,testability,depend,dependency,253,"@vgvassilev You just squash all changes in CMakeLists.txt files. . But changes are incomplete. I really tried to make commits, adding missing dependency *AND* removing includes which are not used but belong to some other library, which is not listed in dependency. And trying to do it on low granularity level. One example is #5232",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5233
https://github.com/root-project/root/pull/5234:41,deployability,fail,failing,41,"Note that the test seems to be actually ""failing"" on all platforms (but worse on the one with the crash) and we are not seeing it due to lack of internal checks. While I am debugging the test itself, I am merging this fix that should have been unnecessary but is still an improvement (direct vs indirect check) ... or maybe this was a typo ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5234
https://github.com/root-project/root/pull/5234:57,interoperability,platform,platforms,57,"Note that the test seems to be actually ""failing"" on all platforms (but worse on the one with the crash) and we are not seeing it due to lack of internal checks. While I am debugging the test itself, I am merging this fix that should have been unnecessary but is still an improvement (direct vs indirect check) ... or maybe this was a typo ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5234
https://github.com/root-project/root/pull/5234:41,reliability,fail,failing,41,"Note that the test seems to be actually ""failing"" on all platforms (but worse on the one with the crash) and we are not seeing it due to lack of internal checks. While I am debugging the test itself, I am merging this fix that should have been unnecessary but is still an improvement (direct vs indirect check) ... or maybe this was a typo ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5234
https://github.com/root-project/root/pull/5234:14,safety,test,test,14,"Note that the test seems to be actually ""failing"" on all platforms (but worse on the one with the crash) and we are not seeing it due to lack of internal checks. While I am debugging the test itself, I am merging this fix that should have been unnecessary but is still an improvement (direct vs indirect check) ... or maybe this was a typo ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5234
https://github.com/root-project/root/pull/5234:187,safety,test,test,187,"Note that the test seems to be actually ""failing"" on all platforms (but worse on the one with the crash) and we are not seeing it due to lack of internal checks. While I am debugging the test itself, I am merging this fix that should have been unnecessary but is still an improvement (direct vs indirect check) ... or maybe this was a typo ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5234
https://github.com/root-project/root/pull/5234:14,testability,test,test,14,"Note that the test seems to be actually ""failing"" on all platforms (but worse on the one with the crash) and we are not seeing it due to lack of internal checks. While I am debugging the test itself, I am merging this fix that should have been unnecessary but is still an improvement (direct vs indirect check) ... or maybe this was a typo ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5234
https://github.com/root-project/root/pull/5234:187,testability,test,test,187,"Note that the test seems to be actually ""failing"" on all platforms (but worse on the one with the crash) and we are not seeing it due to lack of internal checks. While I am debugging the test itself, I am merging this fix that should have been unnecessary but is still an improvement (direct vs indirect check) ... or maybe this was a typo ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5234
https://github.com/root-project/root/pull/5235:74,deployability,modul,modulemap,74,"In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:74,modifiability,modul,modulemap,74,"In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:41,reliability,doe,does,41,"In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:74,safety,modul,modulemap,74,"In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:23,deployability,build,builds,23,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:68,deployability,modul,modulemap,68,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:140,deployability,depend,dependencies,140,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:266,deployability,depend,dependencies,266,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:438,energy efficiency,load,load,438,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:140,integrability,depend,dependencies,140,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:266,integrability,depend,dependencies,266,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:68,modifiability,modul,modulemap,68,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:140,modifiability,depend,dependencies,140,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:266,modifiability,depend,dependencies,266,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:438,performance,load,load,438,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:309,reliability,Doe,Doesn,309,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:68,safety,modul,modulemap,68,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:112,safety,detect,detect,112,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:140,safety,depend,dependencies,140,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:266,safety,depend,dependencies,266,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:112,security,detect,detect,112,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:332,security,access,access,332,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:140,testability,depend,dependencies,140,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:266,testability,depend,dependencies,266,> In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:76,deployability,modul,modulemap,76,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:212,deployability,modul,module,212,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:219,deployability,modul,modulemap,219,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:256,deployability,build,builds,256,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:301,deployability,modul,modulemap,301,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:373,deployability,depend,dependencies,373,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:505,deployability,depend,dependencies,505,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:677,energy efficiency,load,load,677,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:774,energy efficiency,core,core,774,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:373,integrability,depend,dependencies,373,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:505,integrability,depend,dependencies,505,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:76,modifiability,modul,modulemap,76,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:212,modifiability,modul,module,212,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:219,modifiability,modul,modulemap,219,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:301,modifiability,modul,modulemap,301,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:373,modifiability,depend,dependencies,373,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:505,modifiability,depend,dependencies,505,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:677,performance,load,load,677,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:826,performance,content,content,826,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:43,reliability,doe,does,43,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:548,reliability,Doe,Doesn,548,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:76,safety,modul,modulemap,76,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:212,safety,modul,module,212,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:219,safety,modul,modulemap,219,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:301,safety,modul,modulemap,301,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:345,safety,detect,detect,345,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:373,safety,depend,dependencies,373,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:505,safety,depend,dependencies,505,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:979,safety,accid,accidentally,979,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:345,security,detect,detect,345,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:571,security,access,access,571,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:373,testability,depend,dependencies,373,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:505,testability,depend,dependencies,505,"> In ROOT-10637, which is the library that does not have rootmap file nor a modulemap file? In the example from the bug report that would be `spec_func_C.so`. It has no `spec_func_C.rootmap` nor `spec_func_C.pcm/module.modulemap`. > > In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. > . > Technically the 'problem' is that the rootcling executable that is run by ACLiC is not reporting to the list of dependencies of the source file it parsed. Doesn't rootcling have access to the information (connection symbol to library) through the pcm files? [Note: rootcling must not load any library]. Do you mean this code [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L557-L573). The content of `spec_func_C_ACLiC_map.out` and `spec_func_C_ACLiC_map.in` [here](https://paste.ubuntu.com/p/WGcBqPTRwH/). I suspect it worked before because accidentally we had libHist's description stored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:123,deployability,depend,dependencies,123,"> In the example from the bug report that would be spec_func_C.so. The intent is for this library to be hard linked to its dependencies. To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:123,integrability,depend,dependencies,123,"> In the example from the bug report that would be spec_func_C.so. The intent is for this library to be hard linked to its dependencies. To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:123,modifiability,depend,dependencies,123,"> In the example from the bug report that would be spec_func_C.so. The intent is for this library to be hard linked to its dependencies. To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:281,reliability,Doe,Doesn,281,"> In the example from the bug report that would be spec_func_C.so. The intent is for this library to be hard linked to its dependencies. To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:123,safety,depend,dependencies,123,"> In the example from the bug report that would be spec_func_C.so. The intent is for this library to be hard linked to its dependencies. To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:304,security,access,access,304,"> In the example from the bug report that would be spec_func_C.so. The intent is for this library to be hard linked to its dependencies. To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:123,testability,depend,dependencies,123,"> In the example from the bug report that would be spec_func_C.so. The intent is for this library to be hard linked to its dependencies. To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:506,availability,redund,redundant,506,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:131,deployability,depend,dependencies,131,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:506,deployability,redundan,redundant,506,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:383,energy efficiency,load,loaded,383,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:450,energy efficiency,load,loading,450,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:530,energy efficiency,load,loaded,530,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:831,energy efficiency,load,loaded,831,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:856,energy efficiency,load,loading,856,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:131,integrability,depend,dependencies,131,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:488,integrability,sub,suboptimal,488,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:131,modifiability,depend,dependencies,131,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:383,performance,load,loaded,383,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:450,performance,load,loading,450,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:530,performance,load,loaded,530,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:831,performance,load,loaded,831,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:856,performance,load,loading,856,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:150,reliability,doe,does,150,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:506,reliability,redundan,redundant,506,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:632,reliability,Doe,Doesn,632,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:131,safety,depend,dependencies,131,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:506,safety,redund,redundant,506,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:850,safety,avoid,avoid,850,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:416,security,session,session,416,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:655,security,access,access,655,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:898,security,session,session,898,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:131,testability,depend,dependencies,131,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:586,usability,command,command,586,"> > In the example from the bug report that would be spec_func_C.so. > . > The intent is for this library to be hard linked to its dependencies. What does ""hard linked"" mean? Using explicit linking? > To do so rootcling needs a mapping ""symbols to library"" (previously provided by rootmap) and output a list of used library. Previously, if I am not mistaken, rootcling will list all loaded libraries in the existing session and then replay them when loading the ACLiC library. That seems suboptimal as may redundant things can be loaded, especially when the `.L ...++` is not the first command to execute. > . > hence my question "" Doesn't rootcling have access to the information (connection symbol to library) through the pcm files?"". I has it, but it is lazily obtained by the visiting the undefined symbols when the library is loaded as intended avoid loading of libraries which existed in the session but are irrelevant to the ACLiC-produced library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:383,deployability,depend,depend,383,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:113,energy efficiency,load,loaded,113,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:374,energy efficiency,load,load,374,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:416,energy efficiency,load,loaded,416,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:553,energy efficiency,load,loaded,553,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:607,energy efficiency,load,load,607,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:383,integrability,depend,depend,383,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:383,modifiability,depend,depend,383,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:113,performance,load,loaded,113,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:374,performance,load,load,374,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:416,performance,load,loaded,416,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:553,performance,load,loaded,553,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:607,performance,load,load,607,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:7,reliability,doe,does,7,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:164,safety,reme,remember,164,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:383,safety,depend,depend,383,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:146,security,session,session,146,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:383,testability,depend,depend,383,"> What does ""hard linked"" mean? Using explicit linking? Yes, I meant explicit linking. > rootcling will list all loaded libraries in the existing session and. If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. > y the visiting the undefined symbols when the library is loaded. Humm that is a challenge as rootcling can not load any libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:392,deployability,modul,modules,392,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:831,deployability,depend,depend,831,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1158,deployability,loader,loader,1158,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1402,deployability,build,build,1402,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:260,energy efficiency,load,loaded,260,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:555,energy efficiency,load,loaded,555,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:822,energy efficiency,load,load,822,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:864,energy efficiency,load,loaded,864,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1041,energy efficiency,load,loaded,1041,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1101,energy efficiency,load,load,1101,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1133,energy efficiency,power,power,1133,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1158,energy efficiency,load,loader,1158,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1210,energy efficiency,load,loading,1210,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1282,energy efficiency,load,loaded,1282,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:831,integrability,depend,depend,831,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:392,modifiability,modul,modules,392,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:831,modifiability,depend,depend,831,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:260,performance,load,loaded,260,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:555,performance,load,loaded,555,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:822,performance,load,load,822,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:864,performance,load,loaded,864,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1041,performance,load,loaded,1041,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1101,performance,load,load,1101,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1158,performance,load,loader,1158,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1210,performance,load,loading,1210,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1282,performance,load,loaded,1282,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:9,reliability,doe,does,9,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:392,safety,modul,modules,392,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:612,safety,reme,remember,612,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:831,safety,depend,depend,831,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:588,security,session,session,588,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1621,security,intrus,intrusive,1621,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:831,testability,depend,depend,831,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:119,usability,support,support,119,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:168,usability,support,support,168,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:211,usability,support,supported,211,"> > What does ""hard linked"" mean? Using explicit linking? > . > Yes, I meant explicit linking. I thought you wanted to support non-explicit linking, too. If we want to support the same explicit-linking which we supported with rootmaps we should `just` get all loaded libraries and append them. This will not solve ROOT-10637, though. In order to solve it we should probably keep track of all modules which we have deserialized declarations from and get their corresponding libraries. Both seem to be very inaccurate to me. > . > > rootcling will list all loaded libraries in the existing session and. > . > If I remember correctly, it is passed a rootmap file which is then leverage to obtains (from cling) the actual symbol and thus actual library needed and then issue a list of library needed. This is used to at least load the depend library that has not been loaded yet and is (or should be/could be) used to limit the explicit linking. By symbol you mean `clang::Decl`? > . > > y the visiting the undefined symbols when the library is loaded. > . > Humm that is a challenge as rootcling can not load any libraries. That is the power of the new dynamic loader. It can scan for symbols without opening and loading the library. At the moment it is done when the library is being loaded, however, it can be a step or rootcling. If we want accurate explicit linking, that would require two steps: (a) build the library without explicit linking; (b) walk the undefined symbols, resolve them and relink the library. I think all of that is feasible to implement, however, this PR should fix the original issue in the least intrusive way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_BUILD_TYPE=Debug,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_BUILD_TYPE=Debug,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_BUILD_TYPE=Debug,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:13,deployability,build,build,13,. @phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_BUILD_TYPE=Release,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:100,deployability,Releas,Release,100,. @phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_BUILD_TYPE=Release,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:32,performance,perform,performance-,32,. @phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_BUILD_TYPE=Release,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:32,usability,perform,performance-,32,. @phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_BUILD_TYPE=Release,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:11,deployability,build,build,11,"@phsft-bot build on ROOT-debian10-i386/cxx14, ROOT-performance-centos7-multicore/default, ROOT-fedora29/python3, ROOT-fedora30/cxx14, ROOT-fedora31/noimt, ROOT-ubuntu16/nortcxxmod, mac1015/cxx17, windows10/cxx14",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:51,performance,perform,performance-,51,"@phsft-bot build on ROOT-debian10-i386/cxx14, ROOT-performance-centos7-multicore/default, ROOT-fedora29/python3, ROOT-fedora30/cxx14, ROOT-fedora31/noimt, ROOT-ubuntu16/nortcxxmod, mac1015/cxx17, windows10/cxx14",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:51,usability,perform,performance-,51,"@phsft-bot build on ROOT-debian10-i386/cxx14, ROOT-performance-centos7-multicore/default, ROOT-fedora29/python3, ROOT-fedora30/cxx14, ROOT-fedora31/noimt, ROOT-ubuntu16/nortcxxmod, mac1015/cxx17, windows10/cxx14",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:254,availability,failur,failures,254,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:405,availability,error,error,405,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:254,deployability,fail,failures,254,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:738,deployability,loader,loader,738,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:154,energy efficiency,load,loaded,154,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:713,energy efficiency,power,power,713,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:738,energy efficiency,load,loader,738,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:773,energy efficiency,load,loaded,773,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:154,performance,load,loaded,154,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:220,performance,time,time,220,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:254,performance,failur,failures,254,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:405,performance,error,error,405,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:738,performance,load,loader,738,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:773,performance,load,loaded,773,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:254,reliability,fail,failures,254,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:405,safety,error,error,405,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:411,safety,compl,complaining,411,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:411,security,compl,complaining,411,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:26,usability,support,support,26,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:350,usability,User,User,350,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:405,usability,error,error,405,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:802,usability,user,users,802,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:. ```. root. root [] .L A.C+. root [] .L B.C+. root [] .q. rm A.C A_C*; # User give up on A.C. root. root [] .L B.C+. // linking error complaining about A_C.so not found. ```. > By symbol you mean clang::Decl? Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:819,availability,failur,failures,819,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:992,availability,error,error,992,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:244,deployability,modul,modules,244,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:445,deployability,modul,modules,445,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:528,deployability,build,build,528,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:536,deployability,modul,module,536,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:819,deployability,fail,failures,819,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1345,deployability,loader,loader,1345,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:235,energy efficiency,load,load,235,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:317,energy efficiency,core,core,317,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:600,energy efficiency,load,loaded,600,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1320,energy efficiency,power,power,1320,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1345,energy efficiency,load,loader,1345,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1384,energy efficiency,load,loaded,1384,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:683,integrability,rout,route,683,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:716,integrability,filter,filter,716,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1450,interoperability,format,format,1450,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:244,modifiability,modul,modules,244,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:445,modifiability,modul,modules,445,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:536,modifiability,modul,module,536,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:235,performance,load,load,235,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:600,performance,load,loaded,600,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:785,performance,time,time,785,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:819,performance,failur,failures,819,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:992,performance,error,error,992,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1345,performance,load,loader,1345,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1384,performance,load,loaded,1384,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:819,reliability,fail,failures,819,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:244,safety,modul,modules,244,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:445,safety,modul,modules,445,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:536,safety,modul,module,536,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:992,safety,error,error,992,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:998,safety,compl,complaining,998,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:998,security,compl,complaining,998,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1668,testability,coverag,coverage,1668,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:28,usability,support,support,28,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:645,usability,clear,clear,645,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:728,usability,user,user,728,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:931,usability,User,User,931,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:992,usability,error,error,992,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:1548,usability,user,users,1548,"> > I thought you wanted to support non-explicit linking, too. > . > Yes, true. But the explicit linking case is seemingly broken now. Yes, it is broken because when calling `rootcling -lib-list-prefix` (and no `-cxxmodule`) we do not load any modules and [this code](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L561-L562) is dead. We should implement some new option in rootcling which says preload all modules because ROOT/ACLiC is in `runtime_cxxmodules` mode but we do not intend to build a module (via `-cxxmodule` flag.). > . > > we should just get all loaded libraries and append them. Just to be clear, I was not proposing to go that route, but in principle we could filter out ""user"" libraries... > . > That is where we started a long time and ago and led to spurrious failures. For example:. > . > ```. > root. > root [] .L A.C+. > root [] .L B.C+. > root [] .q. > rm A.C A_C*; # User give up on A.C. > root. > root [] .L B.C+. > // linking error complaining about A_C.so not found. > ```. > . > > By symbol you mean clang::Decl? > . > Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > . > > That is the power of the new dynamic loader. > . > It works solely if it is loaded though :). Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. > . > We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable. I thought we have coverage for that case. I would recommend to go forward with this approach to fix the bug while I am working on fixing the explicit linking in general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:29,energy efficiency,load,loaded,29,"> > It works solely if it is loaded though :). > Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. Do you mean that if the user link the library to an executable, it will still work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:97,interoperability,format,format,97,"> > It works solely if it is loaded though :). > Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. Do you mean that if the user link the library to an executable, it will still work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:29,performance,load,loaded,29,"> > It works solely if it is loaded though :). > Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. Do you mean that if the user link the library to an executable, it will still work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:202,usability,user,user,202,"> > It works solely if it is loaded though :). > Nope, it is able to visit the elf/mach-o binary format and extract whatever information is needed without dlopening the library. Do you mean that if the user link the library to an executable, it will still work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:9,availability,ping,ping,9,"@pcanal, ping.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5235:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5235
https://github.com/root-project/root/pull/5237:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora30/cxx14 with flags -DCMAKE_CXX_COMPILER=clang\+\+ -Dasan=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora30/cxx14 with flags -DCMAKE_CXX_COMPILER=clang\\\+\\\+ -Dasan=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora30/cxx14 with flags -DCMAKE_CXX_COMPILER='clang++' -Dasan=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu1904-clang/default with flags -DCMAKE_CXX_COMPILER='clang++' -Dasan=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu1804-clangHEAD with flags -DCMAKE_CXX_COMPILER='clang++' -Dasan=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_COMPILER='clang++' -Dasan=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu1904-clang/default with flags -DCMAKE_CXX_COMPILER='clang++' -Dasan=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu1904-clang/default with flags -Dasan=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu1904-clang/default with flags -Dasan=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu1904-clang/default with flags -Dasan=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu1904-clang/default with flags -Dasan=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu1904-clang/default with flags -Dasan=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu1904-clang/default with flags -Dasan=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu1904-clang/default with flags -Dasan=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu1904-clang/default mac1015/cxx17 with flags -Dasan=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:183,safety,prevent,prevents,183,"> Looks good. Commit history still needs to be cleaned-up. I thought that this would be obvious. I had actually planned to use github's ""Squash on merge"", but the ""Changes requested"" prevents that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:183,security,preven,prevents,183,"> Looks good. Commit history still needs to be cleaned-up. I thought that this would be obvious. I had actually planned to use github's ""Squash on merge"", but the ""Changes requested"" prevents that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5237:112,testability,plan,planned,112,"> Looks good. Commit history still needs to be cleaned-up. I thought that this would be obvious. I had actually planned to use github's ""Squash on merge"", but the ""Changes requested"" prevents that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5237
https://github.com/root-project/root/pull/5238:60,performance,time,time,60,"@Axel-Naumann I am testing it on Mac OS X as well now (last time, to be sure my PR will fix problem)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5238
https://github.com/root-project/root/pull/5238:19,safety,test,testing,19,"@Axel-Naumann I am testing it on Mac OS X as well now (last time, to be sure my PR will fix problem)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5238
https://github.com/root-project/root/pull/5238:19,testability,test,testing,19,"@Axel-Naumann I am testing it on Mac OS X as well now (last time, to be sure my PR will fix problem)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5238
https://github.com/root-project/root/pull/5238:6,deployability,build,build,6,Local build is green!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5238
https://github.com/root-project/root/pull/5238:15,energy efficiency,green,green,15,Local build is green!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5238
https://github.com/root-project/root/pull/5238:88,integrability,messag,message,88,Could you add a link to the CMake bug report ? That way we know when we can remove this message.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5238
https://github.com/root-project/root/pull/5238:88,interoperability,messag,message,88,Could you add a link to the CMake bug report ? That way we know when we can remove this message.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5238
https://github.com/root-project/root/pull/5238:81,integrability,messag,message,81,"@axel it is inside code, in comment, where I should add it as well, in the CMake message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5238
https://github.com/root-project/root/pull/5238:81,interoperability,messag,message,81,"@axel it is inside code, in comment, where I should add it as well, in the CMake message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5238
https://github.com/root-project/root/pull/5241:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5241
https://github.com/root-project/root/pull/5241:63,safety,test,tests,63,"I assigned it, and we will see what comes out from running the tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5241
https://github.com/root-project/root/pull/5241:63,testability,test,tests,63,"I assigned it, and we will see what comes out from running the tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5241
https://github.com/root-project/root/pull/5243:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5243
https://github.com/root-project/root/pull/5243:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5243
https://github.com/root-project/root/pull/5243:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5243
https://github.com/root-project/root/pull/5248:25,safety,test,test,25,"We don't have a place to test, can you please test it on lxplus6?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5248
https://github.com/root-project/root/pull/5248:46,safety,test,test,46,"We don't have a place to test, can you please test it on lxplus6?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5248
https://github.com/root-project/root/pull/5248:25,testability,test,test,25,"We don't have a place to test, can you please test it on lxplus6?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5248
https://github.com/root-project/root/pull/5248:46,testability,test,test,46,"We don't have a place to test, can you please test it on lxplus6?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5248
https://github.com/root-project/root/pull/5248:54,performance,time,time,54,"@oshadura please see my comment, we wrote at the same time. Ok for your request to test on slc6 (please @maxgalli )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5248
https://github.com/root-project/root/pull/5248:83,safety,test,test,83,"@oshadura please see my comment, we wrote at the same time. Ok for your request to test on slc6 (please @maxgalli )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5248
https://github.com/root-project/root/pull/5248:83,testability,test,test,83,"@oshadura please see my comment, we wrote at the same time. Ok for your request to test on slc6 (please @maxgalli )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5248
https://github.com/root-project/root/pull/5248:48,safety,test,test,48,"LGTM @maxgalli thanks, please go ahead with the test on SLC6 with Python2.6.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5248
https://github.com/root-project/root/pull/5248:48,testability,test,test,48,"LGTM @maxgalli thanks, please go ahead with the test on SLC6 with Python2.6.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5248
https://github.com/root-project/root/pull/5248:0,safety,Test,Test,0,"Test on SL6 looks good, so LGTM from me as well!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5248
https://github.com/root-project/root/pull/5248:0,testability,Test,Test,0,"Test on SL6 looks good, so LGTM from me as well!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5248
https://github.com/root-project/root/pull/5248:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5248
https://github.com/root-project/root/pull/5249:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5249
https://github.com/root-project/root/pull/5252:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5252
https://github.com/root-project/root/pull/5252:103,energy efficiency,load,load,103,Going to be replaced by #5285. I keep this one a little longer around to figure out which libraries we load on mac.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5252
https://github.com/root-project/root/pull/5252:103,performance,load,load,103,Going to be replaced by #5285. I keep this one a little longer around to figure out which libraries we load on mac.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5252
https://github.com/root-project/root/pull/5253:0,availability,Failur,Failures,0,Failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5253
https://github.com/root-project/root/pull/5253:0,deployability,Fail,Failures,0,Failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5253
https://github.com/root-project/root/pull/5253:0,performance,Failur,Failures,0,Failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5253
https://github.com/root-project/root/pull/5253:0,reliability,Fail,Failures,0,Failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5253
https://github.com/root-project/root/pull/5255:83,energy efficiency,reduc,reduce,83,"To understand / reason about what cling / dictionaries see vs. compiler, we should reduce the asymmetry between cling and compiler, not increase it. E.g. hiding the definition of the vector element only for cling can mean code works compiled but not interpreted. I would be happier of you could replace the `#include`s both for cling and the compiler by forward declarations where possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:3,testability,understand,understand,3,"To understand / reason about what cling / dictionaries see vs. compiler, we should reduce the asymmetry between cling and compiler, not increase it. E.g. hiding the definition of the vector element only for cling can mean code works compiled but not interpreted. I would be happier of you could replace the `#include`s both for cling and the compiler by forward declarations where possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:146,energy efficiency,reduc,reduce,146,"> I would be happier of you could replace the #includes both for cling and the compiler by forward declarations where possible. Done. > we should reduce the asymmetry between cling and compiler, not increase it. Problem to keep external includes in such plugins - one never knows if such includes still there or at same place as they were before. Therefore if possible - I prefer to hide them from interpreter. Also long time ago cint simply was not able to parse all them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:254,interoperability,plug,plugins,254,"> I would be happier of you could replace the #includes both for cling and the compiler by forward declarations where possible. Done. > we should reduce the asymmetry between cling and compiler, not increase it. Problem to keep external includes in such plugins - one never knows if such includes still there or at same place as they were before. Therefore if possible - I prefer to hide them from interpreter. Also long time ago cint simply was not able to parse all them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:421,performance,time,time,421,"> I would be happier of you could replace the #includes both for cling and the compiler by forward declarations where possible. Done. > we should reduce the asymmetry between cling and compiler, not increase it. Problem to keep external includes in such plugins - one never knows if such includes still there or at same place as they were before. Therefore if possible - I prefer to hide them from interpreter. Also long time ago cint simply was not able to parse all them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:435,testability,simpl,simply,435,"> I would be happier of you could replace the #includes both for cling and the compiler by forward declarations where possible. Done. > we should reduce the asymmetry between cling and compiler, not increase it. Problem to keep external includes in such plugins - one never knows if such includes still there or at same place as they were before. Therefore if possible - I prefer to hide them from interpreter. Also long time ago cint simply was not able to parse all them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:373,usability,prefer,prefer,373,"> I would be happier of you could replace the #includes both for cling and the compiler by forward declarations where possible. Done. > we should reduce the asymmetry between cling and compiler, not increase it. Problem to keep external includes in such plugins - one never knows if such includes still there or at same place as they were before. Therefore if possible - I prefer to hide them from interpreter. Also long time ago cint simply was not able to parse all them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:435,usability,simpl,simply,435,"> I would be happier of you could replace the #includes both for cling and the compiler by forward declarations where possible. Done. > we should reduce the asymmetry between cling and compiler, not increase it. Problem to keep external includes in such plugins - one never knows if such includes still there or at same place as they were before. Therefore if possible - I prefer to hide them from interpreter. Also long time ago cint simply was not able to parse all them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:161,availability,failur,failure,161,"@hageboeck . > LGTM, I would advise squashing on merge. Why? These are three independent plugins and three commits. . It would be easier to patch if I will made failure in one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:140,deployability,patch,patch,140,"@hageboeck . > LGTM, I would advise squashing on merge. Why? These are three independent plugins and three commits. . It would be easier to patch if I will made failure in one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:161,deployability,fail,failure,161,"@hageboeck . > LGTM, I would advise squashing on merge. Why? These are three independent plugins and three commits. . It would be easier to patch if I will made failure in one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:89,interoperability,plug,plugins,89,"@hageboeck . > LGTM, I would advise squashing on merge. Why? These are three independent plugins and three commits. . It would be easier to patch if I will made failure in one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:161,performance,failur,failure,161,"@hageboeck . > LGTM, I would advise squashing on merge. Why? These are three independent plugins and three commits. . It would be easier to patch if I will made failure in one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:161,reliability,fail,failure,161,"@hageboeck . > LGTM, I would advise squashing on merge. Why? These are three independent plugins and three commits. . It would be easier to patch if I will made failure in one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:140,safety,patch,patch,140,"@hageboeck . > LGTM, I would advise squashing on merge. Why? These are three independent plugins and three commits. . It would be easier to patch if I will made failure in one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:140,security,patch,patch,140,"@hageboeck . > LGTM, I would advise squashing on merge. Why? These are three independent plugins and three commits. . It would be easier to patch if I will made failure in one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:174,availability,failur,failure,174,"> @hageboeck. > . > > LGTM, I would advise squashing on merge. > . > Why? These are three independent plugins and three commits. > It would be easier to patch if I will made failure in one. I see. Makes sense now. When you do a shallow review, it looks all the same.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:153,deployability,patch,patch,153,"> @hageboeck. > . > > LGTM, I would advise squashing on merge. > . > Why? These are three independent plugins and three commits. > It would be easier to patch if I will made failure in one. I see. Makes sense now. When you do a shallow review, it looks all the same.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:174,deployability,fail,failure,174,"> @hageboeck. > . > > LGTM, I would advise squashing on merge. > . > Why? These are three independent plugins and three commits. > It would be easier to patch if I will made failure in one. I see. Makes sense now. When you do a shallow review, it looks all the same.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:102,interoperability,plug,plugins,102,"> @hageboeck. > . > > LGTM, I would advise squashing on merge. > . > Why? These are three independent plugins and three commits. > It would be easier to patch if I will made failure in one. I see. Makes sense now. When you do a shallow review, it looks all the same.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:174,performance,failur,failure,174,"> @hageboeck. > . > > LGTM, I would advise squashing on merge. > . > Why? These are three independent plugins and three commits. > It would be easier to patch if I will made failure in one. I see. Makes sense now. When you do a shallow review, it looks all the same.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:174,reliability,fail,failure,174,"> @hageboeck. > . > > LGTM, I would advise squashing on merge. > . > Why? These are three independent plugins and three commits. > It would be easier to patch if I will made failure in one. I see. Makes sense now. When you do a shallow review, it looks all the same.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:153,safety,patch,patch,153,"> @hageboeck. > . > > LGTM, I would advise squashing on merge. > . > Why? These are three independent plugins and three commits. > It would be easier to patch if I will made failure in one. I see. Makes sense now. When you do a shallow review, it looks all the same.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:236,safety,review,review,236,"> @hageboeck. > . > > LGTM, I would advise squashing on merge. > . > Why? These are three independent plugins and three commits. > It would be easier to patch if I will made failure in one. I see. Makes sense now. When you do a shallow review, it looks all the same.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:153,security,patch,patch,153,"> @hageboeck. > . > > LGTM, I would advise squashing on merge. > . > Why? These are three independent plugins and three commits. > It would be easier to patch if I will made failure in one. I see. Makes sense now. When you do a shallow review, it looks all the same.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:236,testability,review,review,236,"> @hageboeck. > . > > LGTM, I would advise squashing on merge. > . > Why? These are three independent plugins and three commits. > It would be easier to patch if I will made failure in one. I see. Makes sense now. When you do a shallow review, it looks all the same.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:265,availability,state,state,265,> Problem to keep external includes in such plugins - one never knows if such includes still there or at same place as they were before. Therefore if possible - I prefer to hide them from interpreter. If we cannot parse a header at runtime then ROOT is in a broken state (think ACLiC). Hiding this from the interpreter isn't a fix.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:265,integrability,state,state,265,> Problem to keep external includes in such plugins - one never knows if such includes still there or at same place as they were before. Therefore if possible - I prefer to hide them from interpreter. If we cannot parse a header at runtime then ROOT is in a broken state (think ACLiC). Hiding this from the interpreter isn't a fix.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:44,interoperability,plug,plugins,44,> Problem to keep external includes in such plugins - one never knows if such includes still there or at same place as they were before. Therefore if possible - I prefer to hide them from interpreter. If we cannot parse a header at runtime then ROOT is in a broken state (think ACLiC). Hiding this from the interpreter isn't a fix.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:163,usability,prefer,prefer,163,> Problem to keep external includes in such plugins - one never knows if such includes still there or at same place as they were before. Therefore if possible - I prefer to hide them from interpreter. If we cannot parse a header at runtime then ROOT is in a broken state (think ACLiC). Hiding this from the interpreter isn't a fix.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:66,availability,state,state,66,> If we cannot parse a header at runtime then ROOT is in a broken state (think ACLiC). Hiding this from the interpreter isn't a fix. Then solution - fully remove such ifdefs where possible. . But then it will be absolutely different PR. I just tried to repair code and make it working as it was designed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:253,availability,repair,repair,253,> If we cannot parse a header at runtime then ROOT is in a broken state (think ACLiC). Hiding this from the interpreter isn't a fix. Then solution - fully remove such ifdefs where possible. . But then it will be absolutely different PR. I just tried to repair code and make it working as it was designed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:66,integrability,state,state,66,> If we cannot parse a header at runtime then ROOT is in a broken state (think ACLiC). Hiding this from the interpreter isn't a fix. Then solution - fully remove such ifdefs where possible. . But then it will be absolutely different PR. I just tried to repair code and make it working as it was designed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:253,reliability,repair,repair,253,> If we cannot parse a header at runtime then ROOT is in a broken state (think ACLiC). Hiding this from the interpreter isn't a fix. Then solution - fully remove such ifdefs where possible. . But then it will be absolutely different PR. I just tried to repair code and make it working as it was designed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:18,availability,repair,repair,18,> I just tried to repair code and make it working as it was designed. The design of moving from CINT to cling was to expose to cling what was hidden for CINT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:18,reliability,repair,repair,18,> I just tried to repair code and make it working as it was designed. The design of moving from CINT to cling was to expose to cling what was hidden for CINT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:117,security,expos,expose,117,> I just tried to repair code and make it working as it was designed. The design of moving from CINT to cling was to expose to cling what was hidden for CINT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:74,integrability,sub,submitting,74,"> > @bellenot There is Jenkins? > Weird, it disappeared... I had problems submitting comments a couple of hours ago - might be related. https://www.githubstatus.com/ doesn't mention anything related :-(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:96,integrability,coupl,couple,96,"> > @bellenot There is Jenkins? > Weird, it disappeared... I had problems submitting comments a couple of hours ago - might be related. https://www.githubstatus.com/ doesn't mention anything related :-(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:96,modifiability,coupl,couple,96,"> > @bellenot There is Jenkins? > Weird, it disappeared... I had problems submitting comments a couple of hours ago - might be related. https://www.githubstatus.com/ doesn't mention anything related :-(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:166,reliability,doe,doesn,166,"> > @bellenot There is Jenkins? > Weird, it disappeared... I had problems submitting comments a couple of hours ago - might be related. https://www.githubstatus.com/ doesn't mention anything related :-(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:96,testability,coupl,couple,96,"> > @bellenot There is Jenkins? > Weird, it disappeared... I had problems submitting comments a couple of hours ago - might be related. https://www.githubstatus.com/ doesn't mention anything related :-(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:49,security,expos,expose,49,> The design of moving from CINT to cling was to expose to cling what was hidden for CINT. Means I remove all ifdefs and let `cling` parse sql headers,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5255:37,interoperability,platform,platforms,37,Now all ifdef are removed - hope all platforms will survive,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5255
https://github.com/root-project/root/pull/5256:31,deployability,integr,integrate,31,Move the commit to PR #5252 to integrate the test with the root cause of the issue,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5256
https://github.com/root-project/root/pull/5256:31,integrability,integr,integrate,31,Move the commit to PR #5252 to integrate the test with the root cause of the issue,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5256
https://github.com/root-project/root/pull/5256:31,interoperability,integr,integrate,31,Move the commit to PR #5252 to integrate the test with the root cause of the issue,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5256
https://github.com/root-project/root/pull/5256:31,modifiability,integr,integrate,31,Move the commit to PR #5252 to integrate the test with the root cause of the issue,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5256
https://github.com/root-project/root/pull/5256:31,reliability,integr,integrate,31,Move the commit to PR #5252 to integrate the test with the root cause of the issue,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5256
https://github.com/root-project/root/pull/5256:45,safety,test,test,45,Move the commit to PR #5252 to integrate the test with the root cause of the issue,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5256
https://github.com/root-project/root/pull/5256:31,security,integr,integrate,31,Move the commit to PR #5252 to integrate the test with the root cause of the issue,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5256
https://github.com/root-project/root/pull/5256:31,testability,integr,integrate,31,Move the commit to PR #5252 to integrate the test with the root cause of the issue,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5256
https://github.com/root-project/root/pull/5256:45,testability,test,test,45,Move the commit to PR #5252 to integrate the test with the root cause of the issue,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5256
https://github.com/root-project/root/pull/5258:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5258
https://github.com/root-project/root/pull/5259:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5259
https://github.com/root-project/root/pull/5259:0,availability,Failur,Failure,0,Failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5259
https://github.com/root-project/root/pull/5259:0,deployability,Fail,Failure,0,Failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5259
https://github.com/root-project/root/pull/5259:0,performance,Failur,Failure,0,Failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5259
https://github.com/root-project/root/pull/5259:0,reliability,Fail,Failure,0,Failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5259
https://github.com/root-project/root/pull/5260:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5260
https://github.com/root-project/root/pull/5260:0,availability,failur,failures,0,failures and warnings are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5260
https://github.com/root-project/root/pull/5260:0,deployability,fail,failures,0,failures and warnings are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5260
https://github.com/root-project/root/pull/5260:0,performance,failur,failures,0,failures and warnings are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5260
https://github.com/root-project/root/pull/5260:0,reliability,fail,failures,0,failures and warnings are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5260
https://github.com/root-project/root/pull/5261:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5261
https://github.com/root-project/root/pull/5261:102,usability,prefer,preferred,102,We will need once to discuss this PR and https://github.com/root-project/root/pull/5249 . Do you have preferred solution? :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5261
https://github.com/root-project/root/pull/5261:63,usability,prefer,preferred,63,"> We will need once to discuss this PR and #5249 . Do you have preferred solution? :). Personally I find more clear #5249, but I get the point of @etejedor who prefers this, so I'm working mainly on this one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5261
https://github.com/root-project/root/pull/5261:87,usability,Person,Personally,87,"> We will need once to discuss this PR and #5249 . Do you have preferred solution? :). Personally I find more clear #5249, but I get the point of @etejedor who prefers this, so I'm working mainly on this one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5261
https://github.com/root-project/root/pull/5261:110,usability,clear,clear,110,"> We will need once to discuss this PR and #5249 . Do you have preferred solution? :). Personally I find more clear #5249, but I get the point of @etejedor who prefers this, so I'm working mainly on this one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5261
https://github.com/root-project/root/pull/5261:160,usability,prefer,prefers,160,"> We will need once to discuss this PR and #5249 . Do you have preferred solution? :). Personally I find more clear #5249, but I get the point of @etejedor who prefers this, so I'm working mainly on this one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5261
https://github.com/root-project/root/pull/5261:87,deployability,continu,continue,87,We can perhaps have a meeting to discuss the pros and cons of one and the other? Let's continue on mattermost.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5261
https://github.com/root-project/root/pull/5261:0,usability,close,closed,0,"closed for now, might be revisited later",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5261
https://github.com/root-project/root/pull/5263:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5263
https://github.com/root-project/root/pull/5264:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5264
https://github.com/root-project/root/pull/5266:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5266
https://github.com/root-project/root/pull/5267:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5267
https://github.com/root-project/root/pull/5269:30,reliability,DOE,DOES,30,To be clear - these changes **DOES NOT CHANGE** command provided to `rootcling`. Both `include_directories(` and `target_include_directories(libname ... )` will end up in rootcling command. . For the moment it is just expression that we do not need them for dictionary. All these changes only will have real effect after #5181. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5269:6,usability,clear,clear,6,To be clear - these changes **DOES NOT CHANGE** command provided to `rootcling`. Both `include_directories(` and `target_include_directories(libname ... )` will end up in rootcling command. . For the moment it is just expression that we do not need them for dictionary. All these changes only will have real effect after #5181. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5269:48,usability,command,command,48,To be clear - these changes **DOES NOT CHANGE** command provided to `rootcling`. Both `include_directories(` and `target_include_directories(libname ... )` will end up in rootcling command. . For the moment it is just expression that we do not need them for dictionary. All these changes only will have real effect after #5181. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5269:181,usability,command,command,181,To be clear - these changes **DOES NOT CHANGE** command provided to `rootcling`. Both `include_directories(` and `target_include_directories(libname ... )` will end up in rootcling command. . For the moment it is just expression that we do not need them for dictionary. All these changes only will have real effect after #5181. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5269:146,energy efficiency,Current,Currently,146,"@oshadura Axel was complaining about this commit https://github.com/root-project/root/pull/5269/commits/517f60faaa54b34667ceead6c3433ffc7c7aaa47. Currently MPI includes completely missing and only working while MPI normally found via standard include paths. @Axel-Naumann wants to have `target_include_directories`, but it is not enough here. If Axel mind - I can remove commit from PR, leaving problem for next PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5269:234,interoperability,standard,standard,234,"@oshadura Axel was complaining about this commit https://github.com/root-project/root/pull/5269/commits/517f60faaa54b34667ceead6c3433ffc7c7aaa47. Currently MPI includes completely missing and only working while MPI normally found via standard include paths. @Axel-Naumann wants to have `target_include_directories`, but it is not enough here. If Axel mind - I can remove commit from PR, leaving problem for next PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5269:19,safety,compl,complaining,19,"@oshadura Axel was complaining about this commit https://github.com/root-project/root/pull/5269/commits/517f60faaa54b34667ceead6c3433ffc7c7aaa47. Currently MPI includes completely missing and only working while MPI normally found via standard include paths. @Axel-Naumann wants to have `target_include_directories`, but it is not enough here. If Axel mind - I can remove commit from PR, leaving problem for next PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5269:169,safety,compl,completely,169,"@oshadura Axel was complaining about this commit https://github.com/root-project/root/pull/5269/commits/517f60faaa54b34667ceead6c3433ffc7c7aaa47. Currently MPI includes completely missing and only working while MPI normally found via standard include paths. @Axel-Naumann wants to have `target_include_directories`, but it is not enough here. If Axel mind - I can remove commit from PR, leaving problem for next PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5269:19,security,compl,complaining,19,"@oshadura Axel was complaining about this commit https://github.com/root-project/root/pull/5269/commits/517f60faaa54b34667ceead6c3433ffc7c7aaa47. Currently MPI includes completely missing and only working while MPI normally found via standard include paths. @Axel-Naumann wants to have `target_include_directories`, but it is not enough here. If Axel mind - I can remove commit from PR, leaving problem for next PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5269:169,security,compl,completely,169,"@oshadura Axel was complaining about this commit https://github.com/root-project/root/pull/5269/commits/517f60faaa54b34667ceead6c3433ffc7c7aaa47. Currently MPI includes completely missing and only working while MPI normally found via standard include paths. @Axel-Naumann wants to have `target_include_directories`, but it is not enough here. If Axel mind - I can remove commit from PR, leaving problem for next PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5269:253,safety,test,test,253,"Since Axel is a bit busy, lets do it without MPI. Last thing, can you please make more compact changes in graf3d/gl/CMakeLists.txt and graf3d/fgl/CMakeLists.txt (change separate target_include_directories in the single where it is possible) and we will test with full test suite and lets merge it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5269:268,safety,test,test,268,"Since Axel is a bit busy, lets do it without MPI. Last thing, can you please make more compact changes in graf3d/gl/CMakeLists.txt and graf3d/fgl/CMakeLists.txt (change separate target_include_directories in the single where it is possible) and we will test with full test suite and lets merge it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5269:253,testability,test,test,253,"Since Axel is a bit busy, lets do it without MPI. Last thing, can you please make more compact changes in graf3d/gl/CMakeLists.txt and graf3d/fgl/CMakeLists.txt (change separate target_include_directories in the single where it is possible) and we will test with full test suite and lets merge it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5269:268,testability,test,test,268,"Since Axel is a bit busy, lets do it without MPI. Last thing, can you please make more compact changes in graf3d/gl/CMakeLists.txt and graf3d/fgl/CMakeLists.txt (change separate target_include_directories in the single where it is possible) and we will test with full test suite and lets merge it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5269:16,interoperability,xml,xmlparser,16,"One last, in io/xmlparser, and we are good!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5269:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5269:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5269
https://github.com/root-project/root/pull/5271:6,deployability,version,version,6,Which version of cmake is running on WIndows?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:6,integrability,version,version,6,Which version of cmake is running on WIndows?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:6,modifiability,version,version,6,Which version of cmake is running on WIndows?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:39,availability,avail,available,39,Does actually VERSION_GREATER_EQUAL is available there? Can you try to change to VERSION_GREATER?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:0,reliability,Doe,Does,0,Does actually VERSION_GREATER_EQUAL is available there? Can you try to change to VERSION_GREATER?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:39,reliability,availab,available,39,Does actually VERSION_GREATER_EQUAL is available there? Can you try to change to VERSION_GREATER?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:39,safety,avail,available,39,Does actually VERSION_GREATER_EQUAL is available there? Can you try to change to VERSION_GREATER?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:39,security,availab,available,39,Does actually VERSION_GREATER_EQUAL is available there? Can you try to change to VERSION_GREATER?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:41,availability,avail,available,41,> Does actually VERSION_GREATER_EQUAL is available there? Can you try to change to VERSION_GREATER? I checked the documentation and VERSION_GREATER_EQUAL was introduced in 3.7. Since we require 3.9 it should always be available,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:218,availability,avail,available,218,> Does actually VERSION_GREATER_EQUAL is available there? Can you try to change to VERSION_GREATER? I checked the documentation and VERSION_GREATER_EQUAL was introduced in 3.7. Since we require 3.9 it should always be available,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:2,reliability,Doe,Does,2,> Does actually VERSION_GREATER_EQUAL is available there? Can you try to change to VERSION_GREATER? I checked the documentation and VERSION_GREATER_EQUAL was introduced in 3.7. Since we require 3.9 it should always be available,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:41,reliability,availab,available,41,> Does actually VERSION_GREATER_EQUAL is available there? Can you try to change to VERSION_GREATER? I checked the documentation and VERSION_GREATER_EQUAL was introduced in 3.7. Since we require 3.9 it should always be available,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:218,reliability,availab,available,218,> Does actually VERSION_GREATER_EQUAL is available there? Can you try to change to VERSION_GREATER? I checked the documentation and VERSION_GREATER_EQUAL was introduced in 3.7. Since we require 3.9 it should always be available,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:41,safety,avail,available,41,> Does actually VERSION_GREATER_EQUAL is available there? Can you try to change to VERSION_GREATER? I checked the documentation and VERSION_GREATER_EQUAL was introduced in 3.7. Since we require 3.9 it should always be available,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:218,safety,avail,available,218,> Does actually VERSION_GREATER_EQUAL is available there? Can you try to change to VERSION_GREATER? I checked the documentation and VERSION_GREATER_EQUAL was introduced in 3.7. Since we require 3.9 it should always be available,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:41,security,availab,available,41,> Does actually VERSION_GREATER_EQUAL is available there? Can you try to change to VERSION_GREATER? I checked the documentation and VERSION_GREATER_EQUAL was introduced in 3.7. Since we require 3.9 it should always be available,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:218,security,availab,available,218,> Does actually VERSION_GREATER_EQUAL is available there? Can you try to change to VERSION_GREATER? I checked the documentation and VERSION_GREATER_EQUAL was introduced in 3.7. Since we require 3.9 it should always be available,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5271:114,usability,document,documentation,114,> Does actually VERSION_GREATER_EQUAL is available there? Can you try to change to VERSION_GREATER? I checked the documentation and VERSION_GREATER_EQUAL was introduced in 3.7. Since we require 3.9 it should always be available,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5271
https://github.com/root-project/root/pull/5272:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5272
https://github.com/root-project/root/pull/5272:45,availability,failur,failures,45,"The PR looks good, thanks a lot! The windows failures are unrelated. I will merge after adding corresponding tests to roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5272
https://github.com/root-project/root/pull/5272:45,deployability,fail,failures,45,"The PR looks good, thanks a lot! The windows failures are unrelated. I will merge after adding corresponding tests to roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5272
https://github.com/root-project/root/pull/5272:45,performance,failur,failures,45,"The PR looks good, thanks a lot! The windows failures are unrelated. I will merge after adding corresponding tests to roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5272
https://github.com/root-project/root/pull/5272:45,reliability,fail,failures,45,"The PR looks good, thanks a lot! The windows failures are unrelated. I will merge after adding corresponding tests to roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5272
https://github.com/root-project/root/pull/5272:109,safety,test,tests,109,"The PR looks good, thanks a lot! The windows failures are unrelated. I will merge after adding corresponding tests to roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5272
https://github.com/root-project/root/pull/5272:109,testability,test,tests,109,"The PR looks good, thanks a lot! The windows failures are unrelated. I will merge after adding corresponding tests to roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5272
https://github.com/root-project/root/pull/5276:70,availability,servic,services,70,"@bellenot i don't know how, but [the windows PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74676/consoleFull) seems to show that xrootd is correctly turned off even after these changes. is that enough verification for you? (else, I'm not sure how to check that I'm not breaking windows)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:48,deployability,build,build,48,"@bellenot i don't know how, but [the windows PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74676/consoleFull) seems to show that xrootd is correctly turned off even after these changes. is that enough verification for you? (else, I'm not sure how to check that I'm not breaking windows)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:70,deployability,servic,services,70,"@bellenot i don't know how, but [the windows PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74676/consoleFull) seems to show that xrootd is correctly turned off even after these changes. is that enough verification for you? (else, I'm not sure how to check that I'm not breaking windows)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:122,deployability,build,build,122,"@bellenot i don't know how, but [the windows PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74676/consoleFull) seems to show that xrootd is correctly turned off even after these changes. is that enough verification for you? (else, I'm not sure how to check that I'm not breaking windows)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:70,integrability,servic,services,70,"@bellenot i don't know how, but [the windows PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74676/consoleFull) seems to show that xrootd is correctly turned off even after these changes. is that enough verification for you? (else, I'm not sure how to check that I'm not breaking windows)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:70,modifiability,servic,services,70,"@bellenot i don't know how, but [the windows PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74676/consoleFull) seems to show that xrootd is correctly turned off even after these changes. is that enough verification for you? (else, I'm not sure how to check that I'm not breaking windows)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:238,testability,verif,verification,238,"@bellenot i don't know how, but [the windows PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74676/consoleFull) seems to show that xrootd is correctly turned off even after these changes. is that enough verification for you? (else, I'm not sure how to check that I'm not breaking windows)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:72,availability,servic,services,72,"> @bellenot i don't know how, but [the windows PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74676/consoleFull) seems to show that xrootd is correctly turned off even after these changes. is that enough verification for you? Well, I think xrootd is explicitly disabled by the CI script on Windows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:50,deployability,build,build,50,"> @bellenot i don't know how, but [the windows PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74676/consoleFull) seems to show that xrootd is correctly turned off even after these changes. is that enough verification for you? Well, I think xrootd is explicitly disabled by the CI script on Windows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:72,deployability,servic,services,72,"> @bellenot i don't know how, but [the windows PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74676/consoleFull) seems to show that xrootd is correctly turned off even after these changes. is that enough verification for you? Well, I think xrootd is explicitly disabled by the CI script on Windows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:124,deployability,build,build,124,"> @bellenot i don't know how, but [the windows PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74676/consoleFull) seems to show that xrootd is correctly turned off even after these changes. is that enough verification for you? Well, I think xrootd is explicitly disabled by the CI script on Windows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:72,integrability,servic,services,72,"> @bellenot i don't know how, but [the windows PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74676/consoleFull) seems to show that xrootd is correctly turned off even after these changes. is that enough verification for you? Well, I think xrootd is explicitly disabled by the CI script on Windows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:72,modifiability,servic,services,72,"> @bellenot i don't know how, but [the windows PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74676/consoleFull) seems to show that xrootd is correctly turned off even after these changes. is that enough verification for you? Well, I think xrootd is explicitly disabled by the CI script on Windows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:240,testability,verif,verification,240,"> @bellenot i don't know how, but [the windows PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74676/consoleFull) seems to show that xrootd is correctly turned off even after these changes. is that enough verification for you? Well, I think xrootd is explicitly disabled by the CI script on Windows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:17,usability,clear,clear,17,sorry it was not clear to me that you were actually asking for this change. done.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:49,safety,review,review,49,@hageboeck done (in a separate commit for easier review of the changes),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:49,testability,review,review,49,@hageboeck done (in a separate commit for easier review of the changes),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5276:19,usability,clear,clear,19,"> sorry it was not clear to me that you were actually asking for this change. done. Thanks, but I was just asking if you wanted me to do it, not for you to do it... 😉 sorry for the misunderstanding...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5276
https://github.com/root-project/root/pull/5280:11,deployability,build,build,11,@phsft-bot build. Let's see if we can revive this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5280
https://github.com/root-project/root/pull/5280:155,safety,reme,remember,155,"> Let's see if we can revive this PR. Thank you for taking up this work again. I'd forgotten about it and I don't think I'll finish it myself. As far as I remember, I stopped when I was writing the test that was required. In the few cases that I tested by hand, it seemed to work but it's not at all impossible for the code to be buggy, hence the need to check it thoroughly with tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5280
https://github.com/root-project/root/pull/5280:198,safety,test,test,198,"> Let's see if we can revive this PR. Thank you for taking up this work again. I'd forgotten about it and I don't think I'll finish it myself. As far as I remember, I stopped when I was writing the test that was required. In the few cases that I tested by hand, it seemed to work but it's not at all impossible for the code to be buggy, hence the need to check it thoroughly with tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5280
https://github.com/root-project/root/pull/5280:246,safety,test,tested,246,"> Let's see if we can revive this PR. Thank you for taking up this work again. I'd forgotten about it and I don't think I'll finish it myself. As far as I remember, I stopped when I was writing the test that was required. In the few cases that I tested by hand, it seemed to work but it's not at all impossible for the code to be buggy, hence the need to check it thoroughly with tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5280
https://github.com/root-project/root/pull/5280:380,safety,test,tests,380,"> Let's see if we can revive this PR. Thank you for taking up this work again. I'd forgotten about it and I don't think I'll finish it myself. As far as I remember, I stopped when I was writing the test that was required. In the few cases that I tested by hand, it seemed to work but it's not at all impossible for the code to be buggy, hence the need to check it thoroughly with tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5280
https://github.com/root-project/root/pull/5280:198,testability,test,test,198,"> Let's see if we can revive this PR. Thank you for taking up this work again. I'd forgotten about it and I don't think I'll finish it myself. As far as I remember, I stopped when I was writing the test that was required. In the few cases that I tested by hand, it seemed to work but it's not at all impossible for the code to be buggy, hence the need to check it thoroughly with tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5280
https://github.com/root-project/root/pull/5280:246,testability,test,tested,246,"> Let's see if we can revive this PR. Thank you for taking up this work again. I'd forgotten about it and I don't think I'll finish it myself. As far as I remember, I stopped when I was writing the test that was required. In the few cases that I tested by hand, it seemed to work but it's not at all impossible for the code to be buggy, hence the need to check it thoroughly with tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5280
https://github.com/root-project/root/pull/5280:380,testability,test,tests,380,"> Let's see if we can revive this PR. Thank you for taking up this work again. I'd forgotten about it and I don't think I'll finish it myself. As far as I remember, I stopped when I was writing the test that was required. In the few cases that I tested by hand, it seemed to work but it's not at all impossible for the code to be buggy, hence the need to check it thoroughly with tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5280
https://github.com/root-project/root/pull/5280:167,usability,stop,stopped,167,"> Let's see if we can revive this PR. Thank you for taking up this work again. I'd forgotten about it and I don't think I'll finish it myself. As far as I remember, I stopped when I was writing the test that was required. In the few cases that I tested by hand, it seemed to work but it's not at all impossible for the code to be buggy, hence the need to check it thoroughly with tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5280
https://github.com/root-project/root/pull/5281:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5281
https://github.com/root-project/root/pull/5281:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5281
https://github.com/root-project/root/pull/5281:0,availability,Failur,Failures,0,"Failures seem unrelated, merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5281
https://github.com/root-project/root/pull/5281:0,deployability,Fail,Failures,0,"Failures seem unrelated, merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5281
https://github.com/root-project/root/pull/5281:0,performance,Failur,Failures,0,"Failures seem unrelated, merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5281
https://github.com/root-project/root/pull/5281:0,reliability,Fail,Failures,0,"Failures seem unrelated, merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5281
https://github.com/root-project/root/pull/5282:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos7-multicore/default.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5282
https://github.com/root-project/root/pull/5282:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5282
https://github.com/root-project/root/pull/5282:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5282
https://github.com/root-project/root/pull/5283:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:497,availability,error,error,497,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1283,availability,Error,Error,1283,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1430,availability,Error,Error,1430,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1454,availability,error,error,1454,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:503,deployability,log,logs,503,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:569,deployability,build,build,569,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:831,deployability,log,log,831,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1107,deployability,log,log,1107,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1151,deployability,log,log,1151,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1211,deployability,log,log,1211,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1314,deployability,fail,failed,1314,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1327,deployability,FAIL,FAILING,1327,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1460,deployability,log,logs,1460,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1042,energy efficiency,alloc,alloc,1042,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:439,interoperability,mismatch,mismatch,439,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:356,modifiability,refact,refactored,356,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:356,performance,refactor,refactored,356,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:497,performance,error,error,497,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1283,performance,Error,Error,1283,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1430,performance,Error,Error,1430,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1454,performance,error,error,1454,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1314,reliability,fail,failed,1314,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1327,reliability,FAIL,FAILING,1327,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:497,safety,error,error,497,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:503,safety,log,logs,503,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:831,safety,log,log,831,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1107,safety,log,log,1107,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1151,safety,log,log,1151,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1211,safety,log,log,1211,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1283,safety,Error,Error,1283,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1303,safety,test,tests,1303,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1335,safety,TEST,TEST,1335,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1430,safety,Error,Error,1430,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1454,safety,error,error,1454,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1460,safety,log,logs,1460,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:430,security,checksum,checksum,430,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:503,security,log,logs,503,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:831,security,log,log,831,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:931,security,checksum,checksum,931,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:994,security,checksum,checksum,994,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1107,security,log,log,1107,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1151,security,log,log,1151,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1211,security,log,log,1211,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1460,security,log,logs,1460,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1625,security,checksum,checksum,1625,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:503,testability,log,logs,503,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:831,testability,log,log,831,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1107,testability,log,log,1107,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1151,testability,log,log,1151,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1211,testability,log,log,1211,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1303,testability,test,tests,1303,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1335,testability,TEST,TEST,1335,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1460,testability,log,logs,1460,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:497,usability,error,error,497,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1283,usability,Error,Error,1283,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1430,usability,Error,Error,1430,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1454,usability,error,error,1454,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1707,usability,behavi,behaviour,1707,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:1744,usability,help,help,1744,"In https://github.com/root-project/root/pull/5283/files#diff-731544d47414211363492c1443589e15L132 is there any reason why there is no `property |= kIsArray;` ? (It is there in similar blocks like in TClingDataMemberInfo.cxx of this PR - https://github.com/root-project/root/pull/5283/files#diff-cb40dcc7a52ad261ee66558b009a961cL446 and also in the files I refactored in PR #5243 ). . If I add that line to the block, then I get a checksum mismatch on a streamer (if I am interpreting the roottest error logs correctly) - . ```. --- Using ROOT from /home/reik/root/root-build. --- root/io/double32/template32.ref	2019-12-28 12:45:09.779147688 +0530. +++ root/io/double32/template32.clog	2020-04-03 10:44:03.968974661 +0530. @@ -32,7 +32,7 @@. OBJ: TRealData	v2.regdouble	Description of persistent data members : 0 at: [deleted from log]. The following should be a Double32_t: Double32_t. . -StreamerInfo for class: m02<Double32_t>, checksum=0x8610c861. +StreamerInfo for class: m02<Double32_t>, checksum=0x4dcf66a2. map2<Double32_t,Double32_t,alloc<pair<Double32_t,Double32_t> > > BASE offset= [deleted from log] type= 0 . int fN offset= [deleted from log] type= 6 . vector<Double32_t> ff1 offset= [deleted from log] type=300 ,stl=1, ctype=9, . make[1]: *** [Makefile:84: template32] Error 1. At least 1 tests have failed:. --- FAILING TEST: make -C . template32. make: *** [/home/reik/root/roottest//scripts/Rules.mk:15: summary] Error 1. ```. Maybe the error logs can be fixed by changing the reference file here - https://github.com/root-project/roottest/blob/master/root/io/double32/template32.ref . But I think since the checksum is not matching, the streamers are also changing and perhaps that is not behaviour we want. . @pcanal Can you help please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:362,deployability,fail,failing,362,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:521,deployability,updat,update,521,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:573,deployability,version,version,573,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:650,deployability,upgrad,upgrade,650,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:666,deployability,version,version,666,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:573,integrability,version,version,573,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:666,integrability,version,version,666,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:64,modifiability,refact,refactoring,64,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:84,modifiability,refact,refactoring,84,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:573,modifiability,version,version,573,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:650,modifiability,upgrad,upgrade,650,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:666,modifiability,version,version,666,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:64,performance,refactor,refactoring,64,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:84,performance,refactor,refactoring,84,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:362,reliability,fail,failing,362,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:521,safety,updat,update,521,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:4,security,checksum,checksum,4,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:183,security,checksum,checksum,183,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:453,security,checksum,checksum,453,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:521,security,updat,update,521,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:605,security,checksum,checksums,605,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:212,testability,understand,understand,212,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:243,testability,verif,verify,243,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:104,usability,behavi,behavior,104,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:630,usability,user,users,630,"The checksum should apriori not be changing as a consequence of refactoring (so the refactoring and the behavior change (if it is warranted) should be separate commits. . If/when the checksum changes, we need to understand **exactly** why and verify that this is because the information in more precise/better than before (and not because of a bug .. eg. in the failing example I don't see (looking superficially) any array being involved). Note that a checksum change is a big deal and means that one would also need to update TStreamerInfo to allow a class with the same version number with 2 different checksums. Otherwise the users would need to upgrade all the version numbers of their classes (that are affected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:35,availability,error,error,35,Thanks so much @pcanal ! It was an error in my code. I fixed it :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:35,performance,error,error,35,Thanks so much @pcanal ! It was an error in my code. I fixed it :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:35,safety,error,error,35,Thanks so much @pcanal ! It was an error in my code. I fixed it :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:35,usability,error,error,35,Thanks so much @pcanal ! It was an error in my code. I fixed it :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5283:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5283
https://github.com/root-project/root/pull/5284:31,safety,review,review,31,@vgvassilev @bellenot . Please review this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:31,testability,review,review,31,@vgvassilev @bellenot . Please review this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:279,deployability,modul,modules,279,Thanks for your PR. You should use `requires !header_existence` clauses instead of commenting out header files. In longer terms we want to backport llvm-project/clang@bd5ee584068 from [D51910](https://reviews.llvm.org/D51910) where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:308,deployability,modul,modulemaps,308,Thanks for your PR. You should use `requires !header_existence` clauses instead of commenting out header files. In longer terms we want to backport llvm-project/clang@bd5ee584068 from [D51910](https://reviews.llvm.org/D51910) where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:239,interoperability,specif,specify,239,Thanks for your PR. You should use `requires !header_existence` clauses instead of commenting out header files. In longer terms we want to backport llvm-project/clang@bd5ee584068 from [D51910](https://reviews.llvm.org/D51910) where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:251,interoperability,platform,platform,251,Thanks for your PR. You should use `requires !header_existence` clauses instead of commenting out header files. In longer terms we want to backport llvm-project/clang@bd5ee584068 from [D51910](https://reviews.llvm.org/D51910) where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:279,modifiability,modul,modules,279,Thanks for your PR. You should use `requires !header_existence` clauses instead of commenting out header files. In longer terms we want to backport llvm-project/clang@bd5ee584068 from [D51910](https://reviews.llvm.org/D51910) where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:308,modifiability,modul,modulemaps,308,Thanks for your PR. You should use `requires !header_existence` clauses instead of commenting out header files. In longer terms we want to backport llvm-project/clang@bd5ee584068 from [D51910](https://reviews.llvm.org/D51910) where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:201,safety,review,reviews,201,Thanks for your PR. You should use `requires !header_existence` clauses instead of commenting out header files. In longer terms we want to backport llvm-project/clang@bd5ee584068 from [D51910](https://reviews.llvm.org/D51910) where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:279,safety,modul,modules,279,Thanks for your PR. You should use `requires !header_existence` clauses instead of commenting out header files. In longer terms we want to backport llvm-project/clang@bd5ee584068 from [D51910](https://reviews.llvm.org/D51910) where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:308,safety,modul,modulemaps,308,Thanks for your PR. You should use `requires !header_existence` clauses instead of commenting out header files. In longer terms we want to backport llvm-project/clang@bd5ee584068 from [D51910](https://reviews.llvm.org/D51910) where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:201,testability,review,reviews,201,Thanks for your PR. You should use `requires !header_existence` clauses instead of commenting out header files. In longer terms we want to backport llvm-project/clang@bd5ee584068 from [D51910](https://reviews.llvm.org/D51910) where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:125,energy efficiency,core,corecrt,125,"From what I found, . _CRT_BEGIN_C_HEADER is defined in vcruntime.h which is included indirectly,. The order being errno.h -> corecrt.h -> vcruntime.h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:11,deployability,build,build,11,"@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On. I am testing unrelated to this PR improvement to cdash. @gargvaibhav64, unfortunately we should take the longer route:. >In longer terms we want to backport llvm-project/clang@bd5ee58 from D51910 where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows. I can try doing this now and you should probably move your changes once we have it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:326,deployability,modul,modules,326,"@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On. I am testing unrelated to this PR improvement to cdash. @gargvaibhav64, unfortunately we should take the longer route:. >In longer terms we want to backport llvm-project/clang@bd5ee58 from D51910 where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows. I can try doing this now and you should probably move your changes once we have it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:355,deployability,modul,modulemaps,355,"@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On. I am testing unrelated to this PR improvement to cdash. @gargvaibhav64, unfortunately we should take the longer route:. >In longer terms we want to backport llvm-project/clang@bd5ee58 from D51910 where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows. I can try doing this now and you should probably move your changes once we have it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:189,integrability,rout,route,189,"@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On. I am testing unrelated to this PR improvement to cdash. @gargvaibhav64, unfortunately we should take the longer route:. >In longer terms we want to backport llvm-project/clang@bd5ee58 from D51910 where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows. I can try doing this now and you should probably move your changes once we have it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:286,interoperability,specif,specify,286,"@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On. I am testing unrelated to this PR improvement to cdash. @gargvaibhav64, unfortunately we should take the longer route:. >In longer terms we want to backport llvm-project/clang@bd5ee58 from D51910 where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows. I can try doing this now and you should probably move your changes once we have it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:298,interoperability,platform,platform,298,"@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On. I am testing unrelated to this PR improvement to cdash. @gargvaibhav64, unfortunately we should take the longer route:. >In longer terms we want to backport llvm-project/clang@bd5ee58 from D51910 where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows. I can try doing this now and you should probably move your changes once we have it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:326,modifiability,modul,modules,326,"@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On. I am testing unrelated to this PR improvement to cdash. @gargvaibhav64, unfortunately we should take the longer route:. >In longer terms we want to backport llvm-project/clang@bd5ee58 from D51910 where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows. I can try doing this now and you should probably move your changes once we have it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:355,modifiability,modul,modulemaps,355,"@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On. I am testing unrelated to this PR improvement to cdash. @gargvaibhav64, unfortunately we should take the longer route:. >In longer terms we want to backport llvm-project/clang@bd5ee58 from D51910 where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows. I can try doing this now and you should probably move your changes once we have it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:82,safety,test,testing,82,"@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On. I am testing unrelated to this PR improvement to cdash. @gargvaibhav64, unfortunately we should take the longer route:. >In longer terms we want to backport llvm-project/clang@bd5ee58 from D51910 where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows. I can try doing this now and you should probably move your changes once we have it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:326,safety,modul,modules,326,"@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On. I am testing unrelated to this PR improvement to cdash. @gargvaibhav64, unfortunately we should take the longer route:. >In longer terms we want to backport llvm-project/clang@bd5ee58 from D51910 where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows. I can try doing this now and you should probably move your changes once we have it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:355,safety,modul,modulemaps,355,"@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On. I am testing unrelated to this PR improvement to cdash. @gargvaibhav64, unfortunately we should take the longer route:. >In longer terms we want to backport llvm-project/clang@bd5ee58 from D51910 where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows. I can try doing this now and you should probably move your changes once we have it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5284:82,testability,test,testing,82,"@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On. I am testing unrelated to this PR improvement to cdash. @gargvaibhav64, unfortunately we should take the longer route:. >In longer terms we want to backport llvm-project/clang@bd5ee58 from D51910 where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows. I can try doing this now and you should probably move your changes once we have it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5284
https://github.com/root-project/root/pull/5285:73,availability,down,down,73,Regarding the failing test on mac: mac just imports stuff ... i'll track down whether it's us or pulled in by the system.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5285
https://github.com/root-project/root/pull/5285:14,deployability,fail,failing,14,Regarding the failing test on mac: mac just imports stuff ... i'll track down whether it's us or pulled in by the system.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5285
https://github.com/root-project/root/pull/5285:14,reliability,fail,failing,14,Regarding the failing test on mac: mac just imports stuff ... i'll track down whether it's us or pulled in by the system.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5285
https://github.com/root-project/root/pull/5285:22,safety,test,test,22,Regarding the failing test on mac: mac just imports stuff ... i'll track down whether it's us or pulled in by the system.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5285
https://github.com/root-project/root/pull/5285:22,testability,test,test,22,Regarding the failing test on mac: mac just imports stuff ... i'll track down whether it's us or pulled in by the system.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5285
https://github.com/root-project/root/pull/5288:361,performance,concurren,concurrent,361,"Thanks @hageboeck . I really need @pcanal 's and/or @etejedor 's stamp of approval on this one. It lays the groundwork for fixing [ROOT-10656](https://sft.its.cern.ch/jira/browse/ROOT-10656), but more importantly it's meant to spark a discussion about whether we need `TParTreeProcessingRAII` and related methods at all. I don't think we do: TTreeProcessorMT's concurrent usage of TFile is not/should not be special.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:446,modifiability,paramet,parameter,446,"This pattern was/is intentional (see text from ab4359707d324a19a21a1fea7e59a8e07eaf9673). The idea is to avoid **all** user to pay the price of the lock taking when only the IMT/TTree code is supposed to leverage it. For all other use cases, we support 'only' the case one thread per TFile. To properly support (in a fair way to those not using it) the general case, we would actually need to be much more generic (i.e. a TLockedFile or a switch/parameter to TFile ... in this later view, switching the global test for a more local one may be helpful).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:148,performance,lock,lock,148,"This pattern was/is intentional (see text from ab4359707d324a19a21a1fea7e59a8e07eaf9673). The idea is to avoid **all** user to pay the price of the lock taking when only the IMT/TTree code is supposed to leverage it. For all other use cases, we support 'only' the case one thread per TFile. To properly support (in a fair way to those not using it) the general case, we would actually need to be much more generic (i.e. a TLockedFile or a switch/parameter to TFile ... in this later view, switching the global test for a more local one may be helpful).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:105,safety,avoid,avoid,105,"This pattern was/is intentional (see text from ab4359707d324a19a21a1fea7e59a8e07eaf9673). The idea is to avoid **all** user to pay the price of the lock taking when only the IMT/TTree code is supposed to leverage it. For all other use cases, we support 'only' the case one thread per TFile. To properly support (in a fair way to those not using it) the general case, we would actually need to be much more generic (i.e. a TLockedFile or a switch/parameter to TFile ... in this later view, switching the global test for a more local one may be helpful).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:510,safety,test,test,510,"This pattern was/is intentional (see text from ab4359707d324a19a21a1fea7e59a8e07eaf9673). The idea is to avoid **all** user to pay the price of the lock taking when only the IMT/TTree code is supposed to leverage it. For all other use cases, we support 'only' the case one thread per TFile. To properly support (in a fair way to those not using it) the general case, we would actually need to be much more generic (i.e. a TLockedFile or a switch/parameter to TFile ... in this later view, switching the global test for a more local one may be helpful).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:148,security,lock,lock,148,"This pattern was/is intentional (see text from ab4359707d324a19a21a1fea7e59a8e07eaf9673). The idea is to avoid **all** user to pay the price of the lock taking when only the IMT/TTree code is supposed to leverage it. For all other use cases, we support 'only' the case one thread per TFile. To properly support (in a fair way to those not using it) the general case, we would actually need to be much more generic (i.e. a TLockedFile or a switch/parameter to TFile ... in this later view, switching the global test for a more local one may be helpful).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:510,testability,test,test,510,"This pattern was/is intentional (see text from ab4359707d324a19a21a1fea7e59a8e07eaf9673). The idea is to avoid **all** user to pay the price of the lock taking when only the IMT/TTree code is supposed to leverage it. For all other use cases, we support 'only' the case one thread per TFile. To properly support (in a fair way to those not using it) the general case, we would actually need to be much more generic (i.e. a TLockedFile or a switch/parameter to TFile ... in this later view, switching the global test for a more local one may be helpful).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:119,usability,user,user,119,"This pattern was/is intentional (see text from ab4359707d324a19a21a1fea7e59a8e07eaf9673). The idea is to avoid **all** user to pay the price of the lock taking when only the IMT/TTree code is supposed to leverage it. For all other use cases, we support 'only' the case one thread per TFile. To properly support (in a fair way to those not using it) the general case, we would actually need to be much more generic (i.e. a TLockedFile or a switch/parameter to TFile ... in this later view, switching the global test for a more local one may be helpful).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:245,usability,support,support,245,"This pattern was/is intentional (see text from ab4359707d324a19a21a1fea7e59a8e07eaf9673). The idea is to avoid **all** user to pay the price of the lock taking when only the IMT/TTree code is supposed to leverage it. For all other use cases, we support 'only' the case one thread per TFile. To properly support (in a fair way to those not using it) the general case, we would actually need to be much more generic (i.e. a TLockedFile or a switch/parameter to TFile ... in this later view, switching the global test for a more local one may be helpful).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:303,usability,support,support,303,"This pattern was/is intentional (see text from ab4359707d324a19a21a1fea7e59a8e07eaf9673). The idea is to avoid **all** user to pay the price of the lock taking when only the IMT/TTree code is supposed to leverage it. For all other use cases, we support 'only' the case one thread per TFile. To properly support (in a fair way to those not using it) the general case, we would actually need to be much more generic (i.e. a TLockedFile or a switch/parameter to TFile ... in this later view, switching the global test for a more local one may be helpful).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:543,usability,help,helpful,543,"This pattern was/is intentional (see text from ab4359707d324a19a21a1fea7e59a8e07eaf9673). The idea is to avoid **all** user to pay the price of the lock taking when only the IMT/TTree code is supposed to leverage it. For all other use cases, we support 'only' the case one thread per TFile. To properly support (in a fair way to those not using it) the general case, we would actually need to be much more generic (i.e. a TLockedFile or a switch/parameter to TFile ... in this later view, switching the global test for a more local one may be helpful).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:19,integrability,messag,message,19,"@pcanal the commit message does not say why the locks are needed in the first place. from your comment, I'm starting to think that we do not need these locks at all (anymore?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:19,interoperability,messag,message,19,"@pcanal the commit message does not say why the locks are needed in the first place. from your comment, I'm starting to think that we do not need these locks at all (anymore?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:48,performance,lock,locks,48,"@pcanal the commit message does not say why the locks are needed in the first place. from your comment, I'm starting to think that we do not need these locks at all (anymore?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:152,performance,lock,locks,152,"@pcanal the commit message does not say why the locks are needed in the first place. from your comment, I'm starting to think that we do not need these locks at all (anymore?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:27,reliability,doe,does,27,"@pcanal the commit message does not say why the locks are needed in the first place. from your comment, I'm starting to think that we do not need these locks at all (anymore?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:48,security,lock,locks,48,"@pcanal the commit message does not say why the locks are needed in the first place. from your comment, I'm starting to think that we do not need these locks at all (anymore?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:152,security,lock,locks,152,"@pcanal the commit message does not say why the locks are needed in the first place. from your comment, I'm starting to think that we do not need these locks at all (anymore?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:25,performance,parallel,parallel,25,"If the file is access in parallel (which it is when IMT is on, for example for GetEntry) then that section **needs** to be protected otherwise you have a list that is being read and written to at the same time. [What I meant to add is that it is plausible that for the TFile use of R__RWLOCK_ACQUIRE_READ/Write, one could consider replacing the```if (ROOT::Internal::IsParTreeProcessingEnabled()``` which ```if (this->TestBit(kEnableMultiThreadAccess))``` ... maybe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:205,performance,time,time,205,"If the file is access in parallel (which it is when IMT is on, for example for GetEntry) then that section **needs** to be protected otherwise you have a list that is being read and written to at the same time. [What I meant to add is that it is plausible that for the TFile use of R__RWLOCK_ACQUIRE_READ/Write, one could consider replacing the```if (ROOT::Internal::IsParTreeProcessingEnabled()``` which ```if (this->TestBit(kEnableMultiThreadAccess))``` ... maybe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:418,safety,Test,TestBit,418,"If the file is access in parallel (which it is when IMT is on, for example for GetEntry) then that section **needs** to be protected otherwise you have a list that is being read and written to at the same time. [What I meant to add is that it is plausible that for the TFile use of R__RWLOCK_ACQUIRE_READ/Write, one could consider replacing the```if (ROOT::Internal::IsParTreeProcessingEnabled()``` which ```if (this->TestBit(kEnableMultiThreadAccess))``` ... maybe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:15,security,access,access,15,"If the file is access in parallel (which it is when IMT is on, for example for GetEntry) then that section **needs** to be protected otherwise you have a list that is being read and written to at the same time. [What I meant to add is that it is plausible that for the TFile use of R__RWLOCK_ACQUIRE_READ/Write, one could consider replacing the```if (ROOT::Internal::IsParTreeProcessingEnabled()``` which ```if (this->TestBit(kEnableMultiThreadAccess))``` ... maybe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:418,testability,Test,TestBit,418,"If the file is access in parallel (which it is when IMT is on, for example for GetEntry) then that section **needs** to be protected otherwise you have a list that is being read and written to at the same time. [What I meant to add is that it is plausible that for the TFile use of R__RWLOCK_ACQUIRE_READ/Write, one could consider replacing the```if (ROOT::Internal::IsParTreeProcessingEnabled()``` which ```if (this->TestBit(kEnableMultiThreadAccess))``` ... maybe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:78,performance,concurren,concurrently,78,"@pcanal can you point me to the part of the code that accesses the same TFile concurrently? Since I'm with ROOT we have been very careful to follow the ""one file per thread"" rule.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:54,security,access,accesses,54,"@pcanal can you point me to the part of the code that accesses the same TFile concurrently? Since I'm with ROOT we have been very careful to follow the ""one file per thread"" rule.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:8,deployability,version,version,8,The IMT version of TTree::GetEntry https://root.cern.ch/doc/master/classTTree.html#a9fc48df5560fce1a2d63ecd1ac5b40cb calls TBranch::GetEntry in multiple thread which each calls the streaming which each can trigger calls to TFile::ReadProcessID on the same file. I.e. TTree::GetEntry IMT *by definition*/*by construction* does not fall the one thread/one file pattern :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:8,integrability,version,version,8,The IMT version of TTree::GetEntry https://root.cern.ch/doc/master/classTTree.html#a9fc48df5560fce1a2d63ecd1ac5b40cb calls TBranch::GetEntry in multiple thread which each calls the streaming which each can trigger calls to TFile::ReadProcessID on the same file. I.e. TTree::GetEntry IMT *by definition*/*by construction* does not fall the one thread/one file pattern :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:8,modifiability,version,version,8,The IMT version of TTree::GetEntry https://root.cern.ch/doc/master/classTTree.html#a9fc48df5560fce1a2d63ecd1ac5b40cb calls TBranch::GetEntry in multiple thread which each calls the streaming which each can trigger calls to TFile::ReadProcessID on the same file. I.e. TTree::GetEntry IMT *by definition*/*by construction* does not fall the one thread/one file pattern :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:321,reliability,doe,does,321,The IMT version of TTree::GetEntry https://root.cern.ch/doc/master/classTTree.html#a9fc48df5560fce1a2d63ecd1ac5b40cb calls TBranch::GetEntry in multiple thread which each calls the streaming which each can trigger calls to TFile::ReadProcessID on the same file. I.e. TTree::GetEntry IMT *by definition*/*by construction* does not fall the one thread/one file pattern :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:200,performance,lock,locks,200,"As far as I can tell, the only place in all of ROOT that creates a `TParTreeProcessingRAII` is `TTreeProcessorMT::Process`. `TTree::GetEntry` does not, for instance. So if `TTree::GetEntry` needs the locks enabled by `TParTreeProcessingRAII` when implicit multi-threading is enabled, calling `TTree::GetEntry` after `ROOT::EnableImplicitMT` (outside of `TTreeProcessorMT::Process`) is broken.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:256,performance,multi-thread,multi-threading,256,"As far as I can tell, the only place in all of ROOT that creates a `TParTreeProcessingRAII` is `TTreeProcessorMT::Process`. `TTree::GetEntry` does not, for instance. So if `TTree::GetEntry` needs the locks enabled by `TParTreeProcessingRAII` when implicit multi-threading is enabled, calling `TTree::GetEntry` after `ROOT::EnableImplicitMT` (outside of `TTreeProcessorMT::Process`) is broken.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:142,reliability,doe,does,142,"As far as I can tell, the only place in all of ROOT that creates a `TParTreeProcessingRAII` is `TTreeProcessorMT::Process`. `TTree::GetEntry` does not, for instance. So if `TTree::GetEntry` needs the locks enabled by `TParTreeProcessingRAII` when implicit multi-threading is enabled, calling `TTree::GetEntry` after `ROOT::EnableImplicitMT` (outside of `TTreeProcessorMT::Process`) is broken.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:200,security,lock,locks,200,"As far as I can tell, the only place in all of ROOT that creates a `TParTreeProcessingRAII` is `TTreeProcessorMT::Process`. `TTree::GetEntry` does not, for instance. So if `TTree::GetEntry` needs the locks enabled by `TParTreeProcessingRAII` when implicit multi-threading is enabled, calling `TTree::GetEntry` after `ROOT::EnableImplicitMT` (outside of `TTreeProcessorMT::Process`) is broken.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:131,interoperability,exchang,exchange,131,"@eguiraud I was indeed confused between TParTreeProcessingRAII and TParBranchProcessingRAII ... but my point still stand with word exchange (i.e. that lock (seems) to be only needed for the use case where the TFile can be access by multiple thread via the TTreeProcessMT, and even though it might be useful/necessary in other cases (like IMT GetEntry) it is definitively not need in the regular case and thus should be optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:151,performance,lock,lock,151,"@eguiraud I was indeed confused between TParTreeProcessingRAII and TParBranchProcessingRAII ... but my point still stand with word exchange (i.e. that lock (seems) to be only needed for the use case where the TFile can be access by multiple thread via the TTreeProcessMT, and even though it might be useful/necessary in other cases (like IMT GetEntry) it is definitively not need in the regular case and thus should be optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:151,security,lock,lock,151,"@eguiraud I was indeed confused between TParTreeProcessingRAII and TParBranchProcessingRAII ... but my point still stand with word exchange (i.e. that lock (seems) to be only needed for the use case where the TFile can be access by multiple thread via the TTreeProcessMT, and even though it might be useful/necessary in other cases (like IMT GetEntry) it is definitively not need in the regular case and thus should be optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:222,security,access,access,222,"@eguiraud I was indeed confused between TParTreeProcessingRAII and TParBranchProcessingRAII ... but my point still stand with word exchange (i.e. that lock (seems) to be only needed for the use case where the TFile can be access by multiple thread via the TTreeProcessMT, and even though it might be useful/necessary in other cases (like IMT GetEntry) it is definitively not need in the regular case and thus should be optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:129,performance,lock,locks,129,@pcanal but then we are back to my point that TTreeProcessorMT does not do that kind of access and should not need these special locks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:63,reliability,doe,does,63,@pcanal but then we are back to my point that TTreeProcessorMT does not do that kind of access and should not need these special locks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:88,security,access,access,88,@pcanal but then we are back to my point that TTreeProcessorMT does not do that kind of access and should not need these special locks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:129,security,lock,locks,129,@pcanal but then we are back to my point that TTreeProcessorMT does not do that kind of access and should not need these special locks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:305,performance,lock,lock,305,"humm ... I see ... @etejedor (and likely me :) ) seems to have thought it was needed in 2016 (7dec9bd96090a5bedac1c8a17b8154d39b6ef865) ... . However indeed the doc is clear (even back then): "" so that each thread works with its own TFile and TTree objects"". So back to reading the protected code and the lock is actually protecting the global list of pids. ... so now trying to remember why we elected to have a lock local to TFile protects this global ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:413,performance,lock,lock,413,"humm ... I see ... @etejedor (and likely me :) ) seems to have thought it was needed in 2016 (7dec9bd96090a5bedac1c8a17b8154d39b6ef865) ... . However indeed the doc is clear (even back then): "" so that each thread works with its own TFile and TTree objects"". So back to reading the protected code and the lock is actually protecting the global list of pids. ... so now trying to remember why we elected to have a lock local to TFile protects this global ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:379,safety,reme,remember,379,"humm ... I see ... @etejedor (and likely me :) ) seems to have thought it was needed in 2016 (7dec9bd96090a5bedac1c8a17b8154d39b6ef865) ... . However indeed the doc is clear (even back then): "" so that each thread works with its own TFile and TTree objects"". So back to reading the protected code and the lock is actually protecting the global list of pids. ... so now trying to remember why we elected to have a lock local to TFile protects this global ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:305,security,lock,lock,305,"humm ... I see ... @etejedor (and likely me :) ) seems to have thought it was needed in 2016 (7dec9bd96090a5bedac1c8a17b8154d39b6ef865) ... . However indeed the doc is clear (even back then): "" so that each thread works with its own TFile and TTree objects"". So back to reading the protected code and the lock is actually protecting the global list of pids. ... so now trying to remember why we elected to have a lock local to TFile protects this global ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:413,security,lock,lock,413,"humm ... I see ... @etejedor (and likely me :) ) seems to have thought it was needed in 2016 (7dec9bd96090a5bedac1c8a17b8154d39b6ef865) ... . However indeed the doc is clear (even back then): "" so that each thread works with its own TFile and TTree objects"". So back to reading the protected code and the lock is actually protecting the global list of pids. ... so now trying to remember why we elected to have a lock local to TFile protects this global ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:168,usability,clear,clear,168,"humm ... I see ... @etejedor (and likely me :) ) seems to have thought it was needed in 2016 (7dec9bd96090a5bedac1c8a17b8154d39b6ef865) ... . However indeed the doc is clear (even back then): "" so that each thread works with its own TFile and TTree objects"". So back to reading the protected code and the lock is actually protecting the global list of pids. ... so now trying to remember why we elected to have a lock local to TFile protects this global ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:207,availability,restor,restore,207,"FYI a related discussion from back then:. ""Should TTreeProcessor disable ParTreeProcessing once Process() is done? If so, maybe these functions should be an RAII instead of a pair of enable/disable (also to restore correctly to the *previous* state instead of enable/disable). This was discussed during the parallelisation meetings, and the point here is that it is safer to activate it the first time Process() is called and never deactivate it. The reason is people might call this method from different threads, and if we do activate-deactivate there could be interleaving of the two Process() calls. This could potentially deactivate the locks in one call when they are still needed in the other call. Sounds like you just need an atomic use count? If there is a cost associated to turning this mode on then it would still be better to turn it off once it's not needed anymore."".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:243,availability,state,state,243,"FYI a related discussion from back then:. ""Should TTreeProcessor disable ParTreeProcessing once Process() is done? If so, maybe these functions should be an RAII instead of a pair of enable/disable (also to restore correctly to the *previous* state instead of enable/disable). This was discussed during the parallelisation meetings, and the point here is that it is safer to activate it the first time Process() is called and never deactivate it. The reason is people might call this method from different threads, and if we do activate-deactivate there could be interleaving of the two Process() calls. This could potentially deactivate the locks in one call when they are still needed in the other call. Sounds like you just need an atomic use count? If there is a cost associated to turning this mode on then it would still be better to turn it off once it's not needed anymore."".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:243,integrability,state,state,243,"FYI a related discussion from back then:. ""Should TTreeProcessor disable ParTreeProcessing once Process() is done? If so, maybe these functions should be an RAII instead of a pair of enable/disable (also to restore correctly to the *previous* state instead of enable/disable). This was discussed during the parallelisation meetings, and the point here is that it is safer to activate it the first time Process() is called and never deactivate it. The reason is people might call this method from different threads, and if we do activate-deactivate there could be interleaving of the two Process() calls. This could potentially deactivate the locks in one call when they are still needed in the other call. Sounds like you just need an atomic use count? If there is a cost associated to turning this mode on then it would still be better to turn it off once it's not needed anymore."".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:307,performance,parallel,parallelisation,307,"FYI a related discussion from back then:. ""Should TTreeProcessor disable ParTreeProcessing once Process() is done? If so, maybe these functions should be an RAII instead of a pair of enable/disable (also to restore correctly to the *previous* state instead of enable/disable). This was discussed during the parallelisation meetings, and the point here is that it is safer to activate it the first time Process() is called and never deactivate it. The reason is people might call this method from different threads, and if we do activate-deactivate there could be interleaving of the two Process() calls. This could potentially deactivate the locks in one call when they are still needed in the other call. Sounds like you just need an atomic use count? If there is a cost associated to turning this mode on then it would still be better to turn it off once it's not needed anymore."".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:397,performance,time,time,397,"FYI a related discussion from back then:. ""Should TTreeProcessor disable ParTreeProcessing once Process() is done? If so, maybe these functions should be an RAII instead of a pair of enable/disable (also to restore correctly to the *previous* state instead of enable/disable). This was discussed during the parallelisation meetings, and the point here is that it is safer to activate it the first time Process() is called and never deactivate it. The reason is people might call this method from different threads, and if we do activate-deactivate there could be interleaving of the two Process() calls. This could potentially deactivate the locks in one call when they are still needed in the other call. Sounds like you just need an atomic use count? If there is a cost associated to turning this mode on then it would still be better to turn it off once it's not needed anymore."".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:642,performance,lock,locks,642,"FYI a related discussion from back then:. ""Should TTreeProcessor disable ParTreeProcessing once Process() is done? If so, maybe these functions should be an RAII instead of a pair of enable/disable (also to restore correctly to the *previous* state instead of enable/disable). This was discussed during the parallelisation meetings, and the point here is that it is safer to activate it the first time Process() is called and never deactivate it. The reason is people might call this method from different threads, and if we do activate-deactivate there could be interleaving of the two Process() calls. This could potentially deactivate the locks in one call when they are still needed in the other call. Sounds like you just need an atomic use count? If there is a cost associated to turning this mode on then it would still be better to turn it off once it's not needed anymore."".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:207,reliability,restor,restore,207,"FYI a related discussion from back then:. ""Should TTreeProcessor disable ParTreeProcessing once Process() is done? If so, maybe these functions should be an RAII instead of a pair of enable/disable (also to restore correctly to the *previous* state instead of enable/disable). This was discussed during the parallelisation meetings, and the point here is that it is safer to activate it the first time Process() is called and never deactivate it. The reason is people might call this method from different threads, and if we do activate-deactivate there could be interleaving of the two Process() calls. This could potentially deactivate the locks in one call when they are still needed in the other call. Sounds like you just need an atomic use count? If there is a cost associated to turning this mode on then it would still be better to turn it off once it's not needed anymore."".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:366,safety,safe,safer,366,"FYI a related discussion from back then:. ""Should TTreeProcessor disable ParTreeProcessing once Process() is done? If so, maybe these functions should be an RAII instead of a pair of enable/disable (also to restore correctly to the *previous* state instead of enable/disable). This was discussed during the parallelisation meetings, and the point here is that it is safer to activate it the first time Process() is called and never deactivate it. The reason is people might call this method from different threads, and if we do activate-deactivate there could be interleaving of the two Process() calls. This could potentially deactivate the locks in one call when they are still needed in the other call. Sounds like you just need an atomic use count? If there is a cost associated to turning this mode on then it would still be better to turn it off once it's not needed anymore."".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:642,security,lock,locks,642,"FYI a related discussion from back then:. ""Should TTreeProcessor disable ParTreeProcessing once Process() is done? If so, maybe these functions should be an RAII instead of a pair of enable/disable (also to restore correctly to the *previous* state instead of enable/disable). This was discussed during the parallelisation meetings, and the point here is that it is safer to activate it the first time Process() is called and never deactivate it. The reason is people might call this method from different threads, and if we do activate-deactivate there could be interleaving of the two Process() calls. This could potentially deactivate the locks in one call when they are still needed in the other call. Sounds like you just need an atomic use count? If there is a cost associated to turning this mode on then it would still be better to turn it off once it's not needed anymore."".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:36,deployability,patch,patch,36,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:867,energy efficiency,current,currently,867,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:564,integrability,interfac,interfaces,564,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:564,interoperability,interfac,interfaces,564,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:203,modifiability,scal,scaling,203,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:445,modifiability,extens,extension,445,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:564,modifiability,interfac,interfaces,564,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:128,performance,multi-thread,multi-threading,128,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:191,performance,perform,performance,191,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:299,performance,lock,locks,299,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:320,performance,time,time,320,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:358,performance,lock,lock,358,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:742,performance,lock,lock,742,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:808,performance,lock,lock,808,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:42,reliability,doe,does,42,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:36,safety,patch,patch,36,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:36,security,patch,patch,36,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:299,security,lock,locks,299,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:358,security,lock,lock,358,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:742,security,lock,lock,742,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:808,security,lock,lock,808,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:191,usability,perform,performance,191,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:598,usability,user,user,598,"so .... in short your right and the patch does not go far enough. historically TTreeProcessor[MT] was (one of) the first to use multi-threading on TFile. TFile::ReadProcessID was found to be performance/scaling critical so much so that it lead to the introduction of the SpinLocks and the ReadWrite locks ... and at the time there was no point in having the lock taken when that code was not active ... Obviously this is no longer the case. The extension of the use case means that actually we need to protect TFile::ReadProcessID from other use of the TProcessID interfaces (the only other direct user of the collection ```TProcessID::GetPIDs```. This means that we should probably no longer rely on ```TFile::ReadProcessID``` using its own lock. . Also related, we ought to actually leverage the ReadWrite lock in TProcessID.cxx where some of the write section are currently too long, some are missing and some items likely need to become atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:354,performance,concurren,concurrently,354,"Without ~realistic benchmarks that we can use to judge the impact of these interventions, I'm reluctant to propose changes in such important sections of the code. On the other hand, differently from what the discussion from 2016 that you reported above assumes:. 1. we do not test (nor design for) the usecase of `TTreeProcessorMT::Process` being called concurrently, or other threads accessing the same `TFile` objects that `TTreeProcessorMT::Process` is using. in other words, that's not a real usecase. 2. `TTreeProcessorMT::Process` respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. Given these two facts, can't we just completely remove `TParTreeProcessingRAII` and ~~be done with it~~ _never_ protect `TFile::ReadProcessID`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:276,safety,test,test,276,"Without ~realistic benchmarks that we can use to judge the impact of these interventions, I'm reluctant to propose changes in such important sections of the code. On the other hand, differently from what the discussion from 2016 that you reported above assumes:. 1. we do not test (nor design for) the usecase of `TTreeProcessorMT::Process` being called concurrently, or other threads accessing the same `TFile` objects that `TTreeProcessorMT::Process` is using. in other words, that's not a real usecase. 2. `TTreeProcessorMT::Process` respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. Given these two facts, can't we just completely remove `TParTreeProcessingRAII` and ~~be done with it~~ _never_ protect `TFile::ReadProcessID`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:661,safety,compl,completely,661,"Without ~realistic benchmarks that we can use to judge the impact of these interventions, I'm reluctant to propose changes in such important sections of the code. On the other hand, differently from what the discussion from 2016 that you reported above assumes:. 1. we do not test (nor design for) the usecase of `TTreeProcessorMT::Process` being called concurrently, or other threads accessing the same `TFile` objects that `TTreeProcessorMT::Process` is using. in other words, that's not a real usecase. 2. `TTreeProcessorMT::Process` respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. Given these two facts, can't we just completely remove `TParTreeProcessingRAII` and ~~be done with it~~ _never_ protect `TFile::ReadProcessID`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:385,security,access,accessing,385,"Without ~realistic benchmarks that we can use to judge the impact of these interventions, I'm reluctant to propose changes in such important sections of the code. On the other hand, differently from what the discussion from 2016 that you reported above assumes:. 1. we do not test (nor design for) the usecase of `TTreeProcessorMT::Process` being called concurrently, or other threads accessing the same `TFile` objects that `TTreeProcessorMT::Process` is using. in other words, that's not a real usecase. 2. `TTreeProcessorMT::Process` respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. Given these two facts, can't we just completely remove `TParTreeProcessingRAII` and ~~be done with it~~ _never_ protect `TFile::ReadProcessID`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:661,security,compl,completely,661,"Without ~realistic benchmarks that we can use to judge the impact of these interventions, I'm reluctant to propose changes in such important sections of the code. On the other hand, differently from what the discussion from 2016 that you reported above assumes:. 1. we do not test (nor design for) the usecase of `TTreeProcessorMT::Process` being called concurrently, or other threads accessing the same `TFile` objects that `TTreeProcessorMT::Process` is using. in other words, that's not a real usecase. 2. `TTreeProcessorMT::Process` respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. Given these two facts, can't we just completely remove `TParTreeProcessingRAII` and ~~be done with it~~ _never_ protect `TFile::ReadProcessID`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:276,testability,test,test,276,"Without ~realistic benchmarks that we can use to judge the impact of these interventions, I'm reluctant to propose changes in such important sections of the code. On the other hand, differently from what the discussion from 2016 that you reported above assumes:. 1. we do not test (nor design for) the usecase of `TTreeProcessorMT::Process` being called concurrently, or other threads accessing the same `TFile` objects that `TTreeProcessorMT::Process` is using. in other words, that's not a real usecase. 2. `TTreeProcessorMT::Process` respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. Given these two facts, can't we just completely remove `TParTreeProcessingRAII` and ~~be done with it~~ _never_ protect `TFile::ReadProcessID`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:90,performance,lock,lock,90,"> This means that we should probably no longer rely on TFile::ReadProcessID using its own lock. But we still need to protect the access to the global list of PIDs when using multiple TFiles from multiple threads, right? You mean we need to have a more general lock to protect the access to this list also from other places (not only TFile)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:260,performance,lock,lock,260,"> This means that we should probably no longer rely on TFile::ReadProcessID using its own lock. But we still need to protect the access to the global list of PIDs when using multiple TFiles from multiple threads, right? You mean we need to have a more general lock to protect the access to this list also from other places (not only TFile)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:90,security,lock,lock,90,"> This means that we should probably no longer rely on TFile::ReadProcessID using its own lock. But we still need to protect the access to the global list of PIDs when using multiple TFiles from multiple threads, right? You mean we need to have a more general lock to protect the access to this list also from other places (not only TFile)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:129,security,access,access,129,"> This means that we should probably no longer rely on TFile::ReadProcessID using its own lock. But we still need to protect the access to the global list of PIDs when using multiple TFiles from multiple threads, right? You mean we need to have a more general lock to protect the access to this list also from other places (not only TFile)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:260,security,lock,lock,260,"> This means that we should probably no longer rely on TFile::ReadProcessID using its own lock. But we still need to protect the access to the global list of PIDs when using multiple TFiles from multiple threads, right? You mean we need to have a more general lock to protect the access to this list also from other places (not only TFile)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:280,security,access,access,280,"> This means that we should probably no longer rely on TFile::ReadProcessID using its own lock. But we still need to protect the access to the global list of PIDs when using multiple TFiles from multiple threads, right? You mean we need to have a more general lock to protect the access to this list also from other places (not only TFile)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:603,deployability,contain,containing,603,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends. - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD. - Remove fgRwLock. - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co). - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code? [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:855,integrability,queue,queue,855,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends. - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD. - Remove fgRwLock. - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co). - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code? [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:855,performance,queue,queue,855,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends. - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD. - Remove fgRwLock. - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co). - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code? [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:593,safety,test,test,593,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends. - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD. - Remove fgRwLock. - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co). - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code? [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:691,safety,Test,Test,691,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends. - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD. - Remove fgRwLock. - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co). - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code? [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:777,safety,reme,remember,777,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends. - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD. - Remove fgRwLock. - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co). - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code? [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:791,safety,test,test,791,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends. - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD. - Remove fgRwLock. - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co). - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code? [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:822,safety,test,test,822,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends. - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD. - Remove fgRwLock. - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co). - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code? [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:102,testability,simpl,simple,102,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends. - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD. - Remove fgRwLock. - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co). - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code? [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:593,testability,test,test,593,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends. - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD. - Remove fgRwLock. - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co). - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code? [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:691,testability,Test,Test,691,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends. - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD. - Remove fgRwLock. - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co). - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code? [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:791,testability,test,test,791,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends. - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD. - Remove fgRwLock. - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co). - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code? [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:822,testability,test,test,822,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends. - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD. - Remove fgRwLock. - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co). - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code? [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:102,usability,simpl,simple,102,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends. - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD. - Remove fgRwLock. - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co). - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code? [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5288:35,safety,reme,remember,35,"@pcanal this is the only one I can remember:. https://root.cern.ch/files/CMS_7250E9A5-682D-DF11-8701-002618943934.root. Most probably I used it for TTreeProcessorMT too, since I used it first for TTree::GetEntry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5288
https://github.com/root-project/root/pull/5290:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5290
https://github.com/root-project/root/pull/5290:225,deployability,patch,patch,225,@pcanal the second commit in this PR removed all occurrences of the deprecated `GetImplicitMTPoolSize`. In the meanwhile I also merged https://github.com/root-project/root/pull/5292 which introduced one more call to it. Will patch it asap.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5290
https://github.com/root-project/root/pull/5290:225,safety,patch,patch,225,@pcanal the second commit in this PR removed all occurrences of the deprecated `GetImplicitMTPoolSize`. In the meanwhile I also merged https://github.com/root-project/root/pull/5292 which introduced one more call to it. Will patch it asap.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5290
https://github.com/root-project/root/pull/5290:225,security,patch,patch,225,@pcanal the second commit in this PR removed all occurrences of the deprecated `GetImplicitMTPoolSize`. In the meanwhile I also merged https://github.com/root-project/root/pull/5292 which introduced one more call to it. Will patch it asap.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5290
https://github.com/root-project/root/pull/5291:90,deployability,version,version,90,"That's interesting. I thought some of objective-C syntax was too modern for some outdated version of macOS you're testing on, but it's ... 10.15 and C++17. Since I do not have an access to the build logs, please let me know what was wrong, I'll provide a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5291
https://github.com/root-project/root/pull/5291:193,deployability,build,build,193,"That's interesting. I thought some of objective-C syntax was too modern for some outdated version of macOS you're testing on, but it's ... 10.15 and C++17. Since I do not have an access to the build logs, please let me know what was wrong, I'll provide a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5291
https://github.com/root-project/root/pull/5291:199,deployability,log,logs,199,"That's interesting. I thought some of objective-C syntax was too modern for some outdated version of macOS you're testing on, but it's ... 10.15 and C++17. Since I do not have an access to the build logs, please let me know what was wrong, I'll provide a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5291
https://github.com/root-project/root/pull/5291:90,integrability,version,version,90,"That's interesting. I thought some of objective-C syntax was too modern for some outdated version of macOS you're testing on, but it's ... 10.15 and C++17. Since I do not have an access to the build logs, please let me know what was wrong, I'll provide a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5291
https://github.com/root-project/root/pull/5291:90,modifiability,version,version,90,"That's interesting. I thought some of objective-C syntax was too modern for some outdated version of macOS you're testing on, but it's ... 10.15 and C++17. Since I do not have an access to the build logs, please let me know what was wrong, I'll provide a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5291
https://github.com/root-project/root/pull/5291:114,safety,test,testing,114,"That's interesting. I thought some of objective-C syntax was too modern for some outdated version of macOS you're testing on, but it's ... 10.15 and C++17. Since I do not have an access to the build logs, please let me know what was wrong, I'll provide a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5291
https://github.com/root-project/root/pull/5291:199,safety,log,logs,199,"That's interesting. I thought some of objective-C syntax was too modern for some outdated version of macOS you're testing on, but it's ... 10.15 and C++17. Since I do not have an access to the build logs, please let me know what was wrong, I'll provide a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5291
https://github.com/root-project/root/pull/5291:179,security,access,access,179,"That's interesting. I thought some of objective-C syntax was too modern for some outdated version of macOS you're testing on, but it's ... 10.15 and C++17. Since I do not have an access to the build logs, please let me know what was wrong, I'll provide a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5291
https://github.com/root-project/root/pull/5291:199,security,log,logs,199,"That's interesting. I thought some of objective-C syntax was too modern for some outdated version of macOS you're testing on, but it's ... 10.15 and C++17. Since I do not have an access to the build logs, please let me know what was wrong, I'll provide a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5291
https://github.com/root-project/root/pull/5291:114,testability,test,testing,114,"That's interesting. I thought some of objective-C syntax was too modern for some outdated version of macOS you're testing on, but it's ... 10.15 and C++17. Since I do not have an access to the build logs, please let me know what was wrong, I'll provide a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5291
https://github.com/root-project/root/pull/5291:199,testability,log,logs,199,"That's interesting. I thought some of objective-C syntax was too modern for some outdated version of macOS you're testing on, but it's ... 10.15 and C++17. Since I do not have an access to the build logs, please let me know what was wrong, I'll provide a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5291
https://github.com/root-project/root/pull/5291:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5291
https://github.com/root-project/root/pull/5292:69,availability,cluster,clusters,69,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:170,availability,slo,slots,170,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:255,availability,slo,slots,255,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:348,availability,slo,slots,348,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:44,deployability,depend,depends,44,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:69,deployability,cluster,clusters,69,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:368,deployability,build,builds,368,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:412,deployability,build,builds,412,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:44,integrability,depend,depends,44,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:129,integrability,event,event,129,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:308,integrability,event,event,308,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:44,modifiability,depend,depends,44,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:209,performance,time,time,209,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:170,reliability,slo,slots,170,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:255,reliability,slo,slots,255,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:348,reliability,slo,slots,348,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:44,safety,depend,depends,44,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:44,testability,depend,depends,44,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:380,testability,assert,asserts,380,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:401,testability,assert,assertion,401,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:427,testability,assert,asserts,427,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:459,usability,behavi,behavior,459,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:43,safety,except,exception,43,"@hageboeck I don't know, we could throw an exception instead, what do you think? I just went with what was requested in https://sft.its.cern.ch/jira/browse/ROOT-10346",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:130,deployability,stack,stack,130,"If you know that you might crash or yield undefined results, an exception is probably better. Users won't have to look through 16 stack traces with weird stuff. If you can continue running, but it's suboptimal, warning and keeping running is probably fine. So maybe you implement the `>` check and throw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:172,deployability,continu,continue,172,"If you know that you might crash or yield undefined results, an exception is probably better. Users won't have to look through 16 stack traces with weird stuff. If you can continue running, but it's suboptimal, warning and keeping running is probably fine. So maybe you implement the `>` check and throw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:199,integrability,sub,suboptimal,199,"If you know that you might crash or yield undefined results, an exception is probably better. Users won't have to look through 16 stack traces with weird stuff. If you can continue running, but it's suboptimal, warning and keeping running is probably fine. So maybe you implement the `>` check and throw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:64,safety,except,exception,64,"If you know that you might crash or yield undefined results, an exception is probably better. Users won't have to look through 16 stack traces with weird stuff. If you can continue running, but it's suboptimal, warning and keeping running is probably fine. So maybe you implement the `>` check and throw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:136,testability,trace,traces,136,"If you know that you might crash or yield undefined results, an exception is probably better. Users won't have to look through 16 stack traces with weird stuff. If you can continue running, but it's suboptimal, warning and keeping running is probably fine. So maybe you implement the `>` check and throw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5292:94,usability,User,Users,94,"If you know that you might crash or yield undefined results, an exception is probably better. Users won't have to look through 16 stack traces with weird stuff. If you can continue running, but it's suboptimal, warning and keeping running is probably fine. So maybe you implement the `>` check and throw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5292
https://github.com/root-project/root/pull/5293:46,deployability,build,build,46,"Thanks Stephan, fixed, merging since previous build was green and I have not changed the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5293
https://github.com/root-project/root/pull/5293:56,energy efficiency,green,green,56,"Thanks Stephan, fixed, merging since previous build was green and I have not changed the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5293
https://github.com/root-project/root/pull/5294:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:230,availability,error,error,230,"@gargvaibhav64, could you move your work here. So first we need to enumerate all top-most libc and std headers, in a similar way how it was done for the non-windows modulemap files. This would likely bring you back to the initial error you tried to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:165,deployability,modul,modulemap,165,"@gargvaibhav64, could you move your work here. So first we need to enumerate all top-most libc and std headers, in a similar way how it was done for the non-windows modulemap files. This would likely bring you back to the initial error you tried to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:165,modifiability,modul,modulemap,165,"@gargvaibhav64, could you move your work here. So first we need to enumerate all top-most libc and std headers, in a similar way how it was done for the non-windows modulemap files. This would likely bring you back to the initial error you tried to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:230,performance,error,error,230,"@gargvaibhav64, could you move your work here. So first we need to enumerate all top-most libc and std headers, in a similar way how it was done for the non-windows modulemap files. This would likely bring you back to the initial error you tried to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:165,safety,modul,modulemap,165,"@gargvaibhav64, could you move your work here. So first we need to enumerate all top-most libc and std headers, in a similar way how it was done for the non-windows modulemap files. This would likely bring you back to the initial error you tried to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:230,safety,error,error,230,"@gargvaibhav64, could you move your work here. So first we need to enumerate all top-most libc and std headers, in a similar way how it was done for the non-windows modulemap files. This would likely bring you back to the initial error you tried to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:230,usability,error,error,230,"@gargvaibhav64, could you move your work here. So first we need to enumerate all top-most libc and std headers, in a similar way how it was done for the non-windows modulemap files. This would likely bring you back to the initial error you tried to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:236,deployability,modul,modulemap,236,"I think we should find where `_CRT_END_C_HEADER` is defined. If we ask google it may give wrong results, so we should be scanning the msvc files instead. Once we locate the definition we can try adding that header file to the libc_msvc.modulemap (maybe as textual module).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:264,deployability,modul,module,264,"I think we should find where `_CRT_END_C_HEADER` is defined. If we ask google it may give wrong results, so we should be scanning the msvc files instead. Once we locate the definition we can try adding that header file to the libc_msvc.modulemap (maybe as textual module).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:236,modifiability,modul,modulemap,236,"I think we should find where `_CRT_END_C_HEADER` is defined. If we ask google it may give wrong results, so we should be scanning the msvc files instead. Once we locate the definition we can try adding that header file to the libc_msvc.modulemap (maybe as textual module).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:264,modifiability,modul,module,264,"I think we should find where `_CRT_END_C_HEADER` is defined. If we ask google it may give wrong results, so we should be scanning the msvc files instead. Once we locate the definition we can try adding that header file to the libc_msvc.modulemap (maybe as textual module).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:236,safety,modul,modulemap,236,"I think we should find where `_CRT_END_C_HEADER` is defined. If we ask google it may give wrong results, so we should be scanning the msvc files instead. Once we locate the definition we can try adding that header file to the libc_msvc.modulemap (maybe as textual module).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:264,safety,modul,module,264,"I think we should find where `_CRT_END_C_HEADER` is defined. If we ask google it may give wrong results, so we should be scanning the msvc files instead. Once we locate the definition we can try adding that header file to the libc_msvc.modulemap (maybe as textual module).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:156,availability,error,error,156,"`_CRT_END_C_HEADER` is also defined in `vcruntime.h`, I tried adding it to libc_msvc.modulemap as a textual header as you suggested, but no success. . Full error [here](https://pastebin.com/3WupiXjb).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:85,deployability,modul,modulemap,85,"`_CRT_END_C_HEADER` is also defined in `vcruntime.h`, I tried adding it to libc_msvc.modulemap as a textual header as you suggested, but no success. . Full error [here](https://pastebin.com/3WupiXjb).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:85,modifiability,modul,modulemap,85,"`_CRT_END_C_HEADER` is also defined in `vcruntime.h`, I tried adding it to libc_msvc.modulemap as a textual header as you suggested, but no success. . Full error [here](https://pastebin.com/3WupiXjb).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:156,performance,error,error,156,"`_CRT_END_C_HEADER` is also defined in `vcruntime.h`, I tried adding it to libc_msvc.modulemap as a textual header as you suggested, but no success. . Full error [here](https://pastebin.com/3WupiXjb).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:85,safety,modul,modulemap,85,"`_CRT_END_C_HEADER` is also defined in `vcruntime.h`, I tried adding it to libc_msvc.modulemap as a textual header as you suggested, but no success. . Full error [here](https://pastebin.com/3WupiXjb).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:156,safety,error,error,156,"`_CRT_END_C_HEADER` is also defined in `vcruntime.h`, I tried adding it to libc_msvc.modulemap as a textual header as you suggested, but no success. . Full error [here](https://pastebin.com/3WupiXjb).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:156,usability,error,error,156,"`_CRT_END_C_HEADER` is also defined in `vcruntime.h`, I tried adding it to libc_msvc.modulemap as a textual header as you suggested, but no success. . Full error [here](https://pastebin.com/3WupiXjb).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:57,deployability,modul,modulemap,57,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:116,deployability,modul,modulemap,116,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:144,deployability,modul,module,144,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:233,deployability,modul,module,233,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:306,deployability,modul,module,306,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:57,modifiability,modul,modulemap,57,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:116,modifiability,modul,modulemap,116,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:144,modifiability,modul,module,144,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:233,modifiability,modul,module,233,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:306,modifiability,modul,module,306,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:57,safety,modul,modulemap,57,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:116,safety,modul,modulemap,116,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:144,safety,modul,module,144,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:233,safety,modul,module,233,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:306,safety,modul,module,306,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:314,testability,assert,assert,314,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:353,testability,assert,assert,353,"```diff. --- a/interpreter/cling/include/cling/libc_msvc.modulemap. +++ b/interpreter/cling/include/cling/libc_msvc.modulemap. @@ -2,6 +2,10 @@ module ""libc"" [system] [extern_c] [no_undeclared_includes] {. requires msvc. export *. + module ""vcruntime.h"" {. + export *. + textual header ""vcruntime.h"". + }. module ""assert.h"" {. export *. textual header ""assert.h"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:49,deployability,modul,module,49,"Could you try sticking both in assert? Eg:. ```. module ""assert.h"" {. export *. textual header ""vcruntime.h"". textual header ""assert.h"". }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:49,modifiability,modul,module,49,"Could you try sticking both in assert? Eg:. ```. module ""assert.h"" {. export *. textual header ""vcruntime.h"". textual header ""assert.h"". }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:49,safety,modul,module,49,"Could you try sticking both in assert? Eg:. ```. module ""assert.h"" {. export *. textual header ""vcruntime.h"". textual header ""assert.h"". }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:31,testability,assert,assert,31,"Could you try sticking both in assert? Eg:. ```. module ""assert.h"" {. export *. textual header ""vcruntime.h"". textual header ""assert.h"". }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:57,testability,assert,assert,57,"Could you try sticking both in assert? Eg:. ```. module ""assert.h"" {. export *. textual header ""vcruntime.h"". textual header ""assert.h"". }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:126,testability,assert,assert,126,"Could you try sticking both in assert? Eg:. ```. module ""assert.h"" {. export *. textual header ""vcruntime.h"". textual header ""assert.h"". }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:26,availability,error,errors,26,"I tried doing that, those errors still exist. Full error log [here](https://pastebin.com/Z4vCkbQT). It is exactly the same as previous",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:51,availability,error,error,51,"I tried doing that, those errors still exist. Full error log [here](https://pastebin.com/Z4vCkbQT). It is exactly the same as previous",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:57,deployability,log,log,57,"I tried doing that, those errors still exist. Full error log [here](https://pastebin.com/Z4vCkbQT). It is exactly the same as previous",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:26,performance,error,errors,26,"I tried doing that, those errors still exist. Full error log [here](https://pastebin.com/Z4vCkbQT). It is exactly the same as previous",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:51,performance,error,error,51,"I tried doing that, those errors still exist. Full error log [here](https://pastebin.com/Z4vCkbQT). It is exactly the same as previous",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:26,safety,error,errors,26,"I tried doing that, those errors still exist. Full error log [here](https://pastebin.com/Z4vCkbQT). It is exactly the same as previous",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:51,safety,error,error,51,"I tried doing that, those errors still exist. Full error log [here](https://pastebin.com/Z4vCkbQT). It is exactly the same as previous",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:57,safety,log,log,57,"I tried doing that, those errors still exist. Full error log [here](https://pastebin.com/Z4vCkbQT). It is exactly the same as previous",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:57,security,log,log,57,"I tried doing that, those errors still exist. Full error log [here](https://pastebin.com/Z4vCkbQT). It is exactly the same as previous",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:57,testability,log,log,57,"I tried doing that, those errors still exist. Full error log [here](https://pastebin.com/Z4vCkbQT). It is exactly the same as previous",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:26,usability,error,errors,26,"I tried doing that, those errors still exist. Full error log [here](https://pastebin.com/Z4vCkbQT). It is exactly the same as previous",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:51,usability,error,error,51,"I tried doing that, those errors still exist. Full error log [here](https://pastebin.com/Z4vCkbQT). It is exactly the same as previous",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:43,energy efficiency,green,greenlight,43,"Okay, let's wait @bellenot or @oshadura to greenlight this PR and merge it in the master as it work for all other platforms and then I can try to debug it on a windows machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:114,interoperability,platform,platforms,114,"Okay, let's wait @bellenot or @oshadura to greenlight this PR and merge it in the master as it work for all other platforms and then I can try to debug it on a windows machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:11,deployability,build,build,11,"@phsft-bot build on ROOT-debian10-i386/cxx14, ROOT-performance-centos7-multicore/default, ROOT-fedora29/python3, ROOT-fedora30/cxx14, ROOT-fedora31/noimt, ROOT-ubuntu16/nortcxxmod, mac1015/cxx17, windows10/cxx14",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:51,performance,perform,performance-,51,"@phsft-bot build on ROOT-debian10-i386/cxx14, ROOT-performance-centos7-multicore/default, ROOT-fedora29/python3, ROOT-fedora30/cxx14, ROOT-fedora31/noimt, ROOT-ubuntu16/nortcxxmod, mac1015/cxx17, windows10/cxx14",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5294:51,usability,perform,performance-,51,"@phsft-bot build on ROOT-debian10-i386/cxx14, ROOT-performance-centos7-multicore/default, ROOT-fedora29/python3, ROOT-fedora30/cxx14, ROOT-fedora31/noimt, ROOT-ubuntu16/nortcxxmod, mac1015/cxx17, windows10/cxx14",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5294
https://github.com/root-project/root/pull/5295:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5295
https://github.com/root-project/root/pull/5296:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:273,availability,error,error,273,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:. ````. +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^. ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:368,availability,error,errors,368,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:. ````. +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^. ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:14,deployability,fail,fails,14,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:. ````. +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^. ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:70,deployability,patch,patch,70,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:. ````. +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^. ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:205,deployability,build,build,205,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:. ````. +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^. ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:229,energy efficiency,core,core,229,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:. ````. +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^. ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:330,energy efficiency,core,core,330,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:. ````. +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^. ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:273,performance,error,error,273,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:. ````. +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^. ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:368,performance,error,errors,368,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:. ````. +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^. ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:14,reliability,fail,fails,14,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:. ````. +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^. ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:70,safety,patch,patch,70,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:. ````. +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^. ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:273,safety,error,error,273,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:. ````. +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^. ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:368,safety,error,errors,368,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:. ````. +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^. ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:70,security,patch,patch,70,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:. ````. +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^. ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:273,usability,error,error,273,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:. ````. +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^. ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:368,usability,error,errors,368,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:. ````. +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^. ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:168,availability,state,statement,168,"Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. Could you tell me how can I run these tests locally? Are they in a separate repository?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:168,integrability,state,statement,168,"Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. Could you tell me how can I run these tests locally? Are they in a separate repository?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:280,integrability,repositor,repository,280,"Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. Could you tell me how can I run these tests locally? Are they in a separate repository?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:280,interoperability,repositor,repository,280,"Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. Could you tell me how can I run these tests locally? Are they in a separate repository?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:242,safety,test,tests,242,"Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. Could you tell me how can I run these tests locally? Are they in a separate repository?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:242,testability,test,tests,242,"Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. Could you tell me how can I run these tests locally? Are they in a separate repository?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:170,availability,state,statement,170,"> Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. I agree but if we proceed with the PR as is it will be a breaking change. My expectation is that there is a lot of code out there(since rootcint times) which we will be breaking. That is why I am in favor of a new option and slowly moving toward making it default. . > Could you tell me how can I run these tests locally? Are they in a separate repository? You just need to clone root and specify `-Droottest=On`, Then compile it and type `ctest -jN`, if you want a particular test use the `-R` option. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:431,availability,slo,slowly,431,"> Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. I agree but if we proceed with the PR as is it will be a breaking change. My expectation is that there is a lot of code out there(since rootcint times) which we will be breaking. That is why I am in favor of a new option and slowly moving toward making it default. . > Could you tell me how can I run these tests locally? Are they in a separate repository? You just need to clone root and specify `-Droottest=On`, Then compile it and type `ctest -jN`, if you want a particular test use the `-R` option. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:170,integrability,state,statement,170,"> Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. I agree but if we proceed with the PR as is it will be a breaking change. My expectation is that there is a lot of code out there(since rootcint times) which we will be breaking. That is why I am in favor of a new option and slowly moving toward making it default. . > Could you tell me how can I run these tests locally? Are they in a separate repository? You just need to clone root and specify `-Droottest=On`, Then compile it and type `ctest -jN`, if you want a particular test use the `-R` option. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:551,integrability,repositor,repository,551,"> Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. I agree but if we proceed with the PR as is it will be a breaking change. My expectation is that there is a lot of code out there(since rootcint times) which we will be breaking. That is why I am in favor of a new option and slowly moving toward making it default. . > Could you tell me how can I run these tests locally? Are they in a separate repository? You just need to clone root and specify `-Droottest=On`, Then compile it and type `ctest -jN`, if you want a particular test use the `-R` option. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:551,interoperability,repositor,repository,551,"> Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. I agree but if we proceed with the PR as is it will be a breaking change. My expectation is that there is a lot of code out there(since rootcint times) which we will be breaking. That is why I am in favor of a new option and slowly moving toward making it default. . > Could you tell me how can I run these tests locally? Are they in a separate repository? You just need to clone root and specify `-Droottest=On`, Then compile it and type `ctest -jN`, if you want a particular test use the `-R` option. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:595,interoperability,specif,specify,595,"> Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. I agree but if we proceed with the PR as is it will be a breaking change. My expectation is that there is a lot of code out there(since rootcint times) which we will be breaking. That is why I am in favor of a new option and slowly moving toward making it default. . > Could you tell me how can I run these tests locally? Are they in a separate repository? You just need to clone root and specify `-Droottest=On`, Then compile it and type `ctest -jN`, if you want a particular test use the `-R` option. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:351,performance,time,times,351,"> Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. I agree but if we proceed with the PR as is it will be a breaking change. My expectation is that there is a lot of code out there(since rootcint times) which we will be breaking. That is why I am in favor of a new option and slowly moving toward making it default. . > Could you tell me how can I run these tests locally? Are they in a separate repository? You just need to clone root and specify `-Droottest=On`, Then compile it and type `ctest -jN`, if you want a particular test use the `-R` option. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:431,reliability,slo,slowly,431,"> Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. I agree but if we proceed with the PR as is it will be a breaking change. My expectation is that there is a lot of code out there(since rootcint times) which we will be breaking. That is why I am in favor of a new option and slowly moving toward making it default. . > Could you tell me how can I run these tests locally? Are they in a separate repository? You just need to clone root and specify `-Droottest=On`, Then compile it and type `ctest -jN`, if you want a particular test use the `-R` option. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:513,safety,test,tests,513,"> Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. I agree but if we proceed with the PR as is it will be a breaking change. My expectation is that there is a lot of code out there(since rootcint times) which we will be breaking. That is why I am in favor of a new option and slowly moving toward making it default. . > Could you tell me how can I run these tests locally? Are they in a separate repository? You just need to clone root and specify `-Droottest=On`, Then compile it and type `ctest -jN`, if you want a particular test use the `-R` option. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:683,safety,test,test,683,"> Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. I agree but if we proceed with the PR as is it will be a breaking change. My expectation is that there is a lot of code out there(since rootcint times) which we will be breaking. That is why I am in favor of a new option and slowly moving toward making it default. . > Could you tell me how can I run these tests locally? Are they in a separate repository? You just need to clone root and specify `-Droottest=On`, Then compile it and type `ctest -jN`, if you want a particular test use the `-R` option. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:513,testability,test,tests,513,"> Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. I agree but if we proceed with the PR as is it will be a breaking change. My expectation is that there is a lot of code out there(since rootcint times) which we will be breaking. That is why I am in favor of a new option and slowly moving toward making it default. . > Could you tell me how can I run these tests locally? Are they in a separate repository? You just need to clone root and specify `-Droottest=On`, Then compile it and type `ctest -jN`, if you want a particular test use the `-R` option. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:683,testability,test,test,683,"> Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. I agree but if we proceed with the PR as is it will be a breaking change. My expectation is that there is a lot of code out there(since rootcint times) which we will be breaking. That is why I am in favor of a new option and slowly moving toward making it default. . > Could you tell me how can I run these tests locally? Are they in a separate repository? You just need to clone root and specify `-Droottest=On`, Then compile it and type `ctest -jN`, if you want a particular test use the `-R` option. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:79,deployability,fail,fail,79,"OK, I see, there are indeed too many root headers with missing std, which will fail if the `std` is not in the global namespace... . I added extra commit with option -noUsingStd, please check if this what you meant. This should allow to generate stricter dictionary from the Makefile, but how are options passed to cling during JIT compilation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:79,reliability,fail,fail,79,"OK, I see, there are indeed too many root headers with missing std, which will fail if the `std` is not in the global namespace... . I added extra commit with option -noUsingStd, please check if this what you meant. This should allow to generate stricter dictionary from the Makefile, but how are options passed to cling during JIT compilation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:81,deployability,fail,fail,81,"> OK, I see, there are indeed too many root headers with missing std, which will fail if the `std` is not in the global namespace... Thanks. I will take a look tomorrow. . > . > I added extra commit with option -noUsingStd, please check if this what you meant. This should allow to generate stricter dictionary from the Makefile, but how are options passed to cling during JIT compilation? You mean how to enable that change on your side? I presume you use `ROOT_GENERATE_DICTIONARY` from cmake. Maybe we should add extra option if not there already that takes additional arguments. Then you can change this on the framework side. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:81,reliability,fail,fail,81,"> OK, I see, there are indeed too many root headers with missing std, which will fail if the `std` is not in the global namespace... Thanks. I will take a look tomorrow. . > . > I added extra commit with option -noUsingStd, please check if this what you meant. This should allow to generate stricter dictionary from the Makefile, but how are options passed to cling during JIT compilation? You mean how to enable that change on your side? I presume you use `ROOT_GENERATE_DICTIONARY` from cmake. Maybe we should add extra option if not there already that takes additional arguments. Then you can change this on the framework side. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:109,deployability,build,building,109,"I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:170,security,modif,modifying,170,"I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:79,usability,clear,clear,79,"I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:153,usability,document,documentation,153,"I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:111,deployability,build,building,111,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:587,deployability,configurat,configuration,587,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:706,deployability,configurat,configuration,706,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:726,deployability,build,building,726,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:321,energy efficiency,core,core,321,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:998,energy efficiency,core,core,998,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:1101,energy efficiency,core,core,1101,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:363,integrability,configur,configure,363,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:587,integrability,configur,configuration,587,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:706,integrability,configur,configuration,706,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:363,modifiability,configur,configure,363,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:563,modifiability,exten,extend,563,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:587,modifiability,configur,configuration,587,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:706,modifiability,configur,configuration,706,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:1206,performance,time,time,1206,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:410,reliability,doe,does,410,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:799,reliability,doe,does,799,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:172,security,modif,modifying,172,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:363,security,configur,configure,363,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:587,security,configur,configuration,587,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:706,security,configur,configuration,706,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:81,usability,clear,clear,81,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:155,usability,document,documentation,155,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:517,usability,custom,customization,517,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:26,interoperability,format,formatting,26,"Thanks, @vgvassilev , the formatting is fixed. . Indeed, would be good to extend the .rootrc ACLiC block to accept options customization. Yes, Alice O2 at least tries to qualify everything and the policy is to not have any `using namespace ...` in the global scope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:74,modifiability,exten,extend,74,"Thanks, @vgvassilev , the formatting is fixed. . Indeed, would be good to extend the .rootrc ACLiC block to accept options customization. Yes, Alice O2 at least tries to qualify everything and the policy is to not have any `using namespace ...` in the global scope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:197,security,polic,policy,197,"Thanks, @vgvassilev , the formatting is fixed. . Indeed, would be good to extend the .rootrc ACLiC block to accept options customization. Yes, Alice O2 at least tries to qualify everything and the policy is to not have any `using namespace ...` in the global scope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:123,usability,custom,customization,123,"Thanks, @vgvassilev , the formatting is fixed. . Indeed, would be good to extend the .rootrc ACLiC block to accept options customization. Yes, Alice O2 at least tries to qualify everything and the policy is to not have any `using namespace ...` in the global scope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:18,usability,help,help,18,Do you want me to help on the ACLiC customization side or you know how to do it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:36,usability,custom,customization,36,Do you want me to help on the ACLiC customization side or you know how to do it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:20,usability,help,help,20,> Do you want me to help on the ACLiC customization side or you know how to do it? Would be good if you could do this. I assume it will anyway go to separate PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:38,usability,custom,customization,38,> Do you want me to help on the ACLiC customization side or you know how to do it? Would be good if you could do this. I assume it will anyway go to separate PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:53,deployability,patch,patch,53,I would prefer to be in this PR and I will provide a patch here.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:53,safety,patch,patch,53,I would prefer to be in this PR and I will provide a patch here.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:53,security,patch,patch,53,I would prefer to be in this PR and I will provide a patch here.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:8,usability,prefer,prefer,8,I would prefer to be in this PR and I will provide a patch here.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:953,deployability,modul,modulemap,953,"This is the diff. I have not compiled it and it may require some adjustment:. ```. diff --git a/config/rootrc.in b/config/rootrc.in. index 5e02aa69a1..3b4edb1815 100644. --- a/config/rootrc.in. +++ b/config/rootrc.in. @@ -389,6 +389,8 @@ ACLiC.Linkdef: _linkdef. # needed libraries. # On Windows, the default is 3. #ACLiC.LinkLibs: 1. +#Add extra flags to rootcling (dictionary generation command). +#ACLiC.ExtraRootclingFlags: -noUsingStd. . # PROOF related variables. #. diff --git a/core/base/src/TSystem.cxx b/core/base/src/TSystem.cxx. index ea98232a18..1d180d820c 100644. --- a/core/base/src/TSystem.cxx. +++ b/core/base/src/TSystem.cxx. @@ -3568,6 +3568,8 @@ int TSystem::CompileMacro(const char *filename, Option_t *opt,. if (gEnv) {. TString fromConfig = gEnv->GetValue(""ACLiC.IncludePaths"","""");. rcling.Append(fromConfig);. + TString extraFlags = gEnv->GetValue(""ACLiC.ExtraRootclingFlags"","""");. + rcling.Append(extraFlags);. }. . // Create a modulemap. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:486,energy efficiency,core,core,486,"This is the diff. I have not compiled it and it may require some adjustment:. ```. diff --git a/config/rootrc.in b/config/rootrc.in. index 5e02aa69a1..3b4edb1815 100644. --- a/config/rootrc.in. +++ b/config/rootrc.in. @@ -389,6 +389,8 @@ ACLiC.Linkdef: _linkdef. # needed libraries. # On Windows, the default is 3. #ACLiC.LinkLibs: 1. +#Add extra flags to rootcling (dictionary generation command). +#ACLiC.ExtraRootclingFlags: -noUsingStd. . # PROOF related variables. #. diff --git a/core/base/src/TSystem.cxx b/core/base/src/TSystem.cxx. index ea98232a18..1d180d820c 100644. --- a/core/base/src/TSystem.cxx. +++ b/core/base/src/TSystem.cxx. @@ -3568,6 +3568,8 @@ int TSystem::CompileMacro(const char *filename, Option_t *opt,. if (gEnv) {. TString fromConfig = gEnv->GetValue(""ACLiC.IncludePaths"","""");. rcling.Append(fromConfig);. + TString extraFlags = gEnv->GetValue(""ACLiC.ExtraRootclingFlags"","""");. + rcling.Append(extraFlags);. }. . // Create a modulemap. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:514,energy efficiency,core,core,514,"This is the diff. I have not compiled it and it may require some adjustment:. ```. diff --git a/config/rootrc.in b/config/rootrc.in. index 5e02aa69a1..3b4edb1815 100644. --- a/config/rootrc.in. +++ b/config/rootrc.in. @@ -389,6 +389,8 @@ ACLiC.Linkdef: _linkdef. # needed libraries. # On Windows, the default is 3. #ACLiC.LinkLibs: 1. +#Add extra flags to rootcling (dictionary generation command). +#ACLiC.ExtraRootclingFlags: -noUsingStd. . # PROOF related variables. #. diff --git a/core/base/src/TSystem.cxx b/core/base/src/TSystem.cxx. index ea98232a18..1d180d820c 100644. --- a/core/base/src/TSystem.cxx. +++ b/core/base/src/TSystem.cxx. @@ -3568,6 +3568,8 @@ int TSystem::CompileMacro(const char *filename, Option_t *opt,. if (gEnv) {. TString fromConfig = gEnv->GetValue(""ACLiC.IncludePaths"","""");. rcling.Append(fromConfig);. + TString extraFlags = gEnv->GetValue(""ACLiC.ExtraRootclingFlags"","""");. + rcling.Append(extraFlags);. }. . // Create a modulemap. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:584,energy efficiency,core,core,584,"This is the diff. I have not compiled it and it may require some adjustment:. ```. diff --git a/config/rootrc.in b/config/rootrc.in. index 5e02aa69a1..3b4edb1815 100644. --- a/config/rootrc.in. +++ b/config/rootrc.in. @@ -389,6 +389,8 @@ ACLiC.Linkdef: _linkdef. # needed libraries. # On Windows, the default is 3. #ACLiC.LinkLibs: 1. +#Add extra flags to rootcling (dictionary generation command). +#ACLiC.ExtraRootclingFlags: -noUsingStd. . # PROOF related variables. #. diff --git a/core/base/src/TSystem.cxx b/core/base/src/TSystem.cxx. index ea98232a18..1d180d820c 100644. --- a/core/base/src/TSystem.cxx. +++ b/core/base/src/TSystem.cxx. @@ -3568,6 +3568,8 @@ int TSystem::CompileMacro(const char *filename, Option_t *opt,. if (gEnv) {. TString fromConfig = gEnv->GetValue(""ACLiC.IncludePaths"","""");. rcling.Append(fromConfig);. + TString extraFlags = gEnv->GetValue(""ACLiC.ExtraRootclingFlags"","""");. + rcling.Append(extraFlags);. }. . // Create a modulemap. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:617,energy efficiency,core,core,617,"This is the diff. I have not compiled it and it may require some adjustment:. ```. diff --git a/config/rootrc.in b/config/rootrc.in. index 5e02aa69a1..3b4edb1815 100644. --- a/config/rootrc.in. +++ b/config/rootrc.in. @@ -389,6 +389,8 @@ ACLiC.Linkdef: _linkdef. # needed libraries. # On Windows, the default is 3. #ACLiC.LinkLibs: 1. +#Add extra flags to rootcling (dictionary generation command). +#ACLiC.ExtraRootclingFlags: -noUsingStd. . # PROOF related variables. #. diff --git a/core/base/src/TSystem.cxx b/core/base/src/TSystem.cxx. index ea98232a18..1d180d820c 100644. --- a/core/base/src/TSystem.cxx. +++ b/core/base/src/TSystem.cxx. @@ -3568,6 +3568,8 @@ int TSystem::CompileMacro(const char *filename, Option_t *opt,. if (gEnv) {. TString fromConfig = gEnv->GetValue(""ACLiC.IncludePaths"","""");. rcling.Append(fromConfig);. + TString extraFlags = gEnv->GetValue(""ACLiC.ExtraRootclingFlags"","""");. + rcling.Append(extraFlags);. }. . // Create a modulemap. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:459,modifiability,variab,variables,459,"This is the diff. I have not compiled it and it may require some adjustment:. ```. diff --git a/config/rootrc.in b/config/rootrc.in. index 5e02aa69a1..3b4edb1815 100644. --- a/config/rootrc.in. +++ b/config/rootrc.in. @@ -389,6 +389,8 @@ ACLiC.Linkdef: _linkdef. # needed libraries. # On Windows, the default is 3. #ACLiC.LinkLibs: 1. +#Add extra flags to rootcling (dictionary generation command). +#ACLiC.ExtraRootclingFlags: -noUsingStd. . # PROOF related variables. #. diff --git a/core/base/src/TSystem.cxx b/core/base/src/TSystem.cxx. index ea98232a18..1d180d820c 100644. --- a/core/base/src/TSystem.cxx. +++ b/core/base/src/TSystem.cxx. @@ -3568,6 +3568,8 @@ int TSystem::CompileMacro(const char *filename, Option_t *opt,. if (gEnv) {. TString fromConfig = gEnv->GetValue(""ACLiC.IncludePaths"","""");. rcling.Append(fromConfig);. + TString extraFlags = gEnv->GetValue(""ACLiC.ExtraRootclingFlags"","""");. + rcling.Append(extraFlags);. }. . // Create a modulemap. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:953,modifiability,modul,modulemap,953,"This is the diff. I have not compiled it and it may require some adjustment:. ```. diff --git a/config/rootrc.in b/config/rootrc.in. index 5e02aa69a1..3b4edb1815 100644. --- a/config/rootrc.in. +++ b/config/rootrc.in. @@ -389,6 +389,8 @@ ACLiC.Linkdef: _linkdef. # needed libraries. # On Windows, the default is 3. #ACLiC.LinkLibs: 1. +#Add extra flags to rootcling (dictionary generation command). +#ACLiC.ExtraRootclingFlags: -noUsingStd. . # PROOF related variables. #. diff --git a/core/base/src/TSystem.cxx b/core/base/src/TSystem.cxx. index ea98232a18..1d180d820c 100644. --- a/core/base/src/TSystem.cxx. +++ b/core/base/src/TSystem.cxx. @@ -3568,6 +3568,8 @@ int TSystem::CompileMacro(const char *filename, Option_t *opt,. if (gEnv) {. TString fromConfig = gEnv->GetValue(""ACLiC.IncludePaths"","""");. rcling.Append(fromConfig);. + TString extraFlags = gEnv->GetValue(""ACLiC.ExtraRootclingFlags"","""");. + rcling.Append(extraFlags);. }. . // Create a modulemap. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:953,safety,modul,modulemap,953,"This is the diff. I have not compiled it and it may require some adjustment:. ```. diff --git a/config/rootrc.in b/config/rootrc.in. index 5e02aa69a1..3b4edb1815 100644. --- a/config/rootrc.in. +++ b/config/rootrc.in. @@ -389,6 +389,8 @@ ACLiC.Linkdef: _linkdef. # needed libraries. # On Windows, the default is 3. #ACLiC.LinkLibs: 1. +#Add extra flags to rootcling (dictionary generation command). +#ACLiC.ExtraRootclingFlags: -noUsingStd. . # PROOF related variables. #. diff --git a/core/base/src/TSystem.cxx b/core/base/src/TSystem.cxx. index ea98232a18..1d180d820c 100644. --- a/core/base/src/TSystem.cxx. +++ b/core/base/src/TSystem.cxx. @@ -3568,6 +3568,8 @@ int TSystem::CompileMacro(const char *filename, Option_t *opt,. if (gEnv) {. TString fromConfig = gEnv->GetValue(""ACLiC.IncludePaths"","""");. rcling.Append(fromConfig);. + TString extraFlags = gEnv->GetValue(""ACLiC.ExtraRootclingFlags"","""");. + rcling.Append(extraFlags);. }. . // Create a modulemap. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:389,usability,command,command,389,"This is the diff. I have not compiled it and it may require some adjustment:. ```. diff --git a/config/rootrc.in b/config/rootrc.in. index 5e02aa69a1..3b4edb1815 100644. --- a/config/rootrc.in. +++ b/config/rootrc.in. @@ -389,6 +389,8 @@ ACLiC.Linkdef: _linkdef. # needed libraries. # On Windows, the default is 3. #ACLiC.LinkLibs: 1. +#Add extra flags to rootcling (dictionary generation command). +#ACLiC.ExtraRootclingFlags: -noUsingStd. . # PROOF related variables. #. diff --git a/core/base/src/TSystem.cxx b/core/base/src/TSystem.cxx. index ea98232a18..1d180d820c 100644. --- a/core/base/src/TSystem.cxx. +++ b/core/base/src/TSystem.cxx. @@ -3568,6 +3568,8 @@ int TSystem::CompileMacro(const char *filename, Option_t *opt,. if (gEnv) {. TString fromConfig = gEnv->GetValue(""ACLiC.IncludePaths"","""");. rcling.Append(fromConfig);. + TString extraFlags = gEnv->GetValue(""ACLiC.ExtraRootclingFlags"","""");. + rcling.Append(extraFlags);. }. . // Create a modulemap. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:33,security,modif,modification,33,"thanks, @vgvassilev , with small modification it works. Let me know to which option name you converge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:98,deployability,modul,module,98,"@shahor02, good job! Could you squash the two commits so that we have traceable history. Also, a `module.modulemap` file was overridden and I believe it is not part of this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:105,deployability,modul,modulemap,105,"@shahor02, good job! Could you squash the two commits so that we have traceable history. Also, a `module.modulemap` file was overridden and I believe it is not part of this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:98,modifiability,modul,module,98,"@shahor02, good job! Could you squash the two commits so that we have traceable history. Also, a `module.modulemap` file was overridden and I believe it is not part of this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:105,modifiability,modul,modulemap,105,"@shahor02, good job! Could you squash the two commits so that we have traceable history. Also, a `module.modulemap` file was overridden and I believe it is not part of this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:98,safety,modul,module,98,"@shahor02, good job! Could you squash the two commits so that we have traceable history. Also, a `module.modulemap` file was overridden and I believe it is not part of this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:105,safety,modul,modulemap,105,"@shahor02, good job! Could you squash the two commits so that we have traceable history. Also, a `module.modulemap` file was overridden and I believe it is not part of this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:70,testability,trace,traceable,70,"@shahor02, good job! Could you squash the two commits so that we have traceable history. Also, a `module.modulemap` file was overridden and I believe it is not part of this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:40,availability,restor,restored,40,"@vgvassilev right, ``module.modulemap`` restored. I've squashed 2 commits of ``rootcling_impl.cxx``",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:21,deployability,modul,module,21,"@vgvassilev right, ``module.modulemap`` restored. I've squashed 2 commits of ``rootcling_impl.cxx``",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:28,deployability,modul,modulemap,28,"@vgvassilev right, ``module.modulemap`` restored. I've squashed 2 commits of ``rootcling_impl.cxx``",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:21,modifiability,modul,module,21,"@vgvassilev right, ``module.modulemap`` restored. I've squashed 2 commits of ``rootcling_impl.cxx``",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:28,modifiability,modul,modulemap,28,"@vgvassilev right, ``module.modulemap`` restored. I've squashed 2 commits of ``rootcling_impl.cxx``",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:40,reliability,restor,restored,40,"@vgvassilev right, ``module.modulemap`` restored. I've squashed 2 commits of ``rootcling_impl.cxx``",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:21,safety,modul,module,21,"@vgvassilev right, ``module.modulemap`` restored. I've squashed 2 commits of ``rootcling_impl.cxx``",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:28,safety,modul,modulemap,28,"@vgvassilev right, ``module.modulemap`` restored. I've squashed 2 commits of ``rootcling_impl.cxx``",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:65,safety,accid,accidentally,65,"@shahor02, thanks a lot! Maybe the changes to `config/rootrc.in` accidentally dropped out. Also please make it all a single commit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:20,security,modif,modify,20,"Actually, I did not modify ``config/rootrc.in``, now added",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:34,deployability,updat,update,34,"@shahor02, I forgot to ask you to update the release notes. In the same commit please mention that ACLiC can be configured to call rootcling with special flags via this option somewhere [here](https://github.com/root-project/root/blob/master/README/ReleaseNotes/v622/index.md#core-libraries). Sorry I missed to mention that earlier.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:45,deployability,releas,release,45,"@shahor02, I forgot to ask you to update the release notes. In the same commit please mention that ACLiC can be configured to call rootcling with special flags via this option somewhere [here](https://github.com/root-project/root/blob/master/README/ReleaseNotes/v622/index.md#core-libraries). Sorry I missed to mention that earlier.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:249,deployability,Releas,ReleaseNotes,249,"@shahor02, I forgot to ask you to update the release notes. In the same commit please mention that ACLiC can be configured to call rootcling with special flags via this option somewhere [here](https://github.com/root-project/root/blob/master/README/ReleaseNotes/v622/index.md#core-libraries). Sorry I missed to mention that earlier.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:276,energy efficiency,core,core-libraries,276,"@shahor02, I forgot to ask you to update the release notes. In the same commit please mention that ACLiC can be configured to call rootcling with special flags via this option somewhere [here](https://github.com/root-project/root/blob/master/README/ReleaseNotes/v622/index.md#core-libraries). Sorry I missed to mention that earlier.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:112,integrability,configur,configured,112,"@shahor02, I forgot to ask you to update the release notes. In the same commit please mention that ACLiC can be configured to call rootcling with special flags via this option somewhere [here](https://github.com/root-project/root/blob/master/README/ReleaseNotes/v622/index.md#core-libraries). Sorry I missed to mention that earlier.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:112,modifiability,configur,configured,112,"@shahor02, I forgot to ask you to update the release notes. In the same commit please mention that ACLiC can be configured to call rootcling with special flags via this option somewhere [here](https://github.com/root-project/root/blob/master/README/ReleaseNotes/v622/index.md#core-libraries). Sorry I missed to mention that earlier.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:34,safety,updat,update,34,"@shahor02, I forgot to ask you to update the release notes. In the same commit please mention that ACLiC can be configured to call rootcling with special flags via this option somewhere [here](https://github.com/root-project/root/blob/master/README/ReleaseNotes/v622/index.md#core-libraries). Sorry I missed to mention that earlier.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:34,security,updat,update,34,"@shahor02, I forgot to ask you to update the release notes. In the same commit please mention that ACLiC can be configured to call rootcling with special flags via this option somewhere [here](https://github.com/root-project/root/blob/master/README/ReleaseNotes/v622/index.md#core-libraries). Sorry I missed to mention that earlier.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:112,security,configur,configured,112,"@shahor02, I forgot to ask you to update the release notes. In the same commit please mention that ACLiC can be configured to call rootcling with special flags via this option somewhere [here](https://github.com/root-project/root/blob/master/README/ReleaseNotes/v622/index.md#core-libraries). Sorry I missed to mention that earlier.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:97,deployability,Releas,ReleaseNotes,97,@vgvassilev please check if ok: https://github.com/shahor02/root/blob/fix_cling_movestdns/README/ReleaseNotes/v622/index.md#core-libraries,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5296:124,energy efficiency,core,core-libraries,124,@vgvassilev please check if ok: https://github.com/shahor02/root/blob/fix_cling_movestdns/README/ReleaseNotes/v622/index.md#core-libraries,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5296
https://github.com/root-project/root/pull/5297:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:42,deployability,infrastructur,infrastructure,42,"Can't we just move the tests needing this infrastructure to roottest which is serving is pretty well for comparing to golden output, and which makes it much simpler to add such tests? That way we would not even need this ""common"" library for root.git's tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:23,safety,test,tests,23,"Can't we just move the tests needing this infrastructure to roottest which is serving is pretty well for comparing to golden output, and which makes it much simpler to add such tests? That way we would not even need this ""common"" library for root.git's tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:177,safety,test,tests,177,"Can't we just move the tests needing this infrastructure to roottest which is serving is pretty well for comparing to golden output, and which makes it much simpler to add such tests? That way we would not even need this ""common"" library for root.git's tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:253,safety,test,tests,253,"Can't we just move the tests needing this infrastructure to roottest which is serving is pretty well for comparing to golden output, and which makes it much simpler to add such tests? That way we would not even need this ""common"" library for root.git's tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:23,testability,test,tests,23,"Can't we just move the tests needing this infrastructure to roottest which is serving is pretty well for comparing to golden output, and which makes it much simpler to add such tests? That way we would not even need this ""common"" library for root.git's tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:157,testability,simpl,simpler,157,"Can't we just move the tests needing this infrastructure to roottest which is serving is pretty well for comparing to golden output, and which makes it much simpler to add such tests? That way we would not even need this ""common"" library for root.git's tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:177,testability,test,tests,177,"Can't we just move the tests needing this infrastructure to roottest which is serving is pretty well for comparing to golden output, and which makes it much simpler to add such tests? That way we would not even need this ""common"" library for root.git's tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:253,testability,test,tests,253,"Can't we just move the tests needing this infrastructure to roottest which is serving is pretty well for comparing to golden output, and which makes it much simpler to add such tests? That way we would not even need this ""common"" library for root.git's tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:157,usability,simpl,simpler,157,"Can't we just move the tests needing this infrastructure to roottest which is serving is pretty well for comparing to golden output, and which makes it much simpler to add such tests? That way we would not even need this ""common"" library for root.git's tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:55,deployability,infrastructur,infrastructure,55,"That's an option. Inevitably, we will need some common infrastructure which is ROOT-specific for the root.git test and we will have to solve this sooner or later. For the particular tests we are refactoring, I'd like to keep them in root.git for the usual reasons such as they run fast and are part of the commit history which makes changes a lot clearer. In that case I will have to keep the code duplication or drop the checks for diagnostics.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:84,interoperability,specif,specific,84,"That's an option. Inevitably, we will need some common infrastructure which is ROOT-specific for the root.git test and we will have to solve this sooner or later. For the particular tests we are refactoring, I'd like to keep them in root.git for the usual reasons such as they run fast and are part of the commit history which makes changes a lot clearer. In that case I will have to keep the code duplication or drop the checks for diagnostics.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:195,modifiability,refact,refactoring,195,"That's an option. Inevitably, we will need some common infrastructure which is ROOT-specific for the root.git test and we will have to solve this sooner or later. For the particular tests we are refactoring, I'd like to keep them in root.git for the usual reasons such as they run fast and are part of the commit history which makes changes a lot clearer. In that case I will have to keep the code duplication or drop the checks for diagnostics.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:195,performance,refactor,refactoring,195,"That's an option. Inevitably, we will need some common infrastructure which is ROOT-specific for the root.git test and we will have to solve this sooner or later. For the particular tests we are refactoring, I'd like to keep them in root.git for the usual reasons such as they run fast and are part of the commit history which makes changes a lot clearer. In that case I will have to keep the code duplication or drop the checks for diagnostics.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:433,reliability,diagno,diagnostics,433,"That's an option. Inevitably, we will need some common infrastructure which is ROOT-specific for the root.git test and we will have to solve this sooner or later. For the particular tests we are refactoring, I'd like to keep them in root.git for the usual reasons such as they run fast and are part of the commit history which makes changes a lot clearer. In that case I will have to keep the code duplication or drop the checks for diagnostics.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:110,safety,test,test,110,"That's an option. Inevitably, we will need some common infrastructure which is ROOT-specific for the root.git test and we will have to solve this sooner or later. For the particular tests we are refactoring, I'd like to keep them in root.git for the usual reasons such as they run fast and are part of the commit history which makes changes a lot clearer. In that case I will have to keep the code duplication or drop the checks for diagnostics.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:182,safety,test,tests,182,"That's an option. Inevitably, we will need some common infrastructure which is ROOT-specific for the root.git test and we will have to solve this sooner or later. For the particular tests we are refactoring, I'd like to keep them in root.git for the usual reasons such as they run fast and are part of the commit history which makes changes a lot clearer. In that case I will have to keep the code duplication or drop the checks for diagnostics.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:110,testability,test,test,110,"That's an option. Inevitably, we will need some common infrastructure which is ROOT-specific for the root.git test and we will have to solve this sooner or later. For the particular tests we are refactoring, I'd like to keep them in root.git for the usual reasons such as they run fast and are part of the commit history which makes changes a lot clearer. In that case I will have to keep the code duplication or drop the checks for diagnostics.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:182,testability,test,tests,182,"That's an option. Inevitably, we will need some common infrastructure which is ROOT-specific for the root.git test and we will have to solve this sooner or later. For the particular tests we are refactoring, I'd like to keep them in root.git for the usual reasons such as they run fast and are part of the commit history which makes changes a lot clearer. In that case I will have to keep the code duplication or drop the checks for diagnostics.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:433,testability,diagno,diagnostics,433,"That's an option. Inevitably, we will need some common infrastructure which is ROOT-specific for the root.git test and we will have to solve this sooner or later. For the particular tests we are refactoring, I'd like to keep them in root.git for the usual reasons such as they run fast and are part of the commit history which makes changes a lot clearer. In that case I will have to keep the code duplication or drop the checks for diagnostics.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:347,usability,clear,clearer,347,"That's an option. Inevitably, we will need some common infrastructure which is ROOT-specific for the root.git test and we will have to solve this sooner or later. For the particular tests we are refactoring, I'd like to keep them in root.git for the usual reasons such as they run fast and are part of the commit history which makes changes a lot clearer. In that case I will have to keep the code duplication or drop the checks for diagnostics.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:22,reliability,diagno,diagnostics,22,"I'd personally prefer diagnostics be checked by the existing, proven machinery in roottest.git rather than duplicating this functionality in root.git. And we can of course always add a feature perceived as ""missing in the future"" when it's actually missing ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:22,testability,diagno,diagnostics,22,"I'd personally prefer diagnostics be checked by the existing, proven machinery in roottest.git rather than duplicating this functionality in root.git. And we can of course always add a feature perceived as ""missing in the future"" when it's actually missing ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:4,usability,person,personally,4,"I'd personally prefer diagnostics be checked by the existing, proven machinery in roottest.git rather than duplicating this functionality in root.git. And we can of course always add a feature perceived as ""missing in the future"" when it's actually missing ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:15,usability,prefer,prefer,15,"I'd personally prefer diagnostics be checked by the existing, proven machinery in roottest.git rather than duplicating this functionality in root.git. And we can of course always add a feature perceived as ""missing in the future"" when it's actually missing ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:1056,availability,error,error,1056,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:1196,availability,error,error,1196,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:1221,integrability,messag,message,1221,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:1221,interoperability,messag,message,1221,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:1056,performance,error,error,1056,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:1196,performance,error,error,1196,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:11,safety,test,testing,11,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:65,safety,test,tests,65,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:162,safety,test,test,162,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:184,safety,test,test,184,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:214,safety,test,testing,214,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:266,safety,test,test,266,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:295,safety,test,testing,295,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:347,safety,test,test,347,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:376,safety,test,testing,376,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:428,safety,test,test,428,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:458,safety,test,testing,458,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:510,safety,test,test,510,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:540,safety,test,testing,540,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:592,safety,test,test,592,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:622,safety,test,testing,622,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:674,safety,test,test,674,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:707,safety,test,testing,707,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:759,safety,test,test,759,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:792,safety,test,testing,792,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:844,safety,test,test,844,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:877,safety,test,testing,877,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:997,safety,test,test,997,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:1056,safety,error,error,1056,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:1141,safety,test,test,1141,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:1196,safety,error,error,1196,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:11,testability,test,testing,11,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:65,testability,test,tests,65,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:162,testability,test,test,162,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:184,testability,test,test,184,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:214,testability,test,testing,214,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:266,testability,test,test,266,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:295,testability,test,testing,295,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:347,testability,test,test,347,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:376,testability,test,testing,376,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:428,testability,test,test,428,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:458,testability,test,testing,458,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:510,testability,test,test,510,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:540,testability,test,testing,540,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:592,testability,test,test,592,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:622,testability,test,testing,622,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:674,testability,test,test,674,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:707,testability,test,testing,707,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:759,testability,test,test,759,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:792,testability,test,testing,792,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:844,testability,test,test,844,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:877,testability,test,testing,877,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:997,testability,test,test,997,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:1141,testability,test,test,1141,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:1056,usability,error,error,1056,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:1196,usability,error,error,1196,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```. ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/. tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();. tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();. tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();. ````. For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:317,safety,review,review,317,"@hageboeck Thanks for the feedback! I am trying to work on this PR in phases, so first I removed some of the (now unnecessary) commits.. and then I am now trying to incorporate your comment here - https://github.com/root-project/root/pull/5297#discussion_r410364571 . Sorry, if the new commit was misleading - please review this code once I remove the [WIP] tag. . Would it be better to close this PR and then open it up again once I am done making all relevant changes (based on your comments and the meeting)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:317,testability,review,review,317,"@hageboeck Thanks for the feedback! I am trying to work on this PR in phases, so first I removed some of the (now unnecessary) commits.. and then I am now trying to incorporate your comment here - https://github.com/root-project/root/pull/5297#discussion_r410364571 . Sorry, if the new commit was misleading - please review this code once I remove the [WIP] tag. . Would it be better to close this PR and then open it up again once I am done making all relevant changes (based on your comments and the meeting)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:26,usability,feedback,feedback,26,"@hageboeck Thanks for the feedback! I am trying to work on this PR in phases, so first I removed some of the (now unnecessary) commits.. and then I am now trying to incorporate your comment here - https://github.com/root-project/root/pull/5297#discussion_r410364571 . Sorry, if the new commit was misleading - please review this code once I remove the [WIP] tag. . Would it be better to close this PR and then open it up again once I am done making all relevant changes (based on your comments and the meeting)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:387,usability,close,close,387,"@hageboeck Thanks for the feedback! I am trying to work on this PR in phases, so first I removed some of the (now unnecessary) commits.. and then I am now trying to incorporate your comment here - https://github.com/root-project/root/pull/5297#discussion_r410364571 . Sorry, if the new commit was misleading - please review this code once I remove the [WIP] tag. . Would it be better to close this PR and then open it up again once I am done making all relevant changes (based on your comments and the meeting)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:196,safety,review,reviewer,196,"Hmm, OK. I just saw the github notification email, so for me the commit was out of context. I wouldn't recommend to close. You might convert the PR into a draft as long as it's WIP. Request me as reviewer if you want when you are finished.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:83,testability,context,context,83,"Hmm, OK. I just saw the github notification email, so for me the commit was out of context. I wouldn't recommend to close. You might convert the PR into a draft as long as it's WIP. Request me as reviewer if you want when you are finished.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:196,testability,review,reviewer,196,"Hmm, OK. I just saw the github notification email, so for me the commit was out of context. I wouldn't recommend to close. You might convert the PR into a draft as long as it's WIP. Request me as reviewer if you want when you are finished.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:116,usability,close,close,116,"Hmm, OK. I just saw the github notification email, so for me the commit was out of context. I wouldn't recommend to close. You might convert the PR into a draft as long as it's WIP. Request me as reviewer if you want when you are finished.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:85,safety,test,tests,85,I see. That would work. I implicitly assumed that it shouldn't get activated for all tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:85,testability,test,tests,85,I see. That would work. I implicitly assumed that it shouldn't get activated for all tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:118,interoperability,specif,specifically,118,@eguiraud In https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_nodes.cxx#L76-L79 did you specifically want that warning to be displayed in stdout and not stderr?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:77,safety,test,test,77,@eguiraud In https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_nodes.cxx#L76-L79 did you specifically want that warning to be displayed in stdout and not stderr?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:77,testability,test,test,77,@eguiraud In https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_nodes.cxx#L76-L79 did you specifically want that warning to be displayed in stdout and not stderr?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:82,safety,test,test,82,@Axel-Naumann and I came up with a location where the new header should live in: `test/unit_testing_support`. Let us know if you can think of a better place to put it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:82,testability,test,test,82,@Axel-Naumann and I came up with a location where the new header should live in: `test/unit_testing_support`. Let us know if you can think of a better place to put it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
https://github.com/root-project/root/pull/5297:6,availability,failur,failures,6,These failures seem unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5297
