id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/4016:185,performance,time,time,185,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:250,performance,load,load,250,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:330,performance,load,loaded,330,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:416,performance,load,loaded,416,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:474,performance,load,load,474,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:569,performance,load,load,569,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:742,performance,perform,performance,742,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:810,performance,Perform,Performance,810,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:909,performance,time,time,909,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1199,performance,CPU,CPU,1199,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1345,performance,memor,memory,1345,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1494,performance,load,loads,1494,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:30,safety,modul,module,30,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:82,safety,modul,module,82,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:163,safety,modul,module,163,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:273,safety,modul,module,273,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:337,safety,modul,modules,337,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:404,safety,modul,modules,404,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:483,safety,modul,modules,483,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:578,safety,modul,modules,578,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:628,safety,modul,modules,628,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1042,safety,modul,modules,1042,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1051,safety,modul,modulesoff,1051,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1084,safety,modul,modules,1084,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1093,safety,modul,moduleson,1093,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1138,safety,modul,modules,1138,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1413,safety,modul,modules,1413,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1505,safety,modul,modules,1505,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1597,safety,test,test,1597,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1833,safety,Depend,Depends,1833,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:127,security,hash,hash,127,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:151,security,ident,identifier,151,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:212,security,ident,identifier,212,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:505,security,ident,identifier,505,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:601,security,ident,identifier,601,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1597,testability,test,test,1597,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1833,testability,Depend,Depends,1833,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:57,usability,perform,performance,57,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:109,usability,efficien,efficient,109,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:315,usability,minim,minimal,315,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:742,usability,perform,performance,742,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:810,usability,Perform,Performance,810,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1345,usability,memor,memory,1345,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1352,usability,efficien,efficient,1352,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4016:1436,usability,efficien,efficient,1436,"[cxxmodules] Implement global module indexing to improve performance.; The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it. . Kudos Arpitha Raghunandan (@arpi-r)! We still need some performance measurements but the preliminary results are promising. Performance. ===. Methodology. ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:. 1) root master without modules (modulesoff). 2) root master with modules (moduleson). 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation. ---. A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4016
https://github.com/root-project/root/pull/4017:111,interoperability,plug,plugins,111,Provide warnings in TSQLStatement; After #3961 one should inform users that method not yet implemented for all plugins. Also fix introduced compiler warnings,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4017
https://github.com/root-project/root/pull/4017:65,usability,user,users,65,Provide warnings in TSQLStatement; After #3961 one should inform users that method not yet implemented for all plugins. Also fix introduced compiler warnings,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4017
https://github.com/root-project/root/pull/4018:36,deployability,modul,modules,36,[CMake] Add copyright to ROOT cmake/modules files.; Pere agreed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4018
https://github.com/root-project/root/pull/4018:36,modifiability,modul,modules,36,[CMake] Add copyright to ROOT cmake/modules files.; Pere agreed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4018
https://github.com/root-project/root/pull/4018:36,safety,modul,modules,36,[CMake] Add copyright to ROOT cmake/modules files.; Pere agreed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4018
https://github.com/root-project/root/pull/4019:111,availability,avail,available,111,"[RDF] Convert RDataFrame Higgs analysis tutorial to PyROOT; The `df103_NanoAODHiggsAnalysis` tutorial, already available in C++, has been converted to PyROOT. In this tutorial, many functions are called as arguments to nodes in the RDataFrame computational graph. In Python, these could be either written as multiline strings and then exposed to the C++ interpeter one by one with `gInterpreter.Processline()`, or put all together in one C++ header which is then declared to the interpreter via `gInterpreter.Declare()`. This second approach has been pursued, thus there are two files making up the Python version of the tutorial: one `.h` file for the header and one `.py` file for the analysis itself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4019
https://github.com/root-project/root/pull/4019:606,deployability,version,version,606,"[RDF] Convert RDataFrame Higgs analysis tutorial to PyROOT; The `df103_NanoAODHiggsAnalysis` tutorial, already available in C++, has been converted to PyROOT. In this tutorial, many functions are called as arguments to nodes in the RDataFrame computational graph. In Python, these could be either written as multiline strings and then exposed to the C++ interpeter one by one with `gInterpreter.Processline()`, or put all together in one C++ header which is then declared to the interpreter via `gInterpreter.Declare()`. This second approach has been pursued, thus there are two files making up the Python version of the tutorial: one `.h` file for the header and one `.py` file for the analysis itself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4019
https://github.com/root-project/root/pull/4019:606,integrability,version,version,606,"[RDF] Convert RDataFrame Higgs analysis tutorial to PyROOT; The `df103_NanoAODHiggsAnalysis` tutorial, already available in C++, has been converted to PyROOT. In this tutorial, many functions are called as arguments to nodes in the RDataFrame computational graph. In Python, these could be either written as multiline strings and then exposed to the C++ interpeter one by one with `gInterpreter.Processline()`, or put all together in one C++ header which is then declared to the interpreter via `gInterpreter.Declare()`. This second approach has been pursued, thus there are two files making up the Python version of the tutorial: one `.h` file for the header and one `.py` file for the analysis itself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4019
https://github.com/root-project/root/pull/4019:606,modifiability,version,version,606,"[RDF] Convert RDataFrame Higgs analysis tutorial to PyROOT; The `df103_NanoAODHiggsAnalysis` tutorial, already available in C++, has been converted to PyROOT. In this tutorial, many functions are called as arguments to nodes in the RDataFrame computational graph. In Python, these could be either written as multiline strings and then exposed to the C++ interpeter one by one with `gInterpreter.Processline()`, or put all together in one C++ header which is then declared to the interpreter via `gInterpreter.Declare()`. This second approach has been pursued, thus there are two files making up the Python version of the tutorial: one `.h` file for the header and one `.py` file for the analysis itself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4019
https://github.com/root-project/root/pull/4019:111,reliability,availab,available,111,"[RDF] Convert RDataFrame Higgs analysis tutorial to PyROOT; The `df103_NanoAODHiggsAnalysis` tutorial, already available in C++, has been converted to PyROOT. In this tutorial, many functions are called as arguments to nodes in the RDataFrame computational graph. In Python, these could be either written as multiline strings and then exposed to the C++ interpeter one by one with `gInterpreter.Processline()`, or put all together in one C++ header which is then declared to the interpreter via `gInterpreter.Declare()`. This second approach has been pursued, thus there are two files making up the Python version of the tutorial: one `.h` file for the header and one `.py` file for the analysis itself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4019
https://github.com/root-project/root/pull/4019:111,safety,avail,available,111,"[RDF] Convert RDataFrame Higgs analysis tutorial to PyROOT; The `df103_NanoAODHiggsAnalysis` tutorial, already available in C++, has been converted to PyROOT. In this tutorial, many functions are called as arguments to nodes in the RDataFrame computational graph. In Python, these could be either written as multiline strings and then exposed to the C++ interpeter one by one with `gInterpreter.Processline()`, or put all together in one C++ header which is then declared to the interpreter via `gInterpreter.Declare()`. This second approach has been pursued, thus there are two files making up the Python version of the tutorial: one `.h` file for the header and one `.py` file for the analysis itself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4019
https://github.com/root-project/root/pull/4019:111,security,availab,available,111,"[RDF] Convert RDataFrame Higgs analysis tutorial to PyROOT; The `df103_NanoAODHiggsAnalysis` tutorial, already available in C++, has been converted to PyROOT. In this tutorial, many functions are called as arguments to nodes in the RDataFrame computational graph. In Python, these could be either written as multiline strings and then exposed to the C++ interpeter one by one with `gInterpreter.Processline()`, or put all together in one C++ header which is then declared to the interpreter via `gInterpreter.Declare()`. This second approach has been pursued, thus there are two files making up the Python version of the tutorial: one `.h` file for the header and one `.py` file for the analysis itself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4019
https://github.com/root-project/root/pull/4019:335,security,expos,exposed,335,"[RDF] Convert RDataFrame Higgs analysis tutorial to PyROOT; The `df103_NanoAODHiggsAnalysis` tutorial, already available in C++, has been converted to PyROOT. In this tutorial, many functions are called as arguments to nodes in the RDataFrame computational graph. In Python, these could be either written as multiline strings and then exposed to the C++ interpeter one by one with `gInterpreter.Processline()`, or put all together in one C++ header which is then declared to the interpreter via `gInterpreter.Declare()`. This second approach has been pursued, thus there are two files making up the Python version of the tutorial: one `.h` file for the header and one `.py` file for the analysis itself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4019
https://github.com/root-project/root/pull/4020:6,deployability,updat,updates,6,"Minor updates and fixes for the build system; Related issues: [ROOT-9385](https://sft.its.cern.ch/jira/browse/ROOT-9385), [ROOT-10209](https://sft.its.cern.ch/jira/browse/ROOT-10209), [ROOT-10210](https://sft.its.cern.ch/jira/browse/ROOT-10210).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4020
https://github.com/root-project/root/pull/4020:32,deployability,build,build,32,"Minor updates and fixes for the build system; Related issues: [ROOT-9385](https://sft.its.cern.ch/jira/browse/ROOT-9385), [ROOT-10209](https://sft.its.cern.ch/jira/browse/ROOT-10209), [ROOT-10210](https://sft.its.cern.ch/jira/browse/ROOT-10210).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4020
https://github.com/root-project/root/pull/4020:6,safety,updat,updates,6,"Minor updates and fixes for the build system; Related issues: [ROOT-9385](https://sft.its.cern.ch/jira/browse/ROOT-9385), [ROOT-10209](https://sft.its.cern.ch/jira/browse/ROOT-10209), [ROOT-10210](https://sft.its.cern.ch/jira/browse/ROOT-10210).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4020
https://github.com/root-project/root/pull/4020:6,security,updat,updates,6,"Minor updates and fixes for the build system; Related issues: [ROOT-9385](https://sft.its.cern.ch/jira/browse/ROOT-9385), [ROOT-10209](https://sft.its.cern.ch/jira/browse/ROOT-10209), [ROOT-10210](https://sft.its.cern.ch/jira/browse/ROOT-10210).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4020
https://github.com/root-project/root/pull/4021:19,performance,I/O,I/O,19,[RF] Backport data I/O fixes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4021
https://github.com/root-project/root/pull/4022:19,testability,simpl,simple,19,[webgui] introduce simple RWebWindow tutorial; It shows simple communication between c++ server and JS client,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4022
https://github.com/root-project/root/pull/4022:56,testability,simpl,simple,56,[webgui] introduce simple RWebWindow tutorial; It shows simple communication between c++ server and JS client,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4022
https://github.com/root-project/root/pull/4022:19,usability,simpl,simple,19,[webgui] introduce simple RWebWindow tutorial; It shows simple communication between c++ server and JS client,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4022
https://github.com/root-project/root/pull/4022:56,usability,simpl,simple,56,[webgui] introduce simple RWebWindow tutorial; It shows simple communication between c++ server and JS client,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4022
https://github.com/root-project/root/pull/4023:48,deployability,build,build,48,Pass aditional argument in REveDataProxyBuilder build methods; Need an REveDataItem index in simple proxy builder in order to reuse common elements in same scene.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4023
https://github.com/root-project/root/pull/4023:106,deployability,build,builder,106,Pass aditional argument in REveDataProxyBuilder build methods; Need an REveDataItem index in simple proxy builder in order to reuse common elements in same scene.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4023
https://github.com/root-project/root/pull/4023:100,interoperability,prox,proxy,100,Pass aditional argument in REveDataProxyBuilder build methods; Need an REveDataItem index in simple proxy builder in order to reuse common elements in same scene.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4023
https://github.com/root-project/root/pull/4023:126,modifiability,reu,reuse,126,Pass aditional argument in REveDataProxyBuilder build methods; Need an REveDataItem index in simple proxy builder in order to reuse common elements in same scene.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4023
https://github.com/root-project/root/pull/4023:93,testability,simpl,simple,93,Pass aditional argument in REveDataProxyBuilder build methods; Need an REveDataItem index in simple proxy builder in order to reuse common elements in same scene.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4023
https://github.com/root-project/root/pull/4023:93,usability,simpl,simple,93,Pass aditional argument in REveDataProxyBuilder build methods; Need an REveDataItem index in simple proxy builder in order to reuse common elements in same scene.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4023
https://github.com/root-project/root/pull/4024:0,deployability,Instal,Install,0,"Install GDB pretty printers with correct filename when using soversion; The name of the pretty printer script must match the name of the binary, not a symlink. When soversion is used the unversioned .so file is a symlink to the versioned library file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4024
https://github.com/root-project/root/pull/4024:228,deployability,version,versioned,228,"Install GDB pretty printers with correct filename when using soversion; The name of the pretty printer script must match the name of the binary, not a symlink. When soversion is used the unversioned .so file is a symlink to the versioned library file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4024
https://github.com/root-project/root/pull/4024:228,integrability,version,versioned,228,"Install GDB pretty printers with correct filename when using soversion; The name of the pretty printer script must match the name of the binary, not a symlink. When soversion is used the unversioned .so file is a symlink to the versioned library file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4024
https://github.com/root-project/root/pull/4024:228,modifiability,version,versioned,228,"Install GDB pretty printers with correct filename when using soversion; The name of the pretty printer script must match the name of the binary, not a symlink. When soversion is used the unversioned .so file is a symlink to the versioned library file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4024
https://github.com/root-project/root/pull/4025:14,availability,toler,tolerence,14,"Increase test tolerence; Test fails on aarch64 and ppc64le on Fedora 30 and Fedora rawhide:. Test 3 : Purge, Reuse of gaps in TFile......................... FAILED. File size= 52010 (expected 51886 +/- 100). Comp Fact= 2.00 (expected 2.1 +/- 0.3)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4025
https://github.com/root-project/root/pull/4025:30,deployability,fail,fails,30,"Increase test tolerence; Test fails on aarch64 and ppc64le on Fedora 30 and Fedora rawhide:. Test 3 : Purge, Reuse of gaps in TFile......................... FAILED. File size= 52010 (expected 51886 +/- 100). Comp Fact= 2.00 (expected 2.1 +/- 0.3)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4025
https://github.com/root-project/root/pull/4025:157,deployability,FAIL,FAILED,157,"Increase test tolerence; Test fails on aarch64 and ppc64le on Fedora 30 and Fedora rawhide:. Test 3 : Purge, Reuse of gaps in TFile......................... FAILED. File size= 52010 (expected 51886 +/- 100). Comp Fact= 2.00 (expected 2.1 +/- 0.3)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4025
https://github.com/root-project/root/pull/4025:109,modifiability,Reu,Reuse,109,"Increase test tolerence; Test fails on aarch64 and ppc64le on Fedora 30 and Fedora rawhide:. Test 3 : Purge, Reuse of gaps in TFile......................... FAILED. File size= 52010 (expected 51886 +/- 100). Comp Fact= 2.00 (expected 2.1 +/- 0.3)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4025
https://github.com/root-project/root/pull/4025:30,reliability,fail,fails,30,"Increase test tolerence; Test fails on aarch64 and ppc64le on Fedora 30 and Fedora rawhide:. Test 3 : Purge, Reuse of gaps in TFile......................... FAILED. File size= 52010 (expected 51886 +/- 100). Comp Fact= 2.00 (expected 2.1 +/- 0.3)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4025
https://github.com/root-project/root/pull/4025:157,reliability,FAIL,FAILED,157,"Increase test tolerence; Test fails on aarch64 and ppc64le on Fedora 30 and Fedora rawhide:. Test 3 : Purge, Reuse of gaps in TFile......................... FAILED. File size= 52010 (expected 51886 +/- 100). Comp Fact= 2.00 (expected 2.1 +/- 0.3)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4025
https://github.com/root-project/root/pull/4025:9,safety,test,test,9,"Increase test tolerence; Test fails on aarch64 and ppc64le on Fedora 30 and Fedora rawhide:. Test 3 : Purge, Reuse of gaps in TFile......................... FAILED. File size= 52010 (expected 51886 +/- 100). Comp Fact= 2.00 (expected 2.1 +/- 0.3)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4025
https://github.com/root-project/root/pull/4025:25,safety,Test,Test,25,"Increase test tolerence; Test fails on aarch64 and ppc64le on Fedora 30 and Fedora rawhide:. Test 3 : Purge, Reuse of gaps in TFile......................... FAILED. File size= 52010 (expected 51886 +/- 100). Comp Fact= 2.00 (expected 2.1 +/- 0.3)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4025
https://github.com/root-project/root/pull/4025:93,safety,Test,Test,93,"Increase test tolerence; Test fails on aarch64 and ppc64le on Fedora 30 and Fedora rawhide:. Test 3 : Purge, Reuse of gaps in TFile......................... FAILED. File size= 52010 (expected 51886 +/- 100). Comp Fact= 2.00 (expected 2.1 +/- 0.3)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4025
https://github.com/root-project/root/pull/4025:9,testability,test,test,9,"Increase test tolerence; Test fails on aarch64 and ppc64le on Fedora 30 and Fedora rawhide:. Test 3 : Purge, Reuse of gaps in TFile......................... FAILED. File size= 52010 (expected 51886 +/- 100). Comp Fact= 2.00 (expected 2.1 +/- 0.3)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4025
https://github.com/root-project/root/pull/4025:25,testability,Test,Test,25,"Increase test tolerence; Test fails on aarch64 and ppc64le on Fedora 30 and Fedora rawhide:. Test 3 : Purge, Reuse of gaps in TFile......................... FAILED. File size= 52010 (expected 51886 +/- 100). Comp Fact= 2.00 (expected 2.1 +/- 0.3)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4025
https://github.com/root-project/root/pull/4025:93,testability,Test,Test,93,"Increase test tolerence; Test fails on aarch64 and ppc64le on Fedora 30 and Fedora rawhide:. Test 3 : Purge, Reuse of gaps in TFile......................... FAILED. File size= 52010 (expected 51886 +/- 100). Comp Fact= 2.00 (expected 2.1 +/- 0.3)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4025
https://github.com/root-project/root/pull/4026:531,availability,down,download,531,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:138,deployability,Instal,Install,138,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:324,deployability,version,version,324,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:688,deployability,build,build,688,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:181,integrability,sub,subdirectory,181,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:324,integrability,version,version,324,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:244,interoperability,plug,plugin,244,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:282,interoperability,plug,plugin,282,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:442,interoperability,plug,plugin,442,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:713,interoperability,compatib,compatibility,713,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:324,modifiability,version,version,324,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:680,modifiability,pac,package,680,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:649,performance,network,network,649,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:540,safety,input,input,540,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:597,safety,test,tests,597,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:649,security,network,network,649,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:343,testability,Simpl,Simplify,343,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:597,testability,test,tests,597,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:343,usability,Simpl,Simplify,343,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4026:540,usability,input,input,540,Some small fixes; * Remove man pages for non-existing binaries. They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition. libPeac was removed in version 5.34.01. * Simplify rule. No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it. See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists. This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4026
https://github.com/root-project/root/pull/4027:35,integrability,interfac,interface,35,[TMVA experimental] Add new reader interface;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4027
https://github.com/root-project/root/pull/4027:35,interoperability,interfac,interface,35,[TMVA experimental] Add new reader interface;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4027
https://github.com/root-project/root/pull/4027:35,modifiability,interfac,interface,35,[TMVA experimental] Add new reader interface;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4027
https://github.com/root-project/root/pull/4028:14,deployability,automat,automatic,14,"[rdf] Improve automatic axis titles:; drawing a TGraph of x vs y should not title the x axis with ""x*y"". ""x*y"" is also a bad name for a TGraph as it is not a C++ identifier; think SavePrimitive(). And while we are at it, why not introduce ""count""!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4028
https://github.com/root-project/root/pull/4028:38,energy efficiency,draw,drawing,38,"[rdf] Improve automatic axis titles:; drawing a TGraph of x vs y should not title the x axis with ""x*y"". ""x*y"" is also a bad name for a TGraph as it is not a C++ identifier; think SavePrimitive(). And while we are at it, why not introduce ""count""!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4028
https://github.com/root-project/root/pull/4028:162,security,ident,identifier,162,"[rdf] Improve automatic axis titles:; drawing a TGraph of x vs y should not title the x axis with ""x*y"". ""x*y"" is also a bad name for a TGraph as it is not a C++ identifier; think SavePrimitive(). And while we are at it, why not introduce ""count""!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4028
https://github.com/root-project/root/pull/4028:14,testability,automat,automatic,14,"[rdf] Improve automatic axis titles:; drawing a TGraph of x vs y should not title the x axis with ""x*y"". ""x*y"" is also a bad name for a TGraph as it is not a C++ identifier; think SavePrimitive(). And while we are at it, why not introduce ""count""!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4028
https://github.com/root-project/root/pull/4029:39,reliability,Doe,Does,39,[cmake] Randomize execution of gtests; Does this make sense? Could increase our test coverage.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4029
https://github.com/root-project/root/pull/4029:80,safety,test,test,80,[cmake] Randomize execution of gtests; Does this make sense? Could increase our test coverage.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4029
https://github.com/root-project/root/pull/4029:80,testability,test,test,80,[cmake] Randomize execution of gtests; Does this make sense? Could increase our test coverage.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4029
https://github.com/root-project/root/pull/4029:85,testability,coverag,coverage,85,[cmake] Randomize execution of gtests; Does this make sense? Could increase our test coverage.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4029
https://github.com/root-project/root/pull/4030:49,deployability,build,build,49,Pass additional argument in REveDataProxyBuilder build methods; This is continuation of #4023. I have replaced 'unsigned int' with 'int' and deactivated print in REveDataTable.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4030
https://github.com/root-project/root/pull/4030:72,deployability,continu,continuation,72,Pass additional argument in REveDataProxyBuilder build methods; This is continuation of #4023. I have replaced 'unsigned int' with 'int' and deactivated print in REveDataTable.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4030
https://github.com/root-project/root/pull/4031:162,integrability,interfac,interface,162,"[meta][TCling] Add TEnum::IsScopedEnum(), GetUnderlyingType() (ROOT-6988):; Provide access to whether the enum is a scoped enum through TEnum::Property(). Add an interface to determine the underlying type of an enum, as EDataType.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4031
https://github.com/root-project/root/pull/4031:162,interoperability,interfac,interface,162,"[meta][TCling] Add TEnum::IsScopedEnum(), GetUnderlyingType() (ROOT-6988):; Provide access to whether the enum is a scoped enum through TEnum::Property(). Add an interface to determine the underlying type of an enum, as EDataType.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4031
https://github.com/root-project/root/pull/4031:162,modifiability,interfac,interface,162,"[meta][TCling] Add TEnum::IsScopedEnum(), GetUnderlyingType() (ROOT-6988):; Provide access to whether the enum is a scoped enum through TEnum::Property(). Add an interface to determine the underlying type of an enum, as EDataType.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4031
https://github.com/root-project/root/pull/4031:84,security,access,access,84,"[meta][TCling] Add TEnum::IsScopedEnum(), GetUnderlyingType() (ROOT-6988):; Provide access to whether the enum is a scoped enum through TEnum::Property(). Add an interface to determine the underlying type of an enum, as EDataType.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4031
https://github.com/root-project/root/pull/4035:117,integrability,event,events,117,"[webgui] split data callback on three different handlers; Introduce special handler for connecting and disconnecting events. Avoid usage of predefined ""CONN_READY"" and ""CONN_CLOSED"" arguments. Adjust existing widgets and tutorials. These changes in callbacks **brakes backward compatibility** - in my mind, it was necessary. Hide RWebWindowsManager for ordinary users - provide convenience `RWebWindow::Create()` and `RWebWindow::TerinateROOT()` methods. Now one can include just `ROOT/RWebWindow.hxx` to get all necessary functionality. Provide tutorial with simple openui5 panel - of course, using new methods",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4035
https://github.com/root-project/root/pull/4035:277,interoperability,compatib,compatibility,277,"[webgui] split data callback on three different handlers; Introduce special handler for connecting and disconnecting events. Avoid usage of predefined ""CONN_READY"" and ""CONN_CLOSED"" arguments. Adjust existing widgets and tutorials. These changes in callbacks **brakes backward compatibility** - in my mind, it was necessary. Hide RWebWindowsManager for ordinary users - provide convenience `RWebWindow::Create()` and `RWebWindow::TerinateROOT()` methods. Now one can include just `ROOT/RWebWindow.hxx` to get all necessary functionality. Provide tutorial with simple openui5 panel - of course, using new methods",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4035
https://github.com/root-project/root/pull/4035:125,safety,Avoid,Avoid,125,"[webgui] split data callback on three different handlers; Introduce special handler for connecting and disconnecting events. Avoid usage of predefined ""CONN_READY"" and ""CONN_CLOSED"" arguments. Adjust existing widgets and tutorials. These changes in callbacks **brakes backward compatibility** - in my mind, it was necessary. Hide RWebWindowsManager for ordinary users - provide convenience `RWebWindow::Create()` and `RWebWindow::TerinateROOT()` methods. Now one can include just `ROOT/RWebWindow.hxx` to get all necessary functionality. Provide tutorial with simple openui5 panel - of course, using new methods",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4035
https://github.com/root-project/root/pull/4035:560,testability,simpl,simple,560,"[webgui] split data callback on three different handlers; Introduce special handler for connecting and disconnecting events. Avoid usage of predefined ""CONN_READY"" and ""CONN_CLOSED"" arguments. Adjust existing widgets and tutorials. These changes in callbacks **brakes backward compatibility** - in my mind, it was necessary. Hide RWebWindowsManager for ordinary users - provide convenience `RWebWindow::Create()` and `RWebWindow::TerinateROOT()` methods. Now one can include just `ROOT/RWebWindow.hxx` to get all necessary functionality. Provide tutorial with simple openui5 panel - of course, using new methods",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4035
https://github.com/root-project/root/pull/4035:209,usability,widget,widgets,209,"[webgui] split data callback on three different handlers; Introduce special handler for connecting and disconnecting events. Avoid usage of predefined ""CONN_READY"" and ""CONN_CLOSED"" arguments. Adjust existing widgets and tutorials. These changes in callbacks **brakes backward compatibility** - in my mind, it was necessary. Hide RWebWindowsManager for ordinary users - provide convenience `RWebWindow::Create()` and `RWebWindow::TerinateROOT()` methods. Now one can include just `ROOT/RWebWindow.hxx` to get all necessary functionality. Provide tutorial with simple openui5 panel - of course, using new methods",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4035
https://github.com/root-project/root/pull/4035:362,usability,user,users,362,"[webgui] split data callback on three different handlers; Introduce special handler for connecting and disconnecting events. Avoid usage of predefined ""CONN_READY"" and ""CONN_CLOSED"" arguments. Adjust existing widgets and tutorials. These changes in callbacks **brakes backward compatibility** - in my mind, it was necessary. Hide RWebWindowsManager for ordinary users - provide convenience `RWebWindow::Create()` and `RWebWindow::TerinateROOT()` methods. Now one can include just `ROOT/RWebWindow.hxx` to get all necessary functionality. Provide tutorial with simple openui5 panel - of course, using new methods",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4035
https://github.com/root-project/root/pull/4035:560,usability,simpl,simple,560,"[webgui] split data callback on three different handlers; Introduce special handler for connecting and disconnecting events. Avoid usage of predefined ""CONN_READY"" and ""CONN_CLOSED"" arguments. Adjust existing widgets and tutorials. These changes in callbacks **brakes backward compatibility** - in my mind, it was necessary. Hide RWebWindowsManager for ordinary users - provide convenience `RWebWindow::Create()` and `RWebWindow::TerinateROOT()` methods. Now one can include just `ROOT/RWebWindow.hxx` to get all necessary functionality. Provide tutorial with simple openui5 panel - of course, using new methods",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4035
https://github.com/root-project/root/pull/4036:175,availability,state,state,175,"[RF] Cleanup Histogram classes; Cleanup RooDataHist and RooHistFunc to facilitate future development. Specifically, remove iterators that are members, which carry unnecessary state around in between iterations. These were replaced by range-based for loops.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4036
https://github.com/root-project/root/pull/4036:175,integrability,state,state,175,"[RF] Cleanup Histogram classes; Cleanup RooDataHist and RooHistFunc to facilitate future development. Specifically, remove iterators that are members, which carry unnecessary state around in between iterations. These were replaced by range-based for loops.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4036
https://github.com/root-project/root/pull/4036:102,interoperability,Specif,Specifically,102,"[RF] Cleanup Histogram classes; Cleanup RooDataHist and RooHistFunc to facilitate future development. Specifically, remove iterators that are members, which carry unnecessary state around in between iterations. These were replaced by range-based for loops.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4036
https://github.com/root-project/root/pull/4037:1259,availability,error,errors,1259,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:1550,energy efficiency,current,current,1550,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:696,integrability,buffer,buffer,696,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:774,integrability,buffer,buffers,774,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:34,modifiability,refact,refactoring,34,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:62,modifiability,refact,refactor,62,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:1567,modifiability,maintain,maintaining,1567,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:1642,modifiability,maintain,maintained,1642,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:1783,modifiability,exten,extended,1783,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:18,performance,I/O,I/O,18,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:34,performance,refactor,refactoring,34,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:62,performance,refactor,refactor,62,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:92,performance,I/O,I/O,92,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:1259,performance,error,errors,1259,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:830,reliability,doe,does,830,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:1380,reliability,doe,does,1380,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:913,safety,avoid,avoid,913,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:1259,safety,error,errors,1259,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:1567,safety,maintain,maintaining,1567,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:1642,safety,maintain,maintained,1642,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:129,testability,simpl,simplest,129,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:129,usability,simpl,simplest,129,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:370,usability,support,support,370,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4037:1259,usability,error,errors,1259,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4037
https://github.com/root-project/root/pull/4038:36,safety,test,testing,36,[webgui] exclude new tutorials from testing;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4038
https://github.com/root-project/root/pull/4038:36,testability,test,testing,36,[webgui] exclude new tutorials from testing;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4038
https://github.com/root-project/root/pull/4039:30,deployability,Patch,Patch,30,[v7] Fix v7 webgui tutorials; Patch for 6.18 version will follow,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4039
https://github.com/root-project/root/pull/4039:45,deployability,version,version,45,[v7] Fix v7 webgui tutorials; Patch for 6.18 version will follow,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4039
https://github.com/root-project/root/pull/4039:45,integrability,version,version,45,[v7] Fix v7 webgui tutorials; Patch for 6.18 version will follow,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4039
https://github.com/root-project/root/pull/4039:45,modifiability,version,version,45,[v7] Fix v7 webgui tutorials; Patch for 6.18 version will follow,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4039
https://github.com/root-project/root/pull/4039:30,safety,Patch,Patch,30,[v7] Fix v7 webgui tutorials; Patch for 6.18 version will follow,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4039
https://github.com/root-project/root/pull/4039:30,security,Patch,Patch,30,[v7] Fix v7 webgui tutorials; Patch for 6.18 version will follow,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4039
https://github.com/root-project/root/pull/4041:134,usability,custom,custom,134,"[webgui] provide convenience RWebDisplayHandle::DisplayUrl method; It shows provided Url in ""normal"" browser window. Improve usage of custom browsers like ""opera"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4041
https://github.com/root-project/root/pull/4043:51,integrability,interfac,interface,51,[TMVA experimental] Pythonize RTensor; * Add array interface. * Add `__getitem__` magic. * Add tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4043
https://github.com/root-project/root/pull/4043:51,interoperability,interfac,interface,51,[TMVA experimental] Pythonize RTensor; * Add array interface. * Add `__getitem__` magic. * Add tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4043
https://github.com/root-project/root/pull/4043:51,modifiability,interfac,interface,51,[TMVA experimental] Pythonize RTensor; * Add array interface. * Add `__getitem__` magic. * Add tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4043
https://github.com/root-project/root/pull/4043:95,safety,test,tests,95,[TMVA experimental] Pythonize RTensor; * Add array interface. * Add `__getitem__` magic. * Add tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4043
https://github.com/root-project/root/pull/4043:95,testability,test,tests,95,[TMVA experimental] Pythonize RTensor; * Add array interface. * Add `__getitem__` magic. * Add tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4043
https://github.com/root-project/root/pull/4044:72,deployability,infrastructur,infrastructure,72,"Implement schema printing for RNTuple; This pull request adds a visitor infrastructure for the RField class. A concrete implementation, the print visitor, is used to traverse the fields of an ntuple and print a summary of the ntuple on the terminal. It is an improved version of pull request #4008 ([WIP] Implement schema printing for NTuple) with corrections and improvements, so pull request #4008 can be ignored/discarded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4044
https://github.com/root-project/root/pull/4044:268,deployability,version,version,268,"Implement schema printing for RNTuple; This pull request adds a visitor infrastructure for the RField class. A concrete implementation, the print visitor, is used to traverse the fields of an ntuple and print a summary of the ntuple on the terminal. It is an improved version of pull request #4008 ([WIP] Implement schema printing for NTuple) with corrections and improvements, so pull request #4008 can be ignored/discarded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4044
https://github.com/root-project/root/pull/4044:10,integrability,schema,schema,10,"Implement schema printing for RNTuple; This pull request adds a visitor infrastructure for the RField class. A concrete implementation, the print visitor, is used to traverse the fields of an ntuple and print a summary of the ntuple on the terminal. It is an improved version of pull request #4008 ([WIP] Implement schema printing for NTuple) with corrections and improvements, so pull request #4008 can be ignored/discarded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4044
https://github.com/root-project/root/pull/4044:268,integrability,version,version,268,"Implement schema printing for RNTuple; This pull request adds a visitor infrastructure for the RField class. A concrete implementation, the print visitor, is used to traverse the fields of an ntuple and print a summary of the ntuple on the terminal. It is an improved version of pull request #4008 ([WIP] Implement schema printing for NTuple) with corrections and improvements, so pull request #4008 can be ignored/discarded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4044
https://github.com/root-project/root/pull/4044:315,integrability,schema,schema,315,"Implement schema printing for RNTuple; This pull request adds a visitor infrastructure for the RField class. A concrete implementation, the print visitor, is used to traverse the fields of an ntuple and print a summary of the ntuple on the terminal. It is an improved version of pull request #4008 ([WIP] Implement schema printing for NTuple) with corrections and improvements, so pull request #4008 can be ignored/discarded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4044
https://github.com/root-project/root/pull/4044:268,modifiability,version,version,268,"Implement schema printing for RNTuple; This pull request adds a visitor infrastructure for the RField class. A concrete implementation, the print visitor, is used to traverse the fields of an ntuple and print a summary of the ntuple on the terminal. It is an improved version of pull request #4008 ([WIP] Implement schema printing for NTuple) with corrections and improvements, so pull request #4008 can be ignored/discarded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4044
https://github.com/root-project/root/pull/4045:37,deployability,version,version,37,"[webgui] let compile with newest CEF version; As usual, CEF changes API. Now try to support older version as well, why newest CEF still fails for me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4045
https://github.com/root-project/root/pull/4045:68,deployability,API,API,68,"[webgui] let compile with newest CEF version; As usual, CEF changes API. Now try to support older version as well, why newest CEF still fails for me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4045
https://github.com/root-project/root/pull/4045:98,deployability,version,version,98,"[webgui] let compile with newest CEF version; As usual, CEF changes API. Now try to support older version as well, why newest CEF still fails for me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4045
https://github.com/root-project/root/pull/4045:136,deployability,fail,fails,136,"[webgui] let compile with newest CEF version; As usual, CEF changes API. Now try to support older version as well, why newest CEF still fails for me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4045
https://github.com/root-project/root/pull/4045:37,integrability,version,version,37,"[webgui] let compile with newest CEF version; As usual, CEF changes API. Now try to support older version as well, why newest CEF still fails for me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4045
https://github.com/root-project/root/pull/4045:68,integrability,API,API,68,"[webgui] let compile with newest CEF version; As usual, CEF changes API. Now try to support older version as well, why newest CEF still fails for me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4045
https://github.com/root-project/root/pull/4045:98,integrability,version,version,98,"[webgui] let compile with newest CEF version; As usual, CEF changes API. Now try to support older version as well, why newest CEF still fails for me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4045
https://github.com/root-project/root/pull/4045:68,interoperability,API,API,68,"[webgui] let compile with newest CEF version; As usual, CEF changes API. Now try to support older version as well, why newest CEF still fails for me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4045
https://github.com/root-project/root/pull/4045:37,modifiability,version,version,37,"[webgui] let compile with newest CEF version; As usual, CEF changes API. Now try to support older version as well, why newest CEF still fails for me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4045
https://github.com/root-project/root/pull/4045:98,modifiability,version,version,98,"[webgui] let compile with newest CEF version; As usual, CEF changes API. Now try to support older version as well, why newest CEF still fails for me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4045
https://github.com/root-project/root/pull/4045:136,reliability,fail,fails,136,"[webgui] let compile with newest CEF version; As usual, CEF changes API. Now try to support older version as well, why newest CEF still fails for me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4045
https://github.com/root-project/root/pull/4045:84,usability,support,support,84,"[webgui] let compile with newest CEF version; As usual, CEF changes API. Now try to support older version as well, why newest CEF still fails for me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4045
https://github.com/root-project/root/pull/4046:26,deployability,version,version,26,[webgui] using proper qt5 version in ifdef to register scheme handler; Mixed up hexadecimal and decimal numbers,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4046
https://github.com/root-project/root/pull/4046:26,integrability,version,version,26,[webgui] using proper qt5 version in ifdef to register scheme handler; Mixed up hexadecimal and decimal numbers,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4046
https://github.com/root-project/root/pull/4046:26,modifiability,version,version,26,[webgui] using proper qt5 version in ifdef to register scheme handler; Mixed up hexadecimal and decimal numbers,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4046
https://github.com/root-project/root/pull/4047:127,usability,clear,clear,127,"[webgui] disable some qt5 cleanup during application exit; Newest qt 5.13.0 crashes here during exit. Disable it, while is not clear if defaultProfile can be still used -. seems to be not",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4047
https://github.com/root-project/root/pull/4048:46,deployability,modul,module,46,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:176,deployability,modul,module,176,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:379,deployability,version,version,379,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:446,deployability,modul,module,446,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:574,deployability,modul,module,574,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:92,integrability,complian,compliant,92,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:379,integrability,version,version,379,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:412,integrability,configur,configure,412,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:46,modifiability,modul,module,46,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:120,modifiability,pac,packages,120,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:176,modifiability,modul,module,176,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:379,modifiability,version,version,379,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:412,modifiability,configur,configure,412,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:446,modifiability,modul,module,446,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:574,modifiability,modul,module,574,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:260,performance,time,time,260,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:422,performance,time,time,422,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:46,safety,modul,module,46,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:92,safety,compl,compliant,92,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:176,safety,modul,module,176,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:446,safety,modul,module,446,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:555,safety,test,tests,555,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:574,safety,modul,module,574,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:92,security,compl,compliant,92,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:412,security,configur,configure,412,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4048:555,testability,test,tests,555,"[PyROOT experimental] Add __version__ to ROOT module; I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4048
https://github.com/root-project/root/pull/4049:104,deployability,build,build-type-specific,104,"[CMake] Change order of compiler flags.; - When `CMAKE_CXX_FLAGS` are defined at the command line, the. build-type-specific flags will be appended to `CMAKE_CXX_FLAGS`,. possibly overriding all flags set by users. - With this patch, pre-defined ROOT flags are prepended, giving. users the option to override flags like -O2. - Further, a status message is printed when ROOT overrides the build type and the final compiler flags are also printed in the correct order. Previously, these flags were printed wrongly, giving the false impression that the user could override e.g. the `-O` flags.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4049
https://github.com/root-project/root/pull/4049:226,deployability,patch,patch,226,"[CMake] Change order of compiler flags.; - When `CMAKE_CXX_FLAGS` are defined at the command line, the. build-type-specific flags will be appended to `CMAKE_CXX_FLAGS`,. possibly overriding all flags set by users. - With this patch, pre-defined ROOT flags are prepended, giving. users the option to override flags like -O2. - Further, a status message is printed when ROOT overrides the build type and the final compiler flags are also printed in the correct order. Previously, these flags were printed wrongly, giving the false impression that the user could override e.g. the `-O` flags.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4049
https://github.com/root-project/root/pull/4049:387,deployability,build,build,387,"[CMake] Change order of compiler flags.; - When `CMAKE_CXX_FLAGS` are defined at the command line, the. build-type-specific flags will be appended to `CMAKE_CXX_FLAGS`,. possibly overriding all flags set by users. - With this patch, pre-defined ROOT flags are prepended, giving. users the option to override flags like -O2. - Further, a status message is printed when ROOT overrides the build type and the final compiler flags are also printed in the correct order. Previously, these flags were printed wrongly, giving the false impression that the user could override e.g. the `-O` flags.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4049
https://github.com/root-project/root/pull/4049:344,integrability,messag,message,344,"[CMake] Change order of compiler flags.; - When `CMAKE_CXX_FLAGS` are defined at the command line, the. build-type-specific flags will be appended to `CMAKE_CXX_FLAGS`,. possibly overriding all flags set by users. - With this patch, pre-defined ROOT flags are prepended, giving. users the option to override flags like -O2. - Further, a status message is printed when ROOT overrides the build type and the final compiler flags are also printed in the correct order. Previously, these flags were printed wrongly, giving the false impression that the user could override e.g. the `-O` flags.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4049
https://github.com/root-project/root/pull/4049:115,interoperability,specif,specific,115,"[CMake] Change order of compiler flags.; - When `CMAKE_CXX_FLAGS` are defined at the command line, the. build-type-specific flags will be appended to `CMAKE_CXX_FLAGS`,. possibly overriding all flags set by users. - With this patch, pre-defined ROOT flags are prepended, giving. users the option to override flags like -O2. - Further, a status message is printed when ROOT overrides the build type and the final compiler flags are also printed in the correct order. Previously, these flags were printed wrongly, giving the false impression that the user could override e.g. the `-O` flags.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4049
https://github.com/root-project/root/pull/4049:344,interoperability,messag,message,344,"[CMake] Change order of compiler flags.; - When `CMAKE_CXX_FLAGS` are defined at the command line, the. build-type-specific flags will be appended to `CMAKE_CXX_FLAGS`,. possibly overriding all flags set by users. - With this patch, pre-defined ROOT flags are prepended, giving. users the option to override flags like -O2. - Further, a status message is printed when ROOT overrides the build type and the final compiler flags are also printed in the correct order. Previously, these flags were printed wrongly, giving the false impression that the user could override e.g. the `-O` flags.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4049
https://github.com/root-project/root/pull/4049:226,safety,patch,patch,226,"[CMake] Change order of compiler flags.; - When `CMAKE_CXX_FLAGS` are defined at the command line, the. build-type-specific flags will be appended to `CMAKE_CXX_FLAGS`,. possibly overriding all flags set by users. - With this patch, pre-defined ROOT flags are prepended, giving. users the option to override flags like -O2. - Further, a status message is printed when ROOT overrides the build type and the final compiler flags are also printed in the correct order. Previously, these flags were printed wrongly, giving the false impression that the user could override e.g. the `-O` flags.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4049
https://github.com/root-project/root/pull/4049:226,security,patch,patch,226,"[CMake] Change order of compiler flags.; - When `CMAKE_CXX_FLAGS` are defined at the command line, the. build-type-specific flags will be appended to `CMAKE_CXX_FLAGS`,. possibly overriding all flags set by users. - With this patch, pre-defined ROOT flags are prepended, giving. users the option to override flags like -O2. - Further, a status message is printed when ROOT overrides the build type and the final compiler flags are also printed in the correct order. Previously, these flags were printed wrongly, giving the false impression that the user could override e.g. the `-O` flags.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4049
https://github.com/root-project/root/pull/4049:85,usability,command,command,85,"[CMake] Change order of compiler flags.; - When `CMAKE_CXX_FLAGS` are defined at the command line, the. build-type-specific flags will be appended to `CMAKE_CXX_FLAGS`,. possibly overriding all flags set by users. - With this patch, pre-defined ROOT flags are prepended, giving. users the option to override flags like -O2. - Further, a status message is printed when ROOT overrides the build type and the final compiler flags are also printed in the correct order. Previously, these flags were printed wrongly, giving the false impression that the user could override e.g. the `-O` flags.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4049
https://github.com/root-project/root/pull/4049:207,usability,user,users,207,"[CMake] Change order of compiler flags.; - When `CMAKE_CXX_FLAGS` are defined at the command line, the. build-type-specific flags will be appended to `CMAKE_CXX_FLAGS`,. possibly overriding all flags set by users. - With this patch, pre-defined ROOT flags are prepended, giving. users the option to override flags like -O2. - Further, a status message is printed when ROOT overrides the build type and the final compiler flags are also printed in the correct order. Previously, these flags were printed wrongly, giving the false impression that the user could override e.g. the `-O` flags.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4049
https://github.com/root-project/root/pull/4049:279,usability,user,users,279,"[CMake] Change order of compiler flags.; - When `CMAKE_CXX_FLAGS` are defined at the command line, the. build-type-specific flags will be appended to `CMAKE_CXX_FLAGS`,. possibly overriding all flags set by users. - With this patch, pre-defined ROOT flags are prepended, giving. users the option to override flags like -O2. - Further, a status message is printed when ROOT overrides the build type and the final compiler flags are also printed in the correct order. Previously, these flags were printed wrongly, giving the false impression that the user could override e.g. the `-O` flags.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4049
https://github.com/root-project/root/pull/4049:337,usability,statu,status,337,"[CMake] Change order of compiler flags.; - When `CMAKE_CXX_FLAGS` are defined at the command line, the. build-type-specific flags will be appended to `CMAKE_CXX_FLAGS`,. possibly overriding all flags set by users. - With this patch, pre-defined ROOT flags are prepended, giving. users the option to override flags like -O2. - Further, a status message is printed when ROOT overrides the build type and the final compiler flags are also printed in the correct order. Previously, these flags were printed wrongly, giving the false impression that the user could override e.g. the `-O` flags.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4049
https://github.com/root-project/root/pull/4049:549,usability,user,user,549,"[CMake] Change order of compiler flags.; - When `CMAKE_CXX_FLAGS` are defined at the command line, the. build-type-specific flags will be appended to `CMAKE_CXX_FLAGS`,. possibly overriding all flags set by users. - With this patch, pre-defined ROOT flags are prepended, giving. users the option to override flags like -O2. - Further, a status message is printed when ROOT overrides the build type and the final compiler flags are also printed in the correct order. Previously, these flags were printed wrongly, giving the false impression that the user could override e.g. the `-O` flags.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4049
https://github.com/root-project/root/pull/4050:66,deployability,instal,installed,66,"Link MathMore privately to GSL; This is necessary to avoid ROOT's installed cmake modules to point to the build directory when using builtin GSL, since `$GSL_LIBRARIES` is the full path to `<BINARY_DIR>/lib/libgsl.so` when using builtin GSL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4050
https://github.com/root-project/root/pull/4050:82,deployability,modul,modules,82,"Link MathMore privately to GSL; This is necessary to avoid ROOT's installed cmake modules to point to the build directory when using builtin GSL, since `$GSL_LIBRARIES` is the full path to `<BINARY_DIR>/lib/libgsl.so` when using builtin GSL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4050
https://github.com/root-project/root/pull/4050:106,deployability,build,build,106,"Link MathMore privately to GSL; This is necessary to avoid ROOT's installed cmake modules to point to the build directory when using builtin GSL, since `$GSL_LIBRARIES` is the full path to `<BINARY_DIR>/lib/libgsl.so` when using builtin GSL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4050
https://github.com/root-project/root/pull/4050:82,modifiability,modul,modules,82,"Link MathMore privately to GSL; This is necessary to avoid ROOT's installed cmake modules to point to the build directory when using builtin GSL, since `$GSL_LIBRARIES` is the full path to `<BINARY_DIR>/lib/libgsl.so` when using builtin GSL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4050
https://github.com/root-project/root/pull/4050:53,safety,avoid,avoid,53,"Link MathMore privately to GSL; This is necessary to avoid ROOT's installed cmake modules to point to the build directory when using builtin GSL, since `$GSL_LIBRARIES` is the full path to `<BINARY_DIR>/lib/libgsl.so` when using builtin GSL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4050
https://github.com/root-project/root/pull/4050:82,safety,modul,modules,82,"Link MathMore privately to GSL; This is necessary to avoid ROOT's installed cmake modules to point to the build directory when using builtin GSL, since `$GSL_LIBRARIES` is the full path to `<BINARY_DIR>/lib/libgsl.so` when using builtin GSL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4050
https://github.com/root-project/root/pull/4051:13,deployability,Updat,Update,13,[Exp PyROOT] Update Cppyy; This PR updates Cppyy to the following versions:. - cppyy to 1.4.2. - cppyy-backend to clingwrapper-1.9.0. - CPyCppyy to 1.8.2,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4051
https://github.com/root-project/root/pull/4051:35,deployability,updat,updates,35,[Exp PyROOT] Update Cppyy; This PR updates Cppyy to the following versions:. - cppyy to 1.4.2. - cppyy-backend to clingwrapper-1.9.0. - CPyCppyy to 1.8.2,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4051
https://github.com/root-project/root/pull/4051:66,deployability,version,versions,66,[Exp PyROOT] Update Cppyy; This PR updates Cppyy to the following versions:. - cppyy to 1.4.2. - cppyy-backend to clingwrapper-1.9.0. - CPyCppyy to 1.8.2,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4051
https://github.com/root-project/root/pull/4051:66,integrability,version,versions,66,[Exp PyROOT] Update Cppyy; This PR updates Cppyy to the following versions:. - cppyy to 1.4.2. - cppyy-backend to clingwrapper-1.9.0. - CPyCppyy to 1.8.2,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4051
https://github.com/root-project/root/pull/4051:66,modifiability,version,versions,66,[Exp PyROOT] Update Cppyy; This PR updates Cppyy to the following versions:. - cppyy to 1.4.2. - cppyy-backend to clingwrapper-1.9.0. - CPyCppyy to 1.8.2,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4051
https://github.com/root-project/root/pull/4051:13,safety,Updat,Update,13,[Exp PyROOT] Update Cppyy; This PR updates Cppyy to the following versions:. - cppyy to 1.4.2. - cppyy-backend to clingwrapper-1.9.0. - CPyCppyy to 1.8.2,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4051
https://github.com/root-project/root/pull/4051:35,safety,updat,updates,35,[Exp PyROOT] Update Cppyy; This PR updates Cppyy to the following versions:. - cppyy to 1.4.2. - cppyy-backend to clingwrapper-1.9.0. - CPyCppyy to 1.8.2,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4051
https://github.com/root-project/root/pull/4051:13,security,Updat,Update,13,[Exp PyROOT] Update Cppyy; This PR updates Cppyy to the following versions:. - cppyy to 1.4.2. - cppyy-backend to clingwrapper-1.9.0. - CPyCppyy to 1.8.2,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4051
https://github.com/root-project/root/pull/4051:35,security,updat,updates,35,[Exp PyROOT] Update Cppyy; This PR updates Cppyy to the following versions:. - cppyy to 1.4.2. - cppyy-backend to clingwrapper-1.9.0. - CPyCppyy to 1.8.2,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4051
https://github.com/root-project/root/pull/4053:17,availability,state,state,17,[TH1] Explicitly state that `w` is not a required argument in FillN;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4053
https://github.com/root-project/root/pull/4053:17,integrability,state,state,17,[TH1] Explicitly state that `w` is not a required argument in FillN;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4053
https://github.com/root-project/root/pull/4054:17,availability,state,state,17,[TH1] Explicitly state that `w` is not a required argument in FillN;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4054
https://github.com/root-project/root/pull/4054:17,integrability,state,state,17,[TH1] Explicitly state that `w` is not a required argument in FillN;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4054
https://github.com/root-project/root/pull/4056:15,availability,monitor,monitoring,15,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:115,availability,monitor,monitoring,115,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:247,availability,monitor,monitored,247,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:15,deployability,monitor,monitoring,15,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:115,deployability,monitor,monitoring,115,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:247,deployability,monitor,monitored,247,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:15,energy efficiency,monitor,monitoring,15,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:115,energy efficiency,monitor,monitoring,115,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:247,energy efficiency,monitor,monitored,247,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:15,reliability,monitor,monitoring,15,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:115,reliability,monitor,monitoring,115,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:247,reliability,monitor,monitored,247,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:15,safety,monitor,monitoring,15,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:115,safety,monitor,monitoring,115,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:247,safety,monitor,monitored,247,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:15,testability,monitor,monitoring,15,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:115,testability,monitor,monitoring,115,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4056:247,testability,monitor,monitored,247,"[http] enables monitoring of TGeo objects in THttpServer; Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of. geometry object. Exactly like a histogram, TGeoManager can be regularly. received and dsiplayed. Also tracks can be monitored together. Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4056
https://github.com/root-project/root/pull/4058:28,usability,command,command,28,Add possibility to run post command with separate arguments; Part of https://github.com/root-project/rootbench/pull/94,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4058
https://github.com/root-project/root/pull/4059:271,deployability,contain,contains,271,"WebEve: make simultaneous scenes repaint at the end of changes ; REveManager sends BeginChanges before sending the change content, and sends EndChanges after changes have been applied. The end redraw callback loops over changes scenes and repaints them. This change also contains an optimization in table view: bind table to its model only at the time of construction or a change of the displayed collection.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4059
https://github.com/root-project/root/pull/4059:283,energy efficiency,optim,optimization,283,"WebEve: make simultaneous scenes repaint at the end of changes ; REveManager sends BeginChanges before sending the change content, and sends EndChanges after changes have been applied. The end redraw callback loops over changes scenes and repaints them. This change also contains an optimization in table view: bind table to its model only at the time of construction or a change of the displayed collection.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4059
https://github.com/root-project/root/pull/4059:329,energy efficiency,model,model,329,"WebEve: make simultaneous scenes repaint at the end of changes ; REveManager sends BeginChanges before sending the change content, and sends EndChanges after changes have been applied. The end redraw callback loops over changes scenes and repaints them. This change also contains an optimization in table view: bind table to its model only at the time of construction or a change of the displayed collection.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4059
https://github.com/root-project/root/pull/4059:311,interoperability,bind,bind,311,"WebEve: make simultaneous scenes repaint at the end of changes ; REveManager sends BeginChanges before sending the change content, and sends EndChanges after changes have been applied. The end redraw callback loops over changes scenes and repaints them. This change also contains an optimization in table view: bind table to its model only at the time of construction or a change of the displayed collection.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4059
https://github.com/root-project/root/pull/4059:311,modifiability,bind,bind,311,"WebEve: make simultaneous scenes repaint at the end of changes ; REveManager sends BeginChanges before sending the change content, and sends EndChanges after changes have been applied. The end redraw callback loops over changes scenes and repaints them. This change also contains an optimization in table view: bind table to its model only at the time of construction or a change of the displayed collection.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4059
https://github.com/root-project/root/pull/4059:122,performance,content,content,122,"WebEve: make simultaneous scenes repaint at the end of changes ; REveManager sends BeginChanges before sending the change content, and sends EndChanges after changes have been applied. The end redraw callback loops over changes scenes and repaints them. This change also contains an optimization in table view: bind table to its model only at the time of construction or a change of the displayed collection.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4059
https://github.com/root-project/root/pull/4059:283,performance,optimiz,optimization,283,"WebEve: make simultaneous scenes repaint at the end of changes ; REveManager sends BeginChanges before sending the change content, and sends EndChanges after changes have been applied. The end redraw callback loops over changes scenes and repaints them. This change also contains an optimization in table view: bind table to its model only at the time of construction or a change of the displayed collection.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4059
https://github.com/root-project/root/pull/4059:347,performance,time,time,347,"WebEve: make simultaneous scenes repaint at the end of changes ; REveManager sends BeginChanges before sending the change content, and sends EndChanges after changes have been applied. The end redraw callback loops over changes scenes and repaints them. This change also contains an optimization in table view: bind table to its model only at the time of construction or a change of the displayed collection.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4059
https://github.com/root-project/root/pull/4059:329,security,model,model,329,"WebEve: make simultaneous scenes repaint at the end of changes ; REveManager sends BeginChanges before sending the change content, and sends EndChanges after changes have been applied. The end redraw callback loops over changes scenes and repaints them. This change also contains an optimization in table view: bind table to its model only at the time of construction or a change of the displayed collection.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4059
https://github.com/root-project/root/pull/4059:13,testability,simul,simultaneous,13,"WebEve: make simultaneous scenes repaint at the end of changes ; REveManager sends BeginChanges before sending the change content, and sends EndChanges after changes have been applied. The end redraw callback loops over changes scenes and repaints them. This change also contains an optimization in table view: bind table to its model only at the time of construction or a change of the displayed collection.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4059
https://github.com/root-project/root/pull/4060:221,availability,error,errors,221,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:1298,availability,error,errors,1298,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:820,integrability,buffer,buffer,820,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:34,modifiability,refact,refactoring,34,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:52,modifiability,refact,refactoring,52,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:320,modifiability,maintain,maintainable,320,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:1584,modifiability,exten,extended,1584,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:18,performance,I/O,I/O,18,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:34,performance,refactor,refactoring,34,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:52,performance,refactor,refactoring,52,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:85,performance,I/O,I/O,85,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:221,performance,error,errors,221,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:1298,performance,error,errors,1298,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:1419,reliability,doe,does,1419,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:221,safety,error,errors,221,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:320,safety,maintain,maintainable,320,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:1298,safety,error,errors,1298,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:395,testability,simpl,simplest,395,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:163,usability,experien,experience,163,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:221,usability,error,errors,221,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:364,usability,help,helpful,364,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:395,usability,simpl,simplest,395,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4060:1298,usability,error,errors,1298,"[GSoC] [WIP] ROOT I/O Compression refactoring; I am refactoring the old code of ROOT I/O for compression. Some part of the code are up to 30 years old and from my experience that the C style code that is used is prone to errors for developers that are not familiar with the code. Since one of the goals of ROOT is to be maintainable, I think that this can be very helpful. Nonetheless, even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes that have been done so far are the following:. ### Removed pointers https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3. Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer. Also, the irep now is a reference rather than a pointer. However, I think that it would be better to make the function not void and instead of using irep just return a value. ## TODO. - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be const unsigned but perhaps in some section of the code a negative value is used to represent something. - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`. - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA. - [To be extended].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4060
https://github.com/root-project/root/pull/4062:171,deployability,configurat,configuration,171,Fix issue with popup (and context) menus on Windows; Fix a long standing issue with popup (and context) menus popping up on wrong display on Windows with multiple display configuration,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4062
https://github.com/root-project/root/pull/4062:171,integrability,configur,configuration,171,Fix issue with popup (and context) menus on Windows; Fix a long standing issue with popup (and context) menus popping up on wrong display on Windows with multiple display configuration,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4062
https://github.com/root-project/root/pull/4062:171,modifiability,configur,configuration,171,Fix issue with popup (and context) menus on Windows; Fix a long standing issue with popup (and context) menus popping up on wrong display on Windows with multiple display configuration,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4062
https://github.com/root-project/root/pull/4062:171,security,configur,configuration,171,Fix issue with popup (and context) menus on Windows; Fix a long standing issue with popup (and context) menus popping up on wrong display on Windows with multiple display configuration,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4062
https://github.com/root-project/root/pull/4062:26,testability,context,context,26,Fix issue with popup (and context) menus on Windows; Fix a long standing issue with popup (and context) menus popping up on wrong display on Windows with multiple display configuration,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4062
https://github.com/root-project/root/pull/4062:95,testability,context,context,95,Fix issue with popup (and context) menus on Windows; Fix a long standing issue with popup (and context) menus popping up on wrong display on Windows with multiple display configuration,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4062
https://github.com/root-project/root/pull/4062:35,usability,menu,menus,35,Fix issue with popup (and context) menus on Windows; Fix a long standing issue with popup (and context) menus popping up on wrong display on Windows with multiple display configuration,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4062
https://github.com/root-project/root/pull/4062:104,usability,menu,menus,104,Fix issue with popup (and context) menus on Windows; Fix a long standing issue with popup (and context) menus popping up on wrong display on Windows with multiple display configuration,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4062
https://github.com/root-project/root/pull/4063:24,deployability,version,version,24,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:153,deployability,version,version,153,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:181,deployability,version,version,181,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:237,deployability,automat,automatically,237,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:110,energy efficiency,load,loaded,110,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:24,integrability,version,version,24,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:153,integrability,version,version,153,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:181,integrability,version,version,181,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:53,interoperability,specif,specified,53,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:24,modifiability,version,version,24,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:153,modifiability,version,version,153,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:181,modifiability,version,version,181,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:110,performance,load,loaded,110,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:291,performance,cach,cache,291,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:371,performance,cach,cached,371,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:476,performance,cach,cache,476,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:237,testability,automat,automatically,237,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:268,usability,help,helps,268,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:443,usability,user,user,443,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:466,usability,clear,clear,466,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4063:513,usability,user,user,513,"[webgui] provide client version for RWebWindow; When specified, all kinds of JS scripts and ui5 files will be loaded from. URL path, which includes such version tag. Therefore when version is. changed in C++, all related scripts will be automatically reloaded. . This helps to solve browser cache problem, especially for. development phase. Normally browser heavily uses cached files, but if. one changes these files, one should explain every user that he/she must. clear the cache. With provided solution no any user intervention are. required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4063
https://github.com/root-project/root/pull/4064:125,integrability,event,event,125,"[Math] Fix divide by zero in TFoam.; When TFoam is pre-sampling a phase space, it may divide by zero if for. some reason the event weight being generated is zero. This stops the generator. loop, and leads to a fp exception when enabled. With this fix, the loop is kept running until the desired number of events. has been generated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4064
https://github.com/root-project/root/pull/4064:305,integrability,event,events,305,"[Math] Fix divide by zero in TFoam.; When TFoam is pre-sampling a phase space, it may divide by zero if for. some reason the event weight being generated is zero. This stops the generator. loop, and leads to a fp exception when enabled. With this fix, the loop is kept running until the desired number of events. has been generated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4064
https://github.com/root-project/root/pull/4064:213,safety,except,exception,213,"[Math] Fix divide by zero in TFoam.; When TFoam is pre-sampling a phase space, it may divide by zero if for. some reason the event weight being generated is zero. This stops the generator. loop, and leads to a fp exception when enabled. With this fix, the loop is kept running until the desired number of events. has been generated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4064
https://github.com/root-project/root/pull/4064:168,usability,stop,stops,168,"[Math] Fix divide by zero in TFoam.; When TFoam is pre-sampling a phase space, it may divide by zero if for. some reason the event weight being generated is zero. This stops the generator. loop, and leads to a fp exception when enabled. With this fix, the loop is kept running until the desired number of events. has been generated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4064
https://github.com/root-project/root/pull/4065:14,deployability,integr,integral,14,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:43,deployability,integr,integral,43,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:131,deployability,integr,integrating,131,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:14,integrability,integr,integral,14,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:43,integrability,integr,integral,43,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:131,integrability,integr,integrating,131,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:14,interoperability,integr,integral,14,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:43,interoperability,integr,integral,43,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:131,interoperability,integr,integrating,131,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:14,modifiability,integr,integral,14,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:43,modifiability,integr,integral,43,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:131,modifiability,integr,integrating,131,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:14,reliability,integr,integral,14,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:43,reliability,integr,integral,43,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:131,reliability,integr,integrating,131,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:5,safety,Sanit,Sanitise,5,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:5,security,Sanit,Sanitise,5,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:14,security,integr,integral,14,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:43,security,integr,integral,43,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:131,security,integr,integrating,131,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:14,testability,integr,integral,14,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:43,testability,integr,integral,43,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4065:131,testability,integr,integrating,131,"[RF] Sanitise integral of RooCBShape.; The integral of the crystal ball shape might vanish quickly due to. a finite precision when integrating far from the centre. This leads to divisions by zero. Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4065
https://github.com/root-project/root/pull/4068:148,deployability,patch,patch,148,"Fix some windows compiler warnings; Fixes ~20 from 100 existing warnings on Windows, . remaining warnings are from llvm and clang, which is hard to patch now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4068
https://github.com/root-project/root/pull/4068:148,safety,patch,patch,148,"Fix some windows compiler warnings; Fixes ~20 from 100 existing warnings on Windows, . remaining warnings are from llvm and clang, which is hard to patch now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4068
https://github.com/root-project/root/pull/4068:148,security,patch,patch,148,"Fix some windows compiler warnings; Fixes ~20 from 100 existing warnings on Windows, . remaining warnings are from llvm and clang, which is hard to patch now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4068
https://github.com/root-project/root/pull/4069:38,interoperability,specif,specifier,38,"[eve7] fix new warnings, use override specifier at fixed files; This should fix newly introduced warnings from @alja",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4069
https://github.com/root-project/root/pull/4070:187,integrability,sub,subset,187,"[RF] Implement prefit option for roofit.; Added ""PrefitDataFraction"" parameter in fitTo method in RooAbsPdf. This can speed up fitting by computing better starting values. out of a small subset of the data.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4070
https://github.com/root-project/root/pull/4070:69,modifiability,paramet,parameter,69,"[RF] Implement prefit option for roofit.; Added ""PrefitDataFraction"" parameter in fitTo method in RooAbsPdf. This can speed up fitting by computing better starting values. out of a small subset of the data.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4070
https://github.com/root-project/root/pull/4071:7,deployability,continu,continued,7,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:80,deployability,continu,continues,80,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:213,deployability,version,version,213,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:400,deployability,version,version,400,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:427,deployability,version,version,427,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:841,deployability,updat,updated,841,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:865,deployability,version,version,865,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:213,integrability,version,version,213,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:400,integrability,version,version,400,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:427,integrability,version,version,427,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:560,integrability,filter,filtering,560,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:807,integrability,complian,compliant,807,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:865,integrability,version,version,865,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:1020,interoperability,format,formatted,1020,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:1119,interoperability,platform,platform,1119,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:213,modifiability,version,version,213,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:285,modifiability,exten,extended,285,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:400,modifiability,version,version,400,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:427,modifiability,version,version,427,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:444,modifiability,refact,refactored,444,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:865,modifiability,version,version,865,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:444,performance,refactor,refactored,444,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:807,safety,compl,compliant,807,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:841,safety,updat,updated,841,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:807,security,compl,compliant,807,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4071:841,security,updat,updated,841,"[RDF] [continued] Convert RDataFrame Higgs analysis tutorial to PyROOT; This PR continues the work started in #4019 . The discussed changes have been applied. . Regarding the usage of a header just for the Python version of the tutorial, for the moment the name of the header has been extended with ""_python"". Plus, the comments at the top already stressed the fact that it is declared in the Python version. Of course the C++ version could be refactored in order to declare the header as well, at the moment the only main difference would be that in C++ some filtering functions are written as lambdas, while in Python they have been added as free functions in the header and then get declared to the interpreter. In general, the following suggested changes have been applied:. 1. The tutorial is now PEP8 compliant. 2. The header has been updated with the latest version of the C++ tutorial ([commit](https://github.com/root-project/root/commit/bd821cc6ec7ce18d0105ca97959a7ed9fb0a7004)). 3. Weights are now passed as formatted strings of constant values to the `Histo1D` functions. 4. Path to the header *should* be platform independent. Further suggestions are deeply appreciated",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4071
https://github.com/root-project/root/pull/4072:186,deployability,fail,failing,186,"[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test; The test mentioned above was rewritten in order to pass in Experimental PyROOT. What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:. `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`. The presence of this function basically splits the above command like the following: . 1. the function is drawn on the canvas with the command. `L[0].Draw()`. 2. the entry is added to the legend with the command. `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`. Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4072
https://github.com/root-project/root/pull/4072:167,energy efficiency,current,current,167,"[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test; The test mentioned above was rewritten in order to pass in Experimental PyROOT. What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:. `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`. The presence of this function basically splits the above command like the following: . 1. the function is drawn on the canvas with the command. `L[0].Draw()`. 2. the entry is added to the legend with the command. `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`. Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4072
https://github.com/root-project/root/pull/4072:377,energy efficiency,Draw,Draw,377,"[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test; The test mentioned above was rewritten in order to pass in Experimental PyROOT. What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:. `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`. The presence of this function basically splits the above command like the following: . 1. the function is drawn on the canvas with the command. `L[0].Draw()`. 2. the entry is added to the legend with the command. `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`. Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4072
https://github.com/root-project/root/pull/4072:511,energy efficiency,draw,drawn,511,"[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test; The test mentioned above was rewritten in order to pass in Experimental PyROOT. What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:. `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`. The presence of this function basically splits the above command like the following: . 1. the function is drawn on the canvas with the command. `L[0].Draw()`. 2. the entry is added to the legend with the command. `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`. Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4072
https://github.com/root-project/root/pull/4072:555,energy efficiency,Draw,Draw,555,"[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test; The test mentioned above was rewritten in order to pass in Experimental PyROOT. What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:. `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`. The presence of this function basically splits the above command like the following: . 1. the function is drawn on the canvas with the command. `L[0].Draw()`. 2. the entry is added to the legend with the command. `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`. Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4072
https://github.com/root-project/root/pull/4072:704,energy efficiency,Draw,Draw,704,"[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test; The test mentioned above was rewritten in order to pass in Experimental PyROOT. What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:. `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`. The presence of this function basically splits the above command like the following: . 1. the function is drawn on the canvas with the command. `L[0].Draw()`. 2. the entry is added to the legend with the command. `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`. Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4072
https://github.com/root-project/root/pull/4072:186,reliability,fail,failing,186,"[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test; The test mentioned above was rewritten in order to pass in Experimental PyROOT. What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:. `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`. The presence of this function basically splits the above command like the following: . 1. the function is drawn on the canvas with the command. `L[0].Draw()`. 2. the entry is added to the legend with the command. `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`. Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4072
https://github.com/root-project/root/pull/4072:47,safety,test,test,47,"[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test; The test mentioned above was rewritten in order to pass in Experimental PyROOT. What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:. `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`. The presence of this function basically splits the above command like the following: . 1. the function is drawn on the canvas with the command. `L[0].Draw()`. 2. the entry is added to the legend with the command. `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`. Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4072
https://github.com/root-project/root/pull/4072:57,safety,test,test,57,"[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test; The test mentioned above was rewritten in order to pass in Experimental PyROOT. What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:. `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`. The presence of this function basically splits the above command like the following: . 1. the function is drawn on the canvas with the command. `L[0].Draw()`. 2. the entry is added to the legend with the command. `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`. Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4072
https://github.com/root-project/root/pull/4072:147,safety,test,test,147,"[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test; The test mentioned above was rewritten in order to pass in Experimental PyROOT. What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:. `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`. The presence of this function basically splits the above command like the following: . 1. the function is drawn on the canvas with the command. `L[0].Draw()`. 2. the entry is added to the legend with the command. `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`. Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4072
https://github.com/root-project/root/pull/4072:47,testability,test,test,47,"[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test; The test mentioned above was rewritten in order to pass in Experimental PyROOT. What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:. `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`. The presence of this function basically splits the above command like the following: . 1. the function is drawn on the canvas with the command. `L[0].Draw()`. 2. the entry is added to the legend with the command. `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`. Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4072
https://github.com/root-project/root/pull/4072:57,testability,test,test,57,"[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test; The test mentioned above was rewritten in order to pass in Experimental PyROOT. What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:. `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`. The presence of this function basically splits the above command like the following: . 1. the function is drawn on the canvas with the command. `L[0].Draw()`. 2. the entry is added to the legend with the command. `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`. Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4072
https://github.com/root-project/root/pull/4072:147,testability,test,test,147,"[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test; The test mentioned above was rewritten in order to pass in Experimental PyROOT. What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:. `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`. The presence of this function basically splits the above command like the following: . 1. the function is drawn on the canvas with the command. `L[0].Draw()`. 2. the entry is added to the legend with the command. `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`. Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4072
https://github.com/root-project/root/pull/4072:462,usability,command,command,462,"[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test; The test mentioned above was rewritten in order to pass in Experimental PyROOT. What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:. `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`. The presence of this function basically splits the above command like the following: . 1. the function is drawn on the canvas with the command. `L[0].Draw()`. 2. the entry is added to the legend with the command. `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`. Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4072
https://github.com/root-project/root/pull/4072:540,usability,command,command,540,"[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test; The test mentioned above was rewritten in order to pass in Experimental PyROOT. What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:. `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`. The presence of this function basically splits the above command like the following: . 1. the function is drawn on the canvas with the command. `L[0].Draw()`. 2. the entry is added to the legend with the command. `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`. Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4072
https://github.com/root-project/root/pull/4072:609,usability,command,command,609,"[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test; The test mentioned above was rewritten in order to pass in Experimental PyROOT. What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:. `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`. The presence of this function basically splits the above command like the following: . 1. the function is drawn on the canvas with the command. `L[0].Draw()`. 2. the entry is added to the legend with the command. `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`. Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4072
https://github.com/root-project/root/pull/4073:33,deployability,modul,module,33,Non-functional changes to thread module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4073
https://github.com/root-project/root/pull/4073:33,modifiability,modul,module,33,Non-functional changes to thread module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4073
https://github.com/root-project/root/pull/4073:33,safety,modul,module,33,Non-functional changes to thread module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4073
https://github.com/root-project/root/pull/4074:12,deployability,canary,canary,12,"[cling] Use canary bytes to determine whether to run dtor:; If the constructor of the contained object is not run (e.g. because. assembling its arguments triggered an exception), the dtor must not. be run when destructing the cling::Value. Detect this case by imprinting. canary bytes into the contained object bytes: if they have changed,. run the dtor, if not assume that the constructor has failed. This will cause false positives in those cases where the constructor. is not modifying the first object bytes: in these cases, the dtor. is not run even though the ctor is run. That is still better than. the other case (where the dtor crashes because no ctor was run).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4074
https://github.com/root-project/root/pull/4074:86,deployability,contain,contained,86,"[cling] Use canary bytes to determine whether to run dtor:; If the constructor of the contained object is not run (e.g. because. assembling its arguments triggered an exception), the dtor must not. be run when destructing the cling::Value. Detect this case by imprinting. canary bytes into the contained object bytes: if they have changed,. run the dtor, if not assume that the constructor has failed. This will cause false positives in those cases where the constructor. is not modifying the first object bytes: in these cases, the dtor. is not run even though the ctor is run. That is still better than. the other case (where the dtor crashes because no ctor was run).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4074
https://github.com/root-project/root/pull/4074:272,deployability,canary,canary,272,"[cling] Use canary bytes to determine whether to run dtor:; If the constructor of the contained object is not run (e.g. because. assembling its arguments triggered an exception), the dtor must not. be run when destructing the cling::Value. Detect this case by imprinting. canary bytes into the contained object bytes: if they have changed,. run the dtor, if not assume that the constructor has failed. This will cause false positives in those cases where the constructor. is not modifying the first object bytes: in these cases, the dtor. is not run even though the ctor is run. That is still better than. the other case (where the dtor crashes because no ctor was run).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4074
https://github.com/root-project/root/pull/4074:294,deployability,contain,contained,294,"[cling] Use canary bytes to determine whether to run dtor:; If the constructor of the contained object is not run (e.g. because. assembling its arguments triggered an exception), the dtor must not. be run when destructing the cling::Value. Detect this case by imprinting. canary bytes into the contained object bytes: if they have changed,. run the dtor, if not assume that the constructor has failed. This will cause false positives in those cases where the constructor. is not modifying the first object bytes: in these cases, the dtor. is not run even though the ctor is run. That is still better than. the other case (where the dtor crashes because no ctor was run).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4074
https://github.com/root-project/root/pull/4074:394,deployability,fail,failed,394,"[cling] Use canary bytes to determine whether to run dtor:; If the constructor of the contained object is not run (e.g. because. assembling its arguments triggered an exception), the dtor must not. be run when destructing the cling::Value. Detect this case by imprinting. canary bytes into the contained object bytes: if they have changed,. run the dtor, if not assume that the constructor has failed. This will cause false positives in those cases where the constructor. is not modifying the first object bytes: in these cases, the dtor. is not run even though the ctor is run. That is still better than. the other case (where the dtor crashes because no ctor was run).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4074
https://github.com/root-project/root/pull/4074:394,reliability,fail,failed,394,"[cling] Use canary bytes to determine whether to run dtor:; If the constructor of the contained object is not run (e.g. because. assembling its arguments triggered an exception), the dtor must not. be run when destructing the cling::Value. Detect this case by imprinting. canary bytes into the contained object bytes: if they have changed,. run the dtor, if not assume that the constructor has failed. This will cause false positives in those cases where the constructor. is not modifying the first object bytes: in these cases, the dtor. is not run even though the ctor is run. That is still better than. the other case (where the dtor crashes because no ctor was run).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4074
https://github.com/root-project/root/pull/4074:167,safety,except,exception,167,"[cling] Use canary bytes to determine whether to run dtor:; If the constructor of the contained object is not run (e.g. because. assembling its arguments triggered an exception), the dtor must not. be run when destructing the cling::Value. Detect this case by imprinting. canary bytes into the contained object bytes: if they have changed,. run the dtor, if not assume that the constructor has failed. This will cause false positives in those cases where the constructor. is not modifying the first object bytes: in these cases, the dtor. is not run even though the ctor is run. That is still better than. the other case (where the dtor crashes because no ctor was run).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4074
https://github.com/root-project/root/pull/4074:240,safety,Detect,Detect,240,"[cling] Use canary bytes to determine whether to run dtor:; If the constructor of the contained object is not run (e.g. because. assembling its arguments triggered an exception), the dtor must not. be run when destructing the cling::Value. Detect this case by imprinting. canary bytes into the contained object bytes: if they have changed,. run the dtor, if not assume that the constructor has failed. This will cause false positives in those cases where the constructor. is not modifying the first object bytes: in these cases, the dtor. is not run even though the ctor is run. That is still better than. the other case (where the dtor crashes because no ctor was run).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4074
https://github.com/root-project/root/pull/4074:240,security,Detect,Detect,240,"[cling] Use canary bytes to determine whether to run dtor:; If the constructor of the contained object is not run (e.g. because. assembling its arguments triggered an exception), the dtor must not. be run when destructing the cling::Value. Detect this case by imprinting. canary bytes into the contained object bytes: if they have changed,. run the dtor, if not assume that the constructor has failed. This will cause false positives in those cases where the constructor. is not modifying the first object bytes: in these cases, the dtor. is not run even though the ctor is run. That is still better than. the other case (where the dtor crashes because no ctor was run).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4074
https://github.com/root-project/root/pull/4074:479,security,modif,modifying,479,"[cling] Use canary bytes to determine whether to run dtor:; If the constructor of the contained object is not run (e.g. because. assembling its arguments triggered an exception), the dtor must not. be run when destructing the cling::Value. Detect this case by imprinting. canary bytes into the contained object bytes: if they have changed,. run the dtor, if not assume that the constructor has failed. This will cause false positives in those cases where the constructor. is not modifying the first object bytes: in these cases, the dtor. is not run even though the ctor is run. That is still better than. the other case (where the dtor crashes because no ctor was run).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4074
https://github.com/root-project/root/pull/4075:19,modifiability,variab,variable,19,[RDF] Avoid unused variable warning; * Show up with gcc9,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4075
https://github.com/root-project/root/pull/4075:6,safety,Avoid,Avoid,6,[RDF] Avoid unused variable warning; * Show up with gcc9,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4075
https://github.com/root-project/root/pull/4078:58,deployability,Updat,Update,58,[Exp PyROOT] Silenced some warnings after commit 466e582; Update of the previous pull request #4077,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4078
https://github.com/root-project/root/pull/4078:58,safety,Updat,Update,58,[Exp PyROOT] Silenced some warnings after commit 466e582; Update of the previous pull request #4077,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4078
https://github.com/root-project/root/pull/4078:58,security,Updat,Update,58,[Exp PyROOT] Silenced some warnings after commit 466e582; Update of the previous pull request #4077,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4078
https://github.com/root-project/root/pull/4079:132,safety,Test,Tested,132,WebEve: Fix use of virtual/override in REveSimpleProxyBuilderTemplate; This changes are need for collection_proxies.C demo to work. Tested this on Fedora 30.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4079
https://github.com/root-project/root/pull/4079:132,testability,Test,Tested,132,WebEve: Fix use of virtual/override in REveSimpleProxyBuilderTemplate; This changes are need for collection_proxies.C demo to work. Tested this on Fedora 30.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4079
https://github.com/root-project/root/pull/4081:33,usability,indicat,indicate,33,"Introduce a new directory bit to indicate custom browsing; RNTuple stores data in a directory. Upon opening this directory in TBrowser, not the opaque internal keys should be displayed but a user-friendly representation of the ntuple structure (fields). Thus, a new TDirectoryFile bit is introduced that should indicate to the TBrowser that an object of the type set in the directory's title shall take care of the in-directory browsing. @bellenot @Axel-Naumann Please have a look.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4081
https://github.com/root-project/root/pull/4081:42,usability,custom,custom,42,"Introduce a new directory bit to indicate custom browsing; RNTuple stores data in a directory. Upon opening this directory in TBrowser, not the opaque internal keys should be displayed but a user-friendly representation of the ntuple structure (fields). Thus, a new TDirectoryFile bit is introduced that should indicate to the TBrowser that an object of the type set in the directory's title shall take care of the in-directory browsing. @bellenot @Axel-Naumann Please have a look.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4081
https://github.com/root-project/root/pull/4081:191,usability,user,user-friendly,191,"Introduce a new directory bit to indicate custom browsing; RNTuple stores data in a directory. Upon opening this directory in TBrowser, not the opaque internal keys should be displayed but a user-friendly representation of the ntuple structure (fields). Thus, a new TDirectoryFile bit is introduced that should indicate to the TBrowser that an object of the type set in the directory's title shall take care of the in-directory browsing. @bellenot @Axel-Naumann Please have a look.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4081
https://github.com/root-project/root/pull/4081:311,usability,indicat,indicate,311,"Introduce a new directory bit to indicate custom browsing; RNTuple stores data in a directory. Upon opening this directory in TBrowser, not the opaque internal keys should be displayed but a user-friendly representation of the ntuple structure (fields). Thus, a new TDirectoryFile bit is introduced that should indicate to the TBrowser that an object of the type set in the directory's title shall take care of the in-directory browsing. @bellenot @Axel-Naumann Please have a look.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4081
https://github.com/root-project/root/pull/4082:40,interoperability,incompatib,incompatible,40,"[PyROOT experimental] Fix warning about incompatible function types; To be compatible with the definition of PyCFunction, op_reduce has to. take two PyObject* as arguments.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4082
https://github.com/root-project/root/pull/4082:75,interoperability,compatib,compatible,75,"[PyROOT experimental] Fix warning about incompatible function types; To be compatible with the definition of PyCFunction, op_reduce has to. take two PyObject* as arguments.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4082
https://github.com/root-project/root/pull/4083:1237,availability,sli,slightly,1237,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:264,deployability,patch,patch,264,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:468,deployability,depend,dependent,468,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:659,deployability,version,version,659,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:1178,deployability,depend,dependent,1178,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:1260,deployability,version,version,1260,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:356,integrability,event,eventually,356,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:468,integrability,depend,dependent,468,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:659,integrability,version,version,659,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:1178,integrability,depend,dependent,1178,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:1260,integrability,version,version,1260,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:652,interoperability,format,format,652,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:468,modifiability,depend,dependent,468,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:659,modifiability,version,version,659,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:1178,modifiability,depend,dependent,1178,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:1260,modifiability,version,version,1260,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:481,performance,time,timestamp,481,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:545,performance,content,content,545,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:844,performance,content,content,844,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:1061,performance,time,time,1061,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:1101,performance,time,time,1101,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:1173,performance,time,time,1173,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:1237,reliability,sli,slightly,1237,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:264,safety,patch,patch,264,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:468,safety,depend,dependent,468,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:1178,safety,depend,dependent,1178,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:264,security,patch,patch,264,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:384,security,hack,hacky,384,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:447,security,checksum,checksum,447,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:604,security,checksum,checksum,604,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:717,security,modif,modify,717,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:749,security,checksum,checksums,749,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:852,security,checksum,checksum,852,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:872,security,checksum,checksum,872,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:996,security,control,controlled,996,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:468,testability,depend,dependent,468,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:996,testability,control,controlled,996,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:1178,testability,depend,dependent,1178,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:144,usability,feedback,feedback,144,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4083:182,usability,help,help,182,"[RFC]: Reproducible ROOT files (DO NOT MERGE); Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with. deterministic checksum that is not dependent on timestamp or hostname or. anything: Create a file with the same content twice on different. machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:. The file is created in one place at one time and not incrementally over. a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4083
https://github.com/root-project/root/pull/4084:52,deployability,fail,failing,52,"[Exp PyROOT] Extra lookup added in order to fix two failing tutorials; The tutorials ""tutorial-pyroot-geometry-py"" and ""tutorial-pyroot-na49view-py"" were failing in Experimental PyROOT because of the absence of an extra lookup performed inside gROOT, which was implemented in the old PyROOT in the function LookupCppInstance(). . It was decided to solve this problem by adding this third lookup to the _fallback_getattr() function inside _facade.py. . This also allow to get an object inside gROOT by simply typing:. `ROOT.a`. instead of . `ROOT.gROOT.FindObject(a)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4084
https://github.com/root-project/root/pull/4084:154,deployability,fail,failing,154,"[Exp PyROOT] Extra lookup added in order to fix two failing tutorials; The tutorials ""tutorial-pyroot-geometry-py"" and ""tutorial-pyroot-na49view-py"" were failing in Experimental PyROOT because of the absence of an extra lookup performed inside gROOT, which was implemented in the old PyROOT in the function LookupCppInstance(). . It was decided to solve this problem by adding this third lookup to the _fallback_getattr() function inside _facade.py. . This also allow to get an object inside gROOT by simply typing:. `ROOT.a`. instead of . `ROOT.gROOT.FindObject(a)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4084
https://github.com/root-project/root/pull/4084:227,performance,perform,performed,227,"[Exp PyROOT] Extra lookup added in order to fix two failing tutorials; The tutorials ""tutorial-pyroot-geometry-py"" and ""tutorial-pyroot-na49view-py"" were failing in Experimental PyROOT because of the absence of an extra lookup performed inside gROOT, which was implemented in the old PyROOT in the function LookupCppInstance(). . It was decided to solve this problem by adding this third lookup to the _fallback_getattr() function inside _facade.py. . This also allow to get an object inside gROOT by simply typing:. `ROOT.a`. instead of . `ROOT.gROOT.FindObject(a)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4084
https://github.com/root-project/root/pull/4084:52,reliability,fail,failing,52,"[Exp PyROOT] Extra lookup added in order to fix two failing tutorials; The tutorials ""tutorial-pyroot-geometry-py"" and ""tutorial-pyroot-na49view-py"" were failing in Experimental PyROOT because of the absence of an extra lookup performed inside gROOT, which was implemented in the old PyROOT in the function LookupCppInstance(). . It was decided to solve this problem by adding this third lookup to the _fallback_getattr() function inside _facade.py. . This also allow to get an object inside gROOT by simply typing:. `ROOT.a`. instead of . `ROOT.gROOT.FindObject(a)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4084
https://github.com/root-project/root/pull/4084:154,reliability,fail,failing,154,"[Exp PyROOT] Extra lookup added in order to fix two failing tutorials; The tutorials ""tutorial-pyroot-geometry-py"" and ""tutorial-pyroot-na49view-py"" were failing in Experimental PyROOT because of the absence of an extra lookup performed inside gROOT, which was implemented in the old PyROOT in the function LookupCppInstance(). . It was decided to solve this problem by adding this third lookup to the _fallback_getattr() function inside _facade.py. . This also allow to get an object inside gROOT by simply typing:. `ROOT.a`. instead of . `ROOT.gROOT.FindObject(a)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4084
https://github.com/root-project/root/pull/4084:501,testability,simpl,simply,501,"[Exp PyROOT] Extra lookup added in order to fix two failing tutorials; The tutorials ""tutorial-pyroot-geometry-py"" and ""tutorial-pyroot-na49view-py"" were failing in Experimental PyROOT because of the absence of an extra lookup performed inside gROOT, which was implemented in the old PyROOT in the function LookupCppInstance(). . It was decided to solve this problem by adding this third lookup to the _fallback_getattr() function inside _facade.py. . This also allow to get an object inside gROOT by simply typing:. `ROOT.a`. instead of . `ROOT.gROOT.FindObject(a)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4084
https://github.com/root-project/root/pull/4084:227,usability,perform,performed,227,"[Exp PyROOT] Extra lookup added in order to fix two failing tutorials; The tutorials ""tutorial-pyroot-geometry-py"" and ""tutorial-pyroot-na49view-py"" were failing in Experimental PyROOT because of the absence of an extra lookup performed inside gROOT, which was implemented in the old PyROOT in the function LookupCppInstance(). . It was decided to solve this problem by adding this third lookup to the _fallback_getattr() function inside _facade.py. . This also allow to get an object inside gROOT by simply typing:. `ROOT.a`. instead of . `ROOT.gROOT.FindObject(a)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4084
https://github.com/root-project/root/pull/4084:501,usability,simpl,simply,501,"[Exp PyROOT] Extra lookup added in order to fix two failing tutorials; The tutorials ""tutorial-pyroot-geometry-py"" and ""tutorial-pyroot-na49view-py"" were failing in Experimental PyROOT because of the absence of an extra lookup performed inside gROOT, which was implemented in the old PyROOT in the function LookupCppInstance(). . It was decided to solve this problem by adding this third lookup to the _fallback_getattr() function inside _facade.py. . This also allow to get an object inside gROOT by simply typing:. `ROOT.a`. instead of . `ROOT.gROOT.FindObject(a)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4084
https://github.com/root-project/root/pull/4086:0,deployability,updat,update,0,update CODEOWNERS file; Add @linev to some subprojects to get notification at proper time,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4086
https://github.com/root-project/root/pull/4086:43,integrability,sub,subprojects,43,update CODEOWNERS file; Add @linev to some subprojects to get notification at proper time,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4086
https://github.com/root-project/root/pull/4086:85,performance,time,time,85,update CODEOWNERS file; Add @linev to some subprojects to get notification at proper time,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4086
https://github.com/root-project/root/pull/4086:0,safety,updat,update,0,update CODEOWNERS file; Add @linev to some subprojects to get notification at proper time,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4086
https://github.com/root-project/root/pull/4086:0,security,updat,update,0,update CODEOWNERS file; Add @linev to some subprojects to get notification at proper time,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4086
https://github.com/root-project/root/pull/4088:122,deployability,continu,continuation,122,"[cxxmodules] Do not use rdict files.; We would like to get some performance evaluations from the cmssw side. This PR is a continuation from PR #3012 . @smuzaffar, @mrodozov, could you build ROOT's cxxmodule IB against this PR and see if there are performance difference with and without this PR?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4088
https://github.com/root-project/root/pull/4088:184,deployability,build,build,184,"[cxxmodules] Do not use rdict files.; We would like to get some performance evaluations from the cmssw side. This PR is a continuation from PR #3012 . @smuzaffar, @mrodozov, could you build ROOT's cxxmodule IB against this PR and see if there are performance difference with and without this PR?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4088
https://github.com/root-project/root/pull/4088:64,performance,performance evalu,performance evaluations,64,"[cxxmodules] Do not use rdict files.; We would like to get some performance evaluations from the cmssw side. This PR is a continuation from PR #3012 . @smuzaffar, @mrodozov, could you build ROOT's cxxmodule IB against this PR and see if there are performance difference with and without this PR?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4088
https://github.com/root-project/root/pull/4088:247,performance,perform,performance,247,"[cxxmodules] Do not use rdict files.; We would like to get some performance evaluations from the cmssw side. This PR is a continuation from PR #3012 . @smuzaffar, @mrodozov, could you build ROOT's cxxmodule IB against this PR and see if there are performance difference with and without this PR?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4088
https://github.com/root-project/root/pull/4088:64,usability,perform,performance,64,"[cxxmodules] Do not use rdict files.; We would like to get some performance evaluations from the cmssw side. This PR is a continuation from PR #3012 . @smuzaffar, @mrodozov, could you build ROOT's cxxmodule IB against this PR and see if there are performance difference with and without this PR?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4088
https://github.com/root-project/root/pull/4088:247,usability,perform,performance,247,"[cxxmodules] Do not use rdict files.; We would like to get some performance evaluations from the cmssw side. This PR is a continuation from PR #3012 . @smuzaffar, @mrodozov, could you build ROOT's cxxmodule IB against this PR and see if there are performance difference with and without this PR?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4088
https://github.com/root-project/root/pull/4089:109,deployability,fail,fail,109,[gpad] always set fXUpNDC/fYUpNDC members in TPad::SetPad(); Otherwise direct call to SetBoxX1/SetBoxY1 will fail. Only works now while fXUpNDC recalculated when start interactive. movement of frame. Also use `nullptr` instead 0 and kFALSE instead of 0,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4089
https://github.com/root-project/root/pull/4089:109,reliability,fail,fail,109,[gpad] always set fXUpNDC/fYUpNDC members in TPad::SetPad(); Otherwise direct call to SetBoxX1/SetBoxY1 will fail. Only works now while fXUpNDC recalculated when start interactive. movement of frame. Also use `nullptr` instead 0 and kFALSE instead of 0,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4089
https://github.com/root-project/root/pull/4089:168,usability,interact,interactive,168,[gpad] always set fXUpNDC/fYUpNDC members in TPad::SetPad(); Otherwise direct call to SetBoxX1/SetBoxY1 will fail. Only works now while fXUpNDC recalculated when start interactive. movement of frame. Also use `nullptr` instead 0 and kFALSE instead of 0,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4089
https://github.com/root-project/root/pull/4091:8,deployability,version,version,8,Bump up version of lz4 to 1.9.1; It contains multiple performance improvements comparing to lz4 1.8.5.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4091
https://github.com/root-project/root/pull/4091:36,deployability,contain,contains,36,Bump up version of lz4 to 1.9.1; It contains multiple performance improvements comparing to lz4 1.8.5.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4091
https://github.com/root-project/root/pull/4091:8,integrability,version,version,8,Bump up version of lz4 to 1.9.1; It contains multiple performance improvements comparing to lz4 1.8.5.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4091
https://github.com/root-project/root/pull/4091:8,modifiability,version,version,8,Bump up version of lz4 to 1.9.1; It contains multiple performance improvements comparing to lz4 1.8.5.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4091
https://github.com/root-project/root/pull/4091:54,performance,perform,performance,54,Bump up version of lz4 to 1.9.1; It contains multiple performance improvements comparing to lz4 1.8.5.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4091
https://github.com/root-project/root/pull/4091:54,usability,perform,performance,54,Bump up version of lz4 to 1.9.1; It contains multiple performance improvements comparing to lz4 1.8.5.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4091
https://github.com/root-project/root/pull/4092:36,availability,avail,available,36,Do not use string(PREPEND ...); Not available in ROOT's minimal cmake version.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4092
https://github.com/root-project/root/pull/4092:70,deployability,version,version,70,Do not use string(PREPEND ...); Not available in ROOT's minimal cmake version.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4092
https://github.com/root-project/root/pull/4092:70,integrability,version,version,70,Do not use string(PREPEND ...); Not available in ROOT's minimal cmake version.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4092
https://github.com/root-project/root/pull/4092:70,modifiability,version,version,70,Do not use string(PREPEND ...); Not available in ROOT's minimal cmake version.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4092
https://github.com/root-project/root/pull/4092:36,reliability,availab,available,36,Do not use string(PREPEND ...); Not available in ROOT's minimal cmake version.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4092
https://github.com/root-project/root/pull/4092:36,safety,avail,available,36,Do not use string(PREPEND ...); Not available in ROOT's minimal cmake version.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4092
https://github.com/root-project/root/pull/4092:36,security,availab,available,36,Do not use string(PREPEND ...); Not available in ROOT's minimal cmake version.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4092
https://github.com/root-project/root/pull/4092:56,usability,minim,minimal,56,Do not use string(PREPEND ...); Not available in ROOT's minimal cmake version.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4092
https://github.com/root-project/root/pull/4093:269,deployability,build,buildid,269,"[PyROOT experimental] Shuffle includes to fix redefines; Python.h **always** has to be included first. In our case, we have to. put cppyy in first place (which includes Python.h first). This should fix the warnings [here](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=687201).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4093
https://github.com/root-project/root/pull/4094:391,availability,mainten,maintenance,391,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:462,availability,monitor,monitoring,462,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:416,deployability,Updat,Update,416,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:462,deployability,monitor,monitoring,462,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:14,energy efficiency,load,load,14,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:462,energy efficiency,monitor,monitoring,462,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:14,performance,load,load,14,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:307,reliability,RCa,RCanvas,307,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:391,reliability,mainten,maintenance,391,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:462,reliability,monitor,monitoring,462,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:416,safety,Updat,Update,416,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:462,safety,monitor,monitoring,462,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:416,security,Updat,Update,416,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:462,testability,monitor,monitoring,462,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:19,usability,custom,custom,19,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:89,usability,support,support,89,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:100,usability,custom,custom,100,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4094:331,usability,custom,custom,331,"[webgui6] let load custom JS code when painting canvas; This is first attempt to provide support of custom classes in web-based canvas. For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas. Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4094
https://github.com/root-project/root/pull/4096:6,deployability,updat,updates,6,CMake updates and fixes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4096
https://github.com/root-project/root/pull/4096:6,safety,updat,updates,6,CMake updates and fixes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4096
https://github.com/root-project/root/pull/4096:6,security,updat,updates,6,CMake updates and fixes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4096
https://github.com/root-project/root/pull/4097:5,deployability,build,build,5,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:18,deployability,upgrad,upgrades,18,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:47,deployability,modul,modules,47,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:89,deployability,modul,modules,89,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:202,deployability,Updat,Update,202,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:218,deployability,version,version,218,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:218,integrability,version,version,218,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:153,interoperability,incompatib,incompatibilities,153,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:18,modifiability,upgrad,upgrades,18,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:47,modifiability,modul,modules,47,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:89,modifiability,modul,modules,89,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:218,modifiability,version,version,218,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:47,safety,modul,modules,47,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:89,safety,modul,modules,89,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:147,safety,avoid,avoid,147,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:202,safety,Updat,Update,202,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:202,security,Updat,Update,202,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4097:77,usability,custom,custom,77,More build system upgrades; - Move LZMA to use modules from CMake instead of custom find modules. - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT. - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4097
https://github.com/root-project/root/pull/4098:66,usability,help,help,66,"[TCling] Add kIsInlined bit to extra properties word; In order to help Desislava fix an issue in the generation of the doxygen documentation, this PRs makes it possible to check if a given function is either marked ""inline"" or ""constexpr"" or is a member function of a class that was defined in the class body, by relying on:. https://clang.llvm.org/doxygen/classclang_1_1FunctionDecl.html#a246ca9296386dfded3561bc9d3f42c57. Now we can do:. ```cpp. root [0] auto m = (TMethod*)TClass::GetClass(""TAttMarker"")->GetListOfMethods()->FindObject(""GetMarkerColor"");. root [1] m->ExtraProperty() & kIsInlined. (long) 16. root [2] auto m2 = (TMethod*)TClass::GetClass(""TAttMarker"")->GetListOfMethods()->FindObject(""Copy"");. root [3] m2->ExtraProperty() & kIsInlined. (long) 0. ```. Not sure if the addition to the function template is also necessary, @Axel-Naumann .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4098
https://github.com/root-project/root/pull/4098:127,usability,document,documentation,127,"[TCling] Add kIsInlined bit to extra properties word; In order to help Desislava fix an issue in the generation of the doxygen documentation, this PRs makes it possible to check if a given function is either marked ""inline"" or ""constexpr"" or is a member function of a class that was defined in the class body, by relying on:. https://clang.llvm.org/doxygen/classclang_1_1FunctionDecl.html#a246ca9296386dfded3561bc9d3f42c57. Now we can do:. ```cpp. root [0] auto m = (TMethod*)TClass::GetClass(""TAttMarker"")->GetListOfMethods()->FindObject(""GetMarkerColor"");. root [1] m->ExtraProperty() & kIsInlined. (long) 16. root [2] auto m2 = (TMethod*)TClass::GetClass(""TAttMarker"")->GetListOfMethods()->FindObject(""Copy"");. root [3] m2->ExtraProperty() & kIsInlined. (long) 0. ```. Not sure if the addition to the function template is also necessary, @Axel-Naumann .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4098
https://github.com/root-project/root/pull/4099:7,deployability,instal,install,7,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:30,deployability,modul,modules,30,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:50,deployability,modul,modules,50,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:90,deployability,build,build,90,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:168,deployability,version,version,168,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:243,deployability,instal,installing,243,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:267,deployability,modul,modules,267,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:168,integrability,version,version,168,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:353,interoperability,compatib,compatibility,353,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:30,modifiability,modul,modules,30,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:50,modifiability,modul,modules,50,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:168,modifiability,version,version,168,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:267,modifiability,modul,modules,267,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:30,safety,modul,modules,30,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:50,safety,modul,modules,50,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:267,safety,modul,modules,267,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:97,usability,User,Users,97,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4099:371,usability,user,users,371,"Do not install internal CMake modules; ROOT CMake modules are really only used during the build. Users only need `ROOTConfig.cmake` and related files like `ROOTConfig-{version,targets*}.cmake`, `ROOTUseFile.cmake`, and `RootMacros.cmake`. Not installing the internal modules gives us more freedom to change them without worrying about breaking backward compatibility for users. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9828",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4099
https://github.com/root-project/root/pull/4101:20,deployability,releas,release,20,Clone roottest from release tag when configuring with release tarball; Fixes: [ROOT-9647](https://sft.its.cern.ch/jira/browse/ROOT-9647).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4101
https://github.com/root-project/root/pull/4101:54,deployability,releas,release,54,Clone roottest from release tag when configuring with release tarball; Fixes: [ROOT-9647](https://sft.its.cern.ch/jira/browse/ROOT-9647).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4101
https://github.com/root-project/root/pull/4101:37,integrability,configur,configuring,37,Clone roottest from release tag when configuring with release tarball; Fixes: [ROOT-9647](https://sft.its.cern.ch/jira/browse/ROOT-9647).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4101
https://github.com/root-project/root/pull/4101:37,modifiability,configur,configuring,37,Clone roottest from release tag when configuring with release tarball; Fixes: [ROOT-9647](https://sft.its.cern.ch/jira/browse/ROOT-9647).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4101
https://github.com/root-project/root/pull/4101:37,security,configur,configuring,37,Clone roottest from release tag when configuring with release tarball; Fixes: [ROOT-9647](https://sft.its.cern.ch/jira/browse/ROOT-9647).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4101
https://github.com/root-project/root/pull/4103:12,integrability,interfac,interface,12,"WebEve: Add interface for custom GUI in REveManger; Here is an example of setting custom openui5 client GUI:. auto eveMng = REX::REveManager::Create();. eveMng->AddLocation(""mydir/"", ""/home/alja/root-dev/EveWebApp/ui5"");. eveMng->SetDefaultHtmlPage(""file:mydir/xxx.html"");. . Here is test repository:. https://github.com/alja/EveWebApp.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4103
https://github.com/root-project/root/pull/4103:289,integrability,repositor,repository,289,"WebEve: Add interface for custom GUI in REveManger; Here is an example of setting custom openui5 client GUI:. auto eveMng = REX::REveManager::Create();. eveMng->AddLocation(""mydir/"", ""/home/alja/root-dev/EveWebApp/ui5"");. eveMng->SetDefaultHtmlPage(""file:mydir/xxx.html"");. . Here is test repository:. https://github.com/alja/EveWebApp.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4103
https://github.com/root-project/root/pull/4103:12,interoperability,interfac,interface,12,"WebEve: Add interface for custom GUI in REveManger; Here is an example of setting custom openui5 client GUI:. auto eveMng = REX::REveManager::Create();. eveMng->AddLocation(""mydir/"", ""/home/alja/root-dev/EveWebApp/ui5"");. eveMng->SetDefaultHtmlPage(""file:mydir/xxx.html"");. . Here is test repository:. https://github.com/alja/EveWebApp.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4103
https://github.com/root-project/root/pull/4103:289,interoperability,repositor,repository,289,"WebEve: Add interface for custom GUI in REveManger; Here is an example of setting custom openui5 client GUI:. auto eveMng = REX::REveManager::Create();. eveMng->AddLocation(""mydir/"", ""/home/alja/root-dev/EveWebApp/ui5"");. eveMng->SetDefaultHtmlPage(""file:mydir/xxx.html"");. . Here is test repository:. https://github.com/alja/EveWebApp.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4103
https://github.com/root-project/root/pull/4103:12,modifiability,interfac,interface,12,"WebEve: Add interface for custom GUI in REveManger; Here is an example of setting custom openui5 client GUI:. auto eveMng = REX::REveManager::Create();. eveMng->AddLocation(""mydir/"", ""/home/alja/root-dev/EveWebApp/ui5"");. eveMng->SetDefaultHtmlPage(""file:mydir/xxx.html"");. . Here is test repository:. https://github.com/alja/EveWebApp.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4103
https://github.com/root-project/root/pull/4103:284,safety,test,test,284,"WebEve: Add interface for custom GUI in REveManger; Here is an example of setting custom openui5 client GUI:. auto eveMng = REX::REveManager::Create();. eveMng->AddLocation(""mydir/"", ""/home/alja/root-dev/EveWebApp/ui5"");. eveMng->SetDefaultHtmlPage(""file:mydir/xxx.html"");. . Here is test repository:. https://github.com/alja/EveWebApp.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4103
https://github.com/root-project/root/pull/4103:284,testability,test,test,284,"WebEve: Add interface for custom GUI in REveManger; Here is an example of setting custom openui5 client GUI:. auto eveMng = REX::REveManager::Create();. eveMng->AddLocation(""mydir/"", ""/home/alja/root-dev/EveWebApp/ui5"");. eveMng->SetDefaultHtmlPage(""file:mydir/xxx.html"");. . Here is test repository:. https://github.com/alja/EveWebApp.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4103
https://github.com/root-project/root/pull/4103:26,usability,custom,custom,26,"WebEve: Add interface for custom GUI in REveManger; Here is an example of setting custom openui5 client GUI:. auto eveMng = REX::REveManager::Create();. eveMng->AddLocation(""mydir/"", ""/home/alja/root-dev/EveWebApp/ui5"");. eveMng->SetDefaultHtmlPage(""file:mydir/xxx.html"");. . Here is test repository:. https://github.com/alja/EveWebApp.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4103
https://github.com/root-project/root/pull/4103:82,usability,custom,custom,82,"WebEve: Add interface for custom GUI in REveManger; Here is an example of setting custom openui5 client GUI:. auto eveMng = REX::REveManager::Create();. eveMng->AddLocation(""mydir/"", ""/home/alja/root-dev/EveWebApp/ui5"");. eveMng->SetDefaultHtmlPage(""file:mydir/xxx.html"");. . Here is test repository:. https://github.com/alja/EveWebApp.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4103
https://github.com/root-project/root/pull/4106:25,deployability,build,build,25,Copy RootMacros.cmake to build directory and use relative include; This fixes a reported problem with relocatability of the `ROOTConfig.cmake` file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4106
https://github.com/root-project/root/pull/4107:342,availability,error,error,342,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:417,availability,error,error,417,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:224,deployability,integr,integrating,224,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:288,deployability,integr,integral,288,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:224,integrability,integr,integrating,224,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:288,integrability,integr,integral,288,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:224,interoperability,integr,integrating,224,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:288,interoperability,integr,integral,288,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:224,modifiability,integr,integrating,224,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:288,modifiability,integr,integral,288,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:342,performance,error,error,342,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:417,performance,error,error,417,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:224,reliability,integr,integrating,224,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:288,reliability,integr,integral,288,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:342,safety,error,error,342,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:417,safety,error,error,417,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:224,security,integr,integrating,224,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:288,security,integr,integral,288,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:224,testability,integr,integrating,224,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:288,testability,integr,integral,288,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:342,usability,error,error,342,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4107:417,usability,error,error,417,"[RF] Fix plotting and normalisation problems; - When a plot in overlapping ranges is requested, the normalisation is not. computed correctly. Now, any overlap between plot ranges is removed. before plotting. - [RF4756] When integrating a peaked function in a side band, the normalisation integral. might vanish. This will raise an evaluation error. Now, if the function. value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4107
https://github.com/root-project/root/pull/4108:77,modifiability,inherit,inherit,77,"ROOT-8575: Generate dictionary sources after creating its library target and inherit target properties using generator expressions; This will allow the dictionary target to inherit properties such as include directories, etc, from its associated library target.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4108
https://github.com/root-project/root/pull/4108:173,modifiability,inherit,inherit,173,"ROOT-8575: Generate dictionary sources after creating its library target and inherit target properties using generator expressions; This will allow the dictionary target to inherit properties such as include directories, etc, from its associated library target.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4108
https://github.com/root-project/root/pull/4109:31,deployability,manag,management,31,[Exp PyROOT] Make Cppyy memory management symbols accessible in facade; Expose Cppyy's memory policy symbols in the ROOT facade to collaborate with:. https://github.com/root-project/roottest/pull/357,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4109
https://github.com/root-project/root/pull/4109:31,energy efficiency,manag,management,31,[Exp PyROOT] Make Cppyy memory management symbols accessible in facade; Expose Cppyy's memory policy symbols in the ROOT facade to collaborate with:. https://github.com/root-project/roottest/pull/357,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4109
https://github.com/root-project/root/pull/4109:24,performance,memor,memory,24,[Exp PyROOT] Make Cppyy memory management symbols accessible in facade; Expose Cppyy's memory policy symbols in the ROOT facade to collaborate with:. https://github.com/root-project/roottest/pull/357,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4109
https://github.com/root-project/root/pull/4109:87,performance,memor,memory,87,[Exp PyROOT] Make Cppyy memory management symbols accessible in facade; Expose Cppyy's memory policy symbols in the ROOT facade to collaborate with:. https://github.com/root-project/roottest/pull/357,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4109
https://github.com/root-project/root/pull/4109:31,safety,manag,management,31,[Exp PyROOT] Make Cppyy memory management symbols accessible in facade; Expose Cppyy's memory policy symbols in the ROOT facade to collaborate with:. https://github.com/root-project/roottest/pull/357,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4109
https://github.com/root-project/root/pull/4109:50,security,access,accessible,50,[Exp PyROOT] Make Cppyy memory management symbols accessible in facade; Expose Cppyy's memory policy symbols in the ROOT facade to collaborate with:. https://github.com/root-project/roottest/pull/357,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4109
https://github.com/root-project/root/pull/4109:72,security,Expos,Expose,72,[Exp PyROOT] Make Cppyy memory management symbols accessible in facade; Expose Cppyy's memory policy symbols in the ROOT facade to collaborate with:. https://github.com/root-project/roottest/pull/357,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4109
https://github.com/root-project/root/pull/4109:94,security,polic,policy,94,[Exp PyROOT] Make Cppyy memory management symbols accessible in facade; Expose Cppyy's memory policy symbols in the ROOT facade to collaborate with:. https://github.com/root-project/roottest/pull/357,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4109
https://github.com/root-project/root/pull/4109:24,usability,memor,memory,24,[Exp PyROOT] Make Cppyy memory management symbols accessible in facade; Expose Cppyy's memory policy symbols in the ROOT facade to collaborate with:. https://github.com/root-project/roottest/pull/357,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4109
https://github.com/root-project/root/pull/4109:87,usability,memor,memory,87,[Exp PyROOT] Make Cppyy memory management symbols accessible in facade; Expose Cppyy's memory policy symbols in the ROOT facade to collaborate with:. https://github.com/root-project/roottest/pull/357,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4109
https://github.com/root-project/root/pull/4112:106,deployability,version,versions,106,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:199,deployability,contain,contain,199,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:333,deployability,depend,dependency,333,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:350,deployability,build,builder,350,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:680,deployability,VERSION,VERSION,680,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:699,deployability,patch,patch,699,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:715,deployability,depend,dependency,715,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:13,energy efficiency,Optim,Optimize,13,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:705,energy efficiency,optim,optimizes,705,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:106,integrability,version,versions,106,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:333,integrability,depend,dependency,333,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:680,integrability,VERSION,VERSION,680,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:715,integrability,depend,dependency,715,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:106,modifiability,version,versions,106,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:333,modifiability,depend,dependency,333,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:680,modifiability,VERSION,VERSION,680,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:715,modifiability,depend,dependency,715,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:13,performance,Optimiz,Optimize,13,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:399,performance,perform,performance,399,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:507,performance,time,time,507,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:705,performance,optimiz,optimizes,705,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:172,reliability,pra,practice,172,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:358,reliability,doe,does,358,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:333,safety,depend,dependency,333,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:699,safety,patch,patch,699,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:715,safety,depend,dependency,715,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:87,security,control,control,87,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:699,security,patch,patch,699,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:87,testability,control,control,87,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:333,testability,depend,dependency,333,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:715,testability,depend,dependency,715,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:399,usability,perform,performance,399,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4112:624,usability,document,documentation,624,"[cxxmodules] Optimize dyld to not scan through the C/C++ runtime.; GNU ld has a way to control the symbol versions by 'fixing' the library. appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which. are supposed to be resolved either in libc or glibc which are system. libraries. Our symbol dependency chain builder does not look into system. libraries for performance (and legacy reasons). Thus the undefined symbols. from the C/C++ runtime cause us to scan every time all non-system libraries. when we know what would be the outcome. More information can be found in the binutils documentation:. https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4112
https://github.com/root-project/root/pull/4113:84,availability,operat,operations,84,"[PyROOT] Class `ndarray` to global scope; This PR allows for distributing `AsNumpy` operations to a Spark cluster. In the implementation of `AsNumpy` function in the pythonizations of RDataFrame, the class `ndarray` (derived from numpy.ndarray) is created in the scope of the function. Unfortunately this clashes with a possible implementation of `AsNumpy` in a distributed environment, since pickling of classes defined inside function scopes is not possible ([pickle docs](https://docs.python.org/3/library/pickle.html#pickle-picklable)). To make life easier, the class `ndarray` has been moved to the global scope of the python module. No functionality has been changed or added, the only further requirement is that now `numpy` has to be imported at the module level. The change has been added both to current and experimental PyROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4113
https://github.com/root-project/root/pull/4113:106,availability,cluster,cluster,106,"[PyROOT] Class `ndarray` to global scope; This PR allows for distributing `AsNumpy` operations to a Spark cluster. In the implementation of `AsNumpy` function in the pythonizations of RDataFrame, the class `ndarray` (derived from numpy.ndarray) is created in the scope of the function. Unfortunately this clashes with a possible implementation of `AsNumpy` in a distributed environment, since pickling of classes defined inside function scopes is not possible ([pickle docs](https://docs.python.org/3/library/pickle.html#pickle-picklable)). To make life easier, the class `ndarray` has been moved to the global scope of the python module. No functionality has been changed or added, the only further requirement is that now `numpy` has to be imported at the module level. The change has been added both to current and experimental PyROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4113
https://github.com/root-project/root/pull/4113:106,deployability,cluster,cluster,106,"[PyROOT] Class `ndarray` to global scope; This PR allows for distributing `AsNumpy` operations to a Spark cluster. In the implementation of `AsNumpy` function in the pythonizations of RDataFrame, the class `ndarray` (derived from numpy.ndarray) is created in the scope of the function. Unfortunately this clashes with a possible implementation of `AsNumpy` in a distributed environment, since pickling of classes defined inside function scopes is not possible ([pickle docs](https://docs.python.org/3/library/pickle.html#pickle-picklable)). To make life easier, the class `ndarray` has been moved to the global scope of the python module. No functionality has been changed or added, the only further requirement is that now `numpy` has to be imported at the module level. The change has been added both to current and experimental PyROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4113
https://github.com/root-project/root/pull/4113:631,deployability,modul,module,631,"[PyROOT] Class `ndarray` to global scope; This PR allows for distributing `AsNumpy` operations to a Spark cluster. In the implementation of `AsNumpy` function in the pythonizations of RDataFrame, the class `ndarray` (derived from numpy.ndarray) is created in the scope of the function. Unfortunately this clashes with a possible implementation of `AsNumpy` in a distributed environment, since pickling of classes defined inside function scopes is not possible ([pickle docs](https://docs.python.org/3/library/pickle.html#pickle-picklable)). To make life easier, the class `ndarray` has been moved to the global scope of the python module. No functionality has been changed or added, the only further requirement is that now `numpy` has to be imported at the module level. The change has been added both to current and experimental PyROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4113
https://github.com/root-project/root/pull/4113:758,deployability,modul,module,758,"[PyROOT] Class `ndarray` to global scope; This PR allows for distributing `AsNumpy` operations to a Spark cluster. In the implementation of `AsNumpy` function in the pythonizations of RDataFrame, the class `ndarray` (derived from numpy.ndarray) is created in the scope of the function. Unfortunately this clashes with a possible implementation of `AsNumpy` in a distributed environment, since pickling of classes defined inside function scopes is not possible ([pickle docs](https://docs.python.org/3/library/pickle.html#pickle-picklable)). To make life easier, the class `ndarray` has been moved to the global scope of the python module. No functionality has been changed or added, the only further requirement is that now `numpy` has to be imported at the module level. The change has been added both to current and experimental PyROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4113
https://github.com/root-project/root/pull/4113:806,energy efficiency,current,current,806,"[PyROOT] Class `ndarray` to global scope; This PR allows for distributing `AsNumpy` operations to a Spark cluster. In the implementation of `AsNumpy` function in the pythonizations of RDataFrame, the class `ndarray` (derived from numpy.ndarray) is created in the scope of the function. Unfortunately this clashes with a possible implementation of `AsNumpy` in a distributed environment, since pickling of classes defined inside function scopes is not possible ([pickle docs](https://docs.python.org/3/library/pickle.html#pickle-picklable)). To make life easier, the class `ndarray` has been moved to the global scope of the python module. No functionality has been changed or added, the only further requirement is that now `numpy` has to be imported at the module level. The change has been added both to current and experimental PyROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4113
https://github.com/root-project/root/pull/4113:61,interoperability,distribut,distributing,61,"[PyROOT] Class `ndarray` to global scope; This PR allows for distributing `AsNumpy` operations to a Spark cluster. In the implementation of `AsNumpy` function in the pythonizations of RDataFrame, the class `ndarray` (derived from numpy.ndarray) is created in the scope of the function. Unfortunately this clashes with a possible implementation of `AsNumpy` in a distributed environment, since pickling of classes defined inside function scopes is not possible ([pickle docs](https://docs.python.org/3/library/pickle.html#pickle-picklable)). To make life easier, the class `ndarray` has been moved to the global scope of the python module. No functionality has been changed or added, the only further requirement is that now `numpy` has to be imported at the module level. The change has been added both to current and experimental PyROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4113
https://github.com/root-project/root/pull/4113:362,interoperability,distribut,distributed,362,"[PyROOT] Class `ndarray` to global scope; This PR allows for distributing `AsNumpy` operations to a Spark cluster. In the implementation of `AsNumpy` function in the pythonizations of RDataFrame, the class `ndarray` (derived from numpy.ndarray) is created in the scope of the function. Unfortunately this clashes with a possible implementation of `AsNumpy` in a distributed environment, since pickling of classes defined inside function scopes is not possible ([pickle docs](https://docs.python.org/3/library/pickle.html#pickle-picklable)). To make life easier, the class `ndarray` has been moved to the global scope of the python module. No functionality has been changed or added, the only further requirement is that now `numpy` has to be imported at the module level. The change has been added both to current and experimental PyROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4113
https://github.com/root-project/root/pull/4113:631,modifiability,modul,module,631,"[PyROOT] Class `ndarray` to global scope; This PR allows for distributing `AsNumpy` operations to a Spark cluster. In the implementation of `AsNumpy` function in the pythonizations of RDataFrame, the class `ndarray` (derived from numpy.ndarray) is created in the scope of the function. Unfortunately this clashes with a possible implementation of `AsNumpy` in a distributed environment, since pickling of classes defined inside function scopes is not possible ([pickle docs](https://docs.python.org/3/library/pickle.html#pickle-picklable)). To make life easier, the class `ndarray` has been moved to the global scope of the python module. No functionality has been changed or added, the only further requirement is that now `numpy` has to be imported at the module level. The change has been added both to current and experimental PyROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4113
https://github.com/root-project/root/pull/4113:758,modifiability,modul,module,758,"[PyROOT] Class `ndarray` to global scope; This PR allows for distributing `AsNumpy` operations to a Spark cluster. In the implementation of `AsNumpy` function in the pythonizations of RDataFrame, the class `ndarray` (derived from numpy.ndarray) is created in the scope of the function. Unfortunately this clashes with a possible implementation of `AsNumpy` in a distributed environment, since pickling of classes defined inside function scopes is not possible ([pickle docs](https://docs.python.org/3/library/pickle.html#pickle-picklable)). To make life easier, the class `ndarray` has been moved to the global scope of the python module. No functionality has been changed or added, the only further requirement is that now `numpy` has to be imported at the module level. The change has been added both to current and experimental PyROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4113
https://github.com/root-project/root/pull/4113:631,safety,modul,module,631,"[PyROOT] Class `ndarray` to global scope; This PR allows for distributing `AsNumpy` operations to a Spark cluster. In the implementation of `AsNumpy` function in the pythonizations of RDataFrame, the class `ndarray` (derived from numpy.ndarray) is created in the scope of the function. Unfortunately this clashes with a possible implementation of `AsNumpy` in a distributed environment, since pickling of classes defined inside function scopes is not possible ([pickle docs](https://docs.python.org/3/library/pickle.html#pickle-picklable)). To make life easier, the class `ndarray` has been moved to the global scope of the python module. No functionality has been changed or added, the only further requirement is that now `numpy` has to be imported at the module level. The change has been added both to current and experimental PyROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4113
https://github.com/root-project/root/pull/4113:758,safety,modul,module,758,"[PyROOT] Class `ndarray` to global scope; This PR allows for distributing `AsNumpy` operations to a Spark cluster. In the implementation of `AsNumpy` function in the pythonizations of RDataFrame, the class `ndarray` (derived from numpy.ndarray) is created in the scope of the function. Unfortunately this clashes with a possible implementation of `AsNumpy` in a distributed environment, since pickling of classes defined inside function scopes is not possible ([pickle docs](https://docs.python.org/3/library/pickle.html#pickle-picklable)). To make life easier, the class `ndarray` has been moved to the global scope of the python module. No functionality has been changed or added, the only further requirement is that now `numpy` has to be imported at the module level. The change has been added both to current and experimental PyROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4113
https://github.com/root-project/root/pull/4114:127,modifiability,paramet,parameters,127,"[RF] Fix testing if fit results are identical.; When comparing fit results, RooFit was comparing the absolute. difference. For parameters with small values, differences are missed,. and for parameters with large values, small relative differences are. flagged. Now, parameters and NLL are compared with a relative precision of 1.E-6,. (before absolute precision of 5.E-5), and correlation coefficients. are compared with an absolute precision of 1.E-4.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4114
https://github.com/root-project/root/pull/4114:190,modifiability,paramet,parameters,190,"[RF] Fix testing if fit results are identical.; When comparing fit results, RooFit was comparing the absolute. difference. For parameters with small values, differences are missed,. and for parameters with large values, small relative differences are. flagged. Now, parameters and NLL are compared with a relative precision of 1.E-6,. (before absolute precision of 5.E-5), and correlation coefficients. are compared with an absolute precision of 1.E-4.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4114
https://github.com/root-project/root/pull/4114:266,modifiability,paramet,parameters,266,"[RF] Fix testing if fit results are identical.; When comparing fit results, RooFit was comparing the absolute. difference. For parameters with small values, differences are missed,. and for parameters with large values, small relative differences are. flagged. Now, parameters and NLL are compared with a relative precision of 1.E-6,. (before absolute precision of 5.E-5), and correlation coefficients. are compared with an absolute precision of 1.E-4.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4114
https://github.com/root-project/root/pull/4114:9,safety,test,testing,9,"[RF] Fix testing if fit results are identical.; When comparing fit results, RooFit was comparing the absolute. difference. For parameters with small values, differences are missed,. and for parameters with large values, small relative differences are. flagged. Now, parameters and NLL are compared with a relative precision of 1.E-6,. (before absolute precision of 5.E-5), and correlation coefficients. are compared with an absolute precision of 1.E-4.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4114
https://github.com/root-project/root/pull/4114:36,security,ident,identical,36,"[RF] Fix testing if fit results are identical.; When comparing fit results, RooFit was comparing the absolute. difference. For parameters with small values, differences are missed,. and for parameters with large values, small relative differences are. flagged. Now, parameters and NLL are compared with a relative precision of 1.E-6,. (before absolute precision of 5.E-5), and correlation coefficients. are compared with an absolute precision of 1.E-4.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4114
https://github.com/root-project/root/pull/4114:9,testability,test,testing,9,"[RF] Fix testing if fit results are identical.; When comparing fit results, RooFit was comparing the absolute. difference. For parameters with small values, differences are missed,. and for parameters with large values, small relative differences are. flagged. Now, parameters and NLL are compared with a relative precision of 1.E-6,. (before absolute precision of 5.E-5), and correlation coefficients. are compared with an absolute precision of 1.E-4.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4114
https://github.com/root-project/root/pull/4115:0,deployability,Updat,Update,0,"Update higgs cpp tutorial with `DeltaR` function; As discussed in #4019 and #4071, the higgs tutorial should use the proper `DeltaR` function from the `VecOps` namespace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4115
https://github.com/root-project/root/pull/4115:0,safety,Updat,Update,0,"Update higgs cpp tutorial with `DeltaR` function; As discussed in #4019 and #4071, the higgs tutorial should use the proper `DeltaR` function from the `VecOps` namespace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4115
https://github.com/root-project/root/pull/4115:0,security,Updat,Update,0,"Update higgs cpp tutorial with `DeltaR` function; As discussed in #4019 and #4071, the higgs tutorial should use the proper `DeltaR` function from the `VecOps` namespace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4115
https://github.com/root-project/root/pull/4116:41,deployability,depend,depends,41,[cxxmodules] The bloom filter bloom size depends on the arch bitness.; This should appease our 32bit bots.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4116
https://github.com/root-project/root/pull/4116:23,integrability,filter,filter,23,[cxxmodules] The bloom filter bloom size depends on the arch bitness.; This should appease our 32bit bots.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4116
https://github.com/root-project/root/pull/4116:41,integrability,depend,depends,41,[cxxmodules] The bloom filter bloom size depends on the arch bitness.; This should appease our 32bit bots.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4116
https://github.com/root-project/root/pull/4116:41,modifiability,depend,depends,41,[cxxmodules] The bloom filter bloom size depends on the arch bitness.; This should appease our 32bit bots.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4116
https://github.com/root-project/root/pull/4116:41,safety,depend,depends,41,[cxxmodules] The bloom filter bloom size depends on the arch bitness.; This should appease our 32bit bots.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4116
https://github.com/root-project/root/pull/4116:41,testability,depend,depends,41,[cxxmodules] The bloom filter bloom size depends on the arch bitness.; This should appease our 32bit bots.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4116
https://github.com/root-project/root/pull/4117:363,safety,test,test,363,[Exp PyROOT] Missing assignment of tp_iternext in vector-like classes on MacOs; We incorporate a commit made originally in Cppyy in order to fix a difference of behavior between Linux and MacOs machines. For the full details please refer to:. https://bitbucket.org/wlav/cppyy/issues/132/missing-assignment-of-tp_iternext-in. This commit should make the following test:. tutorial-vecops-vo004_SortAndSelect-py. succeed also on MacOs machines.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4117
https://github.com/root-project/root/pull/4117:363,testability,test,test,363,[Exp PyROOT] Missing assignment of tp_iternext in vector-like classes on MacOs; We incorporate a commit made originally in Cppyy in order to fix a difference of behavior between Linux and MacOs machines. For the full details please refer to:. https://bitbucket.org/wlav/cppyy/issues/132/missing-assignment-of-tp_iternext-in. This commit should make the following test:. tutorial-vecops-vo004_SortAndSelect-py. succeed also on MacOs machines.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4117
https://github.com/root-project/root/pull/4117:161,usability,behavi,behavior,161,[Exp PyROOT] Missing assignment of tp_iternext in vector-like classes on MacOs; We incorporate a commit made originally in Cppyy in order to fix a difference of behavior between Linux and MacOs machines. For the full details please refer to:. https://bitbucket.org/wlav/cppyy/issues/132/missing-assignment-of-tp_iternext-in. This commit should make the following test:. tutorial-vecops-vo004_SortAndSelect-py. succeed also on MacOs machines.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4117
https://github.com/root-project/root/pull/4118:24,safety,accid,accidentally,24,[cxxmodules] Bring back accidentally removed code. Fixes OSX symbol r…; …esolution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4118
https://github.com/root-project/root/pull/4119:166,deployability,log,logic,166,"[RF] Fix generating pulls in RooMCStudy.; - [ROOT-10242] RooMCStudy crashes when pulls for a parameter that cannot. have a pull distribution are requested. This adds logic to generate a. proper pull distribution, and returns a blank plot if no pull. distribution can be generated. - [ROOT-8777] Also fix a rogue cout in RooMCStudy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4119
https://github.com/root-project/root/pull/4119:128,interoperability,distribut,distribution,128,"[RF] Fix generating pulls in RooMCStudy.; - [ROOT-10242] RooMCStudy crashes when pulls for a parameter that cannot. have a pull distribution are requested. This adds logic to generate a. proper pull distribution, and returns a blank plot if no pull. distribution can be generated. - [ROOT-8777] Also fix a rogue cout in RooMCStudy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4119
https://github.com/root-project/root/pull/4119:199,interoperability,distribut,distribution,199,"[RF] Fix generating pulls in RooMCStudy.; - [ROOT-10242] RooMCStudy crashes when pulls for a parameter that cannot. have a pull distribution are requested. This adds logic to generate a. proper pull distribution, and returns a blank plot if no pull. distribution can be generated. - [ROOT-8777] Also fix a rogue cout in RooMCStudy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4119
https://github.com/root-project/root/pull/4119:250,interoperability,distribut,distribution,250,"[RF] Fix generating pulls in RooMCStudy.; - [ROOT-10242] RooMCStudy crashes when pulls for a parameter that cannot. have a pull distribution are requested. This adds logic to generate a. proper pull distribution, and returns a blank plot if no pull. distribution can be generated. - [ROOT-8777] Also fix a rogue cout in RooMCStudy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4119
https://github.com/root-project/root/pull/4119:93,modifiability,paramet,parameter,93,"[RF] Fix generating pulls in RooMCStudy.; - [ROOT-10242] RooMCStudy crashes when pulls for a parameter that cannot. have a pull distribution are requested. This adds logic to generate a. proper pull distribution, and returns a blank plot if no pull. distribution can be generated. - [ROOT-8777] Also fix a rogue cout in RooMCStudy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4119
https://github.com/root-project/root/pull/4119:166,safety,log,logic,166,"[RF] Fix generating pulls in RooMCStudy.; - [ROOT-10242] RooMCStudy crashes when pulls for a parameter that cannot. have a pull distribution are requested. This adds logic to generate a. proper pull distribution, and returns a blank plot if no pull. distribution can be generated. - [ROOT-8777] Also fix a rogue cout in RooMCStudy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4119
https://github.com/root-project/root/pull/4119:166,security,log,logic,166,"[RF] Fix generating pulls in RooMCStudy.; - [ROOT-10242] RooMCStudy crashes when pulls for a parameter that cannot. have a pull distribution are requested. This adds logic to generate a. proper pull distribution, and returns a blank plot if no pull. distribution can be generated. - [ROOT-8777] Also fix a rogue cout in RooMCStudy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4119
https://github.com/root-project/root/pull/4119:166,testability,log,logic,166,"[RF] Fix generating pulls in RooMCStudy.; - [ROOT-10242] RooMCStudy crashes when pulls for a parameter that cannot. have a pull distribution are requested. This adds logic to generate a. proper pull distribution, and returns a blank plot if no pull. distribution can be generated. - [ROOT-8777] Also fix a rogue cout in RooMCStudy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4119
https://github.com/root-project/root/pull/4121:140,energy efficiency,current,current,140,"[PyROOT] Return enum object in enum lookups; As reported here:. https://sft.its.cern.ch/jira/browse/ROOT-8935. when looking up an enum, the current PyROOT returns an unsigned integer. The changes of this PR, migrated from current Cppyy, allow to create an enum type during the lookup and inject the enum values in it. This is done both for global and non-global lookups. This PR also includes a fix to get the underlying type of the enum when picking a converter for its values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4121
https://github.com/root-project/root/pull/4121:222,energy efficiency,current,current,222,"[PyROOT] Return enum object in enum lookups; As reported here:. https://sft.its.cern.ch/jira/browse/ROOT-8935. when looking up an enum, the current PyROOT returns an unsigned integer. The changes of this PR, migrated from current Cppyy, allow to create an enum type during the lookup and inject the enum values in it. This is done both for global and non-global lookups. This PR also includes a fix to get the underlying type of the enum when picking a converter for its values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4121
https://github.com/root-project/root/pull/4121:288,integrability,inject,inject,288,"[PyROOT] Return enum object in enum lookups; As reported here:. https://sft.its.cern.ch/jira/browse/ROOT-8935. when looking up an enum, the current PyROOT returns an unsigned integer. The changes of this PR, migrated from current Cppyy, allow to create an enum type during the lookup and inject the enum values in it. This is done both for global and non-global lookups. This PR also includes a fix to get the underlying type of the enum when picking a converter for its values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4121
https://github.com/root-project/root/pull/4121:288,security,inject,inject,288,"[PyROOT] Return enum object in enum lookups; As reported here:. https://sft.its.cern.ch/jira/browse/ROOT-8935. when looking up an enum, the current PyROOT returns an unsigned integer. The changes of this PR, migrated from current Cppyy, allow to create an enum type during the lookup and inject the enum values in it. This is done both for global and non-global lookups. This PR also includes a fix to get the underlying type of the enum when picking a converter for its values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4121
https://github.com/root-project/root/pull/4122:25,deployability,depend,dependencies,25,"Add options to add extra dependencies in {REFLEX,ROOT}_GENERATE_DICTIONARY();",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4122
https://github.com/root-project/root/pull/4122:25,integrability,depend,dependencies,25,"Add options to add extra dependencies in {REFLEX,ROOT}_GENERATE_DICTIONARY();",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4122
https://github.com/root-project/root/pull/4122:25,modifiability,depend,dependencies,25,"Add options to add extra dependencies in {REFLEX,ROOT}_GENERATE_DICTIONARY();",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4122
https://github.com/root-project/root/pull/4122:25,safety,depend,dependencies,25,"Add options to add extra dependencies in {REFLEX,ROOT}_GENERATE_DICTIONARY();",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4122
https://github.com/root-project/root/pull/4122:25,testability,depend,dependencies,25,"Add options to add extra dependencies in {REFLEX,ROOT}_GENERATE_DICTIONARY();",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4122
https://github.com/root-project/root/pull/4123:40,performance,cach,cache,40,[Exp PyROOT] Test pyunittests-dataframe-cache enabled; Test mentioned in the title was enabled. This was done by changing the way we call the method Take() of the RDF objects. In new Cppyy the type of a templated method needs to be put in square brackets.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4123
https://github.com/root-project/root/pull/4123:13,safety,Test,Test,13,[Exp PyROOT] Test pyunittests-dataframe-cache enabled; Test mentioned in the title was enabled. This was done by changing the way we call the method Take() of the RDF objects. In new Cppyy the type of a templated method needs to be put in square brackets.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4123
https://github.com/root-project/root/pull/4123:55,safety,Test,Test,55,[Exp PyROOT] Test pyunittests-dataframe-cache enabled; Test mentioned in the title was enabled. This was done by changing the way we call the method Take() of the RDF objects. In new Cppyy the type of a templated method needs to be put in square brackets.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4123
https://github.com/root-project/root/pull/4123:13,testability,Test,Test,13,[Exp PyROOT] Test pyunittests-dataframe-cache enabled; Test mentioned in the title was enabled. This was done by changing the way we call the method Take() of the RDF objects. In new Cppyy the type of a templated method needs to be put in square brackets.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4123
https://github.com/root-project/root/pull/4123:55,testability,Test,Test,55,[Exp PyROOT] Test pyunittests-dataframe-cache enabled; Test mentioned in the title was enabled. This was done by changing the way we call the method Take() of the RDF objects. In new Cppyy the type of a templated method needs to be put in square brackets.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4123
https://github.com/root-project/root/pull/4124:59,deployability,modul,module,59,[cxxmodules] Move back the stdlib library in the main libc module.; The no_undeclared_includes attributes will not allow cycle.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4124
https://github.com/root-project/root/pull/4124:59,modifiability,modul,module,59,[cxxmodules] Move back the stdlib library in the main libc module.; The no_undeclared_includes attributes will not allow cycle.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4124
https://github.com/root-project/root/pull/4124:59,safety,modul,module,59,[cxxmodules] Move back the stdlib library in the main libc module.; The no_undeclared_includes attributes will not allow cycle.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4124
https://github.com/root-project/root/pull/4127:89,integrability,compon,component,89,"[cmake] add fcgi option to enable FastCGI compilation, default OFF; This is very special component of THttpServer, which is not used up to. now. Make it as cmake option and disable by default. Only when really. needed, user can enable it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4127
https://github.com/root-project/root/pull/4127:89,interoperability,compon,component,89,"[cmake] add fcgi option to enable FastCGI compilation, default OFF; This is very special component of THttpServer, which is not used up to. now. Make it as cmake option and disable by default. Only when really. needed, user can enable it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4127
https://github.com/root-project/root/pull/4127:89,modifiability,compon,component,89,"[cmake] add fcgi option to enable FastCGI compilation, default OFF; This is very special component of THttpServer, which is not used up to. now. Make it as cmake option and disable by default. Only when really. needed, user can enable it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4127
https://github.com/root-project/root/pull/4127:219,usability,user,user,219,"[cmake] add fcgi option to enable FastCGI compilation, default OFF; This is very special component of THttpServer, which is not used up to. now. Make it as cmake option and disable by default. Only when really. needed, user can enable it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4127
https://github.com/root-project/root/pull/4128:38,availability,operat,operator,38,"[ROOT-10211][Graphics] Add assignment operator to TStyle; Fixes the gcc9 warning ""deprecated copy"" because a custom copy constructor. is implemented but the assignment operator is implicitly declared.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4128
https://github.com/root-project/root/pull/4128:168,availability,operat,operator,168,"[ROOT-10211][Graphics] Add assignment operator to TStyle; Fixes the gcc9 warning ""deprecated copy"" because a custom copy constructor. is implemented but the assignment operator is implicitly declared.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4128
https://github.com/root-project/root/pull/4128:109,usability,custom,custom,109,"[ROOT-10211][Graphics] Add assignment operator to TStyle; Fixes the gcc9 warning ""deprecated copy"" because a custom copy constructor. is implemented but the assignment operator is implicitly declared.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4128
https://github.com/root-project/root/pull/4129:28,safety,avoid,avoiding,28,[cxxmodules] Order includes avoiding infinite loop in rootcling.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4129
https://github.com/root-project/root/pull/4130:23,deployability,version,version,23,[Tutorial] Veto Python version of df103 if xrootd is not found; Fixes following failing nightlies: http://cdash.cern.ch/testSummary.php?project=1&name=tutorial-dataframe-df103_NanoAODHiggsAnalysis-py&date=2019-07-30,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4130
https://github.com/root-project/root/pull/4130:80,deployability,fail,failing,80,[Tutorial] Veto Python version of df103 if xrootd is not found; Fixes following failing nightlies: http://cdash.cern.ch/testSummary.php?project=1&name=tutorial-dataframe-df103_NanoAODHiggsAnalysis-py&date=2019-07-30,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4130
https://github.com/root-project/root/pull/4130:23,integrability,version,version,23,[Tutorial] Veto Python version of df103 if xrootd is not found; Fixes following failing nightlies: http://cdash.cern.ch/testSummary.php?project=1&name=tutorial-dataframe-df103_NanoAODHiggsAnalysis-py&date=2019-07-30,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4130
https://github.com/root-project/root/pull/4130:23,modifiability,version,version,23,[Tutorial] Veto Python version of df103 if xrootd is not found; Fixes following failing nightlies: http://cdash.cern.ch/testSummary.php?project=1&name=tutorial-dataframe-df103_NanoAODHiggsAnalysis-py&date=2019-07-30,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4130
https://github.com/root-project/root/pull/4130:80,reliability,fail,failing,80,[Tutorial] Veto Python version of df103 if xrootd is not found; Fixes following failing nightlies: http://cdash.cern.ch/testSummary.php?project=1&name=tutorial-dataframe-df103_NanoAODHiggsAnalysis-py&date=2019-07-30,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4130
https://github.com/root-project/root/pull/4130:120,safety,test,testSummary,120,[Tutorial] Veto Python version of df103 if xrootd is not found; Fixes following failing nightlies: http://cdash.cern.ch/testSummary.php?project=1&name=tutorial-dataframe-df103_NanoAODHiggsAnalysis-py&date=2019-07-30,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4130
https://github.com/root-project/root/pull/4130:120,testability,test,testSummary,120,[Tutorial] Veto Python version of df103 if xrootd is not found; Fixes following failing nightlies: http://cdash.cern.ch/testSummary.php?project=1&name=tutorial-dataframe-df103_NanoAODHiggsAnalysis-py&date=2019-07-30,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4130
https://github.com/root-project/root/pull/4131:16,availability,down,download,16,[qt5web] accept download action; By default QWebEngine does not process download actions. Required when png image created directly from JSROOT code.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4131
https://github.com/root-project/root/pull/4131:72,availability,down,download,72,[qt5web] accept download action; By default QWebEngine does not process download actions. Required when png image created directly from JSROOT code.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4131
https://github.com/root-project/root/pull/4131:55,reliability,doe,does,55,[qt5web] accept download action; By default QWebEngine does not process download actions. Required when png image created directly from JSROOT code.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4131
https://github.com/root-project/root/pull/4132:33,deployability,build,build,33,"Simplify check for out-of-source build; After testing it, the IS_SYMLINK part is no longer necessary. It's also better to just move the check as early as possible,. and not try to remove anything, as that doesn't work anyway,. since CMake creates the files and directories only at the end.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4132
https://github.com/root-project/root/pull/4132:205,reliability,doe,doesn,205,"Simplify check for out-of-source build; After testing it, the IS_SYMLINK part is no longer necessary. It's also better to just move the check as early as possible,. and not try to remove anything, as that doesn't work anyway,. since CMake creates the files and directories only at the end.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4132
https://github.com/root-project/root/pull/4132:46,safety,test,testing,46,"Simplify check for out-of-source build; After testing it, the IS_SYMLINK part is no longer necessary. It's also better to just move the check as early as possible,. and not try to remove anything, as that doesn't work anyway,. since CMake creates the files and directories only at the end.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4132
https://github.com/root-project/root/pull/4132:0,testability,Simpl,Simplify,0,"Simplify check for out-of-source build; After testing it, the IS_SYMLINK part is no longer necessary. It's also better to just move the check as early as possible,. and not try to remove anything, as that doesn't work anyway,. since CMake creates the files and directories only at the end.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4132
https://github.com/root-project/root/pull/4132:46,testability,test,testing,46,"Simplify check for out-of-source build; After testing it, the IS_SYMLINK part is no longer necessary. It's also better to just move the check as early as possible,. and not try to remove anything, as that doesn't work anyway,. since CMake creates the files and directories only at the end.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4132
https://github.com/root-project/root/pull/4132:0,usability,Simpl,Simplify,0,"Simplify check for out-of-source build; After testing it, the IS_SYMLINK part is no longer necessary. It's also better to just move the check as early as possible,. and not try to remove anything, as that doesn't work anyway,. since CMake creates the files and directories only at the end.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4132
https://github.com/root-project/root/pull/4134:199,availability,cluster,cluster,199,"[ntuple] Encapsulate RNTuple meta-data in RNTupleDescriptor; Introduces an RNTupleDescriptor directory class that stores the field structure, the attached columns and their structure, as well as the cluster structure. The descriptor can be used independently of the concrete page storage implementation. Serialization and deserialization of header and footer does not depend on libCore. Along the way, this PR also straightens up naming: field names are now relative to their parent fields, i.e. fields are identified by (name, parent id). Columns have no names anymore. Columns are identified by (field id, column index). At some point we can add the possibility to address nested fields by a fully qualified name, e.g. in views. At the moment that's not yet necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4134
https://github.com/root-project/root/pull/4134:199,deployability,cluster,cluster,199,"[ntuple] Encapsulate RNTuple meta-data in RNTupleDescriptor; Introduces an RNTupleDescriptor directory class that stores the field structure, the attached columns and their structure, as well as the cluster structure. The descriptor can be used independently of the concrete page storage implementation. Serialization and deserialization of header and footer does not depend on libCore. Along the way, this PR also straightens up naming: field names are now relative to their parent fields, i.e. fields are identified by (name, parent id). Columns have no names anymore. Columns are identified by (field id, column index). At some point we can add the possibility to address nested fields by a fully qualified name, e.g. in views. At the moment that's not yet necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4134
https://github.com/root-project/root/pull/4134:368,deployability,depend,depend,368,"[ntuple] Encapsulate RNTuple meta-data in RNTupleDescriptor; Introduces an RNTupleDescriptor directory class that stores the field structure, the attached columns and their structure, as well as the cluster structure. The descriptor can be used independently of the concrete page storage implementation. Serialization and deserialization of header and footer does not depend on libCore. Along the way, this PR also straightens up naming: field names are now relative to their parent fields, i.e. fields are identified by (name, parent id). Columns have no names anymore. Columns are identified by (field id, column index). At some point we can add the possibility to address nested fields by a fully qualified name, e.g. in views. At the moment that's not yet necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4134
https://github.com/root-project/root/pull/4134:9,integrability,Encapsulat,Encapsulate,9,"[ntuple] Encapsulate RNTuple meta-data in RNTupleDescriptor; Introduces an RNTupleDescriptor directory class that stores the field structure, the attached columns and their structure, as well as the cluster structure. The descriptor can be used independently of the concrete page storage implementation. Serialization and deserialization of header and footer does not depend on libCore. Along the way, this PR also straightens up naming: field names are now relative to their parent fields, i.e. fields are identified by (name, parent id). Columns have no names anymore. Columns are identified by (field id, column index). At some point we can add the possibility to address nested fields by a fully qualified name, e.g. in views. At the moment that's not yet necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4134
https://github.com/root-project/root/pull/4134:368,integrability,depend,depend,368,"[ntuple] Encapsulate RNTuple meta-data in RNTupleDescriptor; Introduces an RNTupleDescriptor directory class that stores the field structure, the attached columns and their structure, as well as the cluster structure. The descriptor can be used independently of the concrete page storage implementation. Serialization and deserialization of header and footer does not depend on libCore. Along the way, this PR also straightens up naming: field names are now relative to their parent fields, i.e. fields are identified by (name, parent id). Columns have no names anymore. Columns are identified by (field id, column index). At some point we can add the possibility to address nested fields by a fully qualified name, e.g. in views. At the moment that's not yet necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4134
https://github.com/root-project/root/pull/4134:9,modifiability,Encapsul,Encapsulate,9,"[ntuple] Encapsulate RNTuple meta-data in RNTupleDescriptor; Introduces an RNTupleDescriptor directory class that stores the field structure, the attached columns and their structure, as well as the cluster structure. The descriptor can be used independently of the concrete page storage implementation. Serialization and deserialization of header and footer does not depend on libCore. Along the way, this PR also straightens up naming: field names are now relative to their parent fields, i.e. fields are identified by (name, parent id). Columns have no names anymore. Columns are identified by (field id, column index). At some point we can add the possibility to address nested fields by a fully qualified name, e.g. in views. At the moment that's not yet necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4134
https://github.com/root-project/root/pull/4134:368,modifiability,depend,depend,368,"[ntuple] Encapsulate RNTuple meta-data in RNTupleDescriptor; Introduces an RNTupleDescriptor directory class that stores the field structure, the attached columns and their structure, as well as the cluster structure. The descriptor can be used independently of the concrete page storage implementation. Serialization and deserialization of header and footer does not depend on libCore. Along the way, this PR also straightens up naming: field names are now relative to their parent fields, i.e. fields are identified by (name, parent id). Columns have no names anymore. Columns are identified by (field id, column index). At some point we can add the possibility to address nested fields by a fully qualified name, e.g. in views. At the moment that's not yet necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4134
https://github.com/root-project/root/pull/4134:359,reliability,doe,does,359,"[ntuple] Encapsulate RNTuple meta-data in RNTupleDescriptor; Introduces an RNTupleDescriptor directory class that stores the field structure, the attached columns and their structure, as well as the cluster structure. The descriptor can be used independently of the concrete page storage implementation. Serialization and deserialization of header and footer does not depend on libCore. Along the way, this PR also straightens up naming: field names are now relative to their parent fields, i.e. fields are identified by (name, parent id). Columns have no names anymore. Columns are identified by (field id, column index). At some point we can add the possibility to address nested fields by a fully qualified name, e.g. in views. At the moment that's not yet necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4134
https://github.com/root-project/root/pull/4134:368,safety,depend,depend,368,"[ntuple] Encapsulate RNTuple meta-data in RNTupleDescriptor; Introduces an RNTupleDescriptor directory class that stores the field structure, the attached columns and their structure, as well as the cluster structure. The descriptor can be used independently of the concrete page storage implementation. Serialization and deserialization of header and footer does not depend on libCore. Along the way, this PR also straightens up naming: field names are now relative to their parent fields, i.e. fields are identified by (name, parent id). Columns have no names anymore. Columns are identified by (field id, column index). At some point we can add the possibility to address nested fields by a fully qualified name, e.g. in views. At the moment that's not yet necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4134
https://github.com/root-project/root/pull/4134:507,security,ident,identified,507,"[ntuple] Encapsulate RNTuple meta-data in RNTupleDescriptor; Introduces an RNTupleDescriptor directory class that stores the field structure, the attached columns and their structure, as well as the cluster structure. The descriptor can be used independently of the concrete page storage implementation. Serialization and deserialization of header and footer does not depend on libCore. Along the way, this PR also straightens up naming: field names are now relative to their parent fields, i.e. fields are identified by (name, parent id). Columns have no names anymore. Columns are identified by (field id, column index). At some point we can add the possibility to address nested fields by a fully qualified name, e.g. in views. At the moment that's not yet necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4134
https://github.com/root-project/root/pull/4134:583,security,ident,identified,583,"[ntuple] Encapsulate RNTuple meta-data in RNTupleDescriptor; Introduces an RNTupleDescriptor directory class that stores the field structure, the attached columns and their structure, as well as the cluster structure. The descriptor can be used independently of the concrete page storage implementation. Serialization and deserialization of header and footer does not depend on libCore. Along the way, this PR also straightens up naming: field names are now relative to their parent fields, i.e. fields are identified by (name, parent id). Columns have no names anymore. Columns are identified by (field id, column index). At some point we can add the possibility to address nested fields by a fully qualified name, e.g. in views. At the moment that's not yet necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4134
https://github.com/root-project/root/pull/4134:368,testability,depend,depend,368,"[ntuple] Encapsulate RNTuple meta-data in RNTupleDescriptor; Introduces an RNTupleDescriptor directory class that stores the field structure, the attached columns and their structure, as well as the cluster structure. The descriptor can be used independently of the concrete page storage implementation. Serialization and deserialization of header and footer does not depend on libCore. Along the way, this PR also straightens up naming: field names are now relative to their parent fields, i.e. fields are identified by (name, parent id). Columns have no names anymore. Columns are identified by (field id, column index). At some point we can add the possibility to address nested fields by a fully qualified name, e.g. in views. At the moment that's not yet necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4134
https://github.com/root-project/root/pull/4135:205,deployability,fail,failing,205,"[Exp PyROOT] Pythonization of RDataFrame.Histo*D and RDataFrame.Profile*D and seven tutorials fixed; Thanks to the pythonization of the five RDataFrame methods Histo*D (1, 2, 3) and Profile*D (1, 2) seven failing tutorials were fixed. . The key is the mostly possibility to call these methods, when they receive a TH*Model or TProfile*DModel as argument, by typing e.g.:. `rdf.Histo1D((""h"", ""h"", 100, 0, 100), ""x"")`. instead of:. `rdf..Histo1D(ROOT.RDF.TH1DModel(""h"", ""h"", 100, 0, 100), ""x"")`. The converters that did the magic in the old PyROOT are not implemented anymore in the new Cppyy, that's why we decided to introduce them. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4135
https://github.com/root-project/root/pull/4135:64,energy efficiency,Profil,Profile,64,"[Exp PyROOT] Pythonization of RDataFrame.Histo*D and RDataFrame.Profile*D and seven tutorials fixed; Thanks to the pythonization of the five RDataFrame methods Histo*D (1, 2, 3) and Profile*D (1, 2) seven failing tutorials were fixed. . The key is the mostly possibility to call these methods, when they receive a TH*Model or TProfile*DModel as argument, by typing e.g.:. `rdf.Histo1D((""h"", ""h"", 100, 0, 100), ""x"")`. instead of:. `rdf..Histo1D(ROOT.RDF.TH1DModel(""h"", ""h"", 100, 0, 100), ""x"")`. The converters that did the magic in the old PyROOT are not implemented anymore in the new Cppyy, that's why we decided to introduce them. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4135
https://github.com/root-project/root/pull/4135:182,energy efficiency,Profil,Profile,182,"[Exp PyROOT] Pythonization of RDataFrame.Histo*D and RDataFrame.Profile*D and seven tutorials fixed; Thanks to the pythonization of the five RDataFrame methods Histo*D (1, 2, 3) and Profile*D (1, 2) seven failing tutorials were fixed. . The key is the mostly possibility to call these methods, when they receive a TH*Model or TProfile*DModel as argument, by typing e.g.:. `rdf.Histo1D((""h"", ""h"", 100, 0, 100), ""x"")`. instead of:. `rdf..Histo1D(ROOT.RDF.TH1DModel(""h"", ""h"", 100, 0, 100), ""x"")`. The converters that did the magic in the old PyROOT are not implemented anymore in the new Cppyy, that's why we decided to introduce them. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4135
https://github.com/root-project/root/pull/4135:317,energy efficiency,Model,Model,317,"[Exp PyROOT] Pythonization of RDataFrame.Histo*D and RDataFrame.Profile*D and seven tutorials fixed; Thanks to the pythonization of the five RDataFrame methods Histo*D (1, 2, 3) and Profile*D (1, 2) seven failing tutorials were fixed. . The key is the mostly possibility to call these methods, when they receive a TH*Model or TProfile*DModel as argument, by typing e.g.:. `rdf.Histo1D((""h"", ""h"", 100, 0, 100), ""x"")`. instead of:. `rdf..Histo1D(ROOT.RDF.TH1DModel(""h"", ""h"", 100, 0, 100), ""x"")`. The converters that did the magic in the old PyROOT are not implemented anymore in the new Cppyy, that's why we decided to introduce them. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4135
https://github.com/root-project/root/pull/4135:64,performance,Profil,Profile,64,"[Exp PyROOT] Pythonization of RDataFrame.Histo*D and RDataFrame.Profile*D and seven tutorials fixed; Thanks to the pythonization of the five RDataFrame methods Histo*D (1, 2, 3) and Profile*D (1, 2) seven failing tutorials were fixed. . The key is the mostly possibility to call these methods, when they receive a TH*Model or TProfile*DModel as argument, by typing e.g.:. `rdf.Histo1D((""h"", ""h"", 100, 0, 100), ""x"")`. instead of:. `rdf..Histo1D(ROOT.RDF.TH1DModel(""h"", ""h"", 100, 0, 100), ""x"")`. The converters that did the magic in the old PyROOT are not implemented anymore in the new Cppyy, that's why we decided to introduce them. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4135
https://github.com/root-project/root/pull/4135:182,performance,Profil,Profile,182,"[Exp PyROOT] Pythonization of RDataFrame.Histo*D and RDataFrame.Profile*D and seven tutorials fixed; Thanks to the pythonization of the five RDataFrame methods Histo*D (1, 2, 3) and Profile*D (1, 2) seven failing tutorials were fixed. . The key is the mostly possibility to call these methods, when they receive a TH*Model or TProfile*DModel as argument, by typing e.g.:. `rdf.Histo1D((""h"", ""h"", 100, 0, 100), ""x"")`. instead of:. `rdf..Histo1D(ROOT.RDF.TH1DModel(""h"", ""h"", 100, 0, 100), ""x"")`. The converters that did the magic in the old PyROOT are not implemented anymore in the new Cppyy, that's why we decided to introduce them. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4135
https://github.com/root-project/root/pull/4135:205,reliability,fail,failing,205,"[Exp PyROOT] Pythonization of RDataFrame.Histo*D and RDataFrame.Profile*D and seven tutorials fixed; Thanks to the pythonization of the five RDataFrame methods Histo*D (1, 2, 3) and Profile*D (1, 2) seven failing tutorials were fixed. . The key is the mostly possibility to call these methods, when they receive a TH*Model or TProfile*DModel as argument, by typing e.g.:. `rdf.Histo1D((""h"", ""h"", 100, 0, 100), ""x"")`. instead of:. `rdf..Histo1D(ROOT.RDF.TH1DModel(""h"", ""h"", 100, 0, 100), ""x"")`. The converters that did the magic in the old PyROOT are not implemented anymore in the new Cppyy, that's why we decided to introduce them. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4135
https://github.com/root-project/root/pull/4135:317,security,Model,Model,317,"[Exp PyROOT] Pythonization of RDataFrame.Histo*D and RDataFrame.Profile*D and seven tutorials fixed; Thanks to the pythonization of the five RDataFrame methods Histo*D (1, 2, 3) and Profile*D (1, 2) seven failing tutorials were fixed. . The key is the mostly possibility to call these methods, when they receive a TH*Model or TProfile*DModel as argument, by typing e.g.:. `rdf.Histo1D((""h"", ""h"", 100, 0, 100), ""x"")`. instead of:. `rdf..Histo1D(ROOT.RDF.TH1DModel(""h"", ""h"", 100, 0, 100), ""x"")`. The converters that did the magic in the old PyROOT are not implemented anymore in the new Cppyy, that's why we decided to introduce them. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4135
https://github.com/root-project/root/pull/4136:58,deployability,contain,contains,58,Change pointer check method to msync.; The POSIX does not contains /dev/random [1]. Moreover the /dev/random. might not have write permissions. The better way is to use an another. solution which is based on the msync system call [2]. Also this solution. reduces the number of context switching. [1] -- https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap10.html. [2] -- https://pubs.opengroup.org/onlinepubs/009695399/functions/msync.html,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4136
https://github.com/root-project/root/pull/4136:255,energy efficiency,reduc,reduces,255,Change pointer check method to msync.; The POSIX does not contains /dev/random [1]. Moreover the /dev/random. might not have write permissions. The better way is to use an another. solution which is based on the msync system call [2]. Also this solution. reduces the number of context switching. [1] -- https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap10.html. [2] -- https://pubs.opengroup.org/onlinepubs/009695399/functions/msync.html,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4136
https://github.com/root-project/root/pull/4136:311,integrability,pub,pubs,311,Change pointer check method to msync.; The POSIX does not contains /dev/random [1]. Moreover the /dev/random. might not have write permissions. The better way is to use an another. solution which is based on the msync system call [2]. Also this solution. reduces the number of context switching. [1] -- https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap10.html. [2] -- https://pubs.opengroup.org/onlinepubs/009695399/functions/msync.html,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4136
https://github.com/root-project/root/pull/4136:392,integrability,pub,pubs,392,Change pointer check method to msync.; The POSIX does not contains /dev/random [1]. Moreover the /dev/random. might not have write permissions. The better way is to use an another. solution which is based on the msync system call [2]. Also this solution. reduces the number of context switching. [1] -- https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap10.html. [2] -- https://pubs.opengroup.org/onlinepubs/009695399/functions/msync.html,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4136
https://github.com/root-project/root/pull/4136:49,reliability,doe,does,49,Change pointer check method to msync.; The POSIX does not contains /dev/random [1]. Moreover the /dev/random. might not have write permissions. The better way is to use an another. solution which is based on the msync system call [2]. Also this solution. reduces the number of context switching. [1] -- https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap10.html. [2] -- https://pubs.opengroup.org/onlinepubs/009695399/functions/msync.html,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4136
https://github.com/root-project/root/pull/4136:131,safety,permiss,permissions,131,Change pointer check method to msync.; The POSIX does not contains /dev/random [1]. Moreover the /dev/random. might not have write permissions. The better way is to use an another. solution which is based on the msync system call [2]. Also this solution. reduces the number of context switching. [1] -- https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap10.html. [2] -- https://pubs.opengroup.org/onlinepubs/009695399/functions/msync.html,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4136
https://github.com/root-project/root/pull/4136:277,testability,context,context,277,Change pointer check method to msync.; The POSIX does not contains /dev/random [1]. Moreover the /dev/random. might not have write permissions. The better way is to use an another. solution which is based on the msync system call [2]. Also this solution. reduces the number of context switching. [1] -- https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap10.html. [2] -- https://pubs.opengroup.org/onlinepubs/009695399/functions/msync.html,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4136
https://github.com/root-project/root/pull/4137:44,modifiability,variab,variables,44,[TVMA experimental] Use expressions to book variables with RReader; The variables in the call to TMVA::Reader::AdVariable have to be booked by the. expressions originally used in training not by the title. TMVA::Reader has an. internal check whether these are correct (even though the information is. never used).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4137
https://github.com/root-project/root/pull/4137:72,modifiability,variab,variables,72,[TVMA experimental] Use expressions to book variables with RReader; The variables in the call to TMVA::Reader::AdVariable have to be booked by the. expressions originally used in training not by the title. TMVA::Reader has an. internal check whether these are correct (even though the information is. never used).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4137
https://github.com/root-project/root/pull/4138:129,deployability,contain,contained,129,Fix copy of TF1Convolution and TF1NormSum; The copy constructor of TF1Convolution and TF1NormSum where usinog TF1::Clone for the contained TF1 pointers. TF1::Clone does not work when the TF1 objects are based on compiled functors and not formula. . Use now the correct TF1::Copy function to copy the contained objects. . This fixes the problem reported at https://root-forum.cern.ch/t/tf1convolution-zero-in-root-6-18/35421,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4138
https://github.com/root-project/root/pull/4138:300,deployability,contain,contained,300,Fix copy of TF1Convolution and TF1NormSum; The copy constructor of TF1Convolution and TF1NormSum where usinog TF1::Clone for the contained TF1 pointers. TF1::Clone does not work when the TF1 objects are based on compiled functors and not formula. . Use now the correct TF1::Copy function to copy the contained objects. . This fixes the problem reported at https://root-forum.cern.ch/t/tf1convolution-zero-in-root-6-18/35421,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4138
https://github.com/root-project/root/pull/4138:164,reliability,doe,does,164,Fix copy of TF1Convolution and TF1NormSum; The copy constructor of TF1Convolution and TF1NormSum where usinog TF1::Clone for the contained TF1 pointers. TF1::Clone does not work when the TF1 objects are based on compiled functors and not formula. . Use now the correct TF1::Copy function to copy the contained objects. . This fixes the problem reported at https://root-forum.cern.ch/t/tf1convolution-zero-in-root-6-18/35421,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4138
https://github.com/root-project/root/pull/4139:19,safety,test,test,19,[Exp PyROOT] Other test fixed by commit 267179; The following test:. pyunittests-dataframe-histograms. was fixed by the commit mentioned in the title.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4139
https://github.com/root-project/root/pull/4139:62,safety,test,test,62,[Exp PyROOT] Other test fixed by commit 267179; The following test:. pyunittests-dataframe-histograms. was fixed by the commit mentioned in the title.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4139
https://github.com/root-project/root/pull/4139:19,testability,test,test,19,[Exp PyROOT] Other test fixed by commit 267179; The following test:. pyunittests-dataframe-histograms. was fixed by the commit mentioned in the title.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4139
https://github.com/root-project/root/pull/4139:62,testability,test,test,62,[Exp PyROOT] Other test fixed by commit 267179; The following test:. pyunittests-dataframe-histograms. was fixed by the commit mentioned in the title.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4139
https://github.com/root-project/root/pull/4141:153,deployability,scale,scales,153,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:153,energy efficiency,scale,scales,153,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:351,integrability,transform,transform,351,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:481,integrability,transform,transformation,481,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:351,interoperability,transform,transform,351,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:481,interoperability,transform,transformation,481,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:63,modifiability,scal,scaling,63,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:153,modifiability,scal,scales,153,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:266,modifiability,Variab,VariableNormalizeTransform,266,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:319,modifiability,Variab,VariableGaussTransform,319,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:153,performance,scale,scales,153,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:539,performance,network,network,539,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:681,performance,network,network,681,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:189,safety,input,input,189,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:450,safety,input,input,450,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:569,safety,detect,detector,569,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:177,security,sign,sign,177,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:438,security,sign,sign,438,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:539,security,network,network,539,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:569,security,detect,detector,569,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:681,security,network,network,681,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:189,usability,input,input,189,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:450,usability,input,input,450,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4141:734,usability,document,documentation,734,"[TMVA][Preprocessing] - Additional normalisation method; . Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4141
https://github.com/root-project/root/pull/4142:9,deployability,build,build,9,Fix PCRE build on Windows; Only build in Debug mode when the debug runtime libraries are used. This fixes the following warning:. LINK : warning LNK4098: defaultlib 'MSVCRTD' conflicts with use of other libs; use /NODEFAULTLIB:library,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4142
https://github.com/root-project/root/pull/4142:32,deployability,build,build,32,Fix PCRE build on Windows; Only build in Debug mode when the debug runtime libraries are used. This fixes the following warning:. LINK : warning LNK4098: defaultlib 'MSVCRTD' conflicts with use of other libs; use /NODEFAULTLIB:library,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4142
https://github.com/root-project/root/pull/4142:175,interoperability,conflict,conflicts,175,Fix PCRE build on Windows; Only build in Debug mode when the debug runtime libraries are used. This fixes the following warning:. LINK : warning LNK4098: defaultlib 'MSVCRTD' conflicts with use of other libs; use /NODEFAULTLIB:library,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4142
https://github.com/root-project/root/pull/4143:11,availability,failur,failure,11,[http] fix failure when sending data to websocket in threads ; Can be activated for RWebWindow. . Avoids blocking of application code due-to single slow client. Use `cond.notify_all()` only when really condition in the wait state,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4143
https://github.com/root-project/root/pull/4143:148,availability,slo,slow,148,[http] fix failure when sending data to websocket in threads ; Can be activated for RWebWindow. . Avoids blocking of application code due-to single slow client. Use `cond.notify_all()` only when really condition in the wait state,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4143
https://github.com/root-project/root/pull/4143:224,availability,state,state,224,[http] fix failure when sending data to websocket in threads ; Can be activated for RWebWindow. . Avoids blocking of application code due-to single slow client. Use `cond.notify_all()` only when really condition in the wait state,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4143
https://github.com/root-project/root/pull/4143:11,deployability,fail,failure,11,[http] fix failure when sending data to websocket in threads ; Can be activated for RWebWindow. . Avoids blocking of application code due-to single slow client. Use `cond.notify_all()` only when really condition in the wait state,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4143
https://github.com/root-project/root/pull/4143:224,integrability,state,state,224,[http] fix failure when sending data to websocket in threads ; Can be activated for RWebWindow. . Avoids blocking of application code due-to single slow client. Use `cond.notify_all()` only when really condition in the wait state,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4143
https://github.com/root-project/root/pull/4143:11,performance,failur,failure,11,[http] fix failure when sending data to websocket in threads ; Can be activated for RWebWindow. . Avoids blocking of application code due-to single slow client. Use `cond.notify_all()` only when really condition in the wait state,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4143
https://github.com/root-project/root/pull/4143:11,reliability,fail,failure,11,[http] fix failure when sending data to websocket in threads ; Can be activated for RWebWindow. . Avoids blocking of application code due-to single slow client. Use `cond.notify_all()` only when really condition in the wait state,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4143
https://github.com/root-project/root/pull/4143:148,reliability,slo,slow,148,[http] fix failure when sending data to websocket in threads ; Can be activated for RWebWindow. . Avoids blocking of application code due-to single slow client. Use `cond.notify_all()` only when really condition in the wait state,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4143
https://github.com/root-project/root/pull/4143:98,safety,Avoid,Avoids,98,[http] fix failure when sending data to websocket in threads ; Can be activated for RWebWindow. . Avoids blocking of application code due-to single slow client. Use `cond.notify_all()` only when really condition in the wait state,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4143
https://github.com/root-project/root/pull/4144:207,deployability,fail,failing,207,[RDF] Reenable Higgs tutorial with pyroot experimental; The issue that prevented the higgs tutorial from running with pyroot experimental has been fixed by #4135. Now the tutorial should be removed from the failing list in the CMakeLists file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4144
https://github.com/root-project/root/pull/4144:207,reliability,fail,failing,207,[RDF] Reenable Higgs tutorial with pyroot experimental; The issue that prevented the higgs tutorial from running with pyroot experimental has been fixed by #4135. Now the tutorial should be removed from the failing list in the CMakeLists file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4144
https://github.com/root-project/root/pull/4144:71,safety,prevent,prevented,71,[RDF] Reenable Higgs tutorial with pyroot experimental; The issue that prevented the higgs tutorial from running with pyroot experimental has been fixed by #4135. Now the tutorial should be removed from the failing list in the CMakeLists file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4144
https://github.com/root-project/root/pull/4144:71,security,preven,prevented,71,[RDF] Reenable Higgs tutorial with pyroot experimental; The issue that prevented the higgs tutorial from running with pyroot experimental has been fixed by #4135. Now the tutorial should be removed from the failing list in the CMakeLists file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4144
https://github.com/root-project/root/pull/4146:126,deployability,log,logic,126,"[web geom] avoid binary data transfer, use JSON_base64; Binary data has to be transferred as separate data packet. This makes logic complicated especially when many small raw packets should be used. Using `JSON_base64` marker in class info, one can insert raw data in ROOT JSON and . use such binary at the place. This significantly simplifies data handling. . Same approach can be later used for eve7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4146
https://github.com/root-project/root/pull/4146:107,modifiability,pac,packet,107,"[web geom] avoid binary data transfer, use JSON_base64; Binary data has to be transferred as separate data packet. This makes logic complicated especially when many small raw packets should be used. Using `JSON_base64` marker in class info, one can insert raw data in ROOT JSON and . use such binary at the place. This significantly simplifies data handling. . Same approach can be later used for eve7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4146
https://github.com/root-project/root/pull/4146:175,modifiability,pac,packets,175,"[web geom] avoid binary data transfer, use JSON_base64; Binary data has to be transferred as separate data packet. This makes logic complicated especially when many small raw packets should be used. Using `JSON_base64` marker in class info, one can insert raw data in ROOT JSON and . use such binary at the place. This significantly simplifies data handling. . Same approach can be later used for eve7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4146
https://github.com/root-project/root/pull/4146:11,safety,avoid,avoid,11,"[web geom] avoid binary data transfer, use JSON_base64; Binary data has to be transferred as separate data packet. This makes logic complicated especially when many small raw packets should be used. Using `JSON_base64` marker in class info, one can insert raw data in ROOT JSON and . use such binary at the place. This significantly simplifies data handling. . Same approach can be later used for eve7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4146
https://github.com/root-project/root/pull/4146:126,safety,log,logic,126,"[web geom] avoid binary data transfer, use JSON_base64; Binary data has to be transferred as separate data packet. This makes logic complicated especially when many small raw packets should be used. Using `JSON_base64` marker in class info, one can insert raw data in ROOT JSON and . use such binary at the place. This significantly simplifies data handling. . Same approach can be later used for eve7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4146
https://github.com/root-project/root/pull/4146:132,safety,compl,complicated,132,"[web geom] avoid binary data transfer, use JSON_base64; Binary data has to be transferred as separate data packet. This makes logic complicated especially when many small raw packets should be used. Using `JSON_base64` marker in class info, one can insert raw data in ROOT JSON and . use such binary at the place. This significantly simplifies data handling. . Same approach can be later used for eve7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4146
https://github.com/root-project/root/pull/4146:126,security,log,logic,126,"[web geom] avoid binary data transfer, use JSON_base64; Binary data has to be transferred as separate data packet. This makes logic complicated especially when many small raw packets should be used. Using `JSON_base64` marker in class info, one can insert raw data in ROOT JSON and . use such binary at the place. This significantly simplifies data handling. . Same approach can be later used for eve7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4146
https://github.com/root-project/root/pull/4146:132,security,compl,complicated,132,"[web geom] avoid binary data transfer, use JSON_base64; Binary data has to be transferred as separate data packet. This makes logic complicated especially when many small raw packets should be used. Using `JSON_base64` marker in class info, one can insert raw data in ROOT JSON and . use such binary at the place. This significantly simplifies data handling. . Same approach can be later used for eve7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4146
https://github.com/root-project/root/pull/4146:319,security,sign,significantly,319,"[web geom] avoid binary data transfer, use JSON_base64; Binary data has to be transferred as separate data packet. This makes logic complicated especially when many small raw packets should be used. Using `JSON_base64` marker in class info, one can insert raw data in ROOT JSON and . use such binary at the place. This significantly simplifies data handling. . Same approach can be later used for eve7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4146
https://github.com/root-project/root/pull/4146:126,testability,log,logic,126,"[web geom] avoid binary data transfer, use JSON_base64; Binary data has to be transferred as separate data packet. This makes logic complicated especially when many small raw packets should be used. Using `JSON_base64` marker in class info, one can insert raw data in ROOT JSON and . use such binary at the place. This significantly simplifies data handling. . Same approach can be later used for eve7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4146
https://github.com/root-project/root/pull/4146:333,testability,simpl,simplifies,333,"[web geom] avoid binary data transfer, use JSON_base64; Binary data has to be transferred as separate data packet. This makes logic complicated especially when many small raw packets should be used. Using `JSON_base64` marker in class info, one can insert raw data in ROOT JSON and . use such binary at the place. This significantly simplifies data handling. . Same approach can be later used for eve7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4146
https://github.com/root-project/root/pull/4146:333,usability,simpl,simplifies,333,"[web geom] avoid binary data transfer, use JSON_base64; Binary data has to be transferred as separate data packet. This makes logic complicated especially when many small raw packets should be used. Using `JSON_base64` marker in class info, one can insert raw data in ROOT JSON and . use such binary at the place. This significantly simplifies data handling. . Same approach can be later used for eve7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4146
https://github.com/root-project/root/pull/4147:25,deployability,updat,updates,25,[RF][Docs] Documentation updates;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4147
https://github.com/root-project/root/pull/4147:25,safety,updat,updates,25,[RF][Docs] Documentation updates;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4147
https://github.com/root-project/root/pull/4147:25,security,updat,updates,25,[RF][Docs] Documentation updates;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4147
https://github.com/root-project/root/pull/4147:11,usability,Document,Documentation,11,[RF][Docs] Documentation updates;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4147
https://github.com/root-project/root/pull/4148:270,availability,failur,failure,270,"[Exp PyROOT] Pythonization of TDirectoryFile:Get(); Due to a pythonization not yet carried from old to experimental PyROOT, multiple calls of the same object from a TFile done e.g in the usual way `file.object` used to retrieve copies of the same object, leading to the failure of a test. The pythonization of the TDirectoryFile:Get() method was thus added; in this way, also the TFile class inherits it. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4148
https://github.com/root-project/root/pull/4148:270,deployability,fail,failure,270,"[Exp PyROOT] Pythonization of TDirectoryFile:Get(); Due to a pythonization not yet carried from old to experimental PyROOT, multiple calls of the same object from a TFile done e.g in the usual way `file.object` used to retrieve copies of the same object, leading to the failure of a test. The pythonization of the TDirectoryFile:Get() method was thus added; in this way, also the TFile class inherits it. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4148
https://github.com/root-project/root/pull/4148:392,modifiability,inherit,inherits,392,"[Exp PyROOT] Pythonization of TDirectoryFile:Get(); Due to a pythonization not yet carried from old to experimental PyROOT, multiple calls of the same object from a TFile done e.g in the usual way `file.object` used to retrieve copies of the same object, leading to the failure of a test. The pythonization of the TDirectoryFile:Get() method was thus added; in this way, also the TFile class inherits it. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4148
https://github.com/root-project/root/pull/4148:270,performance,failur,failure,270,"[Exp PyROOT] Pythonization of TDirectoryFile:Get(); Due to a pythonization not yet carried from old to experimental PyROOT, multiple calls of the same object from a TFile done e.g in the usual way `file.object` used to retrieve copies of the same object, leading to the failure of a test. The pythonization of the TDirectoryFile:Get() method was thus added; in this way, also the TFile class inherits it. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4148
https://github.com/root-project/root/pull/4148:270,reliability,fail,failure,270,"[Exp PyROOT] Pythonization of TDirectoryFile:Get(); Due to a pythonization not yet carried from old to experimental PyROOT, multiple calls of the same object from a TFile done e.g in the usual way `file.object` used to retrieve copies of the same object, leading to the failure of a test. The pythonization of the TDirectoryFile:Get() method was thus added; in this way, also the TFile class inherits it. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4148
https://github.com/root-project/root/pull/4148:283,safety,test,test,283,"[Exp PyROOT] Pythonization of TDirectoryFile:Get(); Due to a pythonization not yet carried from old to experimental PyROOT, multiple calls of the same object from a TFile done e.g in the usual way `file.object` used to retrieve copies of the same object, leading to the failure of a test. The pythonization of the TDirectoryFile:Get() method was thus added; in this way, also the TFile class inherits it. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4148
https://github.com/root-project/root/pull/4148:283,testability,test,test,283,"[Exp PyROOT] Pythonization of TDirectoryFile:Get(); Due to a pythonization not yet carried from old to experimental PyROOT, multiple calls of the same object from a TFile done e.g in the usual way `file.object` used to retrieve copies of the same object, leading to the failure of a test. The pythonization of the TDirectoryFile:Get() method was thus added; in this way, also the TFile class inherits it. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4148
https://github.com/root-project/root/pull/4149:45,interoperability,specif,specified,45,[rootcling] Complain if no headers files are specified.; Calling rootcling with no header files creates an empty and useless dictionary. Users should be notified as usually that's not what they want.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4149
https://github.com/root-project/root/pull/4149:12,safety,Compl,Complain,12,[rootcling] Complain if no headers files are specified.; Calling rootcling with no header files creates an empty and useless dictionary. Users should be notified as usually that's not what they want.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4149
https://github.com/root-project/root/pull/4149:12,security,Compl,Complain,12,[rootcling] Complain if no headers files are specified.; Calling rootcling with no header files creates an empty and useless dictionary. Users should be notified as usually that's not what they want.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4149
https://github.com/root-project/root/pull/4149:137,usability,User,Users,137,[rootcling] Complain if no headers files are specified.; Calling rootcling with no header files creates an empty and useless dictionary. Users should be notified as usually that's not what they want.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4149
https://github.com/root-project/root/pull/4150:0,deployability,Build,Build,0,Build system;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4150
https://github.com/root-project/root/pull/4151:195,availability,operat,operator,195,"[graf2d] improving TGraph, TCutG, TLine and TArrow classes; 1. Provide support of NDC for TArrow. . 2. Fix interactive movement of TLine/TArrow when NDC coordinates are used. 3. Fix TCutG assign operator. 4. Provide TGraph::MovePoints() method",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4151
https://github.com/root-project/root/pull/4151:153,interoperability,coordinat,coordinates,153,"[graf2d] improving TGraph, TCutG, TLine and TArrow classes; 1. Provide support of NDC for TArrow. . 2. Fix interactive movement of TLine/TArrow when NDC coordinates are used. 3. Fix TCutG assign operator. 4. Provide TGraph::MovePoints() method",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4151
https://github.com/root-project/root/pull/4151:71,usability,support,support,71,"[graf2d] improving TGraph, TCutG, TLine and TArrow classes; 1. Provide support of NDC for TArrow. . 2. Fix interactive movement of TLine/TArrow when NDC coordinates are used. 3. Fix TCutG assign operator. 4. Provide TGraph::MovePoints() method",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4151
https://github.com/root-project/root/pull/4151:107,usability,interact,interactive,107,"[graf2d] improving TGraph, TCutG, TLine and TArrow classes; 1. Provide support of NDC for TArrow. . 2. Fix interactive movement of TLine/TArrow when NDC coordinates are used. 3. Fix TCutG assign operator. 4. Provide TGraph::MovePoints() method",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4151
https://github.com/root-project/root/pull/4152:14,availability,error,error,14,Fix ownership error in TTreeFormula; TCutG owns assigned to it ObjectX/ObjectY. Therefore one cannot delete it from outside - it happens in setter. methods,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4152
https://github.com/root-project/root/pull/4152:14,performance,error,error,14,Fix ownership error in TTreeFormula; TCutG owns assigned to it ObjectX/ObjectY. Therefore one cannot delete it from outside - it happens in setter. methods,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4152
https://github.com/root-project/root/pull/4152:14,safety,error,error,14,Fix ownership error in TTreeFormula; TCutG owns assigned to it ObjectX/ObjectY. Therefore one cannot delete it from outside - it happens in setter. methods,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4152
https://github.com/root-project/root/pull/4152:14,usability,error,error,14,Fix ownership error in TTreeFormula; TCutG owns assigned to it ObjectX/ObjectY. Therefore one cannot delete it from outside - it happens in setter. methods,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4152
https://github.com/root-project/root/pull/4153:15,energy efficiency,alloc,allocating,15,[VecOps] Avoid allocating temporaries on heap in InvariantMass[es]; Resolves ROOT-10252.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4153
https://github.com/root-project/root/pull/4153:9,safety,Avoid,Avoid,9,[VecOps] Avoid allocating temporaries on heap in InvariantMass[es]; Resolves ROOT-10252.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4153
https://github.com/root-project/root/pull/4154:142,deployability,build,builds,142,Rootcling minor refactoring; This PR is part of a larger (future) PR improving the argument parsing. The final goal is to fix the incremental builds when ROOT is built with -Druntime_cxxmodules=On.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4154
https://github.com/root-project/root/pull/4154:16,modifiability,refact,refactoring,16,Rootcling minor refactoring; This PR is part of a larger (future) PR improving the argument parsing. The final goal is to fix the incremental builds when ROOT is built with -Druntime_cxxmodules=On.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4154
https://github.com/root-project/root/pull/4154:16,performance,refactor,refactoring,16,Rootcling minor refactoring; This PR is part of a larger (future) PR improving the argument parsing. The final goal is to fix the incremental builds when ROOT is built with -Druntime_cxxmodules=On.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4154
https://github.com/root-project/root/pull/4155:46,modifiability,variab,variable,46,[cxxmodules] Simplify and use more meaningful variable names. NFC.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4155
https://github.com/root-project/root/pull/4155:13,testability,Simpl,Simplify,13,[cxxmodules] Simplify and use more meaningful variable names. NFC.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4155
https://github.com/root-project/root/pull/4155:13,usability,Simpl,Simplify,13,[cxxmodules] Simplify and use more meaningful variable names. NFC.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4155
https://github.com/root-project/root/pull/4156:99,deployability,fail,failing,99,"[Exp PyROOT] Changes in pythonization of TDirectoryFile:Get() and TDirectory.__getattr__; Due to a failing test and the resulting investigation, we decide to change the pythonization of Get() and __getattr__ in the classes TDirectory, TDirectoryFile and TFile. The situation is now the following:. . - __getattr__ : TDirectory --> TDirectoryFile --> TFile. - caches the returned object for future attempts. - raises AttributeError if object not found. . - Get() : TDirectoryFile --> TFile. - does not cache the returned object. - returns nullptr if object not found. A new test to check the caching functionality has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4156
https://github.com/root-project/root/pull/4156:359,performance,cach,caches,359,"[Exp PyROOT] Changes in pythonization of TDirectoryFile:Get() and TDirectory.__getattr__; Due to a failing test and the resulting investigation, we decide to change the pythonization of Get() and __getattr__ in the classes TDirectory, TDirectoryFile and TFile. The situation is now the following:. . - __getattr__ : TDirectory --> TDirectoryFile --> TFile. - caches the returned object for future attempts. - raises AttributeError if object not found. . - Get() : TDirectoryFile --> TFile. - does not cache the returned object. - returns nullptr if object not found. A new test to check the caching functionality has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4156
https://github.com/root-project/root/pull/4156:501,performance,cach,cache,501,"[Exp PyROOT] Changes in pythonization of TDirectoryFile:Get() and TDirectory.__getattr__; Due to a failing test and the resulting investigation, we decide to change the pythonization of Get() and __getattr__ in the classes TDirectory, TDirectoryFile and TFile. The situation is now the following:. . - __getattr__ : TDirectory --> TDirectoryFile --> TFile. - caches the returned object for future attempts. - raises AttributeError if object not found. . - Get() : TDirectoryFile --> TFile. - does not cache the returned object. - returns nullptr if object not found. A new test to check the caching functionality has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4156
https://github.com/root-project/root/pull/4156:591,performance,cach,caching,591,"[Exp PyROOT] Changes in pythonization of TDirectoryFile:Get() and TDirectory.__getattr__; Due to a failing test and the resulting investigation, we decide to change the pythonization of Get() and __getattr__ in the classes TDirectory, TDirectoryFile and TFile. The situation is now the following:. . - __getattr__ : TDirectory --> TDirectoryFile --> TFile. - caches the returned object for future attempts. - raises AttributeError if object not found. . - Get() : TDirectoryFile --> TFile. - does not cache the returned object. - returns nullptr if object not found. A new test to check the caching functionality has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4156
https://github.com/root-project/root/pull/4156:99,reliability,fail,failing,99,"[Exp PyROOT] Changes in pythonization of TDirectoryFile:Get() and TDirectory.__getattr__; Due to a failing test and the resulting investigation, we decide to change the pythonization of Get() and __getattr__ in the classes TDirectory, TDirectoryFile and TFile. The situation is now the following:. . - __getattr__ : TDirectory --> TDirectoryFile --> TFile. - caches the returned object for future attempts. - raises AttributeError if object not found. . - Get() : TDirectoryFile --> TFile. - does not cache the returned object. - returns nullptr if object not found. A new test to check the caching functionality has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4156
https://github.com/root-project/root/pull/4156:492,reliability,doe,does,492,"[Exp PyROOT] Changes in pythonization of TDirectoryFile:Get() and TDirectory.__getattr__; Due to a failing test and the resulting investigation, we decide to change the pythonization of Get() and __getattr__ in the classes TDirectory, TDirectoryFile and TFile. The situation is now the following:. . - __getattr__ : TDirectory --> TDirectoryFile --> TFile. - caches the returned object for future attempts. - raises AttributeError if object not found. . - Get() : TDirectoryFile --> TFile. - does not cache the returned object. - returns nullptr if object not found. A new test to check the caching functionality has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4156
https://github.com/root-project/root/pull/4156:107,safety,test,test,107,"[Exp PyROOT] Changes in pythonization of TDirectoryFile:Get() and TDirectory.__getattr__; Due to a failing test and the resulting investigation, we decide to change the pythonization of Get() and __getattr__ in the classes TDirectory, TDirectoryFile and TFile. The situation is now the following:. . - __getattr__ : TDirectory --> TDirectoryFile --> TFile. - caches the returned object for future attempts. - raises AttributeError if object not found. . - Get() : TDirectoryFile --> TFile. - does not cache the returned object. - returns nullptr if object not found. A new test to check the caching functionality has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4156
https://github.com/root-project/root/pull/4156:573,safety,test,test,573,"[Exp PyROOT] Changes in pythonization of TDirectoryFile:Get() and TDirectory.__getattr__; Due to a failing test and the resulting investigation, we decide to change the pythonization of Get() and __getattr__ in the classes TDirectory, TDirectoryFile and TFile. The situation is now the following:. . - __getattr__ : TDirectory --> TDirectoryFile --> TFile. - caches the returned object for future attempts. - raises AttributeError if object not found. . - Get() : TDirectoryFile --> TFile. - does not cache the returned object. - returns nullptr if object not found. A new test to check the caching functionality has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4156
https://github.com/root-project/root/pull/4156:107,testability,test,test,107,"[Exp PyROOT] Changes in pythonization of TDirectoryFile:Get() and TDirectory.__getattr__; Due to a failing test and the resulting investigation, we decide to change the pythonization of Get() and __getattr__ in the classes TDirectory, TDirectoryFile and TFile. The situation is now the following:. . - __getattr__ : TDirectory --> TDirectoryFile --> TFile. - caches the returned object for future attempts. - raises AttributeError if object not found. . - Get() : TDirectoryFile --> TFile. - does not cache the returned object. - returns nullptr if object not found. A new test to check the caching functionality has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4156
https://github.com/root-project/root/pull/4156:573,testability,test,test,573,"[Exp PyROOT] Changes in pythonization of TDirectoryFile:Get() and TDirectory.__getattr__; Due to a failing test and the resulting investigation, we decide to change the pythonization of Get() and __getattr__ in the classes TDirectory, TDirectoryFile and TFile. The situation is now the following:. . - __getattr__ : TDirectory --> TDirectoryFile --> TFile. - caches the returned object for future attempts. - raises AttributeError if object not found. . - Get() : TDirectoryFile --> TFile. - does not cache the returned object. - returns nullptr if object not found. A new test to check the caching functionality has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4156
https://github.com/root-project/root/pull/4157:53,performance,time,time,53,Allow to select system of units (TGeo/Geant4) at run-time; (cherry picked from commit b81396c4037e76d614bbf7ffa913ed1ce28813a8),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4157
https://github.com/root-project/root/pull/4157:26,testability,unit,units,26,Allow to select system of units (TGeo/Geant4) at run-time; (cherry picked from commit b81396c4037e76d614bbf7ffa913ed1ce28813a8),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4157
https://github.com/root-project/root/pull/4158:4,availability,error,error,4,Fix error with auto-enabled builtin GLEW with CMake 3.15 and above;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4158
https://github.com/root-project/root/pull/4158:4,performance,error,error,4,Fix error with auto-enabled builtin GLEW with CMake 3.15 and above;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4158
https://github.com/root-project/root/pull/4158:4,safety,error,error,4,Fix error with auto-enabled builtin GLEW with CMake 3.15 and above;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4158
https://github.com/root-project/root/pull/4158:4,usability,error,error,4,Fix error with auto-enabled builtin GLEW with CMake 3.15 and above;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4158
https://github.com/root-project/root/pull/4159:255,availability,Failur,Failure,255,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:545,availability,error,error,545,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:255,deployability,Fail,Failure,255,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:317,deployability,fail,fail,317,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:589,deployability,updat,update,589,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:62,energy efficiency,power,power,62,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:221,interoperability,specif,specified,221,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:255,performance,Failur,Failure,255,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:545,performance,error,error,545,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:255,reliability,Fail,Failure,255,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:317,reliability,fail,fail,317,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:10,safety,valid,valid,10,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:144,safety,avoid,avoid,144,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:545,safety,error,error,545,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:589,safety,updat,update,589,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:589,security,updat,update,589,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:129,testability,simpl,simplified,129,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:562,testability,assert,assert,562,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:129,usability,simpl,simplified,129,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4159:545,usability,error,error,545,"Fix cling valid pointer check; Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4159
https://github.com/root-project/root/pull/4160:73,integrability,interfac,interface,73,Fix GDML parsing for material/surface property tables; - TGDMLWrite: Fix interface to write partial trees. Partial trees must be identified by a TGeoNode and not by a TGeoVolume. Otherwise surfaces cannot be attached to the top level nodes of a partial tree. - TGDMLWrite: add values of material/surface property tables to output. - TGDMLWrite: add output of CONST properties. - TGDMLParse: protect against trailing '\n' and other white spaces when reading property table values,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4160
https://github.com/root-project/root/pull/4160:73,interoperability,interfac,interface,73,Fix GDML parsing for material/surface property tables; - TGDMLWrite: Fix interface to write partial trees. Partial trees must be identified by a TGeoNode and not by a TGeoVolume. Otherwise surfaces cannot be attached to the top level nodes of a partial tree. - TGDMLWrite: add values of material/surface property tables to output. - TGDMLWrite: add output of CONST properties. - TGDMLParse: protect against trailing '\n' and other white spaces when reading property table values,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4160
https://github.com/root-project/root/pull/4160:73,modifiability,interfac,interface,73,Fix GDML parsing for material/surface property tables; - TGDMLWrite: Fix interface to write partial trees. Partial trees must be identified by a TGeoNode and not by a TGeoVolume. Otherwise surfaces cannot be attached to the top level nodes of a partial tree. - TGDMLWrite: add values of material/surface property tables to output. - TGDMLWrite: add output of CONST properties. - TGDMLParse: protect against trailing '\n' and other white spaces when reading property table values,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4160
https://github.com/root-project/root/pull/4160:129,security,ident,identified,129,Fix GDML parsing for material/surface property tables; - TGDMLWrite: Fix interface to write partial trees. Partial trees must be identified by a TGeoNode and not by a TGeoVolume. Otherwise surfaces cannot be attached to the top level nodes of a partial tree. - TGDMLWrite: add values of material/surface property tables to output. - TGDMLWrite: add output of CONST properties. - TGDMLParse: protect against trailing '\n' and other white spaces when reading property table values,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4160
https://github.com/root-project/root/pull/4162:7,energy efficiency,optim,optimization,7,Little optimization for the cling pointer check.; Use precalculated PAGE_MASK which is equals to ~(page_size - 1) at. pointer check instead of recalculate it each check. This a small addition to the #4136 and #4159.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4162
https://github.com/root-project/root/pull/4162:7,performance,optimiz,optimization,7,Little optimization for the cling pointer check.; Use precalculated PAGE_MASK which is equals to ~(page_size - 1) at. pointer check instead of recalculate it each check. This a small addition to the #4136 and #4159.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4162
https://github.com/root-project/root/pull/4163:68,deployability,version,versions,68,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:151,deployability,version,versions,151,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:285,deployability,instal,installations,285,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:68,integrability,version,versions,68,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:96,integrability,interfac,interface,96,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:151,integrability,version,versions,151,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:206,integrability,interfac,interface,206,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:235,integrability,interfac,interface,235,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:413,integrability,interfac,interface,413,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:39,interoperability,compatib,compatibility,39,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:96,interoperability,interfac,interface,96,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:126,interoperability,conflict,conflict,126,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:206,interoperability,interfac,interface,206,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:235,interoperability,interfac,interface,235,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:276,interoperability,standard,standard,276,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:305,interoperability,compatib,compatible,305,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:413,interoperability,interfac,interface,413,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:68,modifiability,version,versions,68,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:96,modifiability,interfac,interface,96,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:151,modifiability,version,versions,151,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:206,modifiability,interfac,interface,206,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:235,modifiability,interfac,interface,235,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:413,modifiability,interfac,interface,413,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4163:465,security,ident,identified,465,"Fix to merge request #4160 - backwards compatibility for old DD4hep versions; The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. . The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4163
https://github.com/root-project/root/pull/4164:11,modifiability,layer,layers,11,[GSoC] Add layers for Generative Adversarial Networks (GANs); Added Transpose Convolution Layer and Upsample Layer support for GANs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4164
https://github.com/root-project/root/pull/4164:90,modifiability,Layer,Layer,90,[GSoC] Add layers for Generative Adversarial Networks (GANs); Added Transpose Convolution Layer and Upsample Layer support for GANs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4164
https://github.com/root-project/root/pull/4164:109,modifiability,Layer,Layer,109,[GSoC] Add layers for Generative Adversarial Networks (GANs); Added Transpose Convolution Layer and Upsample Layer support for GANs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4164
https://github.com/root-project/root/pull/4164:45,performance,Network,Networks,45,[GSoC] Add layers for Generative Adversarial Networks (GANs); Added Transpose Convolution Layer and Upsample Layer support for GANs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4164
https://github.com/root-project/root/pull/4164:33,security,Adversar,Adversarial,33,[GSoC] Add layers for Generative Adversarial Networks (GANs); Added Transpose Convolution Layer and Upsample Layer support for GANs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4164
https://github.com/root-project/root/pull/4164:45,security,Network,Networks,45,[GSoC] Add layers for Generative Adversarial Networks (GANs); Added Transpose Convolution Layer and Upsample Layer support for GANs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4164
https://github.com/root-project/root/pull/4164:115,usability,support,support,115,[GSoC] Add layers for Generative Adversarial Networks (GANs); Added Transpose Convolution Layer and Upsample Layer support for GANs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4164
https://github.com/root-project/root/pull/4165:44,energy efficiency,power,power,44,Add assertion to ensure that page_size is a power of two;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4165
https://github.com/root-project/root/pull/4165:4,testability,assert,assertion,4,Add assertion to ensure that page_size is a power of two;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4165
https://github.com/root-project/root/pull/4166:556,deployability,log,logic,556,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4166:670,deployability,Updat,Update,670,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4166:241,integrability,configur,configure,241,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4166:411,integrability,sub,submit,411,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4166:241,modifiability,configur,configure,241,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4166:556,safety,log,logic,556,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4166:670,safety,Updat,Update,670,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4166:241,security,configur,configure,241,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4166:556,security,log,logic,556,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4166:615,security,control,control,615,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4166:670,security,Updat,Update,670,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4166:556,testability,log,logic,556,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4166:615,testability,control,control,615,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4166:79,usability,widget,widget,79,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4166:100,usability,help,help,100,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4166:105,usability,widget,widget,105,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4166:294,usability,support,support,294,"Web geometry viewer - provide tutorial like geodemo.C; Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5. 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`. 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4166
https://github.com/root-project/root/pull/4167:248,availability,error,errors,248,"clarify RooDataSet::add wgtError behavior in documentation; Clarifies the behavior of `wgtError` in `RooDataSet::add`, which is rather unintuitive. (See [this post in the forum](https://root-forum.cern.ch/t/unexpected-behavior-in-roodataset-weight-errors/35576).)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4167
https://github.com/root-project/root/pull/4167:248,performance,error,errors,248,"clarify RooDataSet::add wgtError behavior in documentation; Clarifies the behavior of `wgtError` in `RooDataSet::add`, which is rather unintuitive. (See [this post in the forum](https://root-forum.cern.ch/t/unexpected-behavior-in-roodataset-weight-errors/35576).)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4167
https://github.com/root-project/root/pull/4167:248,safety,error,errors,248,"clarify RooDataSet::add wgtError behavior in documentation; Clarifies the behavior of `wgtError` in `RooDataSet::add`, which is rather unintuitive. (See [this post in the forum](https://root-forum.cern.ch/t/unexpected-behavior-in-roodataset-weight-errors/35576).)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4167
https://github.com/root-project/root/pull/4167:33,usability,behavi,behavior,33,"clarify RooDataSet::add wgtError behavior in documentation; Clarifies the behavior of `wgtError` in `RooDataSet::add`, which is rather unintuitive. (See [this post in the forum](https://root-forum.cern.ch/t/unexpected-behavior-in-roodataset-weight-errors/35576).)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4167
https://github.com/root-project/root/pull/4167:45,usability,document,documentation,45,"clarify RooDataSet::add wgtError behavior in documentation; Clarifies the behavior of `wgtError` in `RooDataSet::add`, which is rather unintuitive. (See [this post in the forum](https://root-forum.cern.ch/t/unexpected-behavior-in-roodataset-weight-errors/35576).)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4167
https://github.com/root-project/root/pull/4167:74,usability,behavi,behavior,74,"clarify RooDataSet::add wgtError behavior in documentation; Clarifies the behavior of `wgtError` in `RooDataSet::add`, which is rather unintuitive. (See [this post in the forum](https://root-forum.cern.ch/t/unexpected-behavior-in-roodataset-weight-errors/35576).)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4167
https://github.com/root-project/root/pull/4167:218,usability,behavi,behavior-in-roodataset-weight-errors,218,"clarify RooDataSet::add wgtError behavior in documentation; Clarifies the behavior of `wgtError` in `RooDataSet::add`, which is rather unintuitive. (See [this post in the forum](https://root-forum.cern.ch/t/unexpected-behavior-in-roodataset-weight-errors/35576).)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4167
https://github.com/root-project/root/pull/4168:12,testability,Simpl,Simplify,12,[rootcling] Simplify pch generation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4168
https://github.com/root-project/root/pull/4168:12,usability,Simpl,Simplify,12,[rootcling] Simplify pch generation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4168
https://github.com/root-project/root/pull/4169:43,availability,operat,operator,43,"[geom] fix TGeoArb8 copy constr and assign operator (ROOT-10528) ; fTwist array should be recreated when copied from other instance. Also fix problem in TGeoArb8::ComputeTwist. When new twist values are calculated, indicating that fTwist does not. required, they were not correctly set back to fTwist member. May lead to. wrong calculations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4169
https://github.com/root-project/root/pull/4169:238,reliability,doe,does,238,"[geom] fix TGeoArb8 copy constr and assign operator (ROOT-10528) ; fTwist array should be recreated when copied from other instance. Also fix problem in TGeoArb8::ComputeTwist. When new twist values are calculated, indicating that fTwist does not. required, they were not correctly set back to fTwist member. May lead to. wrong calculations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4169
https://github.com/root-project/root/pull/4169:215,usability,indicat,indicating,215,"[geom] fix TGeoArb8 copy constr and assign operator (ROOT-10528) ; fTwist array should be recreated when copied from other instance. Also fix problem in TGeoArb8::ComputeTwist. When new twist values are calculated, indicating that fTwist does not. required, they were not correctly set back to fTwist member. May lead to. wrong calculations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4169
https://github.com/root-project/root/pull/4170:30,availability,operat,operators,30,"Geometry - remove copy/assign operators for several TGeo classes; Copy constructor and assign operators for TGeoVolume, TGeoNode, TGeoVoxelFinder have ownership problem. Anyway it is not recommended to use these methods with TGeo classes,. therefore just remove error-prone implementations completely and forbid them. Can have side effect, if there are any user code with classes derived from TGeoVolume or TGeoNode",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4170
https://github.com/root-project/root/pull/4170:94,availability,operat,operators,94,"Geometry - remove copy/assign operators for several TGeo classes; Copy constructor and assign operators for TGeoVolume, TGeoNode, TGeoVoxelFinder have ownership problem. Anyway it is not recommended to use these methods with TGeo classes,. therefore just remove error-prone implementations completely and forbid them. Can have side effect, if there are any user code with classes derived from TGeoVolume or TGeoNode",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4170
https://github.com/root-project/root/pull/4170:262,availability,error,error-prone,262,"Geometry - remove copy/assign operators for several TGeo classes; Copy constructor and assign operators for TGeoVolume, TGeoNode, TGeoVoxelFinder have ownership problem. Anyway it is not recommended to use these methods with TGeo classes,. therefore just remove error-prone implementations completely and forbid them. Can have side effect, if there are any user code with classes derived from TGeoVolume or TGeoNode",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4170
https://github.com/root-project/root/pull/4170:262,performance,error,error-prone,262,"Geometry - remove copy/assign operators for several TGeo classes; Copy constructor and assign operators for TGeoVolume, TGeoNode, TGeoVoxelFinder have ownership problem. Anyway it is not recommended to use these methods with TGeo classes,. therefore just remove error-prone implementations completely and forbid them. Can have side effect, if there are any user code with classes derived from TGeoVolume or TGeoNode",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4170
https://github.com/root-project/root/pull/4170:262,safety,error,error-prone,262,"Geometry - remove copy/assign operators for several TGeo classes; Copy constructor and assign operators for TGeoVolume, TGeoNode, TGeoVoxelFinder have ownership problem. Anyway it is not recommended to use these methods with TGeo classes,. therefore just remove error-prone implementations completely and forbid them. Can have side effect, if there are any user code with classes derived from TGeoVolume or TGeoNode",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4170
https://github.com/root-project/root/pull/4170:290,safety,compl,completely,290,"Geometry - remove copy/assign operators for several TGeo classes; Copy constructor and assign operators for TGeoVolume, TGeoNode, TGeoVoxelFinder have ownership problem. Anyway it is not recommended to use these methods with TGeo classes,. therefore just remove error-prone implementations completely and forbid them. Can have side effect, if there are any user code with classes derived from TGeoVolume or TGeoNode",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4170
https://github.com/root-project/root/pull/4170:290,security,compl,completely,290,"Geometry - remove copy/assign operators for several TGeo classes; Copy constructor and assign operators for TGeoVolume, TGeoNode, TGeoVoxelFinder have ownership problem. Anyway it is not recommended to use these methods with TGeo classes,. therefore just remove error-prone implementations completely and forbid them. Can have side effect, if there are any user code with classes derived from TGeoVolume or TGeoNode",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4170
https://github.com/root-project/root/pull/4170:262,usability,error,error-prone,262,"Geometry - remove copy/assign operators for several TGeo classes; Copy constructor and assign operators for TGeoVolume, TGeoNode, TGeoVoxelFinder have ownership problem. Anyway it is not recommended to use these methods with TGeo classes,. therefore just remove error-prone implementations completely and forbid them. Can have side effect, if there are any user code with classes derived from TGeoVolume or TGeoNode",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4170
https://github.com/root-project/root/pull/4170:357,usability,user,user,357,"Geometry - remove copy/assign operators for several TGeo classes; Copy constructor and assign operators for TGeoVolume, TGeoNode, TGeoVoxelFinder have ownership problem. Anyway it is not recommended to use these methods with TGeo classes,. therefore just remove error-prone implementations completely and forbid them. Can have side effect, if there are any user code with classes derived from TGeoVolume or TGeoNode",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4170
https://github.com/root-project/root/pull/4171:810,availability,avail,available,810,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:882,availability,avail,available,882,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2188,availability,error,errors,2188,"dule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2228,availability,error,errors,2228,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2247,availability,error,errors,2247,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:545,deployability,log,logic,545,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:606,deployability,automat,automatically,606,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:931,deployability,version,version,931,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:953,deployability,version,version,953,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1213,deployability,modul,module,1213,"e](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1313,deployability,fail,failOnWarnings,1313,". Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Sho",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1330,deployability,Fail,Fail,1330,"vm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show informatio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1564,deployability,depend,dependent,1564,"advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system do",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1574,deployability,modul,modules,1574,"s is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2074,deployability,contain,containing,2074," path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2347,deployability,patch,patch,2347,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2554,deployability,build,build,2554,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:3030,deployability,build,builds,3030,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:3144,deployability,modul,module-maps,3144,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:3184,deployability,modul,module,3184,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:593,integrability,messag,messages,593,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:931,integrability,version,version,931,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:953,integrability,version,version,953,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1564,integrability,depend,dependent,1564,"advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system do",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2884,integrability,encapsulat,encapsulation,2884,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:431,interoperability,specif,specification,431,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:593,interoperability,messag,messages,593,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1023,interoperability,Specif,Specify,1023,"and line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1061,interoperability,Specif,Specify,1061," parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1100,interoperability,Specif,Specify,1100,"hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1856,interoperability,specif,specified,1856,"st - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2378,interoperability,STUB,STUB,2378,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:132,modifiability,maintain,maintain,132,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:931,modifiability,version,version,931,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:953,modifiability,version,version,953,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1213,modifiability,modul,module,1213,"e](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1564,modifiability,depend,dependent,1564,"advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system do",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1574,modifiability,modul,modules,1574,"s is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1732,modifiability,variab,variable,1732," files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2884,modifiability,encapsul,encapsulation,2884,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:3144,modifiability,modul,module-maps,3144,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:3184,modifiability,modul,module,3184,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1438,performance,content,content,1438,"on, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy option",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2188,performance,error,errors,2188,"dule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2228,performance,error,errors,2228,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2247,performance,error,errors,2247,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:810,reliability,availab,available,810,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:882,reliability,availab,available,882,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1117,reliability,diagno,diagnostics,1117,"ible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and anoth",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1313,reliability,fail,failOnWarnings,1313,". Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Sho",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1330,reliability,Fail,Fail,1330,"vm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show informatio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1379,reliability,Doe,Does,1379,"and crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2567,reliability,doe,does,2567,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:132,safety,maintain,maintain,132,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:460,safety,safe,safety,460,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:545,safety,log,logic,545,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:810,safety,avail,available,810,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:882,safety,avail,available,882,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1213,safety,modul,module,1213,"e](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1564,safety,depend,dependent,1564,"advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system do",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1574,safety,modul,modules,1574,"s is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2188,safety,error,errors,2188,"dule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2228,safety,error,errors,2228,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2247,safety,error,errors,2247,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2347,safety,patch,patch,2347,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2661,safety,permiss,permissive,2661,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:3144,safety,modul,module-maps,3144,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:3184,safety,modul,module,3184,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:545,security,log,logic,545,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:810,security,availab,available,810,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:882,security,availab,available,882,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2347,security,patch,patch,2347,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:545,testability,log,logic,545,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:606,testability,automat,automatically,606,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1117,testability,diagno,diagnostics,1117,"ible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and anoth",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1564,testability,depend,dependent,1564,"advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system do",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2378,testability,STUB,STUB,2378,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:23,usability,command,command,23,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:206,usability,Command,CommandLine,206,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:294,usability,Command,CommandLine,294,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:335,usability,command,command,335,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:588,usability,help,help,588,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:795,usability,help,help,795,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:830,usability,help,help-hidden,830,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:854,usability,help,help-list,854,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:902,usability,help,help-list-hidden,902,"[rootcling] Rework the command line option parsing.; The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework. Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1475,usability,minim,minimal,1475,"ortantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:1498,usability,interact,interactivity,1498,"otcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:. ```. OVERVIEW: rootcling. USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>. . OPTIONS:. . Generic Options:. . -help - Display available options (-help-hidden for more). -help-list - Display list of available options (-help-list-hidden for more). -version - Display the version of this program. . rootcling common options:. . -D=<string> - Specify defined macros. -I=<string> - Specify an include path. -W=<string> - Specify compiler diagnostics options. -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old op",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2130,usability,interact,interactivity,2130," -c - Deprecated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-im",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2144,usability,support,support,2144,"cated, legacy flag which is ignored. -cxxmodule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2188,usability,error,errors,2188,"dule - Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2228,usability,error,errors,2228,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4171:2247,usability,error,errors,2247,"- Generate a C++ module. -excludePath=<string> - Do not store the <path> in the dictionary. -f - Overwrite <file>s. -failOnWarnings - Fail if there are warnings. -inlineInputHeader - Does not generate #include <header> but expands the header content. -interpreteronly - Generate minimal dictionary for interactivity (without IO information). -m=<string> - The list of dependent modules of the dictionary. -multiDict - If this library has multiple separate LinkDef files. -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH. -p - Deprecated, legacy flag which is ignored. -rmf=<string> - Generate a rootmap file with the specified name. -rml=<string> - Generate rootmap file. -s=<string> - The path to the library of the built dictionary. -selSyntaxOnly - Check the selection syntax only. -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support. Choose verbosity level:. -v - Show errors (default). -v0 - Show only fatal errors. -v1 - Show errors (the same as -v). -v2 - Show warnings. -v3 - Show notes. -v4 - Show information. ```. . This patch deprecates:. 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling. 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling. . The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation. . If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4171
https://github.com/root-project/root/pull/4172:76,availability,failur,failure,76,[vecgeom] fix typo in TGeoVGShape::IsCylType method; Typical copy-and-paste failure,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4172
https://github.com/root-project/root/pull/4172:76,deployability,fail,failure,76,[vecgeom] fix typo in TGeoVGShape::IsCylType method; Typical copy-and-paste failure,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4172
https://github.com/root-project/root/pull/4172:76,performance,failur,failure,76,[vecgeom] fix typo in TGeoVGShape::IsCylType method; Typical copy-and-paste failure,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4172
https://github.com/root-project/root/pull/4172:76,reliability,fail,failure,76,[vecgeom] fix typo in TGeoVGShape::IsCylType method; Typical copy-and-paste failure,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4172
https://github.com/root-project/root/pull/4173:190,deployability,log,logic,190,"[web geom] optimize raw and JSON data for geometry viewer; In most cases there is no need to generate raw data (vertices and triangles) for TGeoShape on the server side. JSROOT has complete logic to support all kind of TGeoShape classes. Therefore just TGeoShape instance send to client in JSON format. Only for TGeoCompositeShape plain ROOT code is better, therefore enabled by default. . Provide control when server-side or client-side code is used. . Optimize JSON size - exclude typeinfo for most classes. . Fix JSROOT code for TGeoArb8 class",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4173
https://github.com/root-project/root/pull/4173:11,energy efficiency,optim,optimize,11,"[web geom] optimize raw and JSON data for geometry viewer; In most cases there is no need to generate raw data (vertices and triangles) for TGeoShape on the server side. JSROOT has complete logic to support all kind of TGeoShape classes. Therefore just TGeoShape instance send to client in JSON format. Only for TGeoCompositeShape plain ROOT code is better, therefore enabled by default. . Provide control when server-side or client-side code is used. . Optimize JSON size - exclude typeinfo for most classes. . Fix JSROOT code for TGeoArb8 class",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4173
https://github.com/root-project/root/pull/4173:454,energy efficiency,Optim,Optimize,454,"[web geom] optimize raw and JSON data for geometry viewer; In most cases there is no need to generate raw data (vertices and triangles) for TGeoShape on the server side. JSROOT has complete logic to support all kind of TGeoShape classes. Therefore just TGeoShape instance send to client in JSON format. Only for TGeoCompositeShape plain ROOT code is better, therefore enabled by default. . Provide control when server-side or client-side code is used. . Optimize JSON size - exclude typeinfo for most classes. . Fix JSROOT code for TGeoArb8 class",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4173
https://github.com/root-project/root/pull/4173:295,interoperability,format,format,295,"[web geom] optimize raw and JSON data for geometry viewer; In most cases there is no need to generate raw data (vertices and triangles) for TGeoShape on the server side. JSROOT has complete logic to support all kind of TGeoShape classes. Therefore just TGeoShape instance send to client in JSON format. Only for TGeoCompositeShape plain ROOT code is better, therefore enabled by default. . Provide control when server-side or client-side code is used. . Optimize JSON size - exclude typeinfo for most classes. . Fix JSROOT code for TGeoArb8 class",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4173
https://github.com/root-project/root/pull/4173:11,performance,optimiz,optimize,11,"[web geom] optimize raw and JSON data for geometry viewer; In most cases there is no need to generate raw data (vertices and triangles) for TGeoShape on the server side. JSROOT has complete logic to support all kind of TGeoShape classes. Therefore just TGeoShape instance send to client in JSON format. Only for TGeoCompositeShape plain ROOT code is better, therefore enabled by default. . Provide control when server-side or client-side code is used. . Optimize JSON size - exclude typeinfo for most classes. . Fix JSROOT code for TGeoArb8 class",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4173
https://github.com/root-project/root/pull/4173:454,performance,Optimiz,Optimize,454,"[web geom] optimize raw and JSON data for geometry viewer; In most cases there is no need to generate raw data (vertices and triangles) for TGeoShape on the server side. JSROOT has complete logic to support all kind of TGeoShape classes. Therefore just TGeoShape instance send to client in JSON format. Only for TGeoCompositeShape plain ROOT code is better, therefore enabled by default. . Provide control when server-side or client-side code is used. . Optimize JSON size - exclude typeinfo for most classes. . Fix JSROOT code for TGeoArb8 class",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4173
https://github.com/root-project/root/pull/4173:181,safety,compl,complete,181,"[web geom] optimize raw and JSON data for geometry viewer; In most cases there is no need to generate raw data (vertices and triangles) for TGeoShape on the server side. JSROOT has complete logic to support all kind of TGeoShape classes. Therefore just TGeoShape instance send to client in JSON format. Only for TGeoCompositeShape plain ROOT code is better, therefore enabled by default. . Provide control when server-side or client-side code is used. . Optimize JSON size - exclude typeinfo for most classes. . Fix JSROOT code for TGeoArb8 class",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4173
https://github.com/root-project/root/pull/4173:190,safety,log,logic,190,"[web geom] optimize raw and JSON data for geometry viewer; In most cases there is no need to generate raw data (vertices and triangles) for TGeoShape on the server side. JSROOT has complete logic to support all kind of TGeoShape classes. Therefore just TGeoShape instance send to client in JSON format. Only for TGeoCompositeShape plain ROOT code is better, therefore enabled by default. . Provide control when server-side or client-side code is used. . Optimize JSON size - exclude typeinfo for most classes. . Fix JSROOT code for TGeoArb8 class",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4173
https://github.com/root-project/root/pull/4173:181,security,compl,complete,181,"[web geom] optimize raw and JSON data for geometry viewer; In most cases there is no need to generate raw data (vertices and triangles) for TGeoShape on the server side. JSROOT has complete logic to support all kind of TGeoShape classes. Therefore just TGeoShape instance send to client in JSON format. Only for TGeoCompositeShape plain ROOT code is better, therefore enabled by default. . Provide control when server-side or client-side code is used. . Optimize JSON size - exclude typeinfo for most classes. . Fix JSROOT code for TGeoArb8 class",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4173
https://github.com/root-project/root/pull/4173:190,security,log,logic,190,"[web geom] optimize raw and JSON data for geometry viewer; In most cases there is no need to generate raw data (vertices and triangles) for TGeoShape on the server side. JSROOT has complete logic to support all kind of TGeoShape classes. Therefore just TGeoShape instance send to client in JSON format. Only for TGeoCompositeShape plain ROOT code is better, therefore enabled by default. . Provide control when server-side or client-side code is used. . Optimize JSON size - exclude typeinfo for most classes. . Fix JSROOT code for TGeoArb8 class",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4173
https://github.com/root-project/root/pull/4173:398,security,control,control,398,"[web geom] optimize raw and JSON data for geometry viewer; In most cases there is no need to generate raw data (vertices and triangles) for TGeoShape on the server side. JSROOT has complete logic to support all kind of TGeoShape classes. Therefore just TGeoShape instance send to client in JSON format. Only for TGeoCompositeShape plain ROOT code is better, therefore enabled by default. . Provide control when server-side or client-side code is used. . Optimize JSON size - exclude typeinfo for most classes. . Fix JSROOT code for TGeoArb8 class",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4173
https://github.com/root-project/root/pull/4173:190,testability,log,logic,190,"[web geom] optimize raw and JSON data for geometry viewer; In most cases there is no need to generate raw data (vertices and triangles) for TGeoShape on the server side. JSROOT has complete logic to support all kind of TGeoShape classes. Therefore just TGeoShape instance send to client in JSON format. Only for TGeoCompositeShape plain ROOT code is better, therefore enabled by default. . Provide control when server-side or client-side code is used. . Optimize JSON size - exclude typeinfo for most classes. . Fix JSROOT code for TGeoArb8 class",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4173
https://github.com/root-project/root/pull/4173:398,testability,control,control,398,"[web geom] optimize raw and JSON data for geometry viewer; In most cases there is no need to generate raw data (vertices and triangles) for TGeoShape on the server side. JSROOT has complete logic to support all kind of TGeoShape classes. Therefore just TGeoShape instance send to client in JSON format. Only for TGeoCompositeShape plain ROOT code is better, therefore enabled by default. . Provide control when server-side or client-side code is used. . Optimize JSON size - exclude typeinfo for most classes. . Fix JSROOT code for TGeoArb8 class",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4173
https://github.com/root-project/root/pull/4173:199,usability,support,support,199,"[web geom] optimize raw and JSON data for geometry viewer; In most cases there is no need to generate raw data (vertices and triangles) for TGeoShape on the server side. JSROOT has complete logic to support all kind of TGeoShape classes. Therefore just TGeoShape instance send to client in JSON format. Only for TGeoCompositeShape plain ROOT code is better, therefore enabled by default. . Provide control when server-side or client-side code is used. . Optimize JSON size - exclude typeinfo for most classes. . Fix JSROOT code for TGeoArb8 class",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4173
https://github.com/root-project/root/pull/4174:170,availability,operat,operation,170,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:322,deployability,contain,contain,322,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:1170,deployability,updat,updated,1170,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:632,energy efficiency,current,current,632,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:330,integrability,filter,filtering,330,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:185,interoperability,distribut,distributed,185,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:680,modifiability,variab,variable,680,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:1183,performance,time,time,1183,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:1170,safety,updat,updated,1170,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:1203,safety,test,test,1203,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:1255,safety,test,tests,1255,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:1170,security,updat,updated,1170,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:1196,testability,simpl,simple,1196,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:1203,testability,test,test,1203,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:1255,testability,test,tests,1255,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:698,usability,clear,cleared,698,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:994,usability,clear,clearing,994,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:1196,usability,simpl,simple,1196,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4174:1420,usability,document,documentation,1420,"[WIP][RDF] add Merge function to RCutFlowReport; The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment. In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:. It takes another RCutFlowReport as argument (passed by reference). The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared. For each TCutInfo, another TCutInfo with the same name is searched in the other report. The information on all the entries and the passed entries is then summed up between the two objects. Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const. If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:. - [ ] Add more thorough tests. - [ ] Decide on the return type of the Merge function (now is void). - [ ] Possibly overload the function with RCutFlowReport* as argument. - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4174
https://github.com/root-project/root/pull/4175:102,deployability,modul,module,102,[cxxmodules] Resolve possible symlinks in the path of rdict files.; When reading rdict files from the module we use the module name to form an. entry in a pending rdict map. It is later used when a library is loaded to. locate the corresponding rdict file. This patch resolves a potential symlinks and allows ROOT to find its rdict. files. It fixes the cmssw C++ modules setup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4175
https://github.com/root-project/root/pull/4175:120,deployability,modul,module,120,[cxxmodules] Resolve possible symlinks in the path of rdict files.; When reading rdict files from the module we use the module name to form an. entry in a pending rdict map. It is later used when a library is loaded to. locate the corresponding rdict file. This patch resolves a potential symlinks and allows ROOT to find its rdict. files. It fixes the cmssw C++ modules setup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4175
https://github.com/root-project/root/pull/4175:262,deployability,patch,patch,262,[cxxmodules] Resolve possible symlinks in the path of rdict files.; When reading rdict files from the module we use the module name to form an. entry in a pending rdict map. It is later used when a library is loaded to. locate the corresponding rdict file. This patch resolves a potential symlinks and allows ROOT to find its rdict. files. It fixes the cmssw C++ modules setup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4175
https://github.com/root-project/root/pull/4175:363,deployability,modul,modules,363,[cxxmodules] Resolve possible symlinks in the path of rdict files.; When reading rdict files from the module we use the module name to form an. entry in a pending rdict map. It is later used when a library is loaded to. locate the corresponding rdict file. This patch resolves a potential symlinks and allows ROOT to find its rdict. files. It fixes the cmssw C++ modules setup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4175
https://github.com/root-project/root/pull/4175:209,energy efficiency,load,loaded,209,[cxxmodules] Resolve possible symlinks in the path of rdict files.; When reading rdict files from the module we use the module name to form an. entry in a pending rdict map. It is later used when a library is loaded to. locate the corresponding rdict file. This patch resolves a potential symlinks and allows ROOT to find its rdict. files. It fixes the cmssw C++ modules setup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4175
https://github.com/root-project/root/pull/4175:102,modifiability,modul,module,102,[cxxmodules] Resolve possible symlinks in the path of rdict files.; When reading rdict files from the module we use the module name to form an. entry in a pending rdict map. It is later used when a library is loaded to. locate the corresponding rdict file. This patch resolves a potential symlinks and allows ROOT to find its rdict. files. It fixes the cmssw C++ modules setup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4175
https://github.com/root-project/root/pull/4175:120,modifiability,modul,module,120,[cxxmodules] Resolve possible symlinks in the path of rdict files.; When reading rdict files from the module we use the module name to form an. entry in a pending rdict map. It is later used when a library is loaded to. locate the corresponding rdict file. This patch resolves a potential symlinks and allows ROOT to find its rdict. files. It fixes the cmssw C++ modules setup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4175
https://github.com/root-project/root/pull/4175:363,modifiability,modul,modules,363,[cxxmodules] Resolve possible symlinks in the path of rdict files.; When reading rdict files from the module we use the module name to form an. entry in a pending rdict map. It is later used when a library is loaded to. locate the corresponding rdict file. This patch resolves a potential symlinks and allows ROOT to find its rdict. files. It fixes the cmssw C++ modules setup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4175
https://github.com/root-project/root/pull/4175:209,performance,load,loaded,209,[cxxmodules] Resolve possible symlinks in the path of rdict files.; When reading rdict files from the module we use the module name to form an. entry in a pending rdict map. It is later used when a library is loaded to. locate the corresponding rdict file. This patch resolves a potential symlinks and allows ROOT to find its rdict. files. It fixes the cmssw C++ modules setup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4175
https://github.com/root-project/root/pull/4175:102,safety,modul,module,102,[cxxmodules] Resolve possible symlinks in the path of rdict files.; When reading rdict files from the module we use the module name to form an. entry in a pending rdict map. It is later used when a library is loaded to. locate the corresponding rdict file. This patch resolves a potential symlinks and allows ROOT to find its rdict. files. It fixes the cmssw C++ modules setup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4175
https://github.com/root-project/root/pull/4175:120,safety,modul,module,120,[cxxmodules] Resolve possible symlinks in the path of rdict files.; When reading rdict files from the module we use the module name to form an. entry in a pending rdict map. It is later used when a library is loaded to. locate the corresponding rdict file. This patch resolves a potential symlinks and allows ROOT to find its rdict. files. It fixes the cmssw C++ modules setup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4175
https://github.com/root-project/root/pull/4175:262,safety,patch,patch,262,[cxxmodules] Resolve possible symlinks in the path of rdict files.; When reading rdict files from the module we use the module name to form an. entry in a pending rdict map. It is later used when a library is loaded to. locate the corresponding rdict file. This patch resolves a potential symlinks and allows ROOT to find its rdict. files. It fixes the cmssw C++ modules setup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4175
https://github.com/root-project/root/pull/4175:363,safety,modul,modules,363,[cxxmodules] Resolve possible symlinks in the path of rdict files.; When reading rdict files from the module we use the module name to form an. entry in a pending rdict map. It is later used when a library is loaded to. locate the corresponding rdict file. This patch resolves a potential symlinks and allows ROOT to find its rdict. files. It fixes the cmssw C++ modules setup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4175
https://github.com/root-project/root/pull/4175:262,security,patch,patch,262,[cxxmodules] Resolve possible symlinks in the path of rdict files.; When reading rdict files from the module we use the module name to form an. entry in a pending rdict map. It is later used when a library is loaded to. locate the corresponding rdict file. This patch resolves a potential symlinks and allows ROOT to find its rdict. files. It fixes the cmssw C++ modules setup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4175
https://github.com/root-project/root/pull/4176:250,deployability,contain,contain,250,"[ntuple] Straighten up packing and unpacking of pages; Changes the writing and reading of elements of a column such that pages get packed/unpacked as a whole when written to storage / read from storage. As a result, pages in memory are guaranteed to contain elements that match the machine C++ types' layout (endianess etc.). The first application of packed pages is the `bool` field, which gets stored on storage as bitfield. At a later point, support for low-precision floats can be added (`float` in memory, 16 or 8 bit floats on storage).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4176
https://github.com/root-project/root/pull/4176:23,modifiability,pac,packing,23,"[ntuple] Straighten up packing and unpacking of pages; Changes the writing and reading of elements of a column such that pages get packed/unpacked as a whole when written to storage / read from storage. As a result, pages in memory are guaranteed to contain elements that match the machine C++ types' layout (endianess etc.). The first application of packed pages is the `bool` field, which gets stored on storage as bitfield. At a later point, support for low-precision floats can be added (`float` in memory, 16 or 8 bit floats on storage).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4176
https://github.com/root-project/root/pull/4176:131,modifiability,pac,packed,131,"[ntuple] Straighten up packing and unpacking of pages; Changes the writing and reading of elements of a column such that pages get packed/unpacked as a whole when written to storage / read from storage. As a result, pages in memory are guaranteed to contain elements that match the machine C++ types' layout (endianess etc.). The first application of packed pages is the `bool` field, which gets stored on storage as bitfield. At a later point, support for low-precision floats can be added (`float` in memory, 16 or 8 bit floats on storage).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4176
https://github.com/root-project/root/pull/4176:351,modifiability,pac,packed,351,"[ntuple] Straighten up packing and unpacking of pages; Changes the writing and reading of elements of a column such that pages get packed/unpacked as a whole when written to storage / read from storage. As a result, pages in memory are guaranteed to contain elements that match the machine C++ types' layout (endianess etc.). The first application of packed pages is the `bool` field, which gets stored on storage as bitfield. At a later point, support for low-precision floats can be added (`float` in memory, 16 or 8 bit floats on storage).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4176
https://github.com/root-project/root/pull/4176:225,performance,memor,memory,225,"[ntuple] Straighten up packing and unpacking of pages; Changes the writing and reading of elements of a column such that pages get packed/unpacked as a whole when written to storage / read from storage. As a result, pages in memory are guaranteed to contain elements that match the machine C++ types' layout (endianess etc.). The first application of packed pages is the `bool` field, which gets stored on storage as bitfield. At a later point, support for low-precision floats can be added (`float` in memory, 16 or 8 bit floats on storage).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4176
https://github.com/root-project/root/pull/4176:503,performance,memor,memory,503,"[ntuple] Straighten up packing and unpacking of pages; Changes the writing and reading of elements of a column such that pages get packed/unpacked as a whole when written to storage / read from storage. As a result, pages in memory are guaranteed to contain elements that match the machine C++ types' layout (endianess etc.). The first application of packed pages is the `bool` field, which gets stored on storage as bitfield. At a later point, support for low-precision floats can be added (`float` in memory, 16 or 8 bit floats on storage).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4176
https://github.com/root-project/root/pull/4176:225,usability,memor,memory,225,"[ntuple] Straighten up packing and unpacking of pages; Changes the writing and reading of elements of a column such that pages get packed/unpacked as a whole when written to storage / read from storage. As a result, pages in memory are guaranteed to contain elements that match the machine C++ types' layout (endianess etc.). The first application of packed pages is the `bool` field, which gets stored on storage as bitfield. At a later point, support for low-precision floats can be added (`float` in memory, 16 or 8 bit floats on storage).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4176
https://github.com/root-project/root/pull/4176:445,usability,support,support,445,"[ntuple] Straighten up packing and unpacking of pages; Changes the writing and reading of elements of a column such that pages get packed/unpacked as a whole when written to storage / read from storage. As a result, pages in memory are guaranteed to contain elements that match the machine C++ types' layout (endianess etc.). The first application of packed pages is the `bool` field, which gets stored on storage as bitfield. At a later point, support for low-precision floats can be added (`float` in memory, 16 or 8 bit floats on storage).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4176
https://github.com/root-project/root/pull/4176:503,usability,memor,memory,503,"[ntuple] Straighten up packing and unpacking of pages; Changes the writing and reading of elements of a column such that pages get packed/unpacked as a whole when written to storage / read from storage. As a result, pages in memory are guaranteed to contain elements that match the machine C++ types' layout (endianess etc.). The first application of packed pages is the `bool` field, which gets stored on storage as bitfield. At a later point, support for low-precision floats can be added (`float` in memory, 16 or 8 bit floats on storage).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4176
https://github.com/root-project/root/pull/4177:33,interoperability,format,formatting,33,Add double-click handling + code formatting;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4177
https://github.com/root-project/root/pull/4178:45,availability,error,errors,45,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:68,availability,error,errors,68,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:300,availability,error,error,300,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:318,availability,error,error,318,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:390,availability,error,error,390,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:238,integrability,event,event,238,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:256,modifiability,variab,variable,256,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:45,performance,error,errors,45,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:68,performance,error,errors,68,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:300,performance,error,error,300,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:318,performance,error,error,318,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:390,performance,error,error,390,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:45,safety,error,errors,45,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:68,safety,error,errors,68,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:300,safety,error,error,300,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:318,safety,error,error,318,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:390,safety,error,error,390,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:45,usability,error,errors,45,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:68,usability,error,errors,68,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:184,usability,User,Users,184,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:300,usability,error,error,300,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:318,usability,error,error,318,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4178:390,usability,error,error,390,"[RF] Add warnings for RooDataSet with weight errors.; - When weight errors are added to a RooDataSet, but the dataset hasn't. been set up to store weights, these are silently ignored. Users will now. see warnings. - After adding the last event, the weight variable will keep the value. of the weight error until a new error is set. RooDataSet::add(). therefore now resets weight and weight error after adding an entry. [ROOT-10259]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4178
https://github.com/root-project/root/pull/4179:159,deployability,Updat,Update,159,"[RF] Remove TFormula v5 from RooFit.; - Replace the old TFormula-v5-derived RooFormula by a small class that. creates a TFormula v6 [ROOT-10164,ROOT-10144]. - Update documentation for GenericPdf and FormulaVar accordingly. - Fix small memory leak in RooAbsData. - The This allows re-enabling the RooJohnson unit test that's based on. RooFormula [ROOT-10173]. It was further tested that [ROOT-8291] doesn't occur with the new. formula when it is serialised.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4179
https://github.com/root-project/root/pull/4179:235,performance,memor,memory,235,"[RF] Remove TFormula v5 from RooFit.; - Replace the old TFormula-v5-derived RooFormula by a small class that. creates a TFormula v6 [ROOT-10164,ROOT-10144]. - Update documentation for GenericPdf and FormulaVar accordingly. - Fix small memory leak in RooAbsData. - The This allows re-enabling the RooJohnson unit test that's based on. RooFormula [ROOT-10173]. It was further tested that [ROOT-8291] doesn't occur with the new. formula when it is serialised.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4179
https://github.com/root-project/root/pull/4179:398,reliability,doe,doesn,398,"[RF] Remove TFormula v5 from RooFit.; - Replace the old TFormula-v5-derived RooFormula by a small class that. creates a TFormula v6 [ROOT-10164,ROOT-10144]. - Update documentation for GenericPdf and FormulaVar accordingly. - Fix small memory leak in RooAbsData. - The This allows re-enabling the RooJohnson unit test that's based on. RooFormula [ROOT-10173]. It was further tested that [ROOT-8291] doesn't occur with the new. formula when it is serialised.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4179
https://github.com/root-project/root/pull/4179:159,safety,Updat,Update,159,"[RF] Remove TFormula v5 from RooFit.; - Replace the old TFormula-v5-derived RooFormula by a small class that. creates a TFormula v6 [ROOT-10164,ROOT-10144]. - Update documentation for GenericPdf and FormulaVar accordingly. - Fix small memory leak in RooAbsData. - The This allows re-enabling the RooJohnson unit test that's based on. RooFormula [ROOT-10173]. It was further tested that [ROOT-8291] doesn't occur with the new. formula when it is serialised.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4179
https://github.com/root-project/root/pull/4179:312,safety,test,test,312,"[RF] Remove TFormula v5 from RooFit.; - Replace the old TFormula-v5-derived RooFormula by a small class that. creates a TFormula v6 [ROOT-10164,ROOT-10144]. - Update documentation for GenericPdf and FormulaVar accordingly. - Fix small memory leak in RooAbsData. - The This allows re-enabling the RooJohnson unit test that's based on. RooFormula [ROOT-10173]. It was further tested that [ROOT-8291] doesn't occur with the new. formula when it is serialised.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4179
https://github.com/root-project/root/pull/4179:374,safety,test,tested,374,"[RF] Remove TFormula v5 from RooFit.; - Replace the old TFormula-v5-derived RooFormula by a small class that. creates a TFormula v6 [ROOT-10164,ROOT-10144]. - Update documentation for GenericPdf and FormulaVar accordingly. - Fix small memory leak in RooAbsData. - The This allows re-enabling the RooJohnson unit test that's based on. RooFormula [ROOT-10173]. It was further tested that [ROOT-8291] doesn't occur with the new. formula when it is serialised.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4179
https://github.com/root-project/root/pull/4179:159,security,Updat,Update,159,"[RF] Remove TFormula v5 from RooFit.; - Replace the old TFormula-v5-derived RooFormula by a small class that. creates a TFormula v6 [ROOT-10164,ROOT-10144]. - Update documentation for GenericPdf and FormulaVar accordingly. - Fix small memory leak in RooAbsData. - The This allows re-enabling the RooJohnson unit test that's based on. RooFormula [ROOT-10173]. It was further tested that [ROOT-8291] doesn't occur with the new. formula when it is serialised.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4179
https://github.com/root-project/root/pull/4179:307,testability,unit,unit,307,"[RF] Remove TFormula v5 from RooFit.; - Replace the old TFormula-v5-derived RooFormula by a small class that. creates a TFormula v6 [ROOT-10164,ROOT-10144]. - Update documentation for GenericPdf and FormulaVar accordingly. - Fix small memory leak in RooAbsData. - The This allows re-enabling the RooJohnson unit test that's based on. RooFormula [ROOT-10173]. It was further tested that [ROOT-8291] doesn't occur with the new. formula when it is serialised.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4179
https://github.com/root-project/root/pull/4179:312,testability,test,test,312,"[RF] Remove TFormula v5 from RooFit.; - Replace the old TFormula-v5-derived RooFormula by a small class that. creates a TFormula v6 [ROOT-10164,ROOT-10144]. - Update documentation for GenericPdf and FormulaVar accordingly. - Fix small memory leak in RooAbsData. - The This allows re-enabling the RooJohnson unit test that's based on. RooFormula [ROOT-10173]. It was further tested that [ROOT-8291] doesn't occur with the new. formula when it is serialised.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4179
https://github.com/root-project/root/pull/4179:374,testability,test,tested,374,"[RF] Remove TFormula v5 from RooFit.; - Replace the old TFormula-v5-derived RooFormula by a small class that. creates a TFormula v6 [ROOT-10164,ROOT-10144]. - Update documentation for GenericPdf and FormulaVar accordingly. - Fix small memory leak in RooAbsData. - The This allows re-enabling the RooJohnson unit test that's based on. RooFormula [ROOT-10173]. It was further tested that [ROOT-8291] doesn't occur with the new. formula when it is serialised.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4179
https://github.com/root-project/root/pull/4179:166,usability,document,documentation,166,"[RF] Remove TFormula v5 from RooFit.; - Replace the old TFormula-v5-derived RooFormula by a small class that. creates a TFormula v6 [ROOT-10164,ROOT-10144]. - Update documentation for GenericPdf and FormulaVar accordingly. - Fix small memory leak in RooAbsData. - The This allows re-enabling the RooJohnson unit test that's based on. RooFormula [ROOT-10173]. It was further tested that [ROOT-8291] doesn't occur with the new. formula when it is serialised.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4179
https://github.com/root-project/root/pull/4179:235,usability,memor,memory,235,"[RF] Remove TFormula v5 from RooFit.; - Replace the old TFormula-v5-derived RooFormula by a small class that. creates a TFormula v6 [ROOT-10164,ROOT-10144]. - Update documentation for GenericPdf and FormulaVar accordingly. - Fix small memory leak in RooAbsData. - The This allows re-enabling the RooJohnson unit test that's based on. RooFormula [ROOT-10173]. It was further tested that [ROOT-8291] doesn't occur with the new. formula when it is serialised.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4179
https://github.com/root-project/root/pull/4180:58,reliability,doe,doesn,58,Clone master branch of roottest if matching remote branch doesn't exist; Fixes: [ROOT-9708](https://sft.its.cern.ch/jira/browse/ROOT-9708).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4180
https://github.com/root-project/root/pull/4181:0,deployability,Updat,Update,0,Update builtins and disable Alien if XRootD is disabled;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4181
https://github.com/root-project/root/pull/4181:0,safety,Updat,Update,0,Update builtins and disable Alien if XRootD is disabled;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4181
https://github.com/root-project/root/pull/4181:0,security,Updat,Update,0,Update builtins and disable Alien if XRootD is disabled;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4181
https://github.com/root-project/root/pull/4182:11,availability,mask,mask,11,"[json/xml] mask out TObject::kNotDeleted & TObject::kIsOnHeap bits from text I/O; Sometime ROOT wrongly assign kIsOnHeap bit to object, making json-based tests failing. While these bits must be on after object reading, there is no sense preserve them. Making JSON code more compact. Instead of:. ""fBits"": 50331649,. one will get:. ""fBits"": 1,. Should solve sporadic problems with roottest. roottest has to be modified after that PR",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4182
https://github.com/root-project/root/pull/4182:160,deployability,fail,failing,160,"[json/xml] mask out TObject::kNotDeleted & TObject::kIsOnHeap bits from text I/O; Sometime ROOT wrongly assign kIsOnHeap bit to object, making json-based tests failing. While these bits must be on after object reading, there is no sense preserve them. Making JSON code more compact. Instead of:. ""fBits"": 50331649,. one will get:. ""fBits"": 1,. Should solve sporadic problems with roottest. roottest has to be modified after that PR",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4182
https://github.com/root-project/root/pull/4182:6,interoperability,xml,xml,6,"[json/xml] mask out TObject::kNotDeleted & TObject::kIsOnHeap bits from text I/O; Sometime ROOT wrongly assign kIsOnHeap bit to object, making json-based tests failing. While these bits must be on after object reading, there is no sense preserve them. Making JSON code more compact. Instead of:. ""fBits"": 50331649,. one will get:. ""fBits"": 1,. Should solve sporadic problems with roottest. roottest has to be modified after that PR",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4182
https://github.com/root-project/root/pull/4182:77,performance,I/O,I/O,77,"[json/xml] mask out TObject::kNotDeleted & TObject::kIsOnHeap bits from text I/O; Sometime ROOT wrongly assign kIsOnHeap bit to object, making json-based tests failing. While these bits must be on after object reading, there is no sense preserve them. Making JSON code more compact. Instead of:. ""fBits"": 50331649,. one will get:. ""fBits"": 1,. Should solve sporadic problems with roottest. roottest has to be modified after that PR",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4182
https://github.com/root-project/root/pull/4182:160,reliability,fail,failing,160,"[json/xml] mask out TObject::kNotDeleted & TObject::kIsOnHeap bits from text I/O; Sometime ROOT wrongly assign kIsOnHeap bit to object, making json-based tests failing. While these bits must be on after object reading, there is no sense preserve them. Making JSON code more compact. Instead of:. ""fBits"": 50331649,. one will get:. ""fBits"": 1,. Should solve sporadic problems with roottest. roottest has to be modified after that PR",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4182
https://github.com/root-project/root/pull/4182:154,safety,test,tests,154,"[json/xml] mask out TObject::kNotDeleted & TObject::kIsOnHeap bits from text I/O; Sometime ROOT wrongly assign kIsOnHeap bit to object, making json-based tests failing. While these bits must be on after object reading, there is no sense preserve them. Making JSON code more compact. Instead of:. ""fBits"": 50331649,. one will get:. ""fBits"": 1,. Should solve sporadic problems with roottest. roottest has to be modified after that PR",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4182
https://github.com/root-project/root/pull/4182:409,security,modif,modified,409,"[json/xml] mask out TObject::kNotDeleted & TObject::kIsOnHeap bits from text I/O; Sometime ROOT wrongly assign kIsOnHeap bit to object, making json-based tests failing. While these bits must be on after object reading, there is no sense preserve them. Making JSON code more compact. Instead of:. ""fBits"": 50331649,. one will get:. ""fBits"": 1,. Should solve sporadic problems with roottest. roottest has to be modified after that PR",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4182
https://github.com/root-project/root/pull/4182:154,testability,test,tests,154,"[json/xml] mask out TObject::kNotDeleted & TObject::kIsOnHeap bits from text I/O; Sometime ROOT wrongly assign kIsOnHeap bit to object, making json-based tests failing. While these bits must be on after object reading, there is no sense preserve them. Making JSON code more compact. Instead of:. ""fBits"": 50331649,. one will get:. ""fBits"": 1,. Should solve sporadic problems with roottest. roottest has to be modified after that PR",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4182
https://github.com/root-project/root/pull/4186:29,deployability,build,builder,29,WebEve: Optimize table proxy builder; * Reuse REveData table in REveTableProxyBuilder::Build() function. * Add interface in REveManager for client version,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4186
https://github.com/root-project/root/pull/4186:87,deployability,Build,Build,87,WebEve: Optimize table proxy builder; * Reuse REveData table in REveTableProxyBuilder::Build() function. * Add interface in REveManager for client version,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4186
https://github.com/root-project/root/pull/4186:147,deployability,version,version,147,WebEve: Optimize table proxy builder; * Reuse REveData table in REveTableProxyBuilder::Build() function. * Add interface in REveManager for client version,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4186
https://github.com/root-project/root/pull/4186:8,energy efficiency,Optim,Optimize,8,WebEve: Optimize table proxy builder; * Reuse REveData table in REveTableProxyBuilder::Build() function. * Add interface in REveManager for client version,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4186
https://github.com/root-project/root/pull/4186:111,integrability,interfac,interface,111,WebEve: Optimize table proxy builder; * Reuse REveData table in REveTableProxyBuilder::Build() function. * Add interface in REveManager for client version,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4186
https://github.com/root-project/root/pull/4186:147,integrability,version,version,147,WebEve: Optimize table proxy builder; * Reuse REveData table in REveTableProxyBuilder::Build() function. * Add interface in REveManager for client version,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4186
https://github.com/root-project/root/pull/4186:23,interoperability,prox,proxy,23,WebEve: Optimize table proxy builder; * Reuse REveData table in REveTableProxyBuilder::Build() function. * Add interface in REveManager for client version,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4186
https://github.com/root-project/root/pull/4186:111,interoperability,interfac,interface,111,WebEve: Optimize table proxy builder; * Reuse REveData table in REveTableProxyBuilder::Build() function. * Add interface in REveManager for client version,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4186
https://github.com/root-project/root/pull/4186:40,modifiability,Reu,Reuse,40,WebEve: Optimize table proxy builder; * Reuse REveData table in REveTableProxyBuilder::Build() function. * Add interface in REveManager for client version,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4186
https://github.com/root-project/root/pull/4186:111,modifiability,interfac,interface,111,WebEve: Optimize table proxy builder; * Reuse REveData table in REveTableProxyBuilder::Build() function. * Add interface in REveManager for client version,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4186
https://github.com/root-project/root/pull/4186:147,modifiability,version,version,147,WebEve: Optimize table proxy builder; * Reuse REveData table in REveTableProxyBuilder::Build() function. * Add interface in REveManager for client version,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4186
https://github.com/root-project/root/pull/4186:8,performance,Optimiz,Optimize,8,WebEve: Optimize table proxy builder; * Reuse REveData table in REveTableProxyBuilder::Build() function. * Add interface in REveManager for client version,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4186
https://github.com/root-project/root/pull/4187:404,deployability,instal,installed,404,"Disable splash screen by default; Following our discussions, this is the proposed change to disable the splash screen by default. Most users use `root -l` to get rid of the splash screen in any case. As mentioned in the discussions, it is still possible to see the splash screen with `root -a` or from a `TBrowser`, by going to *Browser Help* → *About ROOT*. If you want to check out this change, I have installed ROOT 6.18 with this change into CVMFS. You can run it on Linux with (no setup required):. ```. $ /cvmfs/sft.cern.ch/lcg/contrib/gentoo/linux/x86_64/usr/lib/root/6.18/bin/root. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4187
https://github.com/root-project/root/pull/4187:135,usability,user,users,135,"Disable splash screen by default; Following our discussions, this is the proposed change to disable the splash screen by default. Most users use `root -l` to get rid of the splash screen in any case. As mentioned in the discussions, it is still possible to see the splash screen with `root -a` or from a `TBrowser`, by going to *Browser Help* → *About ROOT*. If you want to check out this change, I have installed ROOT 6.18 with this change into CVMFS. You can run it on Linux with (no setup required):. ```. $ /cvmfs/sft.cern.ch/lcg/contrib/gentoo/linux/x86_64/usr/lib/root/6.18/bin/root. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4187
https://github.com/root-project/root/pull/4187:337,usability,Help,Help,337,"Disable splash screen by default; Following our discussions, this is the proposed change to disable the splash screen by default. Most users use `root -l` to get rid of the splash screen in any case. As mentioned in the discussions, it is still possible to see the splash screen with `root -a` or from a `TBrowser`, by going to *Browser Help* → *About ROOT*. If you want to check out this change, I have installed ROOT 6.18 with this change into CVMFS. You can run it on Linux with (no setup required):. ```. $ /cvmfs/sft.cern.ch/lcg/contrib/gentoo/linux/x86_64/usr/lib/root/6.18/bin/root. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4187
https://github.com/root-project/root/pull/4188:180,deployability,patch,patch,180,Backport 6.18: Add more property bits for TFunctionTemplate; Backport of the TCling changes in https://github.com/root-project/root/pull/4051/. This incorporate the changes of the patch:. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/templ_ctor.diff,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4188
https://github.com/root-project/root/pull/4188:246,deployability,patch,patches,246,Backport 6.18: Add more property bits for TFunctionTemplate; Backport of the TCling changes in https://github.com/root-project/root/pull/4051/. This incorporate the changes of the patch:. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/templ_ctor.diff,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4188
https://github.com/root-project/root/pull/4188:180,safety,patch,patch,180,Backport 6.18: Add more property bits for TFunctionTemplate; Backport of the TCling changes in https://github.com/root-project/root/pull/4051/. This incorporate the changes of the patch:. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/templ_ctor.diff,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4188
https://github.com/root-project/root/pull/4188:246,safety,patch,patches,246,Backport 6.18: Add more property bits for TFunctionTemplate; Backport of the TCling changes in https://github.com/root-project/root/pull/4051/. This incorporate the changes of the patch:. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/templ_ctor.diff,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4188
https://github.com/root-project/root/pull/4188:180,security,patch,patch,180,Backport 6.18: Add more property bits for TFunctionTemplate; Backport of the TCling changes in https://github.com/root-project/root/pull/4051/. This incorporate the changes of the patch:. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/templ_ctor.diff,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4188
https://github.com/root-project/root/pull/4188:246,security,patch,patches,246,Backport 6.18: Add more property bits for TFunctionTemplate; Backport of the TCling changes in https://github.com/root-project/root/pull/4051/. This incorporate the changes of the patch:. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/templ_ctor.diff,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4188
https://github.com/root-project/root/pull/4189:27,usability,support,support,27,Backport 6.18: Better enum support in TCling and PyROOT; Backport of:. https://github.com/root-project/root/pull/4031. https://github.com/root-project/root/pull/4121,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4189
https://github.com/root-project/root/pull/4192:0,safety,Avoid,Avoid,0,Avoid crash in IO and Prevent split in presence of Streamer free function;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4192
https://github.com/root-project/root/pull/4192:22,safety,Prevent,Prevent,22,Avoid crash in IO and Prevent split in presence of Streamer free function;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4192
https://github.com/root-project/root/pull/4192:22,security,Preven,Prevent,22,Avoid crash in IO and Prevent split in presence of Streamer free function;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4192
https://github.com/root-project/root/pull/4193:5,safety,Avoid,Avoid,5,v618 Avoid crash in IO and Prevent split in presence of Streamer free function;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4193
https://github.com/root-project/root/pull/4193:27,safety,Prevent,Prevent,27,v618 Avoid crash in IO and Prevent split in presence of Streamer free function;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4193
https://github.com/root-project/root/pull/4193:27,security,Preven,Prevent,27,v618 Avoid crash in IO and Prevent split in presence of Streamer free function;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4193
https://github.com/root-project/root/pull/4194:5,safety,Avoid,Avoid,5,v616 Avoid crash in IO and Prevent split in presence of Streamer free function;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4194
https://github.com/root-project/root/pull/4194:27,safety,Prevent,Prevent,27,v616 Avoid crash in IO and Prevent split in presence of Streamer free function;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4194
https://github.com/root-project/root/pull/4194:27,security,Preven,Prevent,27,v616 Avoid crash in IO and Prevent split in presence of Streamer free function;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4194
https://github.com/root-project/root/pull/4195:380,deployability,build,build,380,"[Exp PyROOT] Port TPython to experimental PyROOT; As discussed here:. https://bitbucket.org/wlav/cppyy/issues/65. some functions/classes in Cppyy's `TPython` are broken, e.g. `Import`, `LoadMacro` and `TPyClassGenerator`. They rely on some ROOT meta functionality that should be now be hidden to CPyCppyy, but they have not been reimplemented yet. Therefore, this PR disables the build of Cppyy's `TPython` and ports the `TPython` present in the old PyROOT to the new Cppyy API, so that all the functionality is still provided.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4195
https://github.com/root-project/root/pull/4195:474,deployability,API,API,474,"[Exp PyROOT] Port TPython to experimental PyROOT; As discussed here:. https://bitbucket.org/wlav/cppyy/issues/65. some functions/classes in Cppyy's `TPython` are broken, e.g. `Import`, `LoadMacro` and `TPyClassGenerator`. They rely on some ROOT meta functionality that should be now be hidden to CPyCppyy, but they have not been reimplemented yet. Therefore, this PR disables the build of Cppyy's `TPython` and ports the `TPython` present in the old PyROOT to the new Cppyy API, so that all the functionality is still provided.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4195
https://github.com/root-project/root/pull/4195:186,energy efficiency,Load,LoadMacro,186,"[Exp PyROOT] Port TPython to experimental PyROOT; As discussed here:. https://bitbucket.org/wlav/cppyy/issues/65. some functions/classes in Cppyy's `TPython` are broken, e.g. `Import`, `LoadMacro` and `TPyClassGenerator`. They rely on some ROOT meta functionality that should be now be hidden to CPyCppyy, but they have not been reimplemented yet. Therefore, this PR disables the build of Cppyy's `TPython` and ports the `TPython` present in the old PyROOT to the new Cppyy API, so that all the functionality is still provided.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4195
https://github.com/root-project/root/pull/4195:474,integrability,API,API,474,"[Exp PyROOT] Port TPython to experimental PyROOT; As discussed here:. https://bitbucket.org/wlav/cppyy/issues/65. some functions/classes in Cppyy's `TPython` are broken, e.g. `Import`, `LoadMacro` and `TPyClassGenerator`. They rely on some ROOT meta functionality that should be now be hidden to CPyCppyy, but they have not been reimplemented yet. Therefore, this PR disables the build of Cppyy's `TPython` and ports the `TPython` present in the old PyROOT to the new Cppyy API, so that all the functionality is still provided.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4195
https://github.com/root-project/root/pull/4195:474,interoperability,API,API,474,"[Exp PyROOT] Port TPython to experimental PyROOT; As discussed here:. https://bitbucket.org/wlav/cppyy/issues/65. some functions/classes in Cppyy's `TPython` are broken, e.g. `Import`, `LoadMacro` and `TPyClassGenerator`. They rely on some ROOT meta functionality that should be now be hidden to CPyCppyy, but they have not been reimplemented yet. Therefore, this PR disables the build of Cppyy's `TPython` and ports the `TPython` present in the old PyROOT to the new Cppyy API, so that all the functionality is still provided.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4195
https://github.com/root-project/root/pull/4195:186,performance,Load,LoadMacro,186,"[Exp PyROOT] Port TPython to experimental PyROOT; As discussed here:. https://bitbucket.org/wlav/cppyy/issues/65. some functions/classes in Cppyy's `TPython` are broken, e.g. `Import`, `LoadMacro` and `TPyClassGenerator`. They rely on some ROOT meta functionality that should be now be hidden to CPyCppyy, but they have not been reimplemented yet. Therefore, this PR disables the build of Cppyy's `TPython` and ports the `TPython` present in the old PyROOT to the new Cppyy API, so that all the functionality is still provided.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4195
https://github.com/root-project/root/pull/4196:24,deployability,Build,BuildType,24,"[CMake] Make CXX_FLAGS_<BuildType> cache variables for linux.; Currently, all user-provided build flags are overwritten without notice. By making the build flags cache variables, they are only set if the user. didn't set them explicitly. Further, the printing of the build flags now also correctly prints the. flags being set by the build type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4196
https://github.com/root-project/root/pull/4196:92,deployability,build,build,92,"[CMake] Make CXX_FLAGS_<BuildType> cache variables for linux.; Currently, all user-provided build flags are overwritten without notice. By making the build flags cache variables, they are only set if the user. didn't set them explicitly. Further, the printing of the build flags now also correctly prints the. flags being set by the build type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4196
https://github.com/root-project/root/pull/4196:150,deployability,build,build,150,"[CMake] Make CXX_FLAGS_<BuildType> cache variables for linux.; Currently, all user-provided build flags are overwritten without notice. By making the build flags cache variables, they are only set if the user. didn't set them explicitly. Further, the printing of the build flags now also correctly prints the. flags being set by the build type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4196
https://github.com/root-project/root/pull/4196:267,deployability,build,build,267,"[CMake] Make CXX_FLAGS_<BuildType> cache variables for linux.; Currently, all user-provided build flags are overwritten without notice. By making the build flags cache variables, they are only set if the user. didn't set them explicitly. Further, the printing of the build flags now also correctly prints the. flags being set by the build type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4196
https://github.com/root-project/root/pull/4196:333,deployability,build,build,333,"[CMake] Make CXX_FLAGS_<BuildType> cache variables for linux.; Currently, all user-provided build flags are overwritten without notice. By making the build flags cache variables, they are only set if the user. didn't set them explicitly. Further, the printing of the build flags now also correctly prints the. flags being set by the build type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4196
https://github.com/root-project/root/pull/4196:63,energy efficiency,Current,Currently,63,"[CMake] Make CXX_FLAGS_<BuildType> cache variables for linux.; Currently, all user-provided build flags are overwritten without notice. By making the build flags cache variables, they are only set if the user. didn't set them explicitly. Further, the printing of the build flags now also correctly prints the. flags being set by the build type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4196
https://github.com/root-project/root/pull/4196:41,modifiability,variab,variables,41,"[CMake] Make CXX_FLAGS_<BuildType> cache variables for linux.; Currently, all user-provided build flags are overwritten without notice. By making the build flags cache variables, they are only set if the user. didn't set them explicitly. Further, the printing of the build flags now also correctly prints the. flags being set by the build type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4196
https://github.com/root-project/root/pull/4196:168,modifiability,variab,variables,168,"[CMake] Make CXX_FLAGS_<BuildType> cache variables for linux.; Currently, all user-provided build flags are overwritten without notice. By making the build flags cache variables, they are only set if the user. didn't set them explicitly. Further, the printing of the build flags now also correctly prints the. flags being set by the build type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4196
https://github.com/root-project/root/pull/4196:35,performance,cach,cache,35,"[CMake] Make CXX_FLAGS_<BuildType> cache variables for linux.; Currently, all user-provided build flags are overwritten without notice. By making the build flags cache variables, they are only set if the user. didn't set them explicitly. Further, the printing of the build flags now also correctly prints the. flags being set by the build type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4196
https://github.com/root-project/root/pull/4196:162,performance,cach,cache,162,"[CMake] Make CXX_FLAGS_<BuildType> cache variables for linux.; Currently, all user-provided build flags are overwritten without notice. By making the build flags cache variables, they are only set if the user. didn't set them explicitly. Further, the printing of the build flags now also correctly prints the. flags being set by the build type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4196
https://github.com/root-project/root/pull/4196:78,usability,user,user-provided,78,"[CMake] Make CXX_FLAGS_<BuildType> cache variables for linux.; Currently, all user-provided build flags are overwritten without notice. By making the build flags cache variables, they are only set if the user. didn't set them explicitly. Further, the printing of the build flags now also correctly prints the. flags being set by the build type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4196
https://github.com/root-project/root/pull/4196:204,usability,user,user,204,"[CMake] Make CXX_FLAGS_<BuildType> cache variables for linux.; Currently, all user-provided build flags are overwritten without notice. By making the build flags cache variables, they are only set if the user. didn't set them explicitly. Further, the printing of the build flags now also correctly prints the. flags being set by the build type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4196
https://github.com/root-project/root/pull/4197:407,energy efficiency,current,current,407,"[PyROOT][ROOT-10268] Enable pickling of arrays returned by AsNumpy; We renamed the class of the numpy wrapper object to numpy.array so that. the wrapping is hidden from the user. However, this breaks pickling of. the object since the class name does not match the name of the true. class. Removing the renaming solves the issue. Now, the returned array. is not called numpy.array but ndarray. This PR fixes current and experimental PyROOT. @etejedor @maxgalli I think this is a feasible solution since the name of the class is anyway only visible in the `__repr__` representation and numpy.array is as good as ndarray since both indicate to the user that the object behaves like a numpy array. Jira ticket can be found here: https://sft.its.cern.ch/jira/browse/ROOT-10268",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4197
https://github.com/root-project/root/pull/4197:102,integrability,wrap,wrapper,102,"[PyROOT][ROOT-10268] Enable pickling of arrays returned by AsNumpy; We renamed the class of the numpy wrapper object to numpy.array so that. the wrapping is hidden from the user. However, this breaks pickling of. the object since the class name does not match the name of the true. class. Removing the renaming solves the issue. Now, the returned array. is not called numpy.array but ndarray. This PR fixes current and experimental PyROOT. @etejedor @maxgalli I think this is a feasible solution since the name of the class is anyway only visible in the `__repr__` representation and numpy.array is as good as ndarray since both indicate to the user that the object behaves like a numpy array. Jira ticket can be found here: https://sft.its.cern.ch/jira/browse/ROOT-10268",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4197
https://github.com/root-project/root/pull/4197:145,integrability,wrap,wrapping,145,"[PyROOT][ROOT-10268] Enable pickling of arrays returned by AsNumpy; We renamed the class of the numpy wrapper object to numpy.array so that. the wrapping is hidden from the user. However, this breaks pickling of. the object since the class name does not match the name of the true. class. Removing the renaming solves the issue. Now, the returned array. is not called numpy.array but ndarray. This PR fixes current and experimental PyROOT. @etejedor @maxgalli I think this is a feasible solution since the name of the class is anyway only visible in the `__repr__` representation and numpy.array is as good as ndarray since both indicate to the user that the object behaves like a numpy array. Jira ticket can be found here: https://sft.its.cern.ch/jira/browse/ROOT-10268",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4197
https://github.com/root-project/root/pull/4197:102,interoperability,wrapper,wrapper,102,"[PyROOT][ROOT-10268] Enable pickling of arrays returned by AsNumpy; We renamed the class of the numpy wrapper object to numpy.array so that. the wrapping is hidden from the user. However, this breaks pickling of. the object since the class name does not match the name of the true. class. Removing the renaming solves the issue. Now, the returned array. is not called numpy.array but ndarray. This PR fixes current and experimental PyROOT. @etejedor @maxgalli I think this is a feasible solution since the name of the class is anyway only visible in the `__repr__` representation and numpy.array is as good as ndarray since both indicate to the user that the object behaves like a numpy array. Jira ticket can be found here: https://sft.its.cern.ch/jira/browse/ROOT-10268",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4197
https://github.com/root-project/root/pull/4197:245,reliability,doe,does,245,"[PyROOT][ROOT-10268] Enable pickling of arrays returned by AsNumpy; We renamed the class of the numpy wrapper object to numpy.array so that. the wrapping is hidden from the user. However, this breaks pickling of. the object since the class name does not match the name of the true. class. Removing the renaming solves the issue. Now, the returned array. is not called numpy.array but ndarray. This PR fixes current and experimental PyROOT. @etejedor @maxgalli I think this is a feasible solution since the name of the class is anyway only visible in the `__repr__` representation and numpy.array is as good as ndarray since both indicate to the user that the object behaves like a numpy array. Jira ticket can be found here: https://sft.its.cern.ch/jira/browse/ROOT-10268",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4197
https://github.com/root-project/root/pull/4197:173,usability,user,user,173,"[PyROOT][ROOT-10268] Enable pickling of arrays returned by AsNumpy; We renamed the class of the numpy wrapper object to numpy.array so that. the wrapping is hidden from the user. However, this breaks pickling of. the object since the class name does not match the name of the true. class. Removing the renaming solves the issue. Now, the returned array. is not called numpy.array but ndarray. This PR fixes current and experimental PyROOT. @etejedor @maxgalli I think this is a feasible solution since the name of the class is anyway only visible in the `__repr__` representation and numpy.array is as good as ndarray since both indicate to the user that the object behaves like a numpy array. Jira ticket can be found here: https://sft.its.cern.ch/jira/browse/ROOT-10268",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4197
https://github.com/root-project/root/pull/4197:629,usability,indicat,indicate,629,"[PyROOT][ROOT-10268] Enable pickling of arrays returned by AsNumpy; We renamed the class of the numpy wrapper object to numpy.array so that. the wrapping is hidden from the user. However, this breaks pickling of. the object since the class name does not match the name of the true. class. Removing the renaming solves the issue. Now, the returned array. is not called numpy.array but ndarray. This PR fixes current and experimental PyROOT. @etejedor @maxgalli I think this is a feasible solution since the name of the class is anyway only visible in the `__repr__` representation and numpy.array is as good as ndarray since both indicate to the user that the object behaves like a numpy array. Jira ticket can be found here: https://sft.its.cern.ch/jira/browse/ROOT-10268",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4197
https://github.com/root-project/root/pull/4197:645,usability,user,user,645,"[PyROOT][ROOT-10268] Enable pickling of arrays returned by AsNumpy; We renamed the class of the numpy wrapper object to numpy.array so that. the wrapping is hidden from the user. However, this breaks pickling of. the object since the class name does not match the name of the true. class. Removing the renaming solves the issue. Now, the returned array. is not called numpy.array but ndarray. This PR fixes current and experimental PyROOT. @etejedor @maxgalli I think this is a feasible solution since the name of the class is anyway only visible in the `__repr__` representation and numpy.array is as good as ndarray since both indicate to the user that the object behaves like a numpy array. Jira ticket can be found here: https://sft.its.cern.ch/jira/browse/ROOT-10268",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4197
https://github.com/root-project/root/pull/4198:32,testability,Simpl,Simplify,32,[rootcling] Remove unused code. Simplify.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4198
https://github.com/root-project/root/pull/4198:32,usability,Simpl,Simplify,32,[rootcling] Remove unused code. Simplify.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4198
https://github.com/root-project/root/pull/4199:39,deployability,depend,depend,39,[cxxmodules] The newly built pcm files depend on their modulemap.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4199
https://github.com/root-project/root/pull/4199:55,deployability,modul,modulemap,55,[cxxmodules] The newly built pcm files depend on their modulemap.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4199
https://github.com/root-project/root/pull/4199:39,integrability,depend,depend,39,[cxxmodules] The newly built pcm files depend on their modulemap.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4199
https://github.com/root-project/root/pull/4199:39,modifiability,depend,depend,39,[cxxmodules] The newly built pcm files depend on their modulemap.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4199
https://github.com/root-project/root/pull/4199:55,modifiability,modul,modulemap,55,[cxxmodules] The newly built pcm files depend on their modulemap.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4199
https://github.com/root-project/root/pull/4199:39,safety,depend,depend,39,[cxxmodules] The newly built pcm files depend on their modulemap.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4199
https://github.com/root-project/root/pull/4199:55,safety,modul,modulemap,55,[cxxmodules] The newly built pcm files depend on their modulemap.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4199
https://github.com/root-project/root/pull/4199:39,testability,depend,depend,39,[cxxmodules] The newly built pcm files depend on their modulemap.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4199
https://github.com/root-project/root/pull/4201:0,testability,Simpl,Simplify,0,"Simplify query for include directories; - Use only sed instead of awk and grep. - Use regex independent of locale settings. Below is the generated output for our supported compilers:. ```. $ clang++ -xc++ -E -v /dev/null 2>&1 | sed -n /^.include/,\${/++/p}. /usr/include/c++/v1. $ g++ -xc++ -E -v /dev/null 2>&1 | sed -n /^.include/,\${/++/p}. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8/x86_64-pc-linux-gnu. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8/backward. $ icc -xc++ -E -v /dev/null 2>&1 | sed -n /^.include/,\${/++/p}. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8/x86_64-pc-linux-gnu. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8/backward. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4201
https://github.com/root-project/root/pull/4201:0,usability,Simpl,Simplify,0,"Simplify query for include directories; - Use only sed instead of awk and grep. - Use regex independent of locale settings. Below is the generated output for our supported compilers:. ```. $ clang++ -xc++ -E -v /dev/null 2>&1 | sed -n /^.include/,\${/++/p}. /usr/include/c++/v1. $ g++ -xc++ -E -v /dev/null 2>&1 | sed -n /^.include/,\${/++/p}. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8/x86_64-pc-linux-gnu. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8/backward. $ icc -xc++ -E -v /dev/null 2>&1 | sed -n /^.include/,\${/++/p}. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8/x86_64-pc-linux-gnu. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8/backward. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4201
https://github.com/root-project/root/pull/4201:162,usability,support,supported,162,"Simplify query for include directories; - Use only sed instead of awk and grep. - Use regex independent of locale settings. Below is the generated output for our supported compilers:. ```. $ clang++ -xc++ -E -v /dev/null 2>&1 | sed -n /^.include/,\${/++/p}. /usr/include/c++/v1. $ g++ -xc++ -E -v /dev/null 2>&1 | sed -n /^.include/,\${/++/p}. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8/x86_64-pc-linux-gnu. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8/backward. $ icc -xc++ -E -v /dev/null 2>&1 | sed -n /^.include/,\${/++/p}. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8/x86_64-pc-linux-gnu. /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/g++-v8/backward. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4201
https://github.com/root-project/root/pull/4202:146,security,access,accessed,146,"[PyROOT] Set correct type for enum values in namespaces; As reported by ROOT-8935, when an enum is in a namespace and the. values of the enum are accessed via the namespace, the underlying. type of the enum is not taken into account. With this fix, we check the underlying type of the enum in. PropertyProxy::Set before creating the converter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4202
https://github.com/root-project/root/pull/4203:17,security,modif,modified,17,""".help"" command, modified to open the online reference guide (generat…; …ed with Doxygen). for class, method and namespace (TApplication.h, TApplication.cxx, MetaSema.cpp).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:2,usability,help,help,2,""".help"" command, modified to open the online reference guide (generat…; …ed with Doxygen). for class, method and namespace (TApplication.h, TApplication.cxx, MetaSema.cpp).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:8,usability,command,command,8,""".help"" command, modified to open the online reference guide (generat…; …ed with Doxygen). for class, method and namespace (TApplication.h, TApplication.cxx, MetaSema.cpp).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:55,usability,guid,guide,55,""".help"" command, modified to open the online reference guide (generat…; …ed with Doxygen). for class, method and namespace (TApplication.h, TApplication.cxx, MetaSema.cpp).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4204:116,deployability,version,version,116,"[qt5web] add missing QWebEngineDownloadItem include; Was missing when compile with Qt5.6, which is oldest supported version. Was fine for Qt5.13, therefore was not recognized",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4204
https://github.com/root-project/root/pull/4204:116,integrability,version,version,116,"[qt5web] add missing QWebEngineDownloadItem include; Was missing when compile with Qt5.6, which is oldest supported version. Was fine for Qt5.13, therefore was not recognized",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4204
https://github.com/root-project/root/pull/4204:116,modifiability,version,version,116,"[qt5web] add missing QWebEngineDownloadItem include; Was missing when compile with Qt5.6, which is oldest supported version. Was fine for Qt5.13, therefore was not recognized",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4204
https://github.com/root-project/root/pull/4204:106,usability,support,supported,106,"[qt5web] add missing QWebEngineDownloadItem include; Was missing when compile with Qt5.6, which is oldest supported version. Was fine for Qt5.13, therefore was not recognized",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4204
https://github.com/root-project/root/pull/4205:465,availability,cluster,cluster-relative,465,"[ntuple] Add support for std::array (fixed-size arrays); Fixed-size arrays are stored without an explicit offset column. Instead, the array length is stored as part of the field description. This PR also brings infrastructure work towards `std::variant` support. Variant fields will eventually store references to multiple sub fields (unlike vectors, which only reference a single sub field). To make that work, the methods related to reading data now understand a cluster-relative addressing mode. This way, we don't need to store the pointee offset of linked fields anywhere but we can directly read referenced fields in the same cluster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4205
https://github.com/root-project/root/pull/4205:632,availability,cluster,cluster,632,"[ntuple] Add support for std::array (fixed-size arrays); Fixed-size arrays are stored without an explicit offset column. Instead, the array length is stored as part of the field description. This PR also brings infrastructure work towards `std::variant` support. Variant fields will eventually store references to multiple sub fields (unlike vectors, which only reference a single sub field). To make that work, the methods related to reading data now understand a cluster-relative addressing mode. This way, we don't need to store the pointee offset of linked fields anywhere but we can directly read referenced fields in the same cluster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4205
https://github.com/root-project/root/pull/4205:211,deployability,infrastructur,infrastructure,211,"[ntuple] Add support for std::array (fixed-size arrays); Fixed-size arrays are stored without an explicit offset column. Instead, the array length is stored as part of the field description. This PR also brings infrastructure work towards `std::variant` support. Variant fields will eventually store references to multiple sub fields (unlike vectors, which only reference a single sub field). To make that work, the methods related to reading data now understand a cluster-relative addressing mode. This way, we don't need to store the pointee offset of linked fields anywhere but we can directly read referenced fields in the same cluster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4205
https://github.com/root-project/root/pull/4205:465,deployability,cluster,cluster-relative,465,"[ntuple] Add support for std::array (fixed-size arrays); Fixed-size arrays are stored without an explicit offset column. Instead, the array length is stored as part of the field description. This PR also brings infrastructure work towards `std::variant` support. Variant fields will eventually store references to multiple sub fields (unlike vectors, which only reference a single sub field). To make that work, the methods related to reading data now understand a cluster-relative addressing mode. This way, we don't need to store the pointee offset of linked fields anywhere but we can directly read referenced fields in the same cluster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4205
https://github.com/root-project/root/pull/4205:632,deployability,cluster,cluster,632,"[ntuple] Add support for std::array (fixed-size arrays); Fixed-size arrays are stored without an explicit offset column. Instead, the array length is stored as part of the field description. This PR also brings infrastructure work towards `std::variant` support. Variant fields will eventually store references to multiple sub fields (unlike vectors, which only reference a single sub field). To make that work, the methods related to reading data now understand a cluster-relative addressing mode. This way, we don't need to store the pointee offset of linked fields anywhere but we can directly read referenced fields in the same cluster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4205
https://github.com/root-project/root/pull/4205:283,integrability,event,eventually,283,"[ntuple] Add support for std::array (fixed-size arrays); Fixed-size arrays are stored without an explicit offset column. Instead, the array length is stored as part of the field description. This PR also brings infrastructure work towards `std::variant` support. Variant fields will eventually store references to multiple sub fields (unlike vectors, which only reference a single sub field). To make that work, the methods related to reading data now understand a cluster-relative addressing mode. This way, we don't need to store the pointee offset of linked fields anywhere but we can directly read referenced fields in the same cluster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4205
https://github.com/root-project/root/pull/4205:323,integrability,sub,sub,323,"[ntuple] Add support for std::array (fixed-size arrays); Fixed-size arrays are stored without an explicit offset column. Instead, the array length is stored as part of the field description. This PR also brings infrastructure work towards `std::variant` support. Variant fields will eventually store references to multiple sub fields (unlike vectors, which only reference a single sub field). To make that work, the methods related to reading data now understand a cluster-relative addressing mode. This way, we don't need to store the pointee offset of linked fields anywhere but we can directly read referenced fields in the same cluster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4205
https://github.com/root-project/root/pull/4205:381,integrability,sub,sub,381,"[ntuple] Add support for std::array (fixed-size arrays); Fixed-size arrays are stored without an explicit offset column. Instead, the array length is stored as part of the field description. This PR also brings infrastructure work towards `std::variant` support. Variant fields will eventually store references to multiple sub fields (unlike vectors, which only reference a single sub field). To make that work, the methods related to reading data now understand a cluster-relative addressing mode. This way, we don't need to store the pointee offset of linked fields anywhere but we can directly read referenced fields in the same cluster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4205
https://github.com/root-project/root/pull/4205:452,testability,understand,understand,452,"[ntuple] Add support for std::array (fixed-size arrays); Fixed-size arrays are stored without an explicit offset column. Instead, the array length is stored as part of the field description. This PR also brings infrastructure work towards `std::variant` support. Variant fields will eventually store references to multiple sub fields (unlike vectors, which only reference a single sub field). To make that work, the methods related to reading data now understand a cluster-relative addressing mode. This way, we don't need to store the pointee offset of linked fields anywhere but we can directly read referenced fields in the same cluster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4205
https://github.com/root-project/root/pull/4205:13,usability,support,support,13,"[ntuple] Add support for std::array (fixed-size arrays); Fixed-size arrays are stored without an explicit offset column. Instead, the array length is stored as part of the field description. This PR also brings infrastructure work towards `std::variant` support. Variant fields will eventually store references to multiple sub fields (unlike vectors, which only reference a single sub field). To make that work, the methods related to reading data now understand a cluster-relative addressing mode. This way, we don't need to store the pointee offset of linked fields anywhere but we can directly read referenced fields in the same cluster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4205
https://github.com/root-project/root/pull/4205:254,usability,support,support,254,"[ntuple] Add support for std::array (fixed-size arrays); Fixed-size arrays are stored without an explicit offset column. Instead, the array length is stored as part of the field description. This PR also brings infrastructure work towards `std::variant` support. Variant fields will eventually store references to multiple sub fields (unlike vectors, which only reference a single sub field). To make that work, the methods related to reading data now understand a cluster-relative addressing mode. This way, we don't need to store the pointee offset of linked fields anywhere but we can directly read referenced fields in the same cluster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4205
https://github.com/root-project/root/pull/4206:161,security,access,accessed,161,"[PyROOT] 6.18 Backport: Set correct type for enum values in namespaces; As reported by ROOT-8935, when an enum is in a namespace and the. values of the enum are accessed via the namespace, the underlying. type of the enum is not taken into account. With this fix, we check the underlying type of the enum in. PropertyProxy::Set before creating the converter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4206
https://github.com/root-project/root/pull/4207:28,energy efficiency,model,model,28,[ntuple] Fix field order in model reconstruction;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4207
https://github.com/root-project/root/pull/4207:28,security,model,model,28,[ntuple] Fix field order in model reconstruction;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4207
https://github.com/root-project/root/pull/4208:104,performance,concurren,concurrent,104,"[ntuple] Fix flakey unit tests; Use random numbers in the file names created during unit tests, so that concurrent unit tests don't remove each others files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4208
https://github.com/root-project/root/pull/4208:25,safety,test,tests,25,"[ntuple] Fix flakey unit tests; Use random numbers in the file names created during unit tests, so that concurrent unit tests don't remove each others files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4208
https://github.com/root-project/root/pull/4208:89,safety,test,tests,89,"[ntuple] Fix flakey unit tests; Use random numbers in the file names created during unit tests, so that concurrent unit tests don't remove each others files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4208
https://github.com/root-project/root/pull/4208:120,safety,test,tests,120,"[ntuple] Fix flakey unit tests; Use random numbers in the file names created during unit tests, so that concurrent unit tests don't remove each others files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4208
https://github.com/root-project/root/pull/4208:20,testability,unit,unit,20,"[ntuple] Fix flakey unit tests; Use random numbers in the file names created during unit tests, so that concurrent unit tests don't remove each others files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4208
https://github.com/root-project/root/pull/4208:25,testability,test,tests,25,"[ntuple] Fix flakey unit tests; Use random numbers in the file names created during unit tests, so that concurrent unit tests don't remove each others files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4208
https://github.com/root-project/root/pull/4208:84,testability,unit,unit,84,"[ntuple] Fix flakey unit tests; Use random numbers in the file names created during unit tests, so that concurrent unit tests don't remove each others files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4208
https://github.com/root-project/root/pull/4208:89,testability,test,tests,89,"[ntuple] Fix flakey unit tests; Use random numbers in the file names created during unit tests, so that concurrent unit tests don't remove each others files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4208
https://github.com/root-project/root/pull/4208:115,testability,unit,unit,115,"[ntuple] Fix flakey unit tests; Use random numbers in the file names created during unit tests, so that concurrent unit tests don't remove each others files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4208
https://github.com/root-project/root/pull/4208:120,testability,test,tests,120,"[ntuple] Fix flakey unit tests; Use random numbers in the file names created during unit tests, so that concurrent unit tests don't remove each others files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4208
https://github.com/root-project/root/pull/4210:12,modifiability,paramet,parameter,12,"WebEve: Add parameter for expand level; This is a minor change, to enable other controllers to set expand level like:. https://github.com/alja/EveWebApp/blob/custom/ui5/controller/MyNewSummary.controller.js#L10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4210
https://github.com/root-project/root/pull/4210:80,security,control,controllers,80,"WebEve: Add parameter for expand level; This is a minor change, to enable other controllers to set expand level like:. https://github.com/alja/EveWebApp/blob/custom/ui5/controller/MyNewSummary.controller.js#L10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4210
https://github.com/root-project/root/pull/4210:169,security,control,controller,169,"WebEve: Add parameter for expand level; This is a minor change, to enable other controllers to set expand level like:. https://github.com/alja/EveWebApp/blob/custom/ui5/controller/MyNewSummary.controller.js#L10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4210
https://github.com/root-project/root/pull/4210:193,security,control,controller,193,"WebEve: Add parameter for expand level; This is a minor change, to enable other controllers to set expand level like:. https://github.com/alja/EveWebApp/blob/custom/ui5/controller/MyNewSummary.controller.js#L10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4210
https://github.com/root-project/root/pull/4210:80,testability,control,controllers,80,"WebEve: Add parameter for expand level; This is a minor change, to enable other controllers to set expand level like:. https://github.com/alja/EveWebApp/blob/custom/ui5/controller/MyNewSummary.controller.js#L10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4210
https://github.com/root-project/root/pull/4210:169,testability,control,controller,169,"WebEve: Add parameter for expand level; This is a minor change, to enable other controllers to set expand level like:. https://github.com/alja/EveWebApp/blob/custom/ui5/controller/MyNewSummary.controller.js#L10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4210
https://github.com/root-project/root/pull/4210:193,testability,control,controller,193,"WebEve: Add parameter for expand level; This is a minor change, to enable other controllers to set expand level like:. https://github.com/alja/EveWebApp/blob/custom/ui5/controller/MyNewSummary.controller.js#L10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4210
https://github.com/root-project/root/pull/4210:158,usability,custom,custom,158,"WebEve: Add parameter for expand level; This is a minor change, to enable other controllers to set expand level like:. https://github.com/alja/EveWebApp/blob/custom/ui5/controller/MyNewSummary.controller.js#L10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4210
https://github.com/root-project/root/pull/4211:167,deployability,modul,modular,167,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:212,deployability,integr,integration,212,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:315,deployability,automat,automatic,315,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:390,energy efficiency,optim,optimal,390,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:1409,energy efficiency,Draw,Draw,1409,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:1452,energy efficiency,Draw,DrawLegend,1452,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:1470,energy efficiency,Draw,DrawClone,1470,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:167,integrability,modular,modular,167,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:212,integrability,integr,integration,212,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:685,integrability,transform,transformations,685,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:751,integrability,transform,transform,751,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:834,integrability,transform,transform,834,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:864,integrability,transform,transform,864,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:899,integrability,Filter,Filter,899,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:212,interoperability,integr,integration,212,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:685,interoperability,transform,transformations,685,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:751,interoperability,transform,transform,751,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:834,interoperability,transform,transform,834,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:864,interoperability,transform,transform,864,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:32,modifiability,variab,variable,32,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:167,modifiability,modul,modular,167,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:212,modifiability,integr,integration,212,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:932,modifiability,variab,variable,932,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:1276,modifiability,variab,variables,1276,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:1360,modifiability,variab,variables,1360,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:1414,modifiability,variab,variables,1414,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:212,reliability,integr,integration,212,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:167,safety,modul,modular,167,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:212,security,integr,integration,212,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:475,security,sign,signal,475,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:1048,security,Sign,Signal,1048,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:1072,security,Sign,Signal,1072,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:167,testability,modula,modular,167,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:212,testability,integr,integration,212,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:315,testability,automat,automatic,315,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:190,usability,tool,tool,190,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:1505,usability,user,user-images,1505,"[TMVA experimental] Implement a variable plotter as TMVA Gui replacement; This is a proof of concept for a part of a TMVA GUI replacement. The basic ideas:. - Make it modular, no monolithic tool. - Provide tight integration with RDataFrame. I copy below the tutorial that I've added in the PR. Known issues:. - The automatic range for the histos is very weird. - Naming of the class is not optimal. ```cpp. void tmva005_RVariablePlotter(). // Initialize ROOT dataframes from signal and background datasets. const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";. ROOT::RDataFrame sig1(""TreeS"", filename);. ROOT::RDataFrame bkg1(""TreeB"", filename);. // Apply transformations on the datasets to be included in the study. auto transform = [](auto df) { return df.Define(""var5"", ""var1 * var2""); };. auto sig2 = transform(sig1);. auto bkg2 = transform(bkg1);. auto sig3 = sig2.Filter(""var1 > 0"");. // Create a variable plotter object giving the dataframes and the class labels. RVariablePlotter plotter({sig2, bkg2, sig3},. {""Signal"", ""Background"", ""Signal (var1 > 0)""});. // Create a canvas with four pads for plotting. auto c = new TCanvas("""", """", 1200, 800);. c->Divide(3, 2);. // Place plots on the pads of the canvas. const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4"", ""var5""};. for (unsigned int i = 0; i < variables.size(); i++) {. c->cd(i + 1);. plotter.Draw(variables[i]);. }. c->cd(6);. plotter.DrawLegend();. c->DrawClone();. }. ```. ![x](https://user-images.githubusercontent.com/6951222/63058987-7b33d880-beee-11e9-974d-264d06ea0869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4212:24,availability,failur,failure,24,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited flaoting point precision, an error message was issued. on 32 bit architectures. The concerned check for equality check is now. a bit more forgiving.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4212
https://github.com/root-project/root/pull/4212:92,availability,error,error,92,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited flaoting point precision, an error message was issued. on 32 bit architectures. The concerned check for equality check is now. a bit more forgiving.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4212
https://github.com/root-project/root/pull/4212:24,deployability,fail,failure,24,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited flaoting point precision, an error message was issued. on 32 bit architectures. The concerned check for equality check is now. a bit more forgiving.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4212
https://github.com/root-project/root/pull/4212:98,integrability,messag,message,98,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited flaoting point precision, an error message was issued. on 32 bit architectures. The concerned check for equality check is now. a bit more forgiving.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4212
https://github.com/root-project/root/pull/4212:98,interoperability,messag,message,98,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited flaoting point precision, an error message was issued. on 32 bit architectures. The concerned check for equality check is now. a bit more forgiving.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4212
https://github.com/root-project/root/pull/4212:128,interoperability,architectur,architectures,128,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited flaoting point precision, an error message was issued. on 32 bit architectures. The concerned check for equality check is now. a bit more forgiving.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4212
https://github.com/root-project/root/pull/4212:147,modifiability,concern,concerned,147,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited flaoting point precision, an error message was issued. on 32 bit architectures. The concerned check for equality check is now. a bit more forgiving.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4212
https://github.com/root-project/root/pull/4212:24,performance,failur,failure,24,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited flaoting point precision, an error message was issued. on 32 bit architectures. The concerned check for equality check is now. a bit more forgiving.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4212
https://github.com/root-project/root/pull/4212:92,performance,error,error,92,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited flaoting point precision, an error message was issued. on 32 bit architectures. The concerned check for equality check is now. a bit more forgiving.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4212
https://github.com/root-project/root/pull/4212:24,reliability,fail,failure,24,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited flaoting point precision, an error message was issued. on 32 bit architectures. The concerned check for equality check is now. a bit more forgiving.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4212
https://github.com/root-project/root/pull/4212:92,safety,error,error,92,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited flaoting point precision, an error message was issued. on 32 bit architectures. The concerned check for equality check is now. a bit more forgiving.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4212
https://github.com/root-project/root/pull/4212:147,testability,concern,concerned,147,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited flaoting point precision, an error message was issued. on 32 bit architectures. The concerned check for equality check is now. a bit more forgiving.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4212
https://github.com/root-project/root/pull/4212:92,usability,error,error,92,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited flaoting point precision, an error message was issued. on 32 bit architectures. The concerned check for equality check is now. a bit more forgiving.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4212
https://github.com/root-project/root/pull/4213:155,usability,command,command,155,[cling] Fix SIGSEGV after executing the `.stats decl' metacommand (ROOT-9934); Fixes a SIGSEGV in Cling after executing the `.stats decl' metacommand. The command may trigger deserialization; added a PushTransactionRAII.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4213
https://github.com/root-project/root/pull/4214:153,energy efficiency,current,currently,153,[cling] Support for redefinitions (DefinitionShadower); Add Cling support for function/type/var redefinitions. Redefinition of a namespace member is not currently supported (should we add support in the future?).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:8,usability,Support,Support,8,[cling] Support for redefinitions (DefinitionShadower); Add Cling support for function/type/var redefinitions. Redefinition of a namespace member is not currently supported (should we add support in the future?).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:66,usability,support,support,66,[cling] Support for redefinitions (DefinitionShadower); Add Cling support for function/type/var redefinitions. Redefinition of a namespace member is not currently supported (should we add support in the future?).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:163,usability,support,supported,163,[cling] Support for redefinitions (DefinitionShadower); Add Cling support for function/type/var redefinitions. Redefinition of a namespace member is not currently supported (should we add support in the future?).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:188,usability,support,support,188,[cling] Support for redefinitions (DefinitionShadower); Add Cling support for function/type/var redefinitions. Redefinition of a namespace member is not currently supported (should we add support in the future?).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4215:72,deployability,patch,patch,72,[ROOT-10272] Fix one-off in the buffer to std::string conversion.; This patch should fix ROOT-10272.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4215
https://github.com/root-project/root/pull/4215:32,integrability,buffer,buffer,32,[ROOT-10272] Fix one-off in the buffer to std::string conversion.; This patch should fix ROOT-10272.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4215
https://github.com/root-project/root/pull/4215:54,interoperability,convers,conversion,54,[ROOT-10272] Fix one-off in the buffer to std::string conversion.; This patch should fix ROOT-10272.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4215
https://github.com/root-project/root/pull/4215:72,safety,patch,patch,72,[ROOT-10272] Fix one-off in the buffer to std::string conversion.; This patch should fix ROOT-10272.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4215
https://github.com/root-project/root/pull/4215:72,security,patch,patch,72,[ROOT-10272] Fix one-off in the buffer to std::string conversion.; This patch should fix ROOT-10272.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4215
https://github.com/root-project/root/pull/4216:17,energy efficiency,Load,LoadPCM,17,[tcling] Improve LoadPCM Diags;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4216
https://github.com/root-project/root/pull/4216:17,performance,Load,LoadPCM,17,[tcling] Improve LoadPCM Diags;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4216
https://github.com/root-project/root/pull/4217:46,safety,test,tests,46,[ntuple] Use deterministic file names in unit tests;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4217
https://github.com/root-project/root/pull/4217:41,testability,unit,unit,41,[ntuple] Use deterministic file names in unit tests;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4217
https://github.com/root-project/root/pull/4217:46,testability,test,tests,46,[ntuple] Use deterministic file names in unit tests;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4217
https://github.com/root-project/root/pull/4218:24,availability,failur,failure,24,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited floating point precision, an error message was issued. on 32 bit architectures. The concerned check for equality is now. a bit more forgiving. (cherry picked from commit b8235e91725d94dc6231e8006e2de53dc1b2671e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4218
https://github.com/root-project/root/pull/4218:92,availability,error,error,92,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited floating point precision, an error message was issued. on 32 bit architectures. The concerned check for equality is now. a bit more forgiving. (cherry picked from commit b8235e91725d94dc6231e8006e2de53dc1b2671e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4218
https://github.com/root-project/root/pull/4218:24,deployability,fail,failure,24,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited floating point precision, an error message was issued. on 32 bit architectures. The concerned check for equality is now. a bit more forgiving. (cherry picked from commit b8235e91725d94dc6231e8006e2de53dc1b2671e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4218
https://github.com/root-project/root/pull/4218:98,integrability,messag,message,98,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited floating point precision, an error message was issued. on 32 bit architectures. The concerned check for equality is now. a bit more forgiving. (cherry picked from commit b8235e91725d94dc6231e8006e2de53dc1b2671e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4218
https://github.com/root-project/root/pull/4218:98,interoperability,messag,message,98,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited floating point precision, an error message was issued. on 32 bit architectures. The concerned check for equality is now. a bit more forgiving. (cherry picked from commit b8235e91725d94dc6231e8006e2de53dc1b2671e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4218
https://github.com/root-project/root/pull/4218:128,interoperability,architectur,architectures,128,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited floating point precision, an error message was issued. on 32 bit architectures. The concerned check for equality is now. a bit more forgiving. (cherry picked from commit b8235e91725d94dc6231e8006e2de53dc1b2671e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4218
https://github.com/root-project/root/pull/4218:147,modifiability,concern,concerned,147,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited floating point precision, an error message was issued. on 32 bit architectures. The concerned check for equality is now. a bit more forgiving. (cherry picked from commit b8235e91725d94dc6231e8006e2de53dc1b2671e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4218
https://github.com/root-project/root/pull/4218:24,performance,failur,failure,24,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited floating point precision, an error message was issued. on 32 bit architectures. The concerned check for equality is now. a bit more forgiving. (cherry picked from commit b8235e91725d94dc6231e8006e2de53dc1b2671e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4218
https://github.com/root-project/root/pull/4218:92,performance,error,error,92,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited floating point precision, an error message was issued. on 32 bit architectures. The concerned check for equality is now. a bit more forgiving. (cherry picked from commit b8235e91725d94dc6231e8006e2de53dc1b2671e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4218
https://github.com/root-project/root/pull/4218:24,reliability,fail,failure,24,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited floating point precision, an error message was issued. on 32 bit architectures. The concerned check for equality is now. a bit more forgiving. (cherry picked from commit b8235e91725d94dc6231e8006e2de53dc1b2671e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4218
https://github.com/root-project/root/pull/4218:92,safety,error,error,92,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited floating point precision, an error message was issued. on 32 bit architectures. The concerned check for equality is now. a bit more forgiving. (cherry picked from commit b8235e91725d94dc6231e8006e2de53dc1b2671e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4218
https://github.com/root-project/root/pull/4218:147,testability,concern,concerned,147,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited floating point precision, an error message was issued. on 32 bit architectures. The concerned check for equality is now. a bit more forgiving. (cherry picked from commit b8235e91725d94dc6231e8006e2de53dc1b2671e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4218
https://github.com/root-project/root/pull/4218:92,usability,error,error,92,"[RF] Fix stressRooStats failure on 32 bit.; Because of limited floating point precision, an error message was issued. on 32 bit architectures. The concerned check for equality is now. a bit more forgiving. (cherry picked from commit b8235e91725d94dc6231e8006e2de53dc1b2671e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4218
https://github.com/root-project/root/pull/4219:29,deployability,build,builds,29,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:48,deployability,build,builds,48,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:64,deployability,modul,modules,64,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:116,deployability,contain,contained,116,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:143,deployability,modul,module,143,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:155,deployability,build,build,155,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:194,deployability,depend,dependencies,194,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:290,deployability,modul,module,290,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:303,deployability,patch,patch,303,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:375,deployability,modul,modules,375,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:469,deployability,modul,module,469,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:428,energy efficiency,sustainab,sustainable,428,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:194,integrability,depend,dependencies,194,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:64,modifiability,modul,modules,64,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:143,modifiability,modul,module,143,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:194,modifiability,depend,dependencies,194,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:290,modifiability,modul,module,290,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:309,modifiability,exten,extends,309,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:375,modifiability,modul,modules,375,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:469,modifiability,modul,module,469,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:523,modifiability,refact,refactoring,523,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:523,performance,refactor,refactoring,523,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:64,safety,modul,modules,64,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:143,safety,modul,module,143,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:194,safety,depend,dependencies,194,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:290,safety,modul,module,290,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:303,safety,patch,patch,303,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:375,safety,modul,modules,375,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:469,safety,modul,module,469,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:303,security,patch,patch,303,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4219:194,testability,depend,dependencies,194,[cxxmodules] Fix incremental builds.; Rootcling builds a set of modules implicitly based on #including of a header. contained in the nominated module. The build system has no way to track such. dependencies and even if it could there would be no rule to execute to. regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated. modules and delete them (to regenerate them). A more sustainable solution is to. request each module to be built explicitly which requires a bit of refactoring. in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4220:130,performance,parallel,parallel,130,[RDF] Do not let Snapshot'ed TTrees spawn nested TBB tasks; This mitigates ROOT-10269 by avoiding nested task execution due. to a parallel Snapshot.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4220
https://github.com/root-project/root/pull/4220:89,safety,avoid,avoiding,89,[RDF] Do not let Snapshot'ed TTrees spawn nested TBB tasks; This mitigates ROOT-10269 by avoiding nested task execution due. to a parallel Snapshot.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4220
https://github.com/root-project/root/pull/4221:138,performance,parallel,parallel,138,[RDF] Do not let Snapshot'ed TTrees spawn nested TBB tasks (v6.18); This mitigates ROOT-10269 by avoiding nested task execution due. to a parallel Snapshot.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4221
https://github.com/root-project/root/pull/4221:97,safety,avoid,avoiding,97,[RDF] Do not let Snapshot'ed TTrees spawn nested TBB tasks (v6.18); This mitigates ROOT-10269 by avoiding nested task execution due. to a parallel Snapshot.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4221
https://github.com/root-project/root/pull/4222:138,availability,operat,operator,138,"[TCling] Fixes issue with the kIsInlined extra property in commit f8420b18; For some reason, calling `isInlined()` member function on an `operator new()` FunctionDecl does not return the expected result for an inline-defined function. This patch workarounds the aforementioned problem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4222
https://github.com/root-project/root/pull/4222:240,deployability,patch,patch,240,"[TCling] Fixes issue with the kIsInlined extra property in commit f8420b18; For some reason, calling `isInlined()` member function on an `operator new()` FunctionDecl does not return the expected result for an inline-defined function. This patch workarounds the aforementioned problem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4222
https://github.com/root-project/root/pull/4222:167,reliability,doe,does,167,"[TCling] Fixes issue with the kIsInlined extra property in commit f8420b18; For some reason, calling `isInlined()` member function on an `operator new()` FunctionDecl does not return the expected result for an inline-defined function. This patch workarounds the aforementioned problem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4222
https://github.com/root-project/root/pull/4222:240,safety,patch,patch,240,"[TCling] Fixes issue with the kIsInlined extra property in commit f8420b18; For some reason, calling `isInlined()` member function on an `operator new()` FunctionDecl does not return the expected result for an inline-defined function. This patch workarounds the aforementioned problem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4222
https://github.com/root-project/root/pull/4222:240,security,patch,patch,240,"[TCling] Fixes issue with the kIsInlined extra property in commit f8420b18; For some reason, calling `isInlined()` member function on an `operator new()` FunctionDecl does not return the expected result for an inline-defined function. This patch workarounds the aforementioned problem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4222
https://github.com/root-project/root/pull/4223:97,deployability,manag,manage,97,[Web geom] provide control GUI for geometry viewer; Use very nice feature of openui5 SplitApp to manage different pages together! * Re-implement GUI which was designed before using dat.GUI. * Change a lot TGeoPainter interface - especially for setting control parameters. * Newest JSROOT code with several improvements.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4223
https://github.com/root-project/root/pull/4223:97,energy efficiency,manag,manage,97,[Web geom] provide control GUI for geometry viewer; Use very nice feature of openui5 SplitApp to manage different pages together! * Re-implement GUI which was designed before using dat.GUI. * Change a lot TGeoPainter interface - especially for setting control parameters. * Newest JSROOT code with several improvements.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4223
https://github.com/root-project/root/pull/4223:217,integrability,interfac,interface,217,[Web geom] provide control GUI for geometry viewer; Use very nice feature of openui5 SplitApp to manage different pages together! * Re-implement GUI which was designed before using dat.GUI. * Change a lot TGeoPainter interface - especially for setting control parameters. * Newest JSROOT code with several improvements.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4223
https://github.com/root-project/root/pull/4223:217,interoperability,interfac,interface,217,[Web geom] provide control GUI for geometry viewer; Use very nice feature of openui5 SplitApp to manage different pages together! * Re-implement GUI which was designed before using dat.GUI. * Change a lot TGeoPainter interface - especially for setting control parameters. * Newest JSROOT code with several improvements.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4223
https://github.com/root-project/root/pull/4223:217,modifiability,interfac,interface,217,[Web geom] provide control GUI for geometry viewer; Use very nice feature of openui5 SplitApp to manage different pages together! * Re-implement GUI which was designed before using dat.GUI. * Change a lot TGeoPainter interface - especially for setting control parameters. * Newest JSROOT code with several improvements.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4223
https://github.com/root-project/root/pull/4223:260,modifiability,paramet,parameters,260,[Web geom] provide control GUI for geometry viewer; Use very nice feature of openui5 SplitApp to manage different pages together! * Re-implement GUI which was designed before using dat.GUI. * Change a lot TGeoPainter interface - especially for setting control parameters. * Newest JSROOT code with several improvements.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4223
https://github.com/root-project/root/pull/4223:97,safety,manag,manage,97,[Web geom] provide control GUI for geometry viewer; Use very nice feature of openui5 SplitApp to manage different pages together! * Re-implement GUI which was designed before using dat.GUI. * Change a lot TGeoPainter interface - especially for setting control parameters. * Newest JSROOT code with several improvements.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4223
https://github.com/root-project/root/pull/4223:19,security,control,control,19,[Web geom] provide control GUI for geometry viewer; Use very nice feature of openui5 SplitApp to manage different pages together! * Re-implement GUI which was designed before using dat.GUI. * Change a lot TGeoPainter interface - especially for setting control parameters. * Newest JSROOT code with several improvements.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4223
https://github.com/root-project/root/pull/4223:252,security,control,control,252,[Web geom] provide control GUI for geometry viewer; Use very nice feature of openui5 SplitApp to manage different pages together! * Re-implement GUI which was designed before using dat.GUI. * Change a lot TGeoPainter interface - especially for setting control parameters. * Newest JSROOT code with several improvements.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4223
https://github.com/root-project/root/pull/4223:19,testability,control,control,19,[Web geom] provide control GUI for geometry viewer; Use very nice feature of openui5 SplitApp to manage different pages together! * Re-implement GUI which was designed before using dat.GUI. * Change a lot TGeoPainter interface - especially for setting control parameters. * Newest JSROOT code with several improvements.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4223
https://github.com/root-project/root/pull/4223:252,testability,control,control,252,[Web geom] provide control GUI for geometry viewer; Use very nice feature of openui5 SplitApp to manage different pages together! * Re-implement GUI which was designed before using dat.GUI. * Change a lot TGeoPainter interface - especially for setting control parameters. * Newest JSROOT code with several improvements.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4223
https://github.com/root-project/root/pull/4224:194,availability,state,state,194,"ROOT-10254: FoldFileOutput breaks output log; Problem: When creating the separate factory for per-fold output, the silent flag was given. This suppresses all TMVA logging output (touches global state). Solution: The silent flag is not passed to the per-fold factory automatically anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4224
https://github.com/root-project/root/pull/4224:41,deployability,log,log,41,"ROOT-10254: FoldFileOutput breaks output log; Problem: When creating the separate factory for per-fold output, the silent flag was given. This suppresses all TMVA logging output (touches global state). Solution: The silent flag is not passed to the per-fold factory automatically anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4224
https://github.com/root-project/root/pull/4224:163,deployability,log,logging,163,"ROOT-10254: FoldFileOutput breaks output log; Problem: When creating the separate factory for per-fold output, the silent flag was given. This suppresses all TMVA logging output (touches global state). Solution: The silent flag is not passed to the per-fold factory automatically anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4224
https://github.com/root-project/root/pull/4224:266,deployability,automat,automatically,266,"ROOT-10254: FoldFileOutput breaks output log; Problem: When creating the separate factory for per-fold output, the silent flag was given. This suppresses all TMVA logging output (touches global state). Solution: The silent flag is not passed to the per-fold factory automatically anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4224
https://github.com/root-project/root/pull/4224:194,integrability,state,state,194,"ROOT-10254: FoldFileOutput breaks output log; Problem: When creating the separate factory for per-fold output, the silent flag was given. This suppresses all TMVA logging output (touches global state). Solution: The silent flag is not passed to the per-fold factory automatically anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4224
https://github.com/root-project/root/pull/4224:41,safety,log,log,41,"ROOT-10254: FoldFileOutput breaks output log; Problem: When creating the separate factory for per-fold output, the silent flag was given. This suppresses all TMVA logging output (touches global state). Solution: The silent flag is not passed to the per-fold factory automatically anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4224
https://github.com/root-project/root/pull/4224:163,safety,log,logging,163,"ROOT-10254: FoldFileOutput breaks output log; Problem: When creating the separate factory for per-fold output, the silent flag was given. This suppresses all TMVA logging output (touches global state). Solution: The silent flag is not passed to the per-fold factory automatically anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4224
https://github.com/root-project/root/pull/4224:41,security,log,log,41,"ROOT-10254: FoldFileOutput breaks output log; Problem: When creating the separate factory for per-fold output, the silent flag was given. This suppresses all TMVA logging output (touches global state). Solution: The silent flag is not passed to the per-fold factory automatically anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4224
https://github.com/root-project/root/pull/4224:163,security,log,logging,163,"ROOT-10254: FoldFileOutput breaks output log; Problem: When creating the separate factory for per-fold output, the silent flag was given. This suppresses all TMVA logging output (touches global state). Solution: The silent flag is not passed to the per-fold factory automatically anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4224
https://github.com/root-project/root/pull/4224:41,testability,log,log,41,"ROOT-10254: FoldFileOutput breaks output log; Problem: When creating the separate factory for per-fold output, the silent flag was given. This suppresses all TMVA logging output (touches global state). Solution: The silent flag is not passed to the per-fold factory automatically anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4224
https://github.com/root-project/root/pull/4224:163,testability,log,logging,163,"ROOT-10254: FoldFileOutput breaks output log; Problem: When creating the separate factory for per-fold output, the silent flag was given. This suppresses all TMVA logging output (touches global state). Solution: The silent flag is not passed to the per-fold factory automatically anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4224
https://github.com/root-project/root/pull/4224:266,testability,automat,automatically,266,"ROOT-10254: FoldFileOutput breaks output log; Problem: When creating the separate factory for per-fold output, the silent flag was given. This suppresses all TMVA logging output (touches global state). Solution: The silent flag is not passed to the per-fold factory automatically anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4224
https://github.com/root-project/root/pull/4230:58,deployability,depend,dependencies,58,[tcling] Do not trace weak symbols when resolving library dependencies.; This removes the false positive dependencies in the rootbench builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4230
https://github.com/root-project/root/pull/4230:105,deployability,depend,dependencies,105,[tcling] Do not trace weak symbols when resolving library dependencies.; This removes the false positive dependencies in the rootbench builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4230
https://github.com/root-project/root/pull/4230:135,deployability,build,builds,135,[tcling] Do not trace weak symbols when resolving library dependencies.; This removes the false positive dependencies in the rootbench builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4230
https://github.com/root-project/root/pull/4230:58,integrability,depend,dependencies,58,[tcling] Do not trace weak symbols when resolving library dependencies.; This removes the false positive dependencies in the rootbench builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4230
https://github.com/root-project/root/pull/4230:105,integrability,depend,dependencies,105,[tcling] Do not trace weak symbols when resolving library dependencies.; This removes the false positive dependencies in the rootbench builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4230
https://github.com/root-project/root/pull/4230:58,modifiability,depend,dependencies,58,[tcling] Do not trace weak symbols when resolving library dependencies.; This removes the false positive dependencies in the rootbench builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4230
https://github.com/root-project/root/pull/4230:105,modifiability,depend,dependencies,105,[tcling] Do not trace weak symbols when resolving library dependencies.; This removes the false positive dependencies in the rootbench builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4230
https://github.com/root-project/root/pull/4230:58,safety,depend,dependencies,58,[tcling] Do not trace weak symbols when resolving library dependencies.; This removes the false positive dependencies in the rootbench builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4230
https://github.com/root-project/root/pull/4230:105,safety,depend,dependencies,105,[tcling] Do not trace weak symbols when resolving library dependencies.; This removes the false positive dependencies in the rootbench builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4230
https://github.com/root-project/root/pull/4230:16,testability,trace,trace,16,[tcling] Do not trace weak symbols when resolving library dependencies.; This removes the false positive dependencies in the rootbench builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4230
https://github.com/root-project/root/pull/4230:58,testability,depend,dependencies,58,[tcling] Do not trace weak symbols when resolving library dependencies.; This removes the false positive dependencies in the rootbench builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4230
https://github.com/root-project/root/pull/4230:105,testability,depend,dependencies,105,[tcling] Do not trace weak symbols when resolving library dependencies.; This removes the false positive dependencies in the rootbench builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4230
https://github.com/root-project/root/pull/4231:217,deployability,contain,contain,217,"[ntuple] Add TBrowser support; This PR creates a new library ntuplebrowse, which allows to display the fields of a ntuple (equivalent of branch/leaf in TTree) in the TBrowser and displays a histogram for fields which contain numeric data.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4231
https://github.com/root-project/root/pull/4231:22,usability,support,support,22,"[ntuple] Add TBrowser support; This PR creates a new library ntuplebrowse, which allows to display the fields of a ntuple (equivalent of branch/leaf in TTree) in the TBrowser and displays a histogram for fields which contain numeric data.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4231
https://github.com/root-project/root/pull/4232:64,deployability,version,version,64,Fixing the jupyter Kernel to be able to handle exceptions; ROOT version of https://github.com/root-project/cling/pull/272,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4232
https://github.com/root-project/root/pull/4232:64,integrability,version,version,64,Fixing the jupyter Kernel to be able to handle exceptions; ROOT version of https://github.com/root-project/cling/pull/272,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4232
https://github.com/root-project/root/pull/4232:64,modifiability,version,version,64,Fixing the jupyter Kernel to be able to handle exceptions; ROOT version of https://github.com/root-project/cling/pull/272,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4232
https://github.com/root-project/root/pull/4232:47,safety,except,exceptions,47,Fixing the jupyter Kernel to be able to handle exceptions; ROOT version of https://github.com/root-project/cling/pull/272,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4232
https://github.com/root-project/root/pull/4233:161,deployability,scale,scale,161,"[Web geom] save image, fix pgon; 1. Provide image storing in geometry viewer. Can be triggered from client and from server side. 2. Fix pgon shape - was missing scale factor. 3. Improve GED editor for object attributes in TWebCanvas6.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4233
https://github.com/root-project/root/pull/4233:161,energy efficiency,scale,scale,161,"[Web geom] save image, fix pgon; 1. Provide image storing in geometry viewer. Can be triggered from client and from server side. 2. Fix pgon shape - was missing scale factor. 3. Improve GED editor for object attributes in TWebCanvas6.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4233
https://github.com/root-project/root/pull/4233:161,modifiability,scal,scale,161,"[Web geom] save image, fix pgon; 1. Provide image storing in geometry viewer. Can be triggered from client and from server side. 2. Fix pgon shape - was missing scale factor. 3. Improve GED editor for object attributes in TWebCanvas6.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4233
https://github.com/root-project/root/pull/4233:161,performance,scale,scale,161,"[Web geom] save image, fix pgon; 1. Provide image storing in geometry viewer. Can be triggered from client and from server side. 2. Fix pgon shape - was missing scale factor. 3. Improve GED editor for object attributes in TWebCanvas6.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4233
https://github.com/root-project/root/pull/4234:101,testability,verif,verifies,101,"[ntuple] Add support for std::variant; While this might not be a critical type to support per se, it verifies that we can store references (offset columns) to multiple pointee fields (the different types/fields of the variant).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4234
https://github.com/root-project/root/pull/4234:13,usability,support,support,13,"[ntuple] Add support for std::variant; While this might not be a critical type to support per se, it verifies that we can store references (offset columns) to multiple pointee fields (the different types/fields of the variant).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4234
https://github.com/root-project/root/pull/4234:82,usability,support,support,82,"[ntuple] Add support for std::variant; While this might not be a critical type to support per se, it verifies that we can store references (offset columns) to multiple pointee fields (the different types/fields of the variant).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4234
https://github.com/root-project/root/pull/4235:41,testability,Simpl,Simplify,41,[rootcling] Deep is always set to false. Simplify. NFC;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4235
https://github.com/root-project/root/pull/4235:41,usability,Simpl,Simplify,41,[rootcling] Deep is always set to false. Simplify. NFC;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4235
https://github.com/root-project/root/pull/4236:32,modifiability,variab,variable,32,[rootcling] Remove always false variable requestAllSymbols. NFC;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4236
https://github.com/root-project/root/pull/4239:245,integrability,interfac,interface,245,"[io] use override/final specifier for TBuffer classes; While TBuffer has many virtual methods, provide `override` and `final` specifiers for all derived classes. This will help to maintain code in the future - any bogus changes in TBuffer class interface will be reported already during compilation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:24,interoperability,specif,specifier,24,"[io] use override/final specifier for TBuffer classes; While TBuffer has many virtual methods, provide `override` and `final` specifiers for all derived classes. This will help to maintain code in the future - any bogus changes in TBuffer class interface will be reported already during compilation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:126,interoperability,specif,specifiers,126,"[io] use override/final specifier for TBuffer classes; While TBuffer has many virtual methods, provide `override` and `final` specifiers for all derived classes. This will help to maintain code in the future - any bogus changes in TBuffer class interface will be reported already during compilation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:245,interoperability,interfac,interface,245,"[io] use override/final specifier for TBuffer classes; While TBuffer has many virtual methods, provide `override` and `final` specifiers for all derived classes. This will help to maintain code in the future - any bogus changes in TBuffer class interface will be reported already during compilation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:180,modifiability,maintain,maintain,180,"[io] use override/final specifier for TBuffer classes; While TBuffer has many virtual methods, provide `override` and `final` specifiers for all derived classes. This will help to maintain code in the future - any bogus changes in TBuffer class interface will be reported already during compilation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:245,modifiability,interfac,interface,245,"[io] use override/final specifier for TBuffer classes; While TBuffer has many virtual methods, provide `override` and `final` specifiers for all derived classes. This will help to maintain code in the future - any bogus changes in TBuffer class interface will be reported already during compilation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:180,safety,maintain,maintain,180,"[io] use override/final specifier for TBuffer classes; While TBuffer has many virtual methods, provide `override` and `final` specifiers for all derived classes. This will help to maintain code in the future - any bogus changes in TBuffer class interface will be reported already during compilation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:172,usability,help,help,172,"[io] use override/final specifier for TBuffer classes; While TBuffer has many virtual methods, provide `override` and `final` specifiers for all derived classes. This will help to maintain code in the future - any bogus changes in TBuffer class interface will be reported already during compilation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4240:13,performance,multi-thread,multi-threading,13,[ntuple] Add multi-threading support to RDF data source;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4240
https://github.com/root-project/root/pull/4240:29,usability,support,support,29,[ntuple] Add multi-threading support to RDF data source;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4240
https://github.com/root-project/root/pull/4243:31,deployability,build,build,31,"[CMake] Add warning if LLVM is build without optimisations.; - When the LLVM_BUILD_TYPE is Release, but the CXX_FLAGS are empty, a. warning is issued. - When configuring, fix the order in which compiler flags are printed. This is the issue mentioned on mattermost. Axel proposed to issue a warning in this case. The question is if this warning catches all cases where build types might be set up wrongly or if the `CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}` should be tested. I also fixed the order in which the compiler flags are printed. I didn't get to this before cache-variable PR where I promised to do this got merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4243
https://github.com/root-project/root/pull/4243:91,deployability,Releas,Release,91,"[CMake] Add warning if LLVM is build without optimisations.; - When the LLVM_BUILD_TYPE is Release, but the CXX_FLAGS are empty, a. warning is issued. - When configuring, fix the order in which compiler flags are printed. This is the issue mentioned on mattermost. Axel proposed to issue a warning in this case. The question is if this warning catches all cases where build types might be set up wrongly or if the `CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}` should be tested. I also fixed the order in which the compiler flags are printed. I didn't get to this before cache-variable PR where I promised to do this got merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4243
https://github.com/root-project/root/pull/4243:368,deployability,build,build,368,"[CMake] Add warning if LLVM is build without optimisations.; - When the LLVM_BUILD_TYPE is Release, but the CXX_FLAGS are empty, a. warning is issued. - When configuring, fix the order in which compiler flags are printed. This is the issue mentioned on mattermost. Axel proposed to issue a warning in this case. The question is if this warning catches all cases where build types might be set up wrongly or if the `CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}` should be tested. I also fixed the order in which the compiler flags are printed. I didn't get to this before cache-variable PR where I promised to do this got merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4243
https://github.com/root-project/root/pull/4243:45,energy efficiency,optim,optimisations,45,"[CMake] Add warning if LLVM is build without optimisations.; - When the LLVM_BUILD_TYPE is Release, but the CXX_FLAGS are empty, a. warning is issued. - When configuring, fix the order in which compiler flags are printed. This is the issue mentioned on mattermost. Axel proposed to issue a warning in this case. The question is if this warning catches all cases where build types might be set up wrongly or if the `CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}` should be tested. I also fixed the order in which the compiler flags are printed. I didn't get to this before cache-variable PR where I promised to do this got merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4243
https://github.com/root-project/root/pull/4243:158,integrability,configur,configuring,158,"[CMake] Add warning if LLVM is build without optimisations.; - When the LLVM_BUILD_TYPE is Release, but the CXX_FLAGS are empty, a. warning is issued. - When configuring, fix the order in which compiler flags are printed. This is the issue mentioned on mattermost. Axel proposed to issue a warning in this case. The question is if this warning catches all cases where build types might be set up wrongly or if the `CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}` should be tested. I also fixed the order in which the compiler flags are printed. I didn't get to this before cache-variable PR where I promised to do this got merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4243
https://github.com/root-project/root/pull/4243:158,modifiability,configur,configuring,158,"[CMake] Add warning if LLVM is build without optimisations.; - When the LLVM_BUILD_TYPE is Release, but the CXX_FLAGS are empty, a. warning is issued. - When configuring, fix the order in which compiler flags are printed. This is the issue mentioned on mattermost. Axel proposed to issue a warning in this case. The question is if this warning catches all cases where build types might be set up wrongly or if the `CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}` should be tested. I also fixed the order in which the compiler flags are printed. I didn't get to this before cache-variable PR where I promised to do this got merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4243
https://github.com/root-project/root/pull/4243:567,modifiability,variab,variable,567,"[CMake] Add warning if LLVM is build without optimisations.; - When the LLVM_BUILD_TYPE is Release, but the CXX_FLAGS are empty, a. warning is issued. - When configuring, fix the order in which compiler flags are printed. This is the issue mentioned on mattermost. Axel proposed to issue a warning in this case. The question is if this warning catches all cases where build types might be set up wrongly or if the `CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}` should be tested. I also fixed the order in which the compiler flags are printed. I didn't get to this before cache-variable PR where I promised to do this got merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4243
https://github.com/root-project/root/pull/4243:561,performance,cach,cache-variable,561,"[CMake] Add warning if LLVM is build without optimisations.; - When the LLVM_BUILD_TYPE is Release, but the CXX_FLAGS are empty, a. warning is issued. - When configuring, fix the order in which compiler flags are printed. This is the issue mentioned on mattermost. Axel proposed to issue a warning in this case. The question is if this warning catches all cases where build types might be set up wrongly or if the `CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}` should be tested. I also fixed the order in which the compiler flags are printed. I didn't get to this before cache-variable PR where I promised to do this got merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4243
https://github.com/root-project/root/pull/4243:461,safety,test,tested,461,"[CMake] Add warning if LLVM is build without optimisations.; - When the LLVM_BUILD_TYPE is Release, but the CXX_FLAGS are empty, a. warning is issued. - When configuring, fix the order in which compiler flags are printed. This is the issue mentioned on mattermost. Axel proposed to issue a warning in this case. The question is if this warning catches all cases where build types might be set up wrongly or if the `CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}` should be tested. I also fixed the order in which the compiler flags are printed. I didn't get to this before cache-variable PR where I promised to do this got merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4243
https://github.com/root-project/root/pull/4243:158,security,configur,configuring,158,"[CMake] Add warning if LLVM is build without optimisations.; - When the LLVM_BUILD_TYPE is Release, but the CXX_FLAGS are empty, a. warning is issued. - When configuring, fix the order in which compiler flags are printed. This is the issue mentioned on mattermost. Axel proposed to issue a warning in this case. The question is if this warning catches all cases where build types might be set up wrongly or if the `CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}` should be tested. I also fixed the order in which the compiler flags are printed. I didn't get to this before cache-variable PR where I promised to do this got merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4243
https://github.com/root-project/root/pull/4243:461,testability,test,tested,461,"[CMake] Add warning if LLVM is build without optimisations.; - When the LLVM_BUILD_TYPE is Release, but the CXX_FLAGS are empty, a. warning is issued. - When configuring, fix the order in which compiler flags are printed. This is the issue mentioned on mattermost. Axel proposed to issue a warning in this case. The question is if this warning catches all cases where build types might be set up wrongly or if the `CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}` should be tested. I also fixed the order in which the compiler flags are printed. I didn't get to this before cache-variable PR where I promised to do this got merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4243
https://github.com/root-project/root/pull/4244:279,deployability,manag,manage,279,"[Cling] Improve help message for .x, allow macros with main.; - When trying to execute a macro with .x and the corresponding function is. not found, a more informative warning is issued. - Further, the interpreter can now fall back to main() if defined. In local tests, I didn't manage to trigger a clash with the ""real"" main. I tried to define both. - `int main()` and. - `int main(int argc, char** argv)`,. but it just compiles and does the right thing (either it calls with the correct parameters or it complains that the parameters don't match).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:279,energy efficiency,manag,manage,279,"[Cling] Improve help message for .x, allow macros with main.; - When trying to execute a macro with .x and the corresponding function is. not found, a more informative warning is issued. - Further, the interpreter can now fall back to main() if defined. In local tests, I didn't manage to trigger a clash with the ""real"" main. I tried to define both. - `int main()` and. - `int main(int argc, char** argv)`,. but it just compiles and does the right thing (either it calls with the correct parameters or it complains that the parameters don't match).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:21,integrability,messag,message,21,"[Cling] Improve help message for .x, allow macros with main.; - When trying to execute a macro with .x and the corresponding function is. not found, a more informative warning is issued. - Further, the interpreter can now fall back to main() if defined. In local tests, I didn't manage to trigger a clash with the ""real"" main. I tried to define both. - `int main()` and. - `int main(int argc, char** argv)`,. but it just compiles and does the right thing (either it calls with the correct parameters or it complains that the parameters don't match).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:21,interoperability,messag,message,21,"[Cling] Improve help message for .x, allow macros with main.; - When trying to execute a macro with .x and the corresponding function is. not found, a more informative warning is issued. - Further, the interpreter can now fall back to main() if defined. In local tests, I didn't manage to trigger a clash with the ""real"" main. I tried to define both. - `int main()` and. - `int main(int argc, char** argv)`,. but it just compiles and does the right thing (either it calls with the correct parameters or it complains that the parameters don't match).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:489,modifiability,paramet,parameters,489,"[Cling] Improve help message for .x, allow macros with main.; - When trying to execute a macro with .x and the corresponding function is. not found, a more informative warning is issued. - Further, the interpreter can now fall back to main() if defined. In local tests, I didn't manage to trigger a clash with the ""real"" main. I tried to define both. - `int main()` and. - `int main(int argc, char** argv)`,. but it just compiles and does the right thing (either it calls with the correct parameters or it complains that the parameters don't match).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:525,modifiability,paramet,parameters,525,"[Cling] Improve help message for .x, allow macros with main.; - When trying to execute a macro with .x and the corresponding function is. not found, a more informative warning is issued. - Further, the interpreter can now fall back to main() if defined. In local tests, I didn't manage to trigger a clash with the ""real"" main. I tried to define both. - `int main()` and. - `int main(int argc, char** argv)`,. but it just compiles and does the right thing (either it calls with the correct parameters or it complains that the parameters don't match).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:434,reliability,doe,does,434,"[Cling] Improve help message for .x, allow macros with main.; - When trying to execute a macro with .x and the corresponding function is. not found, a more informative warning is issued. - Further, the interpreter can now fall back to main() if defined. In local tests, I didn't manage to trigger a clash with the ""real"" main. I tried to define both. - `int main()` and. - `int main(int argc, char** argv)`,. but it just compiles and does the right thing (either it calls with the correct parameters or it complains that the parameters don't match).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:263,safety,test,tests,263,"[Cling] Improve help message for .x, allow macros with main.; - When trying to execute a macro with .x and the corresponding function is. not found, a more informative warning is issued. - Further, the interpreter can now fall back to main() if defined. In local tests, I didn't manage to trigger a clash with the ""real"" main. I tried to define both. - `int main()` and. - `int main(int argc, char** argv)`,. but it just compiles and does the right thing (either it calls with the correct parameters or it complains that the parameters don't match).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:279,safety,manag,manage,279,"[Cling] Improve help message for .x, allow macros with main.; - When trying to execute a macro with .x and the corresponding function is. not found, a more informative warning is issued. - Further, the interpreter can now fall back to main() if defined. In local tests, I didn't manage to trigger a clash with the ""real"" main. I tried to define both. - `int main()` and. - `int main(int argc, char** argv)`,. but it just compiles and does the right thing (either it calls with the correct parameters or it complains that the parameters don't match).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:506,safety,compl,complains,506,"[Cling] Improve help message for .x, allow macros with main.; - When trying to execute a macro with .x and the corresponding function is. not found, a more informative warning is issued. - Further, the interpreter can now fall back to main() if defined. In local tests, I didn't manage to trigger a clash with the ""real"" main. I tried to define both. - `int main()` and. - `int main(int argc, char** argv)`,. but it just compiles and does the right thing (either it calls with the correct parameters or it complains that the parameters don't match).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:506,security,compl,complains,506,"[Cling] Improve help message for .x, allow macros with main.; - When trying to execute a macro with .x and the corresponding function is. not found, a more informative warning is issued. - Further, the interpreter can now fall back to main() if defined. In local tests, I didn't manage to trigger a clash with the ""real"" main. I tried to define both. - `int main()` and. - `int main(int argc, char** argv)`,. but it just compiles and does the right thing (either it calls with the correct parameters or it complains that the parameters don't match).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:263,testability,test,tests,263,"[Cling] Improve help message for .x, allow macros with main.; - When trying to execute a macro with .x and the corresponding function is. not found, a more informative warning is issued. - Further, the interpreter can now fall back to main() if defined. In local tests, I didn't manage to trigger a clash with the ""real"" main. I tried to define both. - `int main()` and. - `int main(int argc, char** argv)`,. but it just compiles and does the right thing (either it calls with the correct parameters or it complains that the parameters don't match).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:16,usability,help,help,16,"[Cling] Improve help message for .x, allow macros with main.; - When trying to execute a macro with .x and the corresponding function is. not found, a more informative warning is issued. - Further, the interpreter can now fall back to main() if defined. In local tests, I didn't manage to trigger a clash with the ""real"" main. I tried to define both. - `int main()` and. - `int main(int argc, char** argv)`,. but it just compiles and does the right thing (either it calls with the correct parameters or it complains that the parameters don't match).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4245:12,reliability,doe,doe,12,Fix a typo (doe -> does);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4245
https://github.com/root-project/root/pull/4245:19,reliability,doe,does,19,Fix a typo (doe -> does);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4245
https://github.com/root-project/root/pull/4246:158,integrability,inject,injection,158,"[PyROOT] Set correct type for enum values in namespaces; This PR completes the fix provided for ROOT-8935 with another fix for ROOT-10279, by preventing. the injection of the constants of a scoped enum into the scope of the enum. The bug surfaced as a result of modifying `PropertyProxy::Set` to fix ROOT-9835. There is still a pending issue identified while testing the fixes above: when a scoped enum belongs to the global namespace, once we do a lookup of that scoped enum its constants are added to the global space too and can be accessed as `ROOT.constant_name`, which is wrong. A subsequent PR will fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4246
https://github.com/root-project/root/pull/4246:587,integrability,sub,subsequent,587,"[PyROOT] Set correct type for enum values in namespaces; This PR completes the fix provided for ROOT-8935 with another fix for ROOT-10279, by preventing. the injection of the constants of a scoped enum into the scope of the enum. The bug surfaced as a result of modifying `PropertyProxy::Set` to fix ROOT-9835. There is still a pending issue identified while testing the fixes above: when a scoped enum belongs to the global namespace, once we do a lookup of that scoped enum its constants are added to the global space too and can be accessed as `ROOT.constant_name`, which is wrong. A subsequent PR will fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4246
https://github.com/root-project/root/pull/4246:65,safety,compl,completes,65,"[PyROOT] Set correct type for enum values in namespaces; This PR completes the fix provided for ROOT-8935 with another fix for ROOT-10279, by preventing. the injection of the constants of a scoped enum into the scope of the enum. The bug surfaced as a result of modifying `PropertyProxy::Set` to fix ROOT-9835. There is still a pending issue identified while testing the fixes above: when a scoped enum belongs to the global namespace, once we do a lookup of that scoped enum its constants are added to the global space too and can be accessed as `ROOT.constant_name`, which is wrong. A subsequent PR will fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4246
https://github.com/root-project/root/pull/4246:142,safety,prevent,preventing,142,"[PyROOT] Set correct type for enum values in namespaces; This PR completes the fix provided for ROOT-8935 with another fix for ROOT-10279, by preventing. the injection of the constants of a scoped enum into the scope of the enum. The bug surfaced as a result of modifying `PropertyProxy::Set` to fix ROOT-9835. There is still a pending issue identified while testing the fixes above: when a scoped enum belongs to the global namespace, once we do a lookup of that scoped enum its constants are added to the global space too and can be accessed as `ROOT.constant_name`, which is wrong. A subsequent PR will fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4246
https://github.com/root-project/root/pull/4246:359,safety,test,testing,359,"[PyROOT] Set correct type for enum values in namespaces; This PR completes the fix provided for ROOT-8935 with another fix for ROOT-10279, by preventing. the injection of the constants of a scoped enum into the scope of the enum. The bug surfaced as a result of modifying `PropertyProxy::Set` to fix ROOT-9835. There is still a pending issue identified while testing the fixes above: when a scoped enum belongs to the global namespace, once we do a lookup of that scoped enum its constants are added to the global space too and can be accessed as `ROOT.constant_name`, which is wrong. A subsequent PR will fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4246
https://github.com/root-project/root/pull/4246:65,security,compl,completes,65,"[PyROOT] Set correct type for enum values in namespaces; This PR completes the fix provided for ROOT-8935 with another fix for ROOT-10279, by preventing. the injection of the constants of a scoped enum into the scope of the enum. The bug surfaced as a result of modifying `PropertyProxy::Set` to fix ROOT-9835. There is still a pending issue identified while testing the fixes above: when a scoped enum belongs to the global namespace, once we do a lookup of that scoped enum its constants are added to the global space too and can be accessed as `ROOT.constant_name`, which is wrong. A subsequent PR will fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4246
https://github.com/root-project/root/pull/4246:142,security,preven,preventing,142,"[PyROOT] Set correct type for enum values in namespaces; This PR completes the fix provided for ROOT-8935 with another fix for ROOT-10279, by preventing. the injection of the constants of a scoped enum into the scope of the enum. The bug surfaced as a result of modifying `PropertyProxy::Set` to fix ROOT-9835. There is still a pending issue identified while testing the fixes above: when a scoped enum belongs to the global namespace, once we do a lookup of that scoped enum its constants are added to the global space too and can be accessed as `ROOT.constant_name`, which is wrong. A subsequent PR will fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4246
https://github.com/root-project/root/pull/4246:158,security,inject,injection,158,"[PyROOT] Set correct type for enum values in namespaces; This PR completes the fix provided for ROOT-8935 with another fix for ROOT-10279, by preventing. the injection of the constants of a scoped enum into the scope of the enum. The bug surfaced as a result of modifying `PropertyProxy::Set` to fix ROOT-9835. There is still a pending issue identified while testing the fixes above: when a scoped enum belongs to the global namespace, once we do a lookup of that scoped enum its constants are added to the global space too and can be accessed as `ROOT.constant_name`, which is wrong. A subsequent PR will fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4246
https://github.com/root-project/root/pull/4246:262,security,modif,modifying,262,"[PyROOT] Set correct type for enum values in namespaces; This PR completes the fix provided for ROOT-8935 with another fix for ROOT-10279, by preventing. the injection of the constants of a scoped enum into the scope of the enum. The bug surfaced as a result of modifying `PropertyProxy::Set` to fix ROOT-9835. There is still a pending issue identified while testing the fixes above: when a scoped enum belongs to the global namespace, once we do a lookup of that scoped enum its constants are added to the global space too and can be accessed as `ROOT.constant_name`, which is wrong. A subsequent PR will fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4246
https://github.com/root-project/root/pull/4246:342,security,ident,identified,342,"[PyROOT] Set correct type for enum values in namespaces; This PR completes the fix provided for ROOT-8935 with another fix for ROOT-10279, by preventing. the injection of the constants of a scoped enum into the scope of the enum. The bug surfaced as a result of modifying `PropertyProxy::Set` to fix ROOT-9835. There is still a pending issue identified while testing the fixes above: when a scoped enum belongs to the global namespace, once we do a lookup of that scoped enum its constants are added to the global space too and can be accessed as `ROOT.constant_name`, which is wrong. A subsequent PR will fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4246
https://github.com/root-project/root/pull/4246:535,security,access,accessed,535,"[PyROOT] Set correct type for enum values in namespaces; This PR completes the fix provided for ROOT-8935 with another fix for ROOT-10279, by preventing. the injection of the constants of a scoped enum into the scope of the enum. The bug surfaced as a result of modifying `PropertyProxy::Set` to fix ROOT-9835. There is still a pending issue identified while testing the fixes above: when a scoped enum belongs to the global namespace, once we do a lookup of that scoped enum its constants are added to the global space too and can be accessed as `ROOT.constant_name`, which is wrong. A subsequent PR will fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4246
https://github.com/root-project/root/pull/4246:359,testability,test,testing,359,"[PyROOT] Set correct type for enum values in namespaces; This PR completes the fix provided for ROOT-8935 with another fix for ROOT-10279, by preventing. the injection of the constants of a scoped enum into the scope of the enum. The bug surfaced as a result of modifying `PropertyProxy::Set` to fix ROOT-9835. There is still a pending issue identified while testing the fixes above: when a scoped enum belongs to the global namespace, once we do a lookup of that scoped enum its constants are added to the global space too and can be accessed as `ROOT.constant_name`, which is wrong. A subsequent PR will fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4246
https://github.com/root-project/root/pull/4247:9,testability,Simpl,Simplifications,9,[ntuple] Simplifications for concrete page storage classes; This PR moves the ntuple static meta-data handling code out of the page storage classes for ROOT files into the base classes. It's preparing the code for a raw file page storage implementation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4247
https://github.com/root-project/root/pull/4247:9,usability,Simpl,Simplifications,9,[ntuple] Simplifications for concrete page storage classes; This PR moves the ntuple static meta-data handling code out of the page storage classes for ROOT files into the base classes. It's preparing the code for a raw file page storage implementation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4247
https://github.com/root-project/root/pull/4248:288,deployability,depend,depends,288,[GSoC] [WIP] ZSTD Compression with Dictionaries; This PR is a WIP for implementing dictionary reusing within a branch in ZSTD. The work is based on previous work of Brian for the Compression Engine although it does not make use of any of the functions associated with training. This work depends on: https://github.com/root-project/root/pull/3947. Two extra file are added (ZSTDEngine2.hxx/cxx) that provide the infrastructure to perform a detailed analysis of the compression and decompression at basket level. An analysis related with the current performance of this implementation can be found [here](https://gist.github.com/fylux/ac92de799ac3e9d3e81d5edeeeef46f6).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4248
https://github.com/root-project/root/pull/4248:412,deployability,infrastructur,infrastructure,412,[GSoC] [WIP] ZSTD Compression with Dictionaries; This PR is a WIP for implementing dictionary reusing within a branch in ZSTD. The work is based on previous work of Brian for the Compression Engine although it does not make use of any of the functions associated with training. This work depends on: https://github.com/root-project/root/pull/3947. Two extra file are added (ZSTDEngine2.hxx/cxx) that provide the infrastructure to perform a detailed analysis of the compression and decompression at basket level. An analysis related with the current performance of this implementation can be found [here](https://gist.github.com/fylux/ac92de799ac3e9d3e81d5edeeeef46f6).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4248
https://github.com/root-project/root/pull/4248:541,energy efficiency,current,current,541,[GSoC] [WIP] ZSTD Compression with Dictionaries; This PR is a WIP for implementing dictionary reusing within a branch in ZSTD. The work is based on previous work of Brian for the Compression Engine although it does not make use of any of the functions associated with training. This work depends on: https://github.com/root-project/root/pull/3947. Two extra file are added (ZSTDEngine2.hxx/cxx) that provide the infrastructure to perform a detailed analysis of the compression and decompression at basket level. An analysis related with the current performance of this implementation can be found [here](https://gist.github.com/fylux/ac92de799ac3e9d3e81d5edeeeef46f6).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4248
https://github.com/root-project/root/pull/4248:288,integrability,depend,depends,288,[GSoC] [WIP] ZSTD Compression with Dictionaries; This PR is a WIP for implementing dictionary reusing within a branch in ZSTD. The work is based on previous work of Brian for the Compression Engine although it does not make use of any of the functions associated with training. This work depends on: https://github.com/root-project/root/pull/3947. Two extra file are added (ZSTDEngine2.hxx/cxx) that provide the infrastructure to perform a detailed analysis of the compression and decompression at basket level. An analysis related with the current performance of this implementation can be found [here](https://gist.github.com/fylux/ac92de799ac3e9d3e81d5edeeeef46f6).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4248
https://github.com/root-project/root/pull/4248:94,modifiability,reu,reusing,94,[GSoC] [WIP] ZSTD Compression with Dictionaries; This PR is a WIP for implementing dictionary reusing within a branch in ZSTD. The work is based on previous work of Brian for the Compression Engine although it does not make use of any of the functions associated with training. This work depends on: https://github.com/root-project/root/pull/3947. Two extra file are added (ZSTDEngine2.hxx/cxx) that provide the infrastructure to perform a detailed analysis of the compression and decompression at basket level. An analysis related with the current performance of this implementation can be found [here](https://gist.github.com/fylux/ac92de799ac3e9d3e81d5edeeeef46f6).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4248
https://github.com/root-project/root/pull/4248:288,modifiability,depend,depends,288,[GSoC] [WIP] ZSTD Compression with Dictionaries; This PR is a WIP for implementing dictionary reusing within a branch in ZSTD. The work is based on previous work of Brian for the Compression Engine although it does not make use of any of the functions associated with training. This work depends on: https://github.com/root-project/root/pull/3947. Two extra file are added (ZSTDEngine2.hxx/cxx) that provide the infrastructure to perform a detailed analysis of the compression and decompression at basket level. An analysis related with the current performance of this implementation can be found [here](https://gist.github.com/fylux/ac92de799ac3e9d3e81d5edeeeef46f6).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4248
https://github.com/root-project/root/pull/4248:481,modifiability,deco,decompression,481,[GSoC] [WIP] ZSTD Compression with Dictionaries; This PR is a WIP for implementing dictionary reusing within a branch in ZSTD. The work is based on previous work of Brian for the Compression Engine although it does not make use of any of the functions associated with training. This work depends on: https://github.com/root-project/root/pull/3947. Two extra file are added (ZSTDEngine2.hxx/cxx) that provide the infrastructure to perform a detailed analysis of the compression and decompression at basket level. An analysis related with the current performance of this implementation can be found [here](https://gist.github.com/fylux/ac92de799ac3e9d3e81d5edeeeef46f6).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4248
https://github.com/root-project/root/pull/4248:430,performance,perform,perform,430,[GSoC] [WIP] ZSTD Compression with Dictionaries; This PR is a WIP for implementing dictionary reusing within a branch in ZSTD. The work is based on previous work of Brian for the Compression Engine although it does not make use of any of the functions associated with training. This work depends on: https://github.com/root-project/root/pull/3947. Two extra file are added (ZSTDEngine2.hxx/cxx) that provide the infrastructure to perform a detailed analysis of the compression and decompression at basket level. An analysis related with the current performance of this implementation can be found [here](https://gist.github.com/fylux/ac92de799ac3e9d3e81d5edeeeef46f6).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4248
https://github.com/root-project/root/pull/4248:549,performance,perform,performance,549,[GSoC] [WIP] ZSTD Compression with Dictionaries; This PR is a WIP for implementing dictionary reusing within a branch in ZSTD. The work is based on previous work of Brian for the Compression Engine although it does not make use of any of the functions associated with training. This work depends on: https://github.com/root-project/root/pull/3947. Two extra file are added (ZSTDEngine2.hxx/cxx) that provide the infrastructure to perform a detailed analysis of the compression and decompression at basket level. An analysis related with the current performance of this implementation can be found [here](https://gist.github.com/fylux/ac92de799ac3e9d3e81d5edeeeef46f6).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4248
https://github.com/root-project/root/pull/4248:210,reliability,doe,does,210,[GSoC] [WIP] ZSTD Compression with Dictionaries; This PR is a WIP for implementing dictionary reusing within a branch in ZSTD. The work is based on previous work of Brian for the Compression Engine although it does not make use of any of the functions associated with training. This work depends on: https://github.com/root-project/root/pull/3947. Two extra file are added (ZSTDEngine2.hxx/cxx) that provide the infrastructure to perform a detailed analysis of the compression and decompression at basket level. An analysis related with the current performance of this implementation can be found [here](https://gist.github.com/fylux/ac92de799ac3e9d3e81d5edeeeef46f6).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4248
https://github.com/root-project/root/pull/4248:288,safety,depend,depends,288,[GSoC] [WIP] ZSTD Compression with Dictionaries; This PR is a WIP for implementing dictionary reusing within a branch in ZSTD. The work is based on previous work of Brian for the Compression Engine although it does not make use of any of the functions associated with training. This work depends on: https://github.com/root-project/root/pull/3947. Two extra file are added (ZSTDEngine2.hxx/cxx) that provide the infrastructure to perform a detailed analysis of the compression and decompression at basket level. An analysis related with the current performance of this implementation can be found [here](https://gist.github.com/fylux/ac92de799ac3e9d3e81d5edeeeef46f6).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4248
https://github.com/root-project/root/pull/4248:288,testability,depend,depends,288,[GSoC] [WIP] ZSTD Compression with Dictionaries; This PR is a WIP for implementing dictionary reusing within a branch in ZSTD. The work is based on previous work of Brian for the Compression Engine although it does not make use of any of the functions associated with training. This work depends on: https://github.com/root-project/root/pull/3947. Two extra file are added (ZSTDEngine2.hxx/cxx) that provide the infrastructure to perform a detailed analysis of the compression and decompression at basket level. An analysis related with the current performance of this implementation can be found [here](https://gist.github.com/fylux/ac92de799ac3e9d3e81d5edeeeef46f6).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4248
https://github.com/root-project/root/pull/4248:430,usability,perform,perform,430,[GSoC] [WIP] ZSTD Compression with Dictionaries; This PR is a WIP for implementing dictionary reusing within a branch in ZSTD. The work is based on previous work of Brian for the Compression Engine although it does not make use of any of the functions associated with training. This work depends on: https://github.com/root-project/root/pull/3947. Two extra file are added (ZSTDEngine2.hxx/cxx) that provide the infrastructure to perform a detailed analysis of the compression and decompression at basket level. An analysis related with the current performance of this implementation can be found [here](https://gist.github.com/fylux/ac92de799ac3e9d3e81d5edeeeef46f6).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4248
https://github.com/root-project/root/pull/4248:549,usability,perform,performance,549,[GSoC] [WIP] ZSTD Compression with Dictionaries; This PR is a WIP for implementing dictionary reusing within a branch in ZSTD. The work is based on previous work of Brian for the Compression Engine although it does not make use of any of the functions associated with training. This work depends on: https://github.com/root-project/root/pull/3947. Two extra file are added (ZSTDEngine2.hxx/cxx) that provide the infrastructure to perform a detailed analysis of the compression and decompression at basket level. An analysis related with the current performance of this implementation can be found [here](https://gist.github.com/fylux/ac92de799ac3e9d3e81d5edeeeef46f6).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4248
https://github.com/root-project/root/pull/4249:60,deployability,configurat,configuration,60,"[web geom] improve control GUI; 1. Let interactively change configuration for draw object selection - like visibility level or maximal number of nodes. All these parameters combined together in configuration object, which can be send to server as JSON. 2. Show actual statistic about number of meshes and faces in produced three.js geometry. 3. Let configure different light source (like in normal geometry viewer). 4. Provide JSROOT with correspondent changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4249
https://github.com/root-project/root/pull/4249:194,deployability,configurat,configuration,194,"[web geom] improve control GUI; 1. Let interactively change configuration for draw object selection - like visibility level or maximal number of nodes. All these parameters combined together in configuration object, which can be send to server as JSON. 2. Show actual statistic about number of meshes and faces in produced three.js geometry. 3. Let configure different light source (like in normal geometry viewer). 4. Provide JSROOT with correspondent changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4249
https://github.com/root-project/root/pull/4249:78,energy efficiency,draw,draw,78,"[web geom] improve control GUI; 1. Let interactively change configuration for draw object selection - like visibility level or maximal number of nodes. All these parameters combined together in configuration object, which can be send to server as JSON. 2. Show actual statistic about number of meshes and faces in produced three.js geometry. 3. Let configure different light source (like in normal geometry viewer). 4. Provide JSROOT with correspondent changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4249
https://github.com/root-project/root/pull/4249:60,integrability,configur,configuration,60,"[web geom] improve control GUI; 1. Let interactively change configuration for draw object selection - like visibility level or maximal number of nodes. All these parameters combined together in configuration object, which can be send to server as JSON. 2. Show actual statistic about number of meshes and faces in produced three.js geometry. 3. Let configure different light source (like in normal geometry viewer). 4. Provide JSROOT with correspondent changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4249
https://github.com/root-project/root/pull/4249:194,integrability,configur,configuration,194,"[web geom] improve control GUI; 1. Let interactively change configuration for draw object selection - like visibility level or maximal number of nodes. All these parameters combined together in configuration object, which can be send to server as JSON. 2. Show actual statistic about number of meshes and faces in produced three.js geometry. 3. Let configure different light source (like in normal geometry viewer). 4. Provide JSROOT with correspondent changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4249
https://github.com/root-project/root/pull/4249:349,integrability,configur,configure,349,"[web geom] improve control GUI; 1. Let interactively change configuration for draw object selection - like visibility level or maximal number of nodes. All these parameters combined together in configuration object, which can be send to server as JSON. 2. Show actual statistic about number of meshes and faces in produced three.js geometry. 3. Let configure different light source (like in normal geometry viewer). 4. Provide JSROOT with correspondent changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4249
https://github.com/root-project/root/pull/4249:60,modifiability,configur,configuration,60,"[web geom] improve control GUI; 1. Let interactively change configuration for draw object selection - like visibility level or maximal number of nodes. All these parameters combined together in configuration object, which can be send to server as JSON. 2. Show actual statistic about number of meshes and faces in produced three.js geometry. 3. Let configure different light source (like in normal geometry viewer). 4. Provide JSROOT with correspondent changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4249
https://github.com/root-project/root/pull/4249:162,modifiability,paramet,parameters,162,"[web geom] improve control GUI; 1. Let interactively change configuration for draw object selection - like visibility level or maximal number of nodes. All these parameters combined together in configuration object, which can be send to server as JSON. 2. Show actual statistic about number of meshes and faces in produced three.js geometry. 3. Let configure different light source (like in normal geometry viewer). 4. Provide JSROOT with correspondent changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4249
https://github.com/root-project/root/pull/4249:194,modifiability,configur,configuration,194,"[web geom] improve control GUI; 1. Let interactively change configuration for draw object selection - like visibility level or maximal number of nodes. All these parameters combined together in configuration object, which can be send to server as JSON. 2. Show actual statistic about number of meshes and faces in produced three.js geometry. 3. Let configure different light source (like in normal geometry viewer). 4. Provide JSROOT with correspondent changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4249
https://github.com/root-project/root/pull/4249:349,modifiability,configur,configure,349,"[web geom] improve control GUI; 1. Let interactively change configuration for draw object selection - like visibility level or maximal number of nodes. All these parameters combined together in configuration object, which can be send to server as JSON. 2. Show actual statistic about number of meshes and faces in produced three.js geometry. 3. Let configure different light source (like in normal geometry viewer). 4. Provide JSROOT with correspondent changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4249
https://github.com/root-project/root/pull/4249:19,security,control,control,19,"[web geom] improve control GUI; 1. Let interactively change configuration for draw object selection - like visibility level or maximal number of nodes. All these parameters combined together in configuration object, which can be send to server as JSON. 2. Show actual statistic about number of meshes and faces in produced three.js geometry. 3. Let configure different light source (like in normal geometry viewer). 4. Provide JSROOT with correspondent changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4249
https://github.com/root-project/root/pull/4249:60,security,configur,configuration,60,"[web geom] improve control GUI; 1. Let interactively change configuration for draw object selection - like visibility level or maximal number of nodes. All these parameters combined together in configuration object, which can be send to server as JSON. 2. Show actual statistic about number of meshes and faces in produced three.js geometry. 3. Let configure different light source (like in normal geometry viewer). 4. Provide JSROOT with correspondent changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4249
https://github.com/root-project/root/pull/4249:194,security,configur,configuration,194,"[web geom] improve control GUI; 1. Let interactively change configuration for draw object selection - like visibility level or maximal number of nodes. All these parameters combined together in configuration object, which can be send to server as JSON. 2. Show actual statistic about number of meshes and faces in produced three.js geometry. 3. Let configure different light source (like in normal geometry viewer). 4. Provide JSROOT with correspondent changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4249
https://github.com/root-project/root/pull/4249:349,security,configur,configure,349,"[web geom] improve control GUI; 1. Let interactively change configuration for draw object selection - like visibility level or maximal number of nodes. All these parameters combined together in configuration object, which can be send to server as JSON. 2. Show actual statistic about number of meshes and faces in produced three.js geometry. 3. Let configure different light source (like in normal geometry viewer). 4. Provide JSROOT with correspondent changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4249
https://github.com/root-project/root/pull/4249:19,testability,control,control,19,"[web geom] improve control GUI; 1. Let interactively change configuration for draw object selection - like visibility level or maximal number of nodes. All these parameters combined together in configuration object, which can be send to server as JSON. 2. Show actual statistic about number of meshes and faces in produced three.js geometry. 3. Let configure different light source (like in normal geometry viewer). 4. Provide JSROOT with correspondent changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4249
https://github.com/root-project/root/pull/4249:39,usability,interact,interactively,39,"[web geom] improve control GUI; 1. Let interactively change configuration for draw object selection - like visibility level or maximal number of nodes. All these parameters combined together in configuration object, which can be send to server as JSON. 2. Show actual statistic about number of meshes and faces in produced three.js geometry. 3. Let configure different light source (like in normal geometry viewer). 4. Provide JSROOT with correspondent changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4249
https://github.com/root-project/root/pull/4251:31,deployability,build,builds,31,Remove limitation. Incremental builds work.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4251
https://github.com/root-project/root/pull/4252:6,safety,test,test,6,Add a test for TH2Poly:Add; New google test for TH2Poly::Add (against ROOT-10280).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4252
https://github.com/root-project/root/pull/4252:39,safety,test,test,39,Add a test for TH2Poly:Add; New google test for TH2Poly::Add (against ROOT-10280).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4252
https://github.com/root-project/root/pull/4252:6,testability,test,test,6,Add a test for TH2Poly:Add; New google test for TH2Poly::Add (against ROOT-10280).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4252
https://github.com/root-project/root/pull/4252:39,testability,test,test,39,Add a test for TH2Poly:Add; New google test for TH2Poly::Add (against ROOT-10280).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4252
https://github.com/root-project/root/pull/4253:368,deployability,version,version,368,"[io] first step to introduce ""reproducible"" file content; Idea to have method create ROOT files with reproducible binary content. For that several fields in TDirectory and TFile have to be reassigned to default values. To activate feature one should use ""?reproducible"" in file name like:. ```. new TFile(""name.root?reproducible"",""recreate""). ```. This is alternative version to #4083 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:368,integrability,version,version,368,"[io] first step to introduce ""reproducible"" file content; Idea to have method create ROOT files with reproducible binary content. For that several fields in TDirectory and TFile have to be reassigned to default values. To activate feature one should use ""?reproducible"" in file name like:. ```. new TFile(""name.root?reproducible"",""recreate""). ```. This is alternative version to #4083 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:368,modifiability,version,version,368,"[io] first step to introduce ""reproducible"" file content; Idea to have method create ROOT files with reproducible binary content. For that several fields in TDirectory and TFile have to be reassigned to default values. To activate feature one should use ""?reproducible"" in file name like:. ```. new TFile(""name.root?reproducible"",""recreate""). ```. This is alternative version to #4083 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:49,performance,content,content,49,"[io] first step to introduce ""reproducible"" file content; Idea to have method create ROOT files with reproducible binary content. For that several fields in TDirectory and TFile have to be reassigned to default values. To activate feature one should use ""?reproducible"" in file name like:. ```. new TFile(""name.root?reproducible"",""recreate""). ```. This is alternative version to #4083 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:121,performance,content,content,121,"[io] first step to introduce ""reproducible"" file content; Idea to have method create ROOT files with reproducible binary content. For that several fields in TDirectory and TFile have to be reassigned to default values. To activate feature one should use ""?reproducible"" in file name like:. ```. new TFile(""name.root?reproducible"",""recreate""). ```. This is alternative version to #4083 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4254:624,deployability,depend,dependencies,624,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:668,deployability,build,builds,668,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:545,energy efficiency,current,current,545,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:107,integrability,messag,message,107,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:624,integrability,depend,dependencies,624,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:107,interoperability,messag,message,107,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:624,modifiability,depend,dependencies,624,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:525,performance,memor,memory,525,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:582,safety,safe,safely,582,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:624,safety,depend,dependencies,624,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:88,testability,simpl,simple,88,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:553,testability,understand,understanding,553,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:624,testability,depend,dependencies,624,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:88,usability,simpl,simple,88,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:132,usability,clear,clear,132,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:525,usability,memor,memory,525,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:532,usability,support,support,532,"[tcling] Skip weak undefined symbols produced by gcc. ; We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4255:32,deployability,version,version,32,[netxng] Fix location of xrootd version protection. From Peter Hristov!;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4255
https://github.com/root-project/root/pull/4255:32,integrability,version,version,32,[netxng] Fix location of xrootd version protection. From Peter Hristov!;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4255
https://github.com/root-project/root/pull/4255:32,modifiability,version,version,32,[netxng] Fix location of xrootd version protection. From Peter Hristov!;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4255
https://github.com/root-project/root/pull/4257:147,availability,failur,failure,147,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2543,availability,ERROR,ERROR,2543,"AD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4090,availability,ERROR,ERROR,4090,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4106,availability,Error,Error,4106,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4259,availability,error,error,4259,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:147,deployability,fail,failure,147,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:207,deployability,build,build,207,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:252,deployability,build,build,252,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:273,deployability,patch,patches,273,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:324,deployability,build,build,324,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:948,deployability,build,build,948,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:969,deployability,patch,patches,969,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1020,deployability,build,build,1020,"verflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1087,deployability,build,build,1087,"eported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1108,deployability,patch,patches,1108,"int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1159,deployability,build,build,1159,"/cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1217,deployability,build,build,1217,":. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Che",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1238,deployability,patch,patches,1238,". cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1352,deployability,build,build,1352,"bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Che",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1373,deployability,patch,patches,1373,"0s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1424,deployability,build,build,1424,"micScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1488,deployability,build,build,1488," ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1509,deployability,patch,patches,1509,"gSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1560,deployability,build,build,1560,"lude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1602,deployability,build,build,1602,"toLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1623,deployability,patch,patches,1623," -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1760,deployability,build,build,1760,"seDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1781,deployability,patch,patches,1781,"fine ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2612,deployability,build,build,2612,6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/b,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2633,deployability,patch,patches,2633,ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-pa,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2684,deployability,build,build,2684,/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/r,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2764,deployability,build,build,2764,sincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-C,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2785,deployability,patch,patches,2785,LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2836,deployability,build,build,2836,t/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of functio,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2932,deployability,build,build,2932,Size. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2953,deployability,patch,patches,2953, 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseRes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3078,deployability,build,build,3078," 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3099,deployability,patch,patches,3099,"ecking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3150,deployability,build,build,3150,"ecking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABE",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3614,deployability,build,build,3614,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3635,deployability,patch,patches,3635,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4120,deployability,build,build,4120,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4141,deployability,patch,patches,4141,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4203,deployability,modul,modules,4203,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:344,energy efficiency,core,core,344,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1040,energy efficiency,core,core,1040,"le to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.294",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1179,energy efficiency,core,core,1179,"Details.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1303,energy efficiency,core,core,1303,"angHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1444,energy efficiency,core,core,1444,"ne ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1580,energy efficiency,core,core,1580,"lingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1688,energy efficiency,core,core,1688,"e ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1846,energy efficiency,core,core,1846,"ndBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2704,energy efficiency,core,core,2704,adable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/a,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2856,energy efficiency,core,core,2856,umanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template speciali,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3018,energy efficiency,core,core,3018,"ng 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3700,energy efficiency,core,core,3700,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4237,integrability,messag,message,4237,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:58,interoperability,convers,conversion,58,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:122,interoperability,convers,conversion,122,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2592,interoperability,share,shared,2592,b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3056,interoperability,XML,XML-CHAR-,3056,"ing 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 wa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3197,interoperability,XML,XML-CHAR-,3197,"6KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3219,interoperability,XML,XML-CHAR-,3219,"g 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDrive",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3255,interoperability,XML,XML-CHAR-,3255,". Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3277,interoperability,XML,XML-CHAR-,3277,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3303,interoperability,convers,conversion,3303,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3427,interoperability,convers,conversion,3427,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3443,interoperability,XML,XML-CHAR-,3443,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3509,interoperability,XML,XML-CHAR-,3509,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3570,interoperability,XML,XML-CHAR-,3570,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3592,interoperability,XML,XML-CHAR-,3592,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3740,interoperability,XML,XML-CHAR-,3740,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3762,interoperability,XML,XML-CHAR-,3762,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3795,interoperability,XML,XML-CHAR-,3795,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3925,interoperability,XML,XML-CHAR-,3925,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4009,interoperability,XML,XML-CHAR-,4009,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4040,interoperability,XML,XML-CHAR-,4040,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4237,interoperability,messag,message,4237,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4203,modifiability,modul,modules,4203,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:147,performance,failur,failure,147,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:359,performance,time,timeout,359,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2543,performance,ERROR,ERROR,2543,"AD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4090,performance,ERROR,ERROR,4090,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4106,performance,Error,Error,4106,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4259,performance,error,error,4259,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:147,reliability,fail,failure,147,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:177,safety,test,testDetails,177,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:193,safety,test,test,193,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:226,safety,TEST,TEST,226,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:273,safety,patch,patches,273,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:359,safety,timeout,timeout,359,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:969,safety,patch,patches,969,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1108,safety,patch,patches,1108,"int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1238,safety,patch,patches,1238,". cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1373,safety,patch,patches,1373,"0s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1509,safety,patch,patches,1509,"gSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1623,safety,patch,patches,1623," -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1728,safety,TEST,TEST,1728,"e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1781,safety,patch,patches,1781,"fine ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2513,safety,TEST,TEST,2513,"s/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CH",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2538,safety,TEST,TEST,2538,"langHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2543,safety,ERROR,ERROR,2543,"AD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2633,safety,patch,patches,2633,ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-pa,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2785,safety,patch,patches,2785,LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2953,safety,patch,patches,2953, 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseRes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3099,safety,patch,patches,3099,"ecking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3635,safety,patch,patches,3635,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3991,safety,input,input,3991,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4085,safety,TEST,TEST,4085,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4090,safety,ERROR,ERROR,4090,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4106,safety,Error,Error,4106,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4141,safety,patch,patches,4141,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4203,safety,modul,modules,4203,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4259,safety,error,error,4259,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:273,security,patch,patches,273,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:969,security,patch,patches,969,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1108,security,patch,patches,1108,"int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1238,security,patch,patches,1238,". cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1373,security,patch,patches,1373,"0s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1509,security,patch,patches,1509,"gSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1623,security,patch,patches,1623," -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1781,security,patch,patches,1781,"fine ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2633,security,patch,patches,2633,ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-pa,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2785,security,patch,patches,2785,LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2953,security,patch,patches,2953, 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseRes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3099,security,patch,patches,3099,"ecking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3635,security,patch,patches,3635,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4141,security,patch,patches,4141,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:177,testability,test,testDetails,177,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:193,testability,test,test,193,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:226,testability,TEST,TEST,226,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1693,testability,assert,assertHumanReadable,1693,"oundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1728,testability,TEST,TEST,1728,"e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:1851,testability,assert,assertHumanReadable,1851,"edReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2513,testability,TEST,TEST,2513,"s/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CH",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2538,testability,TEST,TEST,2538,"langHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3023,testability,assert,assertHumanReadable,3023," vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3705,testability,assert,assertHumanReadable,3705,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4085,testability,TEST,TEST,4085,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:231,usability,COMMAND,COMMAND,231,"Adding protection for overflow during double to long long conversion in StringConv.hxx; (reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):. -- TEST COMMAND -- . cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core. /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.097",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:2543,usability,ERROR,ERROR,2543,"AD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+. -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+... Checking FromHumanReadableSize. Checking ToHumanReadableSize. Checking 1024 vs 1.024KiB an 1KB. Checking 2097152 vs 2.09715MiB an 2MB. Checking 4294967296 vs 4.29497GiB an 4GB. Checking 8796093022208 vs 8.79609TiB an 8TB. Checking 18014398509481984 vs 18.0144EiB an 16EB. Checking 16 vs 16B and 16B. Checking 24576 vs 24.576KiB and 24KB. Checking 3.77487e+07 vs 37.7487MiB and 36MB. Checking 5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:3991,usability,input,input,3991,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4090,usability,ERROR,ERROR,4090,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4106,usability,Error,Error,4106,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4257:4259,usability,error,error,4259,"5.79821e+10 vs 57.9821GiB and 54GB. Checking 8.90604e+13 vs 89.0604TiB and 81TB. Checking 1.36797e+17 vs 136.797EiB and 121.5EB. Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB. Checking 3.22744e+23 vs 322.744YiB and 273.375YB. (int) 0. -- END TEST OUTPUT --. -- BEGIN TEST ERROR --. Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:. In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --. CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):. Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4257
https://github.com/root-project/root/pull/4259:330,availability,error,error,330,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:399,availability,Error,Error,399,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:33,deployability,configurat,configuration,33,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:213,deployability,resourc,resource-clang-dir,213,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:244,deployability,patch,patched,244,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:477,deployability,resourc,resource,477,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:8,energy efficiency,core,core,8,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:213,energy efficiency,resourc,resource-clang-dir,213,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:408,energy efficiency,core,core,408,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:477,energy efficiency,resourc,resource,477,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:33,integrability,configur,configuration,33,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:443,integrability,messag,message,443,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:443,interoperability,messag,message,443,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:33,modifiability,configur,configuration,33,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:213,performance,resourc,resource-clang-dir,213,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:330,performance,error,error,330,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:399,performance,Error,Error,399,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:477,performance,resourc,resource,477,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:213,safety,resourc,resource-clang-dir,213,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:244,safety,patch,patched,244,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:330,safety,error,error,330,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:399,safety,Error,Error,399,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:477,safety,resourc,resource,477,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:33,security,configur,configuration,33,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:244,security,patch,patched,244,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:213,testability,resourc,resource-clang-dir,213,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:477,testability,resourc,resource,477,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:330,usability,error,error,330,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4259:399,usability,Error,Error,399,"Revert ""core/clingutils: improve configuration using external clang""; This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79. In this commit, main idea was to use clang binary to retrieve information. about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built. without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin. CMake Error at core/clingutils/CMakeLists.txt:80 (message):. Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4259
https://github.com/root-project/root/pull/4260:8,interoperability,convers,conversions,8,"Math io conversions; This add the ability to read math_template< floating_point > into math_template< other_floating_point> where floating_point is one of float, double, Double32_t or Float16_t [note that we are not yet generating dictionary for Float16_t and the user that does it for themselves would need to add the renaming rules with the Float16_t as target as well (if they need them)]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4260
https://github.com/root-project/root/pull/4260:274,reliability,doe,does,274,"Math io conversions; This add the ability to read math_template< floating_point > into math_template< other_floating_point> where floating_point is one of float, double, Double32_t or Float16_t [note that we are not yet generating dictionary for Float16_t and the user that does it for themselves would need to add the renaming rules with the Float16_t as target as well (if they need them)]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4260
https://github.com/root-project/root/pull/4260:264,usability,user,user,264,"Math io conversions; This add the ability to read math_template< floating_point > into math_template< other_floating_point> where floating_point is one of float, double, Double32_t or Float16_t [note that we are not yet generating dictionary for Float16_t and the user that does it for themselves would need to add the renaming rules with the Float16_t as target as well (if they need them)]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4260
https://github.com/root-project/root/pull/4261:8,interoperability,convers,conversions,8,"Math io conversions v6 18; This adds the ability to read math_template< floating_point > into math_template< other_floating_point> where floating_point is one of float, double, Double32_t or Float16_t [note that we are not yet generating dictionary for Float16_t and the user that does it for themselves would need to add the renaming rules with the Float16_t as target as well (if they need them)]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4261
https://github.com/root-project/root/pull/4261:281,reliability,doe,does,281,"Math io conversions v6 18; This adds the ability to read math_template< floating_point > into math_template< other_floating_point> where floating_point is one of float, double, Double32_t or Float16_t [note that we are not yet generating dictionary for Float16_t and the user that does it for themselves would need to add the renaming rules with the Float16_t as target as well (if they need them)]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4261
https://github.com/root-project/root/pull/4261:271,usability,user,user,271,"Math io conversions v6 18; This adds the ability to read math_template< floating_point > into math_template< other_floating_point> where floating_point is one of float, double, Double32_t or Float16_t [note that we are not yet generating dictionary for Float16_t and the user that does it for themselves would need to add the renaming rules with the Float16_t as target as well (if they need them)]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4261
https://github.com/root-project/root/pull/4262:8,interoperability,convers,conversions,8,"Math io conversions v6 16; This adds the ability to read math_template< floating_point > into math_template< other_floating_point> where floating_point is one of float, double, Double32_t or Float16_t [note that we are not yet generating dictionary for Float16_t and the user that does it for themselves would need to add the renaming rules with the Float16_t as target as well (if they need them)]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4262
https://github.com/root-project/root/pull/4262:281,reliability,doe,does,281,"Math io conversions v6 16; This adds the ability to read math_template< floating_point > into math_template< other_floating_point> where floating_point is one of float, double, Double32_t or Float16_t [note that we are not yet generating dictionary for Float16_t and the user that does it for themselves would need to add the renaming rules with the Float16_t as target as well (if they need them)]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4262
https://github.com/root-project/root/pull/4262:271,usability,user,user,271,"Math io conversions v6 16; This adds the ability to read math_template< floating_point > into math_template< other_floating_point> where floating_point is one of float, double, Double32_t or Float16_t [note that we are not yet generating dictionary for Float16_t and the user that does it for themselves would need to add the renaming rules with the Float16_t as target as well (if they need them)]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4262
https://github.com/root-project/root/pull/4263:13,performance,multi-thread,multi-threaded,13,[ntuple] Fix multi-threaded RDF tutorial;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4263
https://github.com/root-project/root/pull/4264:1173,availability,avail,available,1173,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:13,deployability,Updat,Update,13,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:51,deployability,updat,updates,51,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:220,deployability,updat,update,220,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:69,energy efficiency,adapt,adapts,69,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:69,integrability,adapt,adapts,69,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:69,interoperability,adapt,adapts,69,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:69,modifiability,adapt,adapts,69,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:292,performance,memor,memoryregulator-recursiveremove,292,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:496,reliability,doe,does,496,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:633,reliability,doe,does-not-return-auto-instantiated,633,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:1173,reliability,availab,available,1173,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:13,safety,Updat,Update,13,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:31,safety,test,test,31,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:51,safety,updat,updates,51,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:137,safety,test,tests,137,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:220,safety,updat,update,220,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:1017,safety,test,tests,1017,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:1117,safety,test,tests,1117,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:1173,safety,avail,available,1173,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:13,security,Updat,Update,13,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:51,security,updat,updates,51,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:220,security,updat,update,220,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:1173,security,availab,available,1173,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:31,testability,test,test,31,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:137,testability,test,tests,137,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:399,testability,hook,hooks-for-custom,399,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:1017,testability,test,tests,1017,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:1117,testability,test,tests,1117,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:292,usability,memor,memoryregulator-recursiveremove,292,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:409,usability,custom,custom,409,"[Exp PyROOT] Update of Cppyy + test fixes; This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove. https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does. https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when. https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated. https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated. https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python. https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4265:6,usability,user,user,6,Allow user to actually customize the 1st block's size in TMemFile.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4265
https://github.com/root-project/root/pull/4265:23,usability,custom,customize,23,Allow user to actually customize the 1st block's size in TMemFile.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4265
https://github.com/root-project/root/pull/4266:95,safety,input,input,95,Allow user to actually customize the 1st block's size in TMemFile. (v618); Previously the user input was recorded only after the first block was created. See https://root-forum.cern.ch/t/tmemfile-default-size/35731,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4266
https://github.com/root-project/root/pull/4266:6,usability,user,user,6,Allow user to actually customize the 1st block's size in TMemFile. (v618); Previously the user input was recorded only after the first block was created. See https://root-forum.cern.ch/t/tmemfile-default-size/35731,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4266
https://github.com/root-project/root/pull/4266:23,usability,custom,customize,23,Allow user to actually customize the 1st block's size in TMemFile. (v618); Previously the user input was recorded only after the first block was created. See https://root-forum.cern.ch/t/tmemfile-default-size/35731,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4266
https://github.com/root-project/root/pull/4266:90,usability,user,user,90,Allow user to actually customize the 1st block's size in TMemFile. (v618); Previously the user input was recorded only after the first block was created. See https://root-forum.cern.ch/t/tmemfile-default-size/35731,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4266
https://github.com/root-project/root/pull/4266:95,usability,input,input,95,Allow user to actually customize the 1st block's size in TMemFile. (v618); Previously the user input was recorded only after the first block was created. See https://root-forum.cern.ch/t/tmemfile-default-size/35731,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4266
https://github.com/root-project/root/pull/4269:41,deployability,build,build,41,[rootcling] We do not need to filter the build system junk.; Since root-project/root@10a0dec we do not expose flags from the build system. directly to rootcling. We use that opportunity to simplify the setup while. preparing rootcling for the new argument parser.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4269
https://github.com/root-project/root/pull/4269:125,deployability,build,build,125,[rootcling] We do not need to filter the build system junk.; Since root-project/root@10a0dec we do not expose flags from the build system. directly to rootcling. We use that opportunity to simplify the setup while. preparing rootcling for the new argument parser.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4269
https://github.com/root-project/root/pull/4269:30,integrability,filter,filter,30,[rootcling] We do not need to filter the build system junk.; Since root-project/root@10a0dec we do not expose flags from the build system. directly to rootcling. We use that opportunity to simplify the setup while. preparing rootcling for the new argument parser.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4269
https://github.com/root-project/root/pull/4269:103,security,expos,expose,103,[rootcling] We do not need to filter the build system junk.; Since root-project/root@10a0dec we do not expose flags from the build system. directly to rootcling. We use that opportunity to simplify the setup while. preparing rootcling for the new argument parser.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4269
https://github.com/root-project/root/pull/4269:189,testability,simpl,simplify,189,[rootcling] We do not need to filter the build system junk.; Since root-project/root@10a0dec we do not expose flags from the build system. directly to rootcling. We use that opportunity to simplify the setup while. preparing rootcling for the new argument parser.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4269
https://github.com/root-project/root/pull/4269:189,usability,simpl,simplify,189,[rootcling] We do not need to filter the build system junk.; Since root-project/root@10a0dec we do not expose flags from the build system. directly to rootcling. We use that opportunity to simplify the setup while. preparing rootcling for the new argument parser.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4269
https://github.com/root-project/root/pull/4270:19,availability,redund,redundant,19,[rootcling] Remove redundant flag; Depends on #4269,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4270
https://github.com/root-project/root/pull/4270:19,deployability,redundan,redundant,19,[rootcling] Remove redundant flag; Depends on #4269,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4270
https://github.com/root-project/root/pull/4270:35,deployability,Depend,Depends,35,[rootcling] Remove redundant flag; Depends on #4269,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4270
https://github.com/root-project/root/pull/4270:35,integrability,Depend,Depends,35,[rootcling] Remove redundant flag; Depends on #4269,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4270
https://github.com/root-project/root/pull/4270:35,modifiability,Depend,Depends,35,[rootcling] Remove redundant flag; Depends on #4269,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4270
https://github.com/root-project/root/pull/4270:19,reliability,redundan,redundant,19,[rootcling] Remove redundant flag; Depends on #4269,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4270
https://github.com/root-project/root/pull/4270:19,safety,redund,redundant,19,[rootcling] Remove redundant flag; Depends on #4269,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4270
https://github.com/root-project/root/pull/4270:35,safety,Depend,Depends,35,[rootcling] Remove redundant flag; Depends on #4269,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4270
https://github.com/root-project/root/pull/4270:35,testability,Depend,Depends,35,[rootcling] Remove redundant flag; Depends on #4269,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4270
https://github.com/root-project/root/pull/4271:69,deployability,updat,update,69,Enable Interactive JS ROOT Graphics in JupyterLab; Add requirejs and update _getUID() function,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4271
https://github.com/root-project/root/pull/4271:69,safety,updat,update,69,Enable Interactive JS ROOT Graphics in JupyterLab; Add requirejs and update _getUID() function,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4271
https://github.com/root-project/root/pull/4271:69,security,updat,update,69,Enable Interactive JS ROOT Graphics in JupyterLab; Add requirejs and update _getUID() function,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4271
https://github.com/root-project/root/pull/4271:7,usability,Interact,Interactive,7,Enable Interactive JS ROOT Graphics in JupyterLab; Add requirejs and update _getUID() function,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4271
https://github.com/root-project/root/pull/4272:0,availability,Consist,Consistent,0,Consistent comment;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4272
https://github.com/root-project/root/pull/4272:0,usability,Consist,Consistent,0,Consistent comment;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4272
https://github.com/root-project/root/pull/4273:135,security,access,accessing,135,[ntuple] several improvements for nanoaod support; In particular. - Add support for 8 bit unsigned integer. - Add support for directly accessing a class member with a view,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4273
https://github.com/root-project/root/pull/4273:42,usability,support,support,42,[ntuple] several improvements for nanoaod support; In particular. - Add support for 8 bit unsigned integer. - Add support for directly accessing a class member with a view,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4273
https://github.com/root-project/root/pull/4273:72,usability,support,support,72,[ntuple] several improvements for nanoaod support; In particular. - Add support for 8 bit unsigned integer. - Add support for directly accessing a class member with a view,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4273
https://github.com/root-project/root/pull/4273:114,usability,support,support,114,[ntuple] several improvements for nanoaod support; In particular. - Add support for 8 bit unsigned integer. - Add support for directly accessing a class member with a view,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4273
https://github.com/root-project/root/pull/4275:8,availability,error,error,8,"Resolve error: call to virtual function in destructor; The following files had a destructor making a call to a virtual function. Thus, implicitly the function corresponding to the base class was getting called. In correspondence to the above issue, I would like to suggest explicitly calling the corresponding class function in the destructor, which will resolve the issue keeping the purpose constant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4275
https://github.com/root-project/root/pull/4275:8,performance,error,error,8,"Resolve error: call to virtual function in destructor; The following files had a destructor making a call to a virtual function. Thus, implicitly the function corresponding to the base class was getting called. In correspondence to the above issue, I would like to suggest explicitly calling the corresponding class function in the destructor, which will resolve the issue keeping the purpose constant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4275
